/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(1);
	__webpack_require__(52);
	__webpack_require__(54);
	__webpack_require__(56);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(72);
	__webpack_require__(50);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxRQUFPLGdCQUFnQixDQUFDLENBQUE7QUFDeEIsUUFBTyw0QkFBNEIsQ0FBQyxDQUFBO0FBQ3BDLFFBQU8sOEJBQThCLENBQUMsQ0FBQTtBQUN0QyxRQUFPLDJCQUEyQixDQUFDLENBQUE7QUFDbkMsUUFBTyxxQ0FBcUMsQ0FBQyxDQUFBO0FBQzdDLFFBQU8sbUNBQW1DLENBQUMsQ0FBQTtBQUMzQyxRQUFPLHlCQUF5QixDQUFDLENBQUE7QUFDakMsUUFBTyxRQUFRLENBQUMsQ0FBQSJ9

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var inputsTemplate = __webpack_require__(51);
	var buttonsTemplate = __webpack_require__(53);
	var popupTemplate = __webpack_require__(55);
	var cardsTemplate = __webpack_require__(6);
	var tabsTemplate = __webpack_require__(71);
	var formsTemplate = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./forms.html\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var messageLogTemplate = __webpack_require__(9);
	var miscTemplate = __webpack_require__(10);
	angular.module('app', ['rl.ui', 'ui.router'])
	    .controller('FormTestController', FormTestController)
	    .controller('MiscTestController', MiscTestController)
	    .config(RouteConfig);
	RouteConfig.$inject = ['$urlRouterProvider', '$stateProvider'];
	function RouteConfig($urlRouterProvider, $stateProvider) {
	    $urlRouterProvider.otherwise('/');
	    $stateProvider
	        .state('/', {
	        url: '/',
	        template: '<h3>Welcome to typescript-angular-components</h3>',
	    })
	        .state('inputs', {
	        url: '/inputs',
	        template: inputsTemplate,
	        controller: 'InputTestController',
	        controllerAs: 'input',
	    })
	        .state('buttons', {
	        url: '/buttons',
	        template: buttonsTemplate,
	        controller: 'ButtonTestController',
	        controllerAs: 'button',
	    })
	        .state('popup', {
	        url: '/popup',
	        template: popupTemplate,
	        controller: 'PopupTestController',
	        controllerAs: 'popup',
	    })
	        .state('cards', {
	        url: '/cards',
	        template: cardsTemplate,
	        controller: 'CardTestController',
	        controllerAs: 'cards',
	    })
	        .state('tabs', {
	        url: '/tabs',
	        template: tabsTemplate,
	        controller: 'TabTestController',
	        controllerAs: 'tabs',
	    })
	        .state('forms', {
	        url: '/forms',
	        template: formsTemplate,
	        controller: 'FormTestController',
	        controllerAs: 'forms',
	    })
	        .state('messageLog', {
	        url: '/messageLog',
	        template: messageLogTemplate,
	        controller: 'MessageLogTestController',
	        controllerAs: 'messageLog',
	    })
	        .state('misc', {
	        url: '/misc',
	        template: miscTemplate,
	        controller: 'MiscTestController',
	        controllerAs: 'misc',
	    });
	}
	FormTestController.$inject = ['$q', '$timeout'];
	function FormTestController($q, $timeout) {
	    var self = this;
	    self.submit = function () {
	        return $timeout(function () {
	            console.log('Submitted');
	        }, 1000);
	    };
	    self.count = 0;
	    self.save = function () {
	        self.count++;
	        return $q.when();
	    };
	}
	MiscTestController.$inject = ['$scope', '$q', '$timeout', 'dialog', 'cardContainerBuilder'];
	function MiscTestController($scope, $q, $timeout, dialog, cardContainerBuilderFactory) {
	    var self = this;
	    // Misc
	    self.myNum = 2;
	    self.myValue = 1;
	    self.validator = {
	        validate: function () {
	            return self.text === 'valid';
	        },
	        errorMessage: 'String must be valid',
	    };
	    var templateScope = $scope.$new();
	    templateScope.text = 'Some text';
	    self.template = {
	        template: '<div>{{text}}</div>',
	        scope: templateScope,
	    };
	    self.number = 5;
	    self.date = moment('2016-04-01T12:00:00.000-08:00').tz('US/Pacific');
	    var unbind = $scope.$watch('misc.lazyLoad', function (value) {
	        if (value) {
	            self.initialized = true;
	            unbind();
	        }
	    });
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwQXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwQXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLGNBQWMsV0FBTSxzQkFBc0IsQ0FBQyxDQUFBO0FBQ3ZELElBQVksZUFBZSxXQUFNLHdCQUF3QixDQUFDLENBQUE7QUFDMUQsSUFBWSxhQUFhLFdBQU0sb0JBQW9CLENBQUMsQ0FBQTtBQUNwRCxJQUFZLGFBQWEsV0FBTSxvQkFBb0IsQ0FBQyxDQUFBO0FBQ3BELElBQVksWUFBWSxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFDakQsSUFBWSxhQUFhLFdBQU0sY0FBYyxDQUFDLENBQUE7QUFDOUMsSUFBWSxrQkFBa0IsV0FBTSxrQ0FBa0MsQ0FBQyxDQUFBO0FBQ3ZFLElBQVksWUFBWSxXQUFNLGFBQWEsQ0FBQyxDQUFBO0FBRTVDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0tBQzNDLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQztLQUNwRCxVQUFVLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUM7S0FDcEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRXRCLFdBQVcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQy9ELHFCQUFxQixrQkFBa0IsRUFBRSxjQUFjO0lBQ3RELGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxjQUFjO1NBQ1osS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUNYLEdBQUcsRUFBRSxHQUFHO1FBQ1IsUUFBUSxFQUFFLG1EQUFtRDtLQUM3RCxDQUFDO1NBQ0QsS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUNoQixHQUFHLEVBQUUsU0FBUztRQUNkLFFBQVEsRUFBRSxjQUFjO1FBQ3hCLFVBQVUsRUFBRSxxQkFBcUI7UUFD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

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = rl_utilities;

/***/ },
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ function(module, exports) {

	module.exports = "<h3>Cards</h3>\r\n<div>\r\n\t<label>Simple card list:</label>\r\n\t<rl-simple-card-list>\r\n\t\t<rl-simple-card>\r\n\t\t\t<rl-card-header>Simple card 1</rl-card-header>\r\n\t\t\t<rl-card-content>Content 1</rl-card-content>\r\n\t\t\t<rl-card-footer>Footer 1</rl-card-footer>\r\n\t\t</rl-simple-card>\r\n\t\t<rl-simple-card>\r\n\t\t\t<rl-card-header>Simple card 2</rl-card-header>\r\n\t\t\t<rl-card-content>Content 2</rl-card-content>\r\n\t\t\t<rl-card-footer>Footer 2</rl-card-footer>\r\n\t\t</rl-simple-card>\r\n\t</rl-simple-card-list>\r\n</div>\r\n\r\n<div>\r\n\t<label>Card container:</label>\r\n\t<rl-card-container builder=\"cards.builder\" card-as=\"myItem\">\r\n\t\t<rl-container-header>\r\n\t\t\t<rl-card-search></rl-card-search>\r\n\t\t</rl-container-header>\r\n\t\t<rl-card-content>\r\n\t\t\tName: {{myItem.name}}\r\n\t\t\tValue: {{myItem.value}}\r\n\t\t</rl-card-content>\r\n\t</rl-card-container>\r\n</div>"

/***/ },
/* 7 */,
/* 8 */,
/* 9 */
/***/ function(module, exports) {

	module.exports = "<h3>Message log</h3>\r\n<div>\r\n\t<rl-editable-message-log service=\"messageLog.messageService\"></rl-editable-message-log>\r\n</div>"

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = "<h3>Misc</h3>\r\n<div class=\"form-group\">\r\n\t<div><label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/blob/master/source/components/genericContainer/genericContainer.md\">Generic container:</a></label></div>\r\n\t<rl-radio-group ng-model=\"misc.myValue\">\r\n\t\t<rl-radio value=\"1\">1</rl-radio>\r\n\t\t<rl-radio value=\"2\">2</rl-radio>\r\n\t\t<rl-radio value=\"3\">3</rl-radio>\r\n\t</rl-radio-group>\r\n\t<rl-generic-container selector=\"misc.myValue\">\r\n\t\t<template when-selector=\"1\"><span>Template 1</span></template>\r\n\t\t<template when-selector=\"{{misc.myNum}}\"><span>Template 2</span></template>\r\n\t\t<template default><span>Default</span></template>\r\n\t</rl-generic-container>\r\n\t<div><label>Using ng-switch:</label></div>\r\n\t<div ng-switch=\"misc.myValue\">\r\n\t\t<span ng-switch-when=\"1\"><span>span 1</span></span>\r\n\t\t<span ng-switch-when=\"{{misc.myNum}}\"><span>span 2</span></span>\r\n\t\t<span ng-switch-default><span>Default</span></span>\r\n\t</div>\r\n\t<div><label>Generic-container with toggled contents</label></div>\r\n\t<rl-checkbox ng-model=\"misc.toggle\">Toggle</rl-checkbox>\r\n\t<rl-generic-container selector=\"misc.toggle\">\r\n\t\t<template default>\r\n\t\t\t<div ng-repeat=\"number in [1, 2, 3, 4, 5]\">\r\n\t\t\t\t{{number}}\r\n\t\t\t</div>\r\n\t\t</template>\r\n\t\t<template when-selector=\"true\">\r\n\t\t\t<div>True</div>\r\n\t\t</template>\r\n\t</rl-generic-container>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<div><label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/lazyLoad/lazyLoad.md\">Lazy load</a>:</label></div>\r\n\t<rl-checkbox ng-model=\"misc.lazyLoad\">Show</rl-checkbox>\r\n\t<div ng-show=\"misc.initialized\">Initialized</div>\r\n\t<rl-lazy-load show=\"misc.lazyLoad\">Can you see me?</rl-lazy-load>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<label>Validation group:</label>\r\n\t<rl-validation-group validator=\"misc.validator\">\r\n\t\t<rl-textbox ng-model=\"misc.text\"></rl-textbox>\r\n\t</rl-validation-group>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<label>Template renderer:</label>\r\n\t<rl-template-renderer template=\"misc.template\"></rl-template-renderer>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<div><label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/commaList/commaList.md\">Comma list</a>:</label></div>\r\n\t<rl-comma-list list=\"[1, 2, 3]\"></rl-comma-list>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<div><label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/blob/master/source/components/busy/busy.md\">Busy</a>:</label></div>\r\n\t<rl-checkbox ng-model=\"misc.loading\">Loading</rl-checkbox>\r\n\t<div><rl-busy loading=\"misc.loading\" size=\"2x\"></rl-busy></div>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<label>Rating Bar:</label>\r\n\t<rl-rating-bar width=\"100\" height=\"10\" value=\"0\" min=\"0\" max=\"100\"></rl-rating-bar>\r\n\t<rl-rating-bar width=\"100\" height=\"10\" value=\"10\" min=\"0\" max=\"100\"></rl-rating-bar>\r\n\t<rl-rating-bar width=\"100\" height=\"10\" value=\"30\" min=\"0\" max=\"100\"></rl-rating-bar>\r\n\t<rl-rating-bar width=\"100\" height=\"10\" value=\"50\" min=\"0\" max=\"100\"></rl-rating-bar>\r\n\t<rl-rating-bar width=\"100\" height=\"10\" value=\"70\" min=\"0\" max=\"100\"></rl-rating-bar>\r\n\t<rl-rating-bar width=\"100\" height=\"10\" value=\"90\" min=\"0\" max=\"100\"></rl-rating-bar>\r\n\t<rl-rating-bar width=\"100\" height=\"10\" value=\"100\" min=\"0\" max=\"100\"></rl-rating-bar>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<div><label>String with watermark:</label></div>\r\n\t<rl-textbox ng-model=\"misc.text\"></rl-textbox>\r\n\t<rl-string-with-watermark string=\"{{misc.text}}\" watermark=\"(empty)\"></rl-string-with-watermark>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<div><label>User rating:</label></div>\r\n\t<rl-user-rating ng-model=\"misc.value\" range=\"5\"></rl-user-rating>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<div><label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/behaviors/alias/alias.md\">Alias</a>:</label></div>\r\n\t<div><code><ts-text><div rl-alias=\"misc.number as val\">{{val}}</div></ts-text></code></div>\r\n\t<div><code>// where misc.number = 5</code></div>\r\n\t<rl-textbox ng-model=\"misc.number\"></rl-textbox>\r\n\t<div rl-alias=\"misc.number as val\">{{val}}</div>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/filters/date/date.filter.md\">Date filter</a>:</label>\r\n\t<div>{{misc.date | rlDate}}</div>\r\n\t<div>{{misc.date | rlDate:true}}</div>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/dateTimeStatic/dateTimeStatic.md\">Date time static</a>:</label>\r\n\t<div><rl-date-time-static date-value=\"misc.date\"></rl-date-time-static></div>\r\n\t<div><rl-date-time-static date-value=\"misc.date\" include-time=\"true\"></rl-date-time-static></div>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<label>Signature pad:</label>\r\n\t<div><rl-signature-pad ng-model=\"misc.signature\"></rl-signature-pad></div>\r\n</div>"

/***/ },
/* 11 */
/***/ function(module, exports) {

	(function() {
		var __array = rl_utilities.services.array;
	
		angular.module('app')
			.controller('MessageLogTestController', MessageLogTestController);
	
		MessageLogTestController.$inject = ['$q'];
		function MessageLogTestController($q) {
			var self = this;
			self.messages = _.times(20, generateMessage);
			var localMessages = self.messages;
			self.messageService = {
				updateMessage: function(message) {
					console.log('update ' + message.message);
					return $q.when();
				},
				saveMessage: function(message) {
					console.log('save ' + message.message);
					localMessages.unshift(message);
					return $q.when();
				},
				getMessages: function(startFrom, quantity) {
					var messageList = _.chain(localMessages).drop(startFrom).take(quantity).value();
					var result = {
						hasMoreMessages: startFrom + quantity < localMessages.length,
						messages: messageList,
					};
					return $q.when(result);
				},
				deleteMessage: function(message) {
					console.log('delete ' + message.message);
					__array.arrayUtility.remove(localMessages, message);
					return $q.when();
				},
			};
	
			function generateMessage(index) {
				var millisecondsAgo = index * 5000;
				var milliseconds = moment().milliseconds() - millisecondsAgo;
				var timestamp = moment(milliseconds).tz('US/Eastern');
				var message = {
					message: 'Message ' + index,
					createdBy: generateAuthor(),
					createdDate: timestamp,
					lastUpdatedBy: generateAuthor(),
					lastUpdatedDate: timestamp,
					edited: true,
				};
	
				return message;
			}
	
			function generateAuthor() {
				var authors = [
					{ id: 1, name: 'Josh Graber' },
					{ id: 2, name: 'Dude McKelly' },
					{ id: 3, name: 'Micky Matson' },
					{ id: 4, name: 'John Doe' },
					{ id: 5, name: 'Abraham Lincoln' },
					{ id: 6, name: 'Harrison Ford' },
					{ id: 7, name: 'Han Solo' },
				];
	
				var randomAuthor = Math.floor(Math.random() * authors.length);
				return authors[randomAuthor];
			}
		}
	}());

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(16);
	var cardContainerBuilder_service_1 = __webpack_require__(13);
	var CardTestController = (function () {
	    function CardTestController(cardContainerBuilderFactory) {
	        var items = [
	            { name: 'Item 1', value: 1 },
	            { name: 'Item 2', value: 2 },
	            { name: 'Item 3', value: 1 },
	            { name: 'Item 4', value: 1 },
	            { name: 'Item 5', value: 2 },
	            { name: 'Item 6', value: 2 },
	        ];
	        this.builder = cardContainerBuilderFactory.getInstance();
	        this.builder.dataSource.buildSimpleDataSource(items);
	        this.builder.addColumn({
	            label: 'Name',
	            size: 6,
	            getValue: 'name',
	        });
	        this.builder.addColumn({
	            label: 'Value',
	            size: 6,
	            getValue: 'value',
	            template: '<b>{{myItem.value}}</b>',
	        });
	        this.builder.renderFilters();
	        this.builder.filters.buildModeFilterGroup({
	            label: 'Mode Filter',
	            type: 'modeFilter',
	            getValue: 'value',
	            options: [
	                {
	                    label: 'All',
	                    displayAll: true,
	                },
	                {
	                    label: '1',
	                    value: 1,
	                },
	                {
	                    label: '2',
	                    value: 2,
	                },
	            ],
	        });
	    }
	    CardTestController.$inject = [cardContainerBuilder_service_1.factoryName];
	    return CardTestController;
	}());
	angular.module('app')
	    .controller('CardTestController', CardTestController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZENvbnRhaW5lckJvb3RzdHJhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhcmRDb250YWluZXJCb290c3RyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBRW5DLDZDQUFtRyxvRUFBb0UsQ0FBQyxDQUFBO0FBT3hLO0lBSUMsNEJBQVksMkJBQXlEO1FBQ3BFLElBQU0sS0FBSyxHQUFnQjtZQUMxQixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtTQUM1QixDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUN0QixLQUFLLEVBQUUsTUFBTTtZQUNiLElBQUksRUFBRSxDQUFDO1lBQ1AsUUFBUSxFQUFFLE1BQU07U0FDaEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDdEIsS0FBSyxFQUFFLE9BQU87WUFDZCxJQUFJLEVBQUUsQ0FBQztZQUNQLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLFFBQVEsRUFBRSx5QkFBeUI7U0FDbkMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztZQUN6QyxLQUFLLEVBQUUsYUFBYTtZQUNwQixJQUFJLEVBQUUsWUFBWTtZQUNsQixRQUFRLEVBQUUsT0FBTztZQUNqQixPQUFPLEVBQUU7Z0JBQ1I7b0JBQ0MsS0FBSyxFQUFFLEtBQUs7b0JBQ1osVUFBVSxFQUFFLElBQUk7aUJBQ2hCO2dCQUNEO29CQUNDLEtBQUssRUFBRSxHQUFHO29CQUNWLEtBQUssRUFBRSxDQUFDO2lCQUNSO2dCQUNEO29CQUNDLEtBQUssRUFBRSxHQUFHO29CQUNWLEtBQUssRUFBRSxDQUFDO2lCQUNSO2FBQ0Q7U0FDRCxDQUFDLENBQUM7SUFDSixDQUFDO0lBNUNNLDBCQUFPLEdBQWEsQ0FBQywwQ0FBYyxDQUFDLENBQUM7SUE2QzdDLHlCQUFDO0FBQUQsQ0FBQyxBQWhERCxJQWdEQztBQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0tBQ25CLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDIn0=

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __genericSearchFilter = typescript_angular_utilities_1.services.genericSearchFilter;
	var dataSources = __webpack_require__(15);
	var filterGroup = __webpack_require__(32);
	var selectFilter = __webpack_require__(40);
	var dateFilter = __webpack_require__(44);
	var columnSearchFilter_service_1 = __webpack_require__(49);
	exports.factoryName = 'cardContainerBuilder';
	var CardContainerBuilder = (function () {
	    function CardContainerBuilder($injector) {
	        this.$injector = $injector;
	        this.dataSource = new DataSourceBuilder($injector, this);
	        this.filters = new FilterBuilder($injector, this);
	        this._columns = [];
	    }
	    CardContainerBuilder.prototype.useSearch = function (tokenized) {
	        var factory = this.$injector.get(__genericSearchFilter.factoryName);
	        this._searchFilter = factory.getInstance(tokenized);
	        return this._searchFilter;
	    };
	    CardContainerBuilder.prototype.searchFilter = function (filter) {
	        this._searchFilter = filter;
	        return this._searchFilter;
	    };
	    CardContainerBuilder.prototype.usePaging = function () {
	        this._paging = true;
	    };
	    CardContainerBuilder.prototype.addColumn = function (column) {
	        this._columns.push(column);
	    };
	    CardContainerBuilder.prototype.useClickableCards = function () {
	        this._clickableCards = true;
	    };
	    CardContainerBuilder.prototype.usePermanentFooters = function () {
	        this._permanentFooters = true;
	    };
	    CardContainerBuilder.prototype.useSelection = function () {
	        this._selectableCards = true;
	    };
	    CardContainerBuilder.prototype.renderFilters = function () {
	        this._renderFilters = true;
	    };
	    CardContainerBuilder.prototype.saveWhenInvalid = function () {
	        this._saveWhenInvalid = true;
	    };
	    Object.defineProperty(CardContainerBuilder.prototype, "disableSelection", {
	        set: function (value) {
	            if (!this._selectableCards) {
	                this.useSelection();
	            }
	            this._disableSelection = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CardContainerBuilder.prototype.setCardContainerProperties = function (cardContainer) {
	        if (this._searchFilter != null) {
	            this._filters.push(this._searchFilter);
	        }
	        cardContainer.source = this._dataSource;
	        cardContainer.filters = this._filters;
	        cardContainer.searchFilter = this._searchFilter;
	        cardContainer.paging = this._paging;
	        cardContainer.columns = this._columns;
	        cardContainer.containerData = this.containerData;
	        cardContainer.clickableCards = this._clickableCards;
	        cardContainer.maxColumnSorts = this.maxColumnSorts;
	        cardContainer.permanentFooters = this._permanentFooters;
	        cardContainer.selectableCards = this._selectableCards;
	        cardContainer.disableSelection = this._disableSelection;
	        cardContainer.renderFilters = this._renderFilters;
	        cardContainer.saveWhenInvalid = this._saveWhenInvalid;
	        if (cardContainer.cardController == null) {
	            cardContainer.cardController = this.cardController;
	        }
	        if (cardContainer.cardControllerAs == null) {
	            cardContainer.cardControllerAs = this.cardControllerAs;
	        }
	        if (cardContainer.cardAs == null) {
	            cardContainer.cardAs = this.cardAs;
	        }
	    };
	    return CardContainerBuilder;
	}());
	exports.CardContainerBuilder = CardContainerBuilder;
	var DataSourceBuilder = (function () {
	    function DataSourceBuilder($injector, parent) {
	        this.$injector = $injector;
	        this.parent = parent;
	        var factory = this.$injector.get(dataSources.simpleDataSource.factoryName);
	        parent._dataSource = factory.getInstance([]);
	    }
	    DataSourceBuilder.prototype.buildSimpleDataSource = function (data) {
	        var factory = this.$injector.get(dataSources.simpleDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(data);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildDataServiceDataSource = function (getDataSet) {
	        var factory = this.$injector.get(dataSources.dataServiceDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(getDataSet);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildClientServerDataSource = function (getDataSet, getFilterModel, validateModel) {
	        if (_.isUndefined(this.parent._searchFilter)) {
	            this.parent.useSearch();
	        }
	        var factory = this.$injector.get(dataSources.clientServerDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(getDataSet, this.parent._searchFilter, getFilterModel, validateModel);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildServerSideDataSource = function (getDataSet) {
	        var factory = this.$injector.get(dataSources.serverSideDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(getDataSet);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildSmartDataSource = function (getDataSet) {
	        var factory = this.$injector.get(dataSources.smartDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(getDataSet);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildCustomDataSource = function (dataSource) {
	        this.parent._dataSource = dataSource;
	        return this.parent._dataSource;
	    };
	    return DataSourceBuilder;
	}());
	exports.DataSourceBuilder = DataSourceBuilder;
	var FilterBuilder = (function () {
	    function FilterBuilder($injector, parent) {
	        this.$injector = $injector;
	        this.parent = parent;
	        this.parent._filters = [];
	    }
	    FilterBuilder.prototype.buildFilterGroup = function (settings) {
	        var factory = this.$injector.get(filterGroup.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildModeFilterGroup = function (settings) {
	        var factory = this.$injector.get(filterGroup.modeFilterGroup.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildRangeFilterGroup = function (settings) {
	        var factory = this.$injector.get(filterGroup.rangeFilterGroup.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildSelectFilter = function (settings) {
	        var factory = this.$injector.get(selectFilter.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildDateFilter = function (settings) {
	        var factory = this.$injector.get(dateFilter.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildColumnSearchFilter = function () {
	        var factory = this.$injector.get(columnSearchFilter_service_1.factoryName);
	        var filter = factory.getInstance();
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.addCustomFilter = function (filter) {
	        this.parent._filters.push(filter);
	    };
	    return FilterBuilder;
	}());
	exports.FilterBuilder = FilterBuilder;
	cardContainerBuilderFactory.$inject = ['$injector'];
	function cardContainerBuilderFactory($injector) {
	    return {
	        useMock: false,
	        getInstance: function () {
	            return this.useMock ? this.mockBuilder : new CardContainerBuilder($injector);
	        },
	        mockBuilder: new CardContainerBuilder($injector),
	    };
	}
	exports.cardContainerBuilderFactory = cardContainerBuilderFactory;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZENvbnRhaW5lckJ1aWxkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhcmRDb250YWluZXJCdWlsZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBR2IsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsNkNBQWtDLDhCQUE4QixDQUFDLENBQUE7QUFDakUsSUFBTyxxQkFBcUIsR0FBRyx1Q0FBUSxDQUFDLG1CQUFtQixDQUFDO0FBSTVELElBQVksV0FBVyxXQUFNLGtDQUFrQyxDQUFDLENBQUE7QUFDaEUsSUFBWSxXQUFXLFdBQU0sMENBQTBDLENBQUMsQ0FBQTtBQUN4RSxJQUFZLFlBQVksV0FBTSw0Q0FBNEMsQ0FBQyxDQUFBO0FBQzNFLElBQVksVUFBVSxXQUFNLHdDQUF3QyxDQUFDLENBQUE7QUFDckUsMkNBQXdHLHlEQUF5RCxDQUFDLENBQUE7QUF3QnZKLG1CQUFXLEdBQVcsc0JBQXNCLENBQUM7QUFxRXhEO0lBdUJDLDhCQUFvQixTQUF3QztRQUF4QyxjQUFTLEdBQVQsU0FBUyxDQUErQjtRQUMzRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCx3Q0FBUyxHQUFULFVBQVUsU0FBbUI7UUFDNUIsSUFBSSxPQUFPLEdBQXNELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFNLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVILElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMzQixDQUFDO0lBRUQsMkNBQVksR0FBWixVQUFhLE1BQTRCO1FBQ3hDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzNCLENBQUM7SUFFRCx3Q0FBUyxHQUFUO1FBQ0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELHdDQUFTLEdBQVQsVUFBcUIsTUFBMEI7UUFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELGdEQUFpQixHQUFqQjtRQUNDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFRCxrREFBbUIsR0FBbkI7UUFDQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7SUFFRCwyQ0FBWSxHQUFaO1FBQ0MsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDO0lBRUQsNENBQWEsR0FBYjtRQUNDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFFRCw4Q0FBZSxHQUFmO1FBQ0MsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDO0lBRUQsc0JBQUksa0RBQWdCO2FBQXBCLFVBQXFCLEtBQThCO1lBQ2xELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3JCLENBQUM7WUFFRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQseURBQTBCLEdBQTFCLFVBQTJCLGFBQXNDO1FBQ2hFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEMsQ0FBQztRQUVELGFBQWEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN4QyxhQUFhLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdEMsYUFBYSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ2hELGFBQWEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNwQyxhQUFhLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdEMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ2pELGFBQWEsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUNwRCxhQUFhLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDbkQsYUFBYSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUN4RCxhQUFhLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUN0RCxhQUFhLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ3hELGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUNsRCxhQUFhLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUV0RCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUMsYUFBYSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQ3BELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM1QyxhQUFhLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQ3hELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbEMsYUFBYSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3BDLENBQUM7SUFDRixDQUFDO0lBQ0YsMkJBQUM7QUFBRCxDQUFDLEFBekdELElBeUdDO0FBekdZLDRCQUFvQix1QkF5R2hDLENBQUE7QUFFRDtJQUNDLDJCQUFvQixTQUF3QyxFQUNoRCxNQUE0QjtRQURwQixjQUFTLEdBQVQsU0FBUyxDQUErQjtRQUNoRCxXQUFNLEdBQU4sTUFBTSxDQUFzQjtRQUN2QyxJQUFJLE9BQU8sR0FBMEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sV0FBVyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZJLE1BQU0sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsaURBQXFCLEdBQXJCLFVBQWlDLElBQWlCO1FBQ2pELElBQUksT0FBTyxHQUEwRCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBTSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDaEMsQ0FBQztJQUVELHNEQUEwQixHQUExQixVQUFzQyxVQUFxRDtRQUMxRixJQUFJLE9BQU8sR0FBb0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sV0FBVyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RKLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3JDLENBQUM7SUFFRCx1REFBMkIsR0FBM0IsVUFBdUMsVUFBdUQsRUFDbkYsY0FBMkMsRUFDM0MsYUFBK0M7UUFDekQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3pCLENBQUM7UUFFRCxJQUFJLE9BQU8sR0FBc0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sV0FBVyxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pKLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNwSCxNQUFNLENBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDckMsQ0FBQztJQUVELHFEQUF5QixHQUF6QixVQUFxQyxVQUE0QztRQUNoRixJQUFJLE9BQU8sR0FBa0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sV0FBVyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25KLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxnREFBb0IsR0FBcEIsVUFBZ0MsVUFBNEM7UUFDM0UsSUFBSSxPQUFPLEdBQXdELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFNLFdBQVcsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDcEksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxRCxNQUFNLENBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDckMsQ0FBQztJQUVELGlEQUFxQixHQUFyQixVQUFpQyxVQUFrQztRQUNsRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ2hDLENBQUM7SUFDRix3QkFBQztBQUFELENBQUMsQUEvQ0QsSUErQ0M7QUEvQ1kseUJBQWlCLG9CQStDN0IsQ0FBQTtBQUVEO0lBQ0MsdUJBQW9CLFNBQXdDLEVBQ2hELE1BQTRCO1FBRHBCLGNBQVMsR0FBVCxTQUFTLENBQStCO1FBQ2hELFdBQU0sR0FBTixNQUFNLENBQXNCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsd0NBQWdCLEdBQWhCLFVBQWlCLFFBQTBDO1FBQzFELElBQUksT0FBTyxHQUFvQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBTSxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEcsSUFBSSxNQUFNLEdBQTZCLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDZixDQUFDO0lBRUQsNENBQW9CLEdBQXBCLFVBQWdDLFFBQTZDO1FBQzVFLElBQUksT0FBTyxHQUF3RCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBTSxXQUFXLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BJLElBQUksTUFBTSxHQUFpRCxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pGLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVELDZDQUFxQixHQUFyQixVQUFpQyxRQUE4QztRQUM5RSxJQUFJLE9BQU8sR0FBMEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sV0FBVyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZJLElBQUksTUFBTSxHQUFtRCxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVELHlDQUFpQixHQUFqQixVQUEwQyxRQUF1RDtRQUNoRyxJQUFJLE9BQU8sR0FBc0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25HLElBQUksTUFBTSxHQUE2QixPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVELHVDQUFlLEdBQWYsVUFBZ0IsUUFBdUM7UUFDdEQsSUFBSSxPQUFPLEdBQWtDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFNLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3RixJQUFJLE1BQU0sR0FBZ0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFRCwrQ0FBdUIsR0FBdkI7UUFDQyxJQUFJLE9BQU8sR0FBK0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sd0NBQXVCLENBQUMsQ0FBQztRQUMzRixJQUFJLE1BQU0sR0FBd0IsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVELHVDQUFlLEdBQWYsVUFBZ0IsTUFBdUI7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRixvQkFBQztBQUFELENBQUMsQUFuREQsSUFtREM7QUFuRFkscUJBQWEsZ0JBbUR6QixDQUFBO0FBUUQsMkJBQTJCLENBQUMsT0FBTyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDcEQscUNBQTRDLFNBQXdDO0lBQ25GLE1BQU0sQ0FBQztRQUNOLE9BQU8sRUFBRSxLQUFLO1FBQ2QsV0FBVztZQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5RSxDQUFDO1FBQ0QsV0FBVyxFQUFFLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDO0tBQ2hELENBQUM7QUFDSCxDQUFDO0FBUmUsbUNBQTJCLDhCQVExQyxDQUFBIn0=

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = _;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(16);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var sorts_module_1 = __webpack_require__(17);
	var clientServerDataSource = __webpack_require__(22);
	exports.clientServerDataSource = clientServerDataSource;
	var dataPager = __webpack_require__(27);
	exports.dataPager = dataPager;
	var dataServiceDataSource = __webpack_require__(28);
	exports.dataServiceDataSource = dataServiceDataSource;
	var serverSideDataSource = __webpack_require__(29);
	exports.serverSideDataSource = serverSideDataSource;
	var simpleDataSource = __webpack_require__(30);
	exports.simpleDataSource = simpleDataSource;
	var smartDataSource = __webpack_require__(31);
	exports.smartDataSource = smartDataSource;
	var events = __webpack_require__(25);
	exports.events = events;
	var dataSourceProcessor = __webpack_require__(26);
	exports.dataSourceProcessor = dataSourceProcessor;
	var dataSourceBase = __webpack_require__(24);
	exports.dataSourceBase = dataSourceBase;
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources';
	angular.module(exports.moduleName, [
	    typescript_angular_utilities_1.services.object.moduleName,
	    sorts_module_1.moduleName,
	    clientServerDataSource.moduleName,
	    dataPager.moduleName,
	    dataServiceDataSource.moduleName,
	    serverSideDataSource.moduleName,
	    simpleDataSource.moduleName,
	    smartDataSource.moduleName,
	])
	    .service(dataSourceProcessor.processorServiceName, dataSourceProcessor.DataSourceProcessor);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVNvdXJjZXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0YVNvdXJjZXMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBQ25DLDZDQUF5Qiw4QkFBOEIsQ0FBQyxDQUFBO0FBRXhELDZCQUE4Qyx1QkFBdUIsQ0FBQyxDQUFBO0FBQ3RFLElBQVksc0JBQXNCLFdBQU0seURBQXlELENBQUMsQ0FBQTtBQVdqRyw4QkFBc0I7QUFWdkIsSUFBWSxTQUFTLFdBQU0sK0JBQStCLENBQUMsQ0FBQTtBQVcxRCxpQkFBUztBQVZWLElBQVkscUJBQXFCLFdBQU0sdURBQXVELENBQUMsQ0FBQTtBQVc5Riw2QkFBcUI7QUFWdEIsSUFBWSxvQkFBb0IsV0FBTSxxREFBcUQsQ0FBQyxDQUFBO0FBVzNGLDRCQUFvQjtBQVZyQixJQUFZLGdCQUFnQixXQUFNLDZDQUE2QyxDQUFDLENBQUE7QUFXL0Usd0JBQWdCO0FBVmpCLElBQVksZUFBZSxXQUFNLDJDQUEyQyxDQUFDLENBQUE7QUFXNUUsdUJBQWU7QUFWaEIsSUFBWSxNQUFNLFdBQU0sb0JBQW9CLENBQUMsQ0FBQTtBQVc1QyxjQUFNO0FBVlAsSUFBWSxtQkFBbUIsV0FBTSwrQkFBK0IsQ0FBQyxDQUFBO0FBV3BFLDJCQUFtQjtBQVZwQixJQUFZLGNBQWMsV0FBTSwwQkFBMEIsQ0FBQyxDQUFBO0FBVzFELHNCQUFjO0FBTUosa0JBQVUsR0FBVyw0Q0FBNEMsQ0FBQztBQUU3RSxPQUFPLENBQUMsTUFBTSxDQUFDLGtCQUFVLEVBQUU7SUFDMUIsdUNBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVTtJQUMxQix5QkFBZTtJQUVmLHNCQUFzQixDQUFDLFVBQVU7SUFDakMsU0FBUyxDQUFDLFVBQVU7SUFDcEIscUJBQXFCLENBQUMsVUFBVTtJQUNoQyxvQkFBb0IsQ0FBQyxVQUFVO0lBQy9CLGdCQUFnQixDQUFDLFVBQVU7SUFDM0IsZUFBZSxDQUFDLFVBQVU7Q0FDMUIsQ0FBQztLQUNBLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxvQkFBb0IsRUFBRSxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDIn0=

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = angular;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(16);
	var mergeSort = __webpack_require__(18);
	exports.mergeSort = mergeSort;
	var sorter = __webpack_require__(19);
	exports.sorter = sorter;
	__export(__webpack_require__(21));
	__export(__webpack_require__(20));
	exports.moduleName = 'rl.ui.components.cardContainer.sorts';
	angular.module(exports.moduleName, [
	    mergeSort.moduleName,
	    sorter.moduleName,
	]);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydHMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic29ydHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztBQUViLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBRW5DLElBQVksU0FBUyxXQUFNLCtCQUErQixDQUFDLENBQUE7QUFPMUQsaUJBQVM7QUFOVixJQUFZLE1BQU0sV0FBTSx5QkFBeUIsQ0FBQyxDQUFBO0FBT2pELGNBQU07QUFMUCxpQkFBYyxRQUFRLENBQUMsRUFBQTtBQUN2QixpQkFBYyxpQkFBaUIsQ0FBQyxFQUFBO0FBT3JCLGtCQUFVLEdBQVcsc0NBQXNDLENBQUM7QUFFdkUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBVSxFQUFFO0lBQzFCLFNBQVMsQ0FBQyxVQUFVO0lBQ3BCLE1BQU0sQ0FBQyxVQUFVO0NBQ2pCLENBQUMsQ0FBQyJ9

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(16);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	exports.moduleName = 'rl.ui.components.cardContainer.sorts.mergeSort';
	exports.serviceName = 'mergeSort';
	var MergeSort = (function () {
	    function MergeSort() {
	    }
	    MergeSort.prototype.sort = function (data, compare) {
	        if (data.length < 2) {
	            return data;
	        }
	        if (compare == null) {
	            compare = this.defaultCompare;
	        }
	        var mid;
	        var left;
	        var right;
	        mid = data.length / 2;
	        left = this.sort(data.slice(0, mid), compare);
	        right = this.sort(data.slice(mid, data.length), compare);
	        return this.merge(left, right, compare);
	    };
	    MergeSort.prototype.defaultCompare = function (a, b) {
	        return a < b
	            ? typescript_angular_utilities_1.types.CompareResult.less
	            : (a > b ? typescript_angular_utilities_1.types.CompareResult.greater : typescript_angular_utilities_1.types.CompareResult.equal);
	    };
	    MergeSort.prototype.merge = function (left, right, compare) {
	        var result = [];
	        while (left.length && right.length) {
	            if (compare(left[0], right[0]) === typescript_angular_utilities_1.types.CompareResult.greater) {
	                result.push(right.shift());
	            }
	            else {
	                // if equal it should preserve same order (stable)
	                result.push(left.shift());
	            }
	        }
	        if (left.length) {
	            result.push.apply(result, left);
	        }
	        if (right.length) {
	            result.push.apply(result, right);
	        }
	        return result;
	    };
	    return MergeSort;
	}());
	exports.MergeSort = MergeSort;
	angular.module(exports.moduleName, [])
	    .service(exports.serviceName, MergeSort);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VTb3J0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXJnZVNvcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUVuQyw2Q0FBZ0MsOEJBQThCLENBQUMsQ0FBQTtBQUlwRCxrQkFBVSxHQUFXLGdEQUFnRCxDQUFDO0FBQ3RFLG1CQUFXLEdBQVcsV0FBVyxDQUFDO0FBTTdDO0lBQUE7SUFpREEsQ0FBQztJQWhEQSx3QkFBSSxHQUFKLFVBQWdCLElBQWlCLEVBQUUsT0FBcUM7UUFDdkUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDckIsT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDL0IsQ0FBQztRQUVELElBQUksR0FBVyxDQUFDO1FBQ2hCLElBQUksSUFBVyxDQUFDO1FBQ2hCLElBQUksS0FBWSxDQUFDO1FBRWpCLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFekQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQVksSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sa0NBQWMsR0FBdEIsVUFBa0MsQ0FBWSxFQUFFLENBQVk7UUFDM0QsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDO2NBQ1Qsb0NBQUssQ0FBQyxhQUFhLENBQUMsSUFBSTtjQUN4QixDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsb0NBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLG9DQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFTyx5QkFBSyxHQUFiLFVBQXlCLElBQWlCLEVBQUUsS0FBa0IsRUFBRSxPQUFvQztRQUNuRyxJQUFJLE1BQU0sR0FBZ0IsRUFBRSxDQUFDO1FBRTdCLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDcEMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxvQ0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDUCxrREFBa0Q7Z0JBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDM0IsQ0FBQztRQUNGLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakMsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFDRixnQkFBQztBQUFELENBQUMsQUFqREQsSUFpREM7QUFqRFksaUJBQVMsWUFpRHJCLENBQUE7QUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLGtCQUFVLEVBQUUsRUFBRSxDQUFDO0tBQzVCLE9BQU8sQ0FBQyxtQkFBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDIn0=

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __transform = typescript_angular_utilities_1.services.transform.transform;
	var sortDirection_1 = __webpack_require__(20);
	var mergeSort_service_1 = __webpack_require__(18);
	exports.moduleName = 'rl.ui.components.cardContainer.sorts.sorter';
	exports.serviceName = 'sorter';
	var Sorter = (function () {
	    function Sorter(mergeSort) {
	        this.mergeSort = mergeSort;
	    }
	    Sorter.prototype.sort = function (data, sort) {
	        var _this = this;
	        if (sort === null) {
	            return data;
	        }
	        if (_.isArray(sort)) {
	            var reverseSorts = _.clone(sort);
	            reverseSorts.reverse();
	            return _.reduce(reverseSorts, function (sortedData, nextSort) {
	                return _this.singleSort(sortedData, nextSort);
	            }, data);
	        }
	        return this.singleSort(data, sort);
	    };
	    Sorter.prototype.singleSort = function (data, sort) {
	        var compareFunction = this.buildSortFunction(sort);
	        return this.mergeSort.sort(data, compareFunction);
	    };
	    Sorter.prototype.buildSortFunction = function (sort) {
	        return function (a, b) {
	            if (sort.direction === sortDirection_1.SortDirection.none) {
	                return typescript_angular_utilities_1.types.CompareResult.equal;
	            }
	            var valueOfA = __transform.getValue(a, sort.column.getValue);
	            var valueOfB = __transform.getValue(b, sort.column.getValue);
	            var greaterResult = typescript_angular_utilities_1.types.CompareResult.greater;
	            var lessResult = typescript_angular_utilities_1.types.CompareResult.less;
	            var descendingSort = (sort.direction === sortDirection_1.SortDirection.descending);
	            var flip = sort.column.flipSort;
	            // Exclusive OR... if flipping a descending sort, you get an ascending sort
	            if ((descendingSort || flip) && !(descendingSort && flip)) {
	                greaterResult = typescript_angular_utilities_1.types.CompareResult.less;
	                lessResult = typescript_angular_utilities_1.types.CompareResult.greater;
	            }
	            return valueOfA > valueOfB
	                ? greaterResult
	                : (valueOfA < valueOfB ? lessResult : typescript_angular_utilities_1.types.CompareResult.equal);
	        };
	    };
	    Sorter.$inject = [mergeSort_service_1.serviceName];
	    return Sorter;
	}());
	exports.Sorter = Sorter;
	angular.module(exports.moduleName, [])
	    .service(exports.serviceName, Sorter);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzb3J0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUNuQyxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUU1Qiw2Q0FBZ0MsOEJBQThCLENBQUMsQ0FBQTtBQUMvRCxJQUFPLFdBQVcsR0FBRyx1Q0FBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFHbEQsOEJBQThCLGtCQUFrQixDQUFDLENBQUE7QUFDakQsa0NBQWdFLGdDQUFnQyxDQUFDLENBQUE7QUFFdEYsa0JBQVUsR0FBVyw2Q0FBNkMsQ0FBQztBQUNuRSxtQkFBVyxHQUFXLFFBQVEsQ0FBQztBQU8xQztJQUVDLGdCQUFvQixTQUFxQjtRQUFyQixjQUFTLEdBQVQsU0FBUyxDQUFZO0lBQUksQ0FBQztJQUU5QyxxQkFBSSxHQUFKLFVBQWdCLElBQWlCLEVBQUUsSUFBcUI7UUFBeEQsaUJBZUM7UUFkQSxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2IsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksWUFBWSxHQUFxQixDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUV2QixNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsVUFBQyxVQUFpQixFQUFFLFFBQWU7Z0JBQ2hFLE1BQU0sQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM5QyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDVixDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFTLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTywyQkFBVSxHQUFsQixVQUE4QixJQUFpQixFQUFFLElBQVc7UUFDM0QsSUFBSSxlQUFlLEdBQWdDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTyxrQ0FBaUIsR0FBekIsVUFBcUMsSUFBVztRQUMvQyxNQUFNLENBQUMsVUFBQyxDQUFZLEVBQUUsQ0FBWTtZQUNqQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLDZCQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDM0MsTUFBTSxDQUFDLG9DQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztZQUNsQyxDQUFDO1lBRUQsSUFBSSxRQUFRLEdBQVEsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRSxJQUFJLFFBQVEsR0FBUSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRWxFLElBQUksYUFBYSxHQUF3QixvQ0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7WUFDckUsSUFBSSxVQUFVLEdBQXdCLG9DQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztZQUcvRCxJQUFJLGNBQWMsR0FBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssNkJBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM1RSxJQUFJLElBQUksR0FBWSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUV6QywyRUFBMkU7WUFDM0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNELGFBQWEsR0FBRyxvQ0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ3pDLFVBQVUsR0FBRyxvQ0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7WUFDMUMsQ0FBQztZQUVELE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUTtrQkFDdkIsYUFBYTtrQkFDYixDQUFDLFFBQVEsR0FBRyxRQUFRLEdBQUcsVUFBVSxHQUFHLG9DQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLENBQUMsQ0FBQztJQUNILENBQUM7SUFuRE0sY0FBTyxHQUFhLENBQUMsK0JBQW9CLENBQUMsQ0FBQztJQW9EbkQsYUFBQztBQUFELENBQUMsQUFyREQsSUFxREM7QUFyRFksY0FBTSxTQXFEbEIsQ0FBQTtBQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQVUsRUFBRSxFQUFFLENBQUM7S0FDNUIsT0FBTyxDQUFDLG1CQUFXLEVBQUUsTUFBTSxDQUFDLENBQUMifQ==

/***/ },
/* 20 */
/***/ function(module, exports) {

	'use strict';
	var SortDirection = (function () {
	    function SortDirection(value) {
	        this.value = value;
	    }
	    SortDirection.toggle = function (direction) {
	        if (direction === SortDirection.ascending) {
	            return SortDirection.descending;
	        }
	        else if (direction === SortDirection.descending) {
	            return SortDirection.none;
	        }
	        else {
	            return SortDirection.ascending;
	        }
	    };
	    SortDirection.getFullName = function (direction) {
	        'use strict';
	        if (direction === SortDirection.ascending) {
	            return 'ascending';
	        }
	        else if (direction === SortDirection.descending) {
	            return 'descending';
	        }
	        else {
	            return 'none';
	        }
	    };
	    SortDirection.none = new SortDirection(0);
	    SortDirection.ascending = new SortDirection(1);
	    SortDirection.descending = new SortDirection(2);
	    return SortDirection;
	}());
	exports.SortDirection = SortDirection;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydERpcmVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvcnREaXJlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBUWI7SUFLQyx1QkFBb0IsS0FBYTtRQUFiLFVBQUssR0FBTCxLQUFLLENBQVE7SUFBSSxDQUFDO0lBRXhCLG9CQUFNLEdBQXBCLFVBQXFCLFNBQXdCO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztRQUNqQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztRQUMzQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztRQUNoQyxDQUFDO0lBQ0YsQ0FBQztJQUVhLHlCQUFXLEdBQXpCLFVBQTBCLFNBQXdCO1FBQ2pELFlBQVksQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ3BCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxLQUFLLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDckIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ1AsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNmLENBQUM7SUFDRixDQUFDO0lBekJhLGtCQUFJLEdBQWtCLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLHVCQUFTLEdBQWtCLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hELHdCQUFVLEdBQWtCLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBd0JoRSxvQkFBQztBQUFELENBQUMsQUEzQkQsSUEyQkM7QUEzQlkscUJBQWEsZ0JBMkJ6QixDQUFBIn0=

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(20));
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O0FBT2IsaUJBQWMsaUJBQWlCLENBQUMsRUFBQSJ9

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(16);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var __object = typescript_angular_utilities_1.services.object;
	var __synchronizedRequests = typescript_angular_utilities_1.services.synchronizedRequests;
	var asyncDataSource_service_1 = __webpack_require__(23);
	var dataSourceProcessor_service_1 = __webpack_require__(26);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.clientServerDataSource';
	exports.factoryName = 'clientServerDataSource';
	var ClientServerDataSource = (function (_super) {
	    __extends(ClientServerDataSource, _super);
	    function ClientServerDataSource(getDataSet, searchFilter, getFilterModel, validateModel, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	        _super.call(this, getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory);
	        this.searchFilter = searchFilter;
	        this.getFilterModel = getFilterModel;
	        this.validateModel = validateModel;
	        this.object = object;
	        this.minSearchLength = 4;
	        this.getFilterModel = this.getFilterModel || function () { return null; };
	        this.validateModel = this.validateModel || function () { return true; };
	        this.countFilterGroups = true;
	        this.search = searchFilter.searchText;
	        this.filterModel = _.clone(this.getFilterModel());
	        searchFilter.minSearchLength = this.minSearchLength;
	    }
	    ClientServerDataSource.prototype.refresh = function () {
	        if (this.searchFilter.searchText !== this.search
	            || this.filterModelChanged()) {
	            this.reload();
	        }
	        else {
	            _super.prototype.refresh.call(this);
	        }
	    };
	    ClientServerDataSource.prototype.reload = function () {
	        this.search = this.searchFilter.searchText;
	        this.filterModel = _.clone(this.getFilterModel());
	        var hasValidSearch = !this.object.isNullOrEmpty(this.search) && this.search.length >= this.minSearchLength;
	        var hasValidFilterModel = this.filterModel != null && this.validateModel(this.filterModel);
	        if (!hasValidSearch && !hasValidFilterModel) {
	            this.resolveReload(null);
	            return;
	        }
	        _super.prototype.reload.call(this);
	    };
	    ClientServerDataSource.prototype.filterModelChanged = function () {
	        return !this.object.areEqual(this.getFilterModel(), this.filterModel);
	    };
	    ClientServerDataSource.prototype.getParams = function () {
	        var searchModel = this.getFilterModel();
	        if (searchModel != null) {
	            searchModel.search = this.search;
	        }
	        else {
	            searchModel = this.search;
	        }
	        return searchModel;
	    };
	    return ClientServerDataSource;
	}(asyncDataSource_service_1.AsyncDataSource));
	exports.ClientServerDataSource = ClientServerDataSource;
	clientServerDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName, __object.serviceName, __synchronizedRequests.factoryName];
	function clientServerDataSourceFactory(observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	    'use strict';
	    return {
	        getInstance: function (getDataSet, searchFilter, getFilterModel, validateModel) {
	            return new ClientServerDataSource(getDataSet, searchFilter, getFilterModel, validateModel, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory);
	        },
	    };
	}
	exports.clientServerDataSourceFactory = clientServerDataSourceFactory;
	angular.module(exports.moduleName, [__observable.moduleName, __array.moduleName, __object.moduleName, __synchronizedRequests.moduleName])
	    .factory(exports.factoryName, clientServerDataSourceFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50U2VydmVyRGF0YVNvdXJjZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpZW50U2VydmVyRGF0YVNvdXJjZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7O0FBRWIsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFbkMsNkNBQXlCLDhCQUE4QixDQUFDLENBQUE7QUFDeEQsSUFBTyxZQUFZLEdBQUcsdUNBQVEsQ0FBQyxVQUFVLENBQUM7QUFDMUMsSUFBTyxPQUFPLEdBQUcsdUNBQVEsQ0FBQyxLQUFLLENBQUM7QUFDaEMsSUFBTyxRQUFRLEdBQUcsdUNBQVEsQ0FBQyxNQUFNLENBQUM7QUFFbEMsSUFBTyxzQkFBc0IsR0FBRyx1Q0FBUSxDQUFDLG9CQUFvQixDQUFDO0FBRTlELHdDQUFvRSw0QkFBNEIsQ0FBQyxDQUFBO0FBQ2pHLDRDQUEyRCxnQ0FBZ0MsQ0FBQyxDQUFBO0FBRWpGLGtCQUFVLEdBQVcsbUVBQW1FLENBQUM7QUFDekYsbUJBQVcsR0FBVyx3QkFBd0IsQ0FBQztBQW1CMUQ7SUFBdUQsMENBQTBCO0lBS2hGLGdDQUFZLFVBQWlELEVBQ2pELFlBQXdELEVBQ3pELGNBQW9DLEVBQ3BDLGFBQXdDLEVBQy9DLGlCQUF5RCxFQUN6RCxtQkFBeUMsRUFDekMsS0FBNEIsRUFDcEIsTUFBK0IsRUFDdkMsMkJBQWdGO1FBQ25GLGtCQUFNLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQVJuRixpQkFBWSxHQUFaLFlBQVksQ0FBNEM7UUFDekQsbUJBQWMsR0FBZCxjQUFjLENBQXNCO1FBQ3BDLGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUl2QyxXQUFNLEdBQU4sTUFBTSxDQUF5QjtRQVhuQyxvQkFBZSxHQUFXLENBQUMsQ0FBQztRQWVuQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FB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

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var dataSourceBase_service_1 = __webpack_require__(24);
	var events = __webpack_require__(25);
	var AsyncDataSource = (function (_super) {
	    __extends(AsyncDataSource, _super);
	    function AsyncDataSource(getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory) {
	        _super.call(this, observableFactory, dataSourceProcessor, array);
	        this.observable.allowableEvents = events.async.all;
	        this.synchronizedRequests = synchronizedRequestsFactory.getInstance(getDataSet, this.resolveReload.bind(this));
	    }
	    Object.defineProperty(AsyncDataSource.prototype, "getDataSet", {
	        set: function (value) {
	            this.synchronizedRequests.dataProvider = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AsyncDataSource.prototype.reload = function () {
	        this.dataSet = null;
	        this.rawDataSet = null;
	        this.loadingDataSet = true;
	        this.synchronizedRequests.getData(this.getParams());
	    };
	    AsyncDataSource.prototype.resolveReload = function (data) {
	        this.loadingDataSet = false;
	        this.rawDataSet = data;
	        this.processData();
	        this.observable.fire(events.async.reloaded);
	        this.observable.fire(events.redrawing);
	        this.observable.fire(events.changed);
	    };
	    // override with params for getDataSet
	    AsyncDataSource.prototype.getParams = function () {
	        return null;
	    };
	    return AsyncDataSource;
	}(dataSourceBase_service_1.DataSourceBase));
	exports.AsyncDataSource = AsyncDataSource;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmNEYXRhU291cmNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhc3luY0RhdGFTb3VyY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7OztBQVViLHVDQUErQiwwQkFBMEIsQ0FBQyxDQUFBO0FBRTFELElBQVksTUFBTSxXQUFNLG9CQUFvQixDQUFDLENBQUE7QUFXN0M7SUFBZ0QsbUNBQXlCO0lBR3hFLHlCQUFZLFVBQXVDLEVBQy9DLGlCQUF5RCxFQUN6RCxtQkFBeUMsRUFDekMsS0FBNEIsRUFDNUIsMkJBQWdGO1FBQ25GLGtCQUFNLGlCQUFpQixFQUFFLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ25ELElBQUksQ0FBQyxvQkFBb0IsR0FBRywyQkFBMkIsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEgsQ0FBQztJQUVELHNCQUFJLHVDQUFVO2FBQWQsVUFBZSxLQUFrQztZQUNoRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUNoRCxDQUFDOzs7T0FBQTtJQUVELGdDQUFNLEdBQU47UUFDQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUUzQixJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFUyx1Q0FBYSxHQUF2QixVQUF3QixJQUFpQjtRQUN4QyxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUV2QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxzQ0FBc0M7SUFDNUIsbUNBQVMsR0FBbkI7UUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUNGLHNCQUFDO0FBQUQsQ0FBQyxBQXZDRCxDQUFnRCx1Q0FBYyxHQXVDN0Q7QUF2Q1ksdUJBQWUsa0JBdUMzQixDQUFBIn0=

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __object = typescript_angular_utilities_1.services.object;
	var events = __webpack_require__(25);
	var DataSourceBase = (function () {
	    function DataSourceBase(observableFactory, dataSourceProcessor, array) {
	        this.dataSourceProcessor = dataSourceProcessor;
	        this.array = array;
	        this.sorts = [];
	        this.filters = [];
	        this.count = 0;
	        this.countFilterGroups = false;
	        this.loadingDataSet = false;
	        this.observable = observableFactory.getInstance();
	        this.observable.allowableEvents = events.all;
	    }
	    DataSourceBase.prototype.watch = function (action, event) {
	        return this.observable.register(action, event);
	    };
	    Object.defineProperty(DataSourceBase.prototype, "needsRefinedSearch", {
	        get: function () {
	            var noItemsDisplayed = __object.objectUtility.isNullOrEmpty(this.dataSet);
	            var moreItemsOnServer = this._isEmpty === false || (this.rawDataSet != null && this.rawDataSet.length < this.count);
	            return noItemsDisplayed && moreItemsOnServer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSourceBase.prototype, "isEmpty", {
	        get: function () {
	            return __object.objectUtility.isNullOrEmpty(this.rawDataSet)
	                && (this._isEmpty != null ? this._isEmpty : true);
	        },
	        set: function (value) {
	            this._isEmpty = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataSourceBase.prototype.processData = function () {
	        var processedData;
	        if (this.countFilterGroups) {
	            processedData = this.dataSourceProcessor.processAndCount(this.sorts, this.filters, this.pager, this.rawDataSet);
	        }
	        else {
	            processedData = this.dataSourceProcessor.process(this.sorts, this.filters, this.pager, this.rawDataSet);
	        }
	        this.setProcessedData(processedData);
	    };
	    //used when we need to process data but without client filters.
	    DataSourceBase.prototype.processDataNoClientFilters = function () {
	        var processedData;
	        if (this.countFilterGroups) {
	            processedData = this.dataSourceProcessor.processAndCount(this.sorts, null, this.pager, this.rawDataSet);
	        }
	        else {
	            processedData = this.dataSourceProcessor.process(this.sorts, null, this.pager, this.rawDataSet);
	        }
	        this.setProcessedData(processedData);
	    };
	    DataSourceBase.prototype.setProcessedData = function (processedData) {
	        this.count = processedData.count;
	        this.dataSet = processedData.dataSet;
	        this.filteredDataSet = processedData.filteredDataSet;
	    };
	    DataSourceBase.prototype.onSortChange = function () {
	        if (!this.loadingDataSet) {
	            this.filteredDataSet = this.dataSourceProcessor.sort(this.filteredDataSet, this.sorts);
	            this.dataSet = this.dataSourceProcessor.page(this.filteredDataSet, this.pager);
	            this.observable.fire(events.redrawing);
	        }
	    };
	    DataSourceBase.prototype.onPagingChange = function () {
	        if (!this.loadingDataSet) {
	            this.dataSet = this.dataSourceProcessor.page(this.filteredDataSet, this.pager);
	            this.observable.fire(events.redrawing);
	        }
	    };
	    DataSourceBase.prototype.refresh = function () {
	        if (!this.loadingDataSet) {
	            this.processData();
	            this.observable.fire(events.redrawing);
	        }
	    };
	    DataSourceBase.prototype.remove = function (data) {
	        var item = this.array.remove(this.rawDataSet, data);
	        if (item != null) {
	            this.observable.fire(events.removed);
	            this.observable.fire(events.changed);
	            if (this.pager) {
	                this.refresh();
	            }
	        }
	    };
	    DataSourceBase.prototype.push = function (data) {
	        this.rawDataSet.push(data);
	        this.observable.fire(events.added);
	        this.observable.fire(events.changed);
	        this.refresh();
	    };
	    DataSourceBase.prototype.replace = function (oldData, newData) {
	        var locationOfOldData = this.rawDataSet.indexOf(oldData);
	        if (locationOfOldData >= 0) {
	            this.array.replace(this.rawDataSet, oldData, newData);
	            this.observable.fire(events.replaced);
	            this.observable.fire(events.changed);
	            this.refresh();
	        }
	    };
	    return DataSourceBase;
	}());
	exports.DataSourceBase = DataSourceBase;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVNvdXJjZUJhc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGFTb3VyY2VCYXNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsNkNBQWtDLDhCQUE4QixDQUFDLENBQUE7QUFHakUsSUFBTyxRQUFRLEdBQUcsdUNBQVEsQ0FBQyxNQUFNLENBQUM7QUFNbEMsSUFBWSxNQUFNLFdBQU0sb0JBQW9CLENBQUMsQ0FBQTtBQUU3QztJQWdCQyx3QkFBWSxpQkFBeUQsRUFDekQsbUJBQXlDLEVBQ3ZDLEtBQTRCO1FBRDlCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBc0I7UUFDdkMsVUFBSyxHQUFMLEtBQUssQ0FBdUI7UUFkMUMsVUFBSyxHQUFZLEVBQUUsQ0FBQztRQUNwQixZQUFPLEdBQXNCLEVBQUUsQ0FBQztRQUVoQyxVQUFLLEdBQVcsQ0FBQyxDQUFDO1FBRWxCLHNCQUFpQixHQUFZLEtBQUssQ0FBQztRQUVuQyxtQkFBYyxHQUFZLEtBQUssQ0FBQztRQVEvQixJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDOUMsQ0FBQztJQUVELDhCQUFLLEdBQUwsVUFBbUIsTUFBeUMsRUFBRSxLQUFjO1FBQzNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELHNCQUFJLDhDQUFrQjthQUF0QjtZQUNDLElBQUksZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFFLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLENB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

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(14);
	exports.redrawing = 'redrawing';
	exports.changed = 'changed';
	exports.added = 'added';
	exports.removed = 'removed';
	exports.replaced = 'replaced';
	exports.all = [exports.redrawing, exports.changed, exports.added, exports.removed, exports.replaced];
	exports.async = {
	    reloaded: 'reloaded',
	    all: [],
	};
	exports.async.all = _.clone(exports.all);
	exports.async.all.push(exports.async.reloaded);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVNvdXJjZUV2ZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGFTb3VyY2VFdmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFakIsaUJBQVMsR0FBVyxXQUFXLENBQUM7QUFDaEMsZUFBTyxHQUFXLFNBQVMsQ0FBQztBQUM1QixhQUFLLEdBQVcsT0FBTyxDQUFDO0FBQ3hCLGVBQU8sR0FBVyxTQUFTLENBQUM7QUFDNUIsZ0JBQVEsR0FBVyxVQUFVLENBQUM7QUFFOUIsV0FBRyxHQUFhLENBQUMsaUJBQVMsRUFBRSxlQUFPLEVBQUUsYUFBSyxFQUFFLGVBQU8sRUFBRSxnQkFBUSxDQUFDLENBQUM7QUFRL0QsYUFBSyxHQUFpQjtJQUNoQyxRQUFRLEVBQUUsVUFBVTtJQUVwQixHQUFHLEVBQUUsRUFBRTtDQUNQLENBQUM7QUFFRixhQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBRyxDQUFDLENBQUM7QUFDekIsYUFBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDIn0=

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __object = typescript_angular_utilities_1.services.object;
	var sorter_service_1 = __webpack_require__(19);
	exports.processorServiceName = 'dataSourceProcessor';
	var DataSourceProcessor = (function () {
	    function DataSourceProcessor(object, sorter) {
	        this.object = object;
	        this.sorter = sorter;
	    }
	    DataSourceProcessor.prototype.process = function (sorts, filters, pager, data) {
	        var processedData = data;
	        processedData = this.sort(processedData, sorts);
	        if (this.object.isNullOrEmpty(filters) === false) {
	            processedData = _.reduce(filters, function (filteredData, filter) {
	                // Filter the data set using the filter function on the filter
	                return _.filter(filteredData, filter.filter.bind(filter));
	            }, processedData);
	        }
	        var result = {
	            count: (processedData != null ? processedData.length : 0),
	            filteredDataSet: processedData,
	            dataSet: processedData,
	        };
	        result.dataSet = this.page(processedData, pager);
	        return result;
	    };
	    DataSourceProcessor.prototype.processAndCount = function (sorts, filters, pager, data) {
	        var _this = this;
	        // If there are no filters that need to updated option counts, use the normal processor
	        if (this.object.isNullOrEmpty(filters)
	            || _.some(filters, function (filter) { return _.isFunction(filter.updateOptionCounts); }) === false) {
	            return this.process(sorts, filters, pager, data);
	        }
	        var processedData = data;
	        processedData = this.sort(processedData, sorts);
	        var wrappedData = this.wrapData(processedData);
	        // Run filtration logic and compute visible items
	        _.each(filters, function (filter /* filters.IFilterWithCounts */) {
	            _.each(wrappedData, function (item) {
	                item.filterData[filter.type] = filter.filter(item.data);
	            });
	        });
	        // Give each filter a chance to update option counts
	        _.each(filters, function (filter /* filters.IFilterWithCounts */) {
	            if (_.isFunction(filter.updateOptionCounts)) {
	                var otherFiltersApplied = _.filter(wrappedData, function (item) {
	                    // Omit the true or false of the current filter an
	                    //  only filter out items removed by other filters
	                    var filterData = _.omit(item.filterData, filter.type); //*filterData
	                    return _.every(_.values(filterData));
	                });
	                filter.updateOptionCounts(_this.unwrapData(otherFiltersApplied));
	            }
	        });
	        // Filter down to final data set by removing items that don't match all filters
	        wrappedData = _.filter(wrappedData, function (item) {
	            return _.every(_.values(item.filterData));
	        });
	        processedData = this.unwrapData(wrappedData);
	        var result = {
	            count: processedData.length,
	            filteredDataSet: processedData,
	            dataSet: processedData,
	        };
	        result.dataSet = this.page(processedData, pager);
	        return result;
	    };
	    DataSourceProcessor.prototype.sort = function (data, sorts) {
	        if (this.object.isNullOrEmpty(sorts) === false) {
	            return this.sorter.sort(data, sorts);
	        }
	        return data;
	    };
	    DataSourceProcessor.prototype.page = function (data, pager) {
	        if (pager != null) {
	            return pager.filter(data);
	        }
	        return data;
	    };
	    DataSourceProcessor.prototype.wrapData = function (data) {
	        return _.map(data, function (item) {
	            return {
	                data: item,
	                filterData: {},
	            };
	        });
	    };
	    DataSourceProcessor.prototype.unwrapData = function (data) {
	        return _.map(data, function (item) {
	            return item.data;
	        });
	    };
	    DataSourceProcessor.$inject = [__object.serviceName, sorter_service_1.serviceName];
	    return DataSourceProcessor;
	}());
	exports.DataSourceProcessor = DataSourceProcessor;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVNvdXJjZVByb2Nlc3Nvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0YVNvdXJjZVByb2Nlc3Nvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQVksQ0FBQyxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBRTVCLDZDQUFrQyw4QkFBOEIsQ0FBQyxDQUFBO0FBQ2pFLElBQU8sUUFBUSxHQUFHLHVDQUFRLENBQUMsTUFBTSxDQUFDO0FBSWxDLCtCQUdPLGdDQUFnQyxDQUFDLENBQUE7QUFFN0IsNEJBQW9CLEdBQVcscUJBQXFCLENBQUM7QUEwQmhFO0lBRUMsNkJBQW9CLE1BQStCLEVBQ3ZDLE1BQWU7UUFEUCxXQUFNLEdBQU4sTUFBTSxDQUF5QjtRQUN2QyxXQUFNLEdBQU4sTUFBTSxDQUFTO0lBQUksQ0FBQztJQUVoQyxxQ0FBTyxHQUFQLFVBQW1CLEtBQWMsRUFDM0IsT0FBMEIsRUFDMUIsS0FBaUIsRUFDakIsSUFBaUI7UUFDdEIsSUFBSSxhQUFhLEdBQWdCLElBQUksQ0FBQztRQUV0QyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFaEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNsRCxhQUFhLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBQyxZQUF5QixFQUFFLE1BQXVCO2dCQUNwRiw4REFBOEQ7Z0JBQzlELE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzNELENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNuQixDQUFDO1FBRUQsSUFBSSxNQUFNLEdBQThC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

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../../typings/lodashTypeExtensions.d.ts' />
	'use strict';
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.dataPager';
	exports.factoryName = 'dataPager';
	exports.defaultPageSize = 10;
	var DataPager = (function () {
	    function DataPager() {
	        this.pageNumber = 1;
	        this.pageSize = exports.defaultPageSize;
	    }
	    Object.defineProperty(DataPager.prototype, "startItem", {
	        get: function () {
	            return (this.pageNumber - 1) * this.pageSize;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataPager.prototype.filter = function (dataSet) {
	        return _(dataSet)
	            .drop(this.startItem)
	            .take(this.pageSize)
	            .value();
	    };
	    return DataPager;
	}());
	exports.DataPager = DataPager;
	function dataPagerFactory() {
	    'use strict';
	    return {
	        getInstance: function () {
	            return new DataPager();
	        },
	    };
	}
	exports.dataPagerFactory = dataPagerFactory;
	angular.module(exports.moduleName, [])
	    .factory(exports.factoryName, dataPagerFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVBhZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhUGFnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0RUFBNEU7QUFFNUUsWUFBWSxDQUFDO0FBRWIsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDbkMsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFakIsa0JBQVUsR0FBVyxzREFBc0QsQ0FBQztBQUM1RSxtQkFBVyxHQUFXLFdBQVcsQ0FBQztBQUVsQyx1QkFBZSxHQUFXLEVBQUUsQ0FBQztBQVN4QztJQUFBO1FBQ0MsZUFBVSxHQUFXLENBQUMsQ0FBQztRQUN2QixhQUFRLEdBQVcsdUJBQWUsQ0FBQztJQVlwQyxDQUFDO0lBVkEsc0JBQUksZ0NBQVM7YUFBYjtZQUNDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QyxDQUFDOzs7T0FBQTtJQUVELDBCQUFNLEdBQU4sVUFBTyxPQUFjO1FBQ3BCLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDbkIsS0FBSyxFQUFFLENBQUM7SUFDWCxDQUFDO0lBQ0YsZ0JBQUM7QUFBRCxDQUFDLEFBZEQsSUFjQztBQWRZLGlCQUFTLFlBY3JCLENBQUE7QUFNRDtJQUNDLFlBQVksQ0FBQztJQUNiLE1BQU0sQ0FBQztRQUNOLFdBQVc7WUFDVixNQUFNLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUN4QixDQUFDO0tBQ0QsQ0FBQztBQUNILENBQUM7QUFQZSx3QkFBZ0IsbUJBTy9CLENBQUE7QUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLGtCQUFVLEVBQUUsRUFBRSxDQUFDO0tBQzVCLE9BQU8sQ0FBQyxtQkFBVyxFQUFFLGdCQUFnQixDQUFDLENBQUMifQ==

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var __synchronizedRequests = typescript_angular_utilities_1.services.synchronizedRequests;
	var asyncDataSource_service_1 = __webpack_require__(23);
	var dataSourceProcessor_service_1 = __webpack_require__(26);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.dataServiceDataSource';
	exports.factoryName = 'dataServiceDataSource';
	var DataServiceDataSource = (function (_super) {
	    __extends(DataServiceDataSource, _super);
	    function DataServiceDataSource(getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory) {
	        _super.call(this, getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory);
	        this.countFilterGroups = true;
	        if (_.isFunction(getDataSet)) {
	            this.reload();
	        }
	    }
	    return DataServiceDataSource;
	}(asyncDataSource_service_1.AsyncDataSource));
	exports.DataServiceDataSource = DataServiceDataSource;
	dataServiceDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName, __synchronizedRequests.factoryName];
	function dataServiceDataSourceFactory(observableFactory, dataSourceProcessor, array, synchronizedRequests) {
	    'use strict';
	    return {
	        getInstance: function (getDataSet) {
	            return new DataServiceDataSource(getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequests);
	        },
	    };
	}
	exports.dataServiceDataSourceFactory = dataServiceDataSourceFactory;
	angular.module(exports.moduleName, [__observable.moduleName, __array.moduleName])
	    .factory(exports.factoryName, dataServiceDataSourceFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVNlcnZpY2VEYXRhU291cmNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhU2VydmljZURhdGFTb3VyY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7OztBQUViLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBQ25DLElBQVksQ0FBQyxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBRTVCLDZDQUF5Qiw4QkFBOEIsQ0FBQyxDQUFBO0FBQ3hELElBQU8sWUFBWSxHQUFHLHVDQUFRLENBQUMsVUFBVSxDQUFDO0FBQzFDLElBQU8sT0FBTyxHQUFHLHVDQUFRLENBQUMsS0FBSyxDQUFDO0FBQ2hDLElBQU8sc0JBQXNCLEdBQUcsdUNBQVEsQ0FBQyxvQkFBb0IsQ0FBQztBQUU5RCx3Q0FBb0UsNEJBQTRCLENBQUMsQ0FBQTtBQUNqRyw0Q0FBMkQsZ0NBQWdDLENBQUMsQ0FBQTtBQUVqRixrQkFBVSxHQUFXLGtFQUFrRSxDQUFDO0FBQ3hGLG1CQUFXLEdBQVcsdUJBQXVCLENBQUM7QUFRekQ7SUFBc0QseUNBQTBCO0lBQy9FLCtCQUFZLFVBQTJDLEVBQ25ELGlCQUF5RCxFQUN6RCxtQkFBeUMsRUFDekMsS0FBNEIsRUFDNUIsMkJBQWdGO1FBQ25GLGtCQUFNLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUM5RixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBRTlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNmLENBQUM7SUFDRixDQUFDO0lBQ0YsNEJBQUM7QUFBRCxDQUFDLEFBYkQsQ0FBc0QseUNBQWUsR0FhcEU7QUFiWSw2QkFBcUIsd0JBYWpDLENBQUE7QUFNRCw0QkFBNEIsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLGtEQUFvQixFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUUsc0JBQXNCLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDakosc0NBQTZDLGlCQUF5RCxFQUMxRixtQkFBeUMsRUFDekMsS0FBNEIsRUFDNUIsb0JBQXlFO0lBQ3BGLFlBQVksQ0FBQztJQUNiLE1BQU0sQ0FBQztRQUNOLFdBQVcsWUFBWSxVQUEyQztZQUNqRSxNQUFNLENBQUMsSUFBSSxxQkFBcUIsQ0FBaUIsVUFBVSxFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixFQUFFLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ25JLENBQUM7S0FDRCxDQUFDO0FBQ0gsQ0FBQztBQVZlLG9DQUE0QiwrQkFVM0MsQ0FBQTtBQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQVUsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3ZFLE9BQU8sQ0FBQyxtQkFBVyxFQUFFLDRCQUE0QixDQUFDLENBQUMifQ==

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var __object = typescript_angular_utilities_1.services.object;
	var __synchronizedRequests = typescript_angular_utilities_1.services.synchronizedRequests;
	var asyncDataSource_service_1 = __webpack_require__(23);
	var dataSourceProcessor_service_1 = __webpack_require__(26);
	var sort_1 = __webpack_require__(21);
	var events = __webpack_require__(25);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.serverSideDataSource';
	exports.factoryName = 'serverSideDataSource';
	var ServerSideDataSource = (function (_super) {
	    __extends(ServerSideDataSource, _super);
	    function ServerSideDataSource(getDataSet, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	        _super.call(this, getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory);
	        this.object = object;
	    }
	    ServerSideDataSource.prototype.refresh = function () {
	        this.reload();
	    };
	    ServerSideDataSource.prototype.getParams = function () {
	        var filterDictionary = this.array.toDictionary(this.filters, function (filter) {
	            return filter.type;
	        });
	        return {
	            filters: _.mapValues(filterDictionary, function (filter) {
	                if (_.isFunction(filter.serialize)) {
	                    return filter.serialize();
	                }
	                return null;
	            }),
	            sorts: _.map(this.sorts, function (sort) {
	                return {
	                    column: sort.column.label,
	                    direction: sort_1.SortDirection.getFullName(sort.direction),
	                };
	            }),
	            paging: {
	                pageNumber: this.pager.pageNumber,
	                pageSize: this.pager.pageSize,
	            },
	        };
	    };
	    ServerSideDataSource.prototype.resolveReload = function (result) {
	        var data = result;
	        _super.prototype.resolveReload.call(this, data.dataSet);
	        this.setProcessedData({
	            count: data.count,
	            filteredDataSet: data.dataSet,
	            dataSet: data.dataSet,
	        });
	        this.observable.fire(events.redrawing);
	    };
	    return ServerSideDataSource;
	}(asyncDataSource_service_1.AsyncDataSource));
	exports.ServerSideDataSource = ServerSideDataSource;
	serverSideDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName, __object.serviceName, __synchronizedRequests.factoryName];
	function serverSideDataSourceFactory(observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	    'use strict';
	    return {
	        getInstance: function (getDataSet) {
	            return new ServerSideDataSource(getDataSet, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory);
	        },
	    };
	}
	exports.serverSideDataSourceFactory = serverSideDataSourceFactory;
	angular.module(exports.moduleName, [])
	    .factory(exports.factoryName, serverSideDataSourceFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyU2lkZURhdGFTb3VyY2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlcnZlclNpZGVEYXRhU291cmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7QUFFYixJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUNuQyxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUU1Qiw2Q0FBa0MsOEJBQThCLENBQUMsQ0FBQTtBQUNqRSxJQUFPLFlBQVksR0FBRyx1Q0FBUSxDQUFDLFVBQVUsQ0FBQztBQUMxQyxJQUFPLE9BQU8sR0FBRyx1Q0FBUSxDQUFDLEtBQUssQ0FBQztBQUNoQyxJQUFPLFFBQVEsR0FBRyx1Q0FBUSxDQUFDLE1BQU0sQ0FBQztBQUNsQyxJQUFPLHNCQUFzQixHQUFHLHVDQUFRLENBQUMsb0JBQW9CLENBQUM7QUFFOUQsd0NBQW9FLDRCQUE0QixDQUFDLENBQUE7QUFDakcsNENBQTJELGdDQUFnQyxDQUFDLENBQUE7QUFDNUYscUJBQXFDLGtCQUFrQixDQUFDLENBQUE7QUFDeEQsSUFBWSxNQUFNLFdBQU0scUJBQXFCLENBQUMsQ0FBQTtBQUVuQyxrQkFBVSxHQUFXLGlFQUFpRSxDQUFDO0FBQ3ZGLG1CQUFXLEdBQVcsc0JBQXNCLENBQUM7QUErQnhEO0lBQXFELHdDQUEwQjtJQUM5RSw4QkFBWSxVQUE0QyxFQUNwRCxpQkFBeUQsRUFDekQsbUJBQXlDLEVBQ3pDLEtBQTRCLEVBQ3BCLE1BQStCLEVBQ3ZDLDJCQUFnRjtRQUNuRixrQkFBVyxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLDJCQUEyQixDQUFDLENBQUM7UUFGeEYsV0FBTSxHQUFOLE1BQU0sQ0FBeUI7SUFHM0MsQ0FBQztJQUVELHNDQUFPLEdBQVA7UUFDQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDZixDQUFDO0lBRVMsd0NBQVMsR0FB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

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(16);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var dataSourceBase_service_1 = __webpack_require__(24);
	var dataSourceProcessor_service_1 = __webpack_require__(26);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.simpleDataSource';
	exports.factoryName = 'simpleDataSource';
	var SimpleDataSource = (function (_super) {
	    __extends(SimpleDataSource, _super);
	    function SimpleDataSource(data, observableFactory, dataSourceProcessor, array) {
	        _super.call(this, observableFactory, dataSourceProcessor, array);
	        this.countFilterGroups = false;
	        this.rawDataSet = data;
	        this.processData();
	    }
	    return SimpleDataSource;
	}(dataSourceBase_service_1.DataSourceBase));
	exports.SimpleDataSource = SimpleDataSource;
	simpleDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName];
	function simpleDataSourceFactory(observableFactory, dataSourceProcessor, array) {
	    'use strict';
	    return {
	        getInstance: function (data) {
	            return new SimpleDataSource(data, observableFactory, dataSourceProcessor, array);
	        },
	    };
	}
	exports.simpleDataSourceFactory = simpleDataSourceFactory;
	angular.module(exports.moduleName, [__observable.moduleName, __array.moduleName])
	    .factory(exports.factoryName, simpleDataSourceFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlRGF0YVNvdXJjZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2ltcGxlRGF0YVNvdXJjZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7O0FBRWIsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFbkMsNkNBQXlCLDhCQUE4QixDQUFDLENBQUE7QUFDeEQsSUFBTyxZQUFZLEdBQUcsdUNBQVEsQ0FBQyxVQUFVLENBQUM7QUFDMUMsSUFBTyxPQUFPLEdBQUcsdUNBQVEsQ0FBQyxLQUFLLENBQUM7QUFHaEMsdUNBQStCLDJCQUEyQixDQUFDLENBQUE7QUFDM0QsNENBQTJELGdDQUFnQyxDQUFDLENBQUE7QUFFakYsa0JBQVUsR0FBVyw2REFBNkQsQ0FBQztBQUNuRixtQkFBVyxHQUFXLGtCQUFrQixDQUFDO0FBRXBEO0lBQWlELG9DQUF5QjtJQUN6RSwwQkFBWSxJQUFpQixFQUN6QixpQkFBeUQsRUFDekQsbUJBQXlDLEVBQ3pDLEtBQTRCO1FBQy9CLGtCQUFNLGlCQUFpQixFQUFFLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFDRix1QkFBQztBQUFELENBQUMsQUFWRCxDQUFpRCx1Q0FBYyxHQVU5RDtBQVZZLHdCQUFnQixtQkFVNUIsQ0FBQTtBQU1ELHVCQUF1QixDQUFDLE9BQU8sR0FBRyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsa0RBQW9CLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3hHLGlDQUF3QyxpQkFBeUQsRUFDbkYsbUJBQXlDLEVBQ3pDLEtBQTRCO0lBQ3pDLFlBQVksQ0FBQztJQUNiLE1BQU0sQ0FBQztRQUNOLFdBQVcsWUFBWSxJQUFpQjtZQUN2QyxNQUFNLENBQUMsSUFBSSxnQkFBZ0IsQ0FBWSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0YsQ0FBQztLQUNELENBQUM7QUFDSCxDQUFDO0FBVGUsK0JBQXVCLDBCQVN0QyxDQUFBO0FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBVSxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDdkUsT0FBTyxDQUFDLG1CQUFXLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyJ9

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var __object = typescript_angular_utilities_1.services.object;
	var __synchronizedRequests = typescript_angular_utilities_1.services.synchronizedRequests;
	var asyncDataSource_service_1 = __webpack_require__(23);
	var dataSourceProcessor_service_1 = __webpack_require__(26);
	var sort_1 = __webpack_require__(21);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.smartDataSource';
	exports.factoryName = 'smartDataSource';
	var SmartDataSource = (function (_super) {
	    __extends(SmartDataSource, _super);
	    function SmartDataSource(getDataSet, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	        _super.call(this, getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory);
	        this.object = object;
	        this.throttled = true;
	        this.throttleLimit = 200;
	    }
	    Object.defineProperty(SmartDataSource.prototype, "filters", {
	        get: function () {
	            return this._filters;
	        },
	        set: function (value) {
	            this._filters = value;
	            this.setupSubscriptions();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SmartDataSource.prototype.onSortChange = function () {
	        if (this.throttled) {
	            this.reload();
	        }
	        else {
	            _super.prototype.onSortChange.call(this);
	        }
	    };
	    SmartDataSource.prototype.refresh = function () {
	        if (this.throttled) {
	            this.reload();
	        }
	        else {
	            _super.prototype.refresh.call(this);
	        }
	    };
	    SmartDataSource.prototype.getParams = function () {
	        this.updateAppliedFilters();
	        return {
	            filters: this.appliedFilters,
	            sorts: _.map(this.sorts, function (sort) {
	                return {
	                    column: sort.column.label,
	                    direction: sort_1.SortDirection.getFullName(sort.direction),
	                };
	            }),
	            paging: {
	                pageNumber: 1,
	                pageSize: this.throttleLimit,
	            },
	        };
	    };
	    SmartDataSource.prototype.updateAppliedFilters = function () {
	        var filterDictionary = this.array.toDictionary(this.filters, function (filter) {
	            return filter.type;
	        });
	        this.appliedFilters = _.mapValues(filterDictionary, function (filter) {
	            if (_.isFunction(filter.serialize)) {
	                return filter.serialize();
	            }
	            return null;
	        });
	        this.appliedFilters = _.omitBy(this.appliedFilters, function (value) { return value == null; });
	    };
	    SmartDataSource.prototype.setupSubscriptions = function () {
	        var _this = this;
	        _.each(this.subscriptions, function (subscription) {
	            subscription.dispose();
	        });
	        this.subscriptions = [];
	        _.each(this.filters, function (filter) {
	            if (_.isFunction(filter.subscribe)) {
	                _this.subscriptions.push(filter.subscribe(function () { _this.onFilterChange(filter); }));
	            }
	        });
	    };
	    SmartDataSource.prototype.onFilterChange = function (filter) {
	        if (_.has(this.appliedFilters, filter.type)) {
	            this.reload();
	        }
	    };
	    SmartDataSource.prototype.resolveReload = function (result) {
	        var data = result;
	        this.throttled = (data.count > data.dataSet.length);
	        _super.prototype.resolveReload.call(this, data.dataSet);
	        this.count = data.count;
	        this.isEmpty = data.isEmpty;
	    };
	    return SmartDataSource;
	}(asyncDataSource_service_1.AsyncDataSource));
	exports.SmartDataSource = SmartDataSource;
	smartDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName, __object.serviceName, __synchronizedRequests.factoryName];
	function smartDataSourceFactory(observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	    'use strict';
	    return {
	        getInstance: function (getDataSet) {
	            return new SmartDataSource(getDataSet, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory);
	        },
	    };
	}
	exports.smartDataSourceFactory = smartDataSourceFactory;
	angular.module(exports.moduleName, [])
	    .factory(exports.factoryName, smartDataSourceFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnREYXRhU291cmNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzbWFydERhdGFTb3VyY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7OztBQUViLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBQ25DLElBQVksQ0FBQyxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBRzVCLDZDQUFrQyw4QkFBOEIsQ0FBQyxDQUFBO0FBQ2pFLElBQU8sWUFBWSxHQUFHLHVDQUFRLENBQUMsVUFBVSxDQUFDO0FBQzFDLElBQU8sT0FBTyxHQUFHLHVDQUFRLENBQUMsS0FBSyxDQUFDO0FBQ2hDLElBQU8sUUFBUSxHQUFHLHVDQUFRLENBQUMsTUFBTSxDQUFDO0FBQ2xDLElBQU8sc0JBQXNCLEdBQUcsdUNBQVEsQ0FBQyxvQkFBb0IsQ0FBQztBQUU5RCx3Q0FBb0UsNEJBQTRCLENBQUMsQ0FBQTtBQUNqRyw0Q0FBMkQsZ0NBQWdDLENBQUMsQ0FBQTtBQUM1RixxQkFBcUMsa0JBQWtCLENBQUMsQ0FBQTtBQUU3QyxrQkFBVSxHQUFXLDREQUE0RCxDQUFDO0FBQ2xGLG1CQUFXLEdBQVcsaUJBQWlCLENBQUM7QUFnQ25EO0lBQWdELG1DQUEwQjtJQU96RSx5QkFBWSxVQUE0QyxFQUNwRCxpQkFBeUQsRUFDekQsbUJBQXlDLEVBQ3pDLEtBQTRCLEVBQ3BCLE1BQStCLEVBQ3ZDLDJCQUFnRjtRQUNuRixrQkFBVyxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLDJCQUEyQixDQUFDLENBQUM7UUFGeEYsV0FBTSxHQUFOLE1BQU0sQ0FBeUI7UUFWM0MsY0FBUyxHQUFZLElBQUksQ0FBQztRQUlsQixrQkFBYSxHQUFXLEdBQUcsQ0FBQztJQVNwQyxDQUFDO0lBRUQsc0JBQUksb0NBQU87YUFBWDtZQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3RCLENB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

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(16);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var filterOption = __webpack_require__(33);
	exports.filterOption = filterOption;
	var modeFilterGroup = __webpack_require__(35);
	exports.modeFilterGroup = modeFilterGroup;
	var rangeFilterGroup = __webpack_require__(37);
	exports.rangeFilterGroup = rangeFilterGroup;
	var filterGroup_service_1 = __webpack_require__(36);
	var filterGroup_directive_1 = __webpack_require__(38);
	__export(__webpack_require__(38));
	__export(__webpack_require__(36));
	exports.moduleName = 'rl.ui.components.cardContainer.filters.filterGroup';
	angular.module(exports.moduleName, [
	    typescript_angular_utilities_1.services.object.moduleName,
	    filterOption.moduleName,
	    modeFilterGroup.moduleName,
	    rangeFilterGroup.moduleName,
	])
	    .factory(filterGroup_service_1.factoryName, filterGroup_service_1.filterGroupFactory)
	    .component(filterGroup_directive_1.componentName, filterGroup_directive_1.filterGroup)
	    .controller(filterGroup_directive_1.controllerName, filterGroup_directive_1.FilterGroupController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyR3JvdXAubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsdGVyR3JvdXAubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztBQUViLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBQ25DLDZDQUF5Qiw4QkFBOEIsQ0FBQyxDQUFBO0FBRXhELElBQVksWUFBWSxXQUFNLDZCQUE2QixDQUFDLENBQUE7QUFLM0Qsb0JBQVk7QUFKYixJQUFZLGVBQWUsV0FBTSwyQ0FBMkMsQ0FBQyxDQUFBO0FBSzVFLHVCQUFlO0FBSmhCLElBQVksZ0JBQWdCLFdBQU0sNkNBQTZDLENBQUMsQ0FBQTtBQUsvRSx3QkFBZ0I7QUFHakIsb0NBQWdELHVCQUF1QixDQUFDLENBQUE7QUFDeEUsc0NBQWtGLHlCQUF5QixDQUFDLENBQUE7QUFFNUcsaUJBQWMseUJBQXlCLENBQUMsRUFBQTtBQUN4QyxpQkFBYyx1QkFBdUIsQ0FBQyxFQUFBO0FBRTNCLGtCQUFVLEdBQVcsb0RBQW9ELENBQUM7QUFFckYsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBVSxFQUFFO0lBQzFCLHVDQUFRLENBQUMsTUFBTSxDQUFDLFVBQVU7SUFFMUIsWUFBWSxDQUFDLFVBQVU7SUFDdkIsZUFBZSxDQUFDLFVBQVU7SUFDMUIsZ0JBQWdCLENBQUMsVUFBVTtDQUMzQixDQUFDO0tBQ0EsT0FBTyxDQUFDLGlDQUFXLEVBQUUsd0NBQWtCLENBQUM7S0FDeEMsU0FBUyxDQUFDLHFDQUFhLEVBQUUsbUNBQVcsQ0FBQztLQUNyQyxVQUFVLENBQUMsc0NBQWMsRUFBRSw2Q0FBcUIsQ0FBQyxDQUFDIn0=

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(16);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.filterGroup.filterOption';
	exports.componentName = 'rlFilterOption';
	var filterOption = {
	    template: __webpack_require__(34),
	    controllerAs: 'filter',
	    bindings: {
	        activate: '&',
	        isActive: '=active',
	        option: '=',
	    },
	};
	angular.module(exports.moduleName, [])
	    .component(exports.componentName, filterOption);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyT3B0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsdGVyT3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1FQUFtRTtBQUVuRSxZQUFZLENBQUM7QUFDYixJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUV4QixrQkFBVSxHQUFXLGlFQUFpRSxDQUFDO0FBQ3ZGLHFCQUFhLEdBQVcsZ0JBQWdCLENBQUM7QUFFcEQsSUFBSSxZQUFZLEdBQThCO0lBQzdDLFFBQVEsRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUM7SUFDeEMsWUFBWSxFQUFFLFFBQVE7SUFDdEIsUUFBUSxFQUFFO1FBQ1QsUUFBUSxFQUFFLEdBQUc7UUFDYixRQUFRLEVBQUUsU0FBUztRQUNuQixNQUFNLEVBQUUsR0FBRztLQUNYO0NBQ0QsQ0FBQztBQUVGLE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQVUsRUFBRSxFQUFFLENBQUM7S0FDNUIsU0FBUyxDQUFDLHFCQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMifQ==

/***/ },
/* 34 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row filter-option\" ng-class=\"{ 'active': filter.isActive }\" ng-click=\"filter.activate()\">\r\n\t<div class=\"col-xs-1\">\r\n\t\t<i class='fa fa-arrow-right' ng-show=\"filter.isActive == true\"></i>\r\n\t</div>\r\n\t<div class=\"col-xs-1\" ng-if=\"filter.hasIcon\" ng-bind-html=\"filter.option.icon\"></div>\r\n\t<div ng-class=\"{ 'col-xs-6': filter.hasIcon, 'col-xs-7': !filter.hasIcon }\">\r\n\t\t{{filter.option.label}}\r\n\t</div>\r\n\t<div class=\"col-xs-3 text-right\" ng-show=\"filter.option.count != null\">\r\n\t\t({{filter.option.count}})\r\n\t</div>\r\n</div>"

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __object = typescript_angular_utilities_1.services.object;
	var __transform = typescript_angular_utilities_1.services.transform.transform;
	var filterGroup_service_1 = __webpack_require__(36);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.filterGroup.modeFilterGroup';
	exports.factoryName = 'modeFilterGroup';
	var ModeFilterGroup = (function (_super) {
	    __extends(ModeFilterGroup, _super);
	    function ModeFilterGroup(settings, object) {
	        _super.call(this, settings, object);
	        this.getValue = settings.getValue;
	        settings.options = _.map(settings.options, this.buildModeOption.bind(this));
	        this.initOptions();
	    }
	    ModeFilterGroup.prototype.serialize = function () {
	        var activeOption = this.activeOption;
	        if (activeOption.displayAll) {
	            return null;
	        }
	        return activeOption.value;
	    };
	    ModeFilterGroup.prototype.buildModeOption = function (option) {
	        var _this = this;
	        var modeOption = option;
	        modeOption.filter = function (item) {
	            if (modeOption.displayAll) {
	                return true;
	            }
	            return __transform.getValue(item, _this.getValue) === modeOption.value;
	        };
	        return modeOption;
	    };
	    return ModeFilterGroup;
	}(filterGroup_service_1.FilterGroup));
	exports.ModeFilterGroup = ModeFilterGroup;
	modeFilterGroupFactory.$inject = [__object.serviceName];
	function modeFilterGroupFactory(object) {
	    'use strict';
	    return {
	        getInstance: function (settings) {
	            return new ModeFilterGroup(settings, object);
	        },
	    };
	}
	exports.modeFilterGroupFactory = modeFilterGroupFactory;
	angular.module(exports.moduleName, [__object.moduleName])
	    .factory(exports.factoryName, modeFilterGroupFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZUZpbHRlckdyb3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb2RlRmlsdGVyR3JvdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7OztBQUViLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBQ25DLElBQVksQ0FBQyxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBRTVCLDZDQUF5Qiw4QkFBOEIsQ0FBQyxDQUFBO0FBQ3hELElBQU8sUUFBUSxHQUFHLHVDQUFRLENBQUMsTUFBTSxDQUFDO0FBQ2xDLElBQU8sV0FBVyxHQUFHLHVDQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUVsRCxvQ0FBeUQsd0JBQXdCLENBQUMsQ0FBQTtBQUV2RSxrQkFBVSxHQUFXLG9FQUFvRSxDQUFDO0FBQzFGLG1CQUFXLEdBQVcsaUJBQWlCLENBQUM7QUF5Qm5EO0lBQXFDLG1DQUFXO0lBRy9DLHlCQUFZLFFBQXVDLEVBQUUsTUFBK0I7UUFDbkYsa0JBQVcsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxRQUFRLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQStDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxSCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELG1DQUFTLEdBQVQ7UUFDQyxJQUFJLFlBQVksR0FBMkIsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUM3RCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2IsQ0FBQztRQUNELE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0lBQzNCLENBQUM7SUFFTyx5Q0FBZSxHQUF2QixVQUF3QixNQUFpQztRQUF6RCxpQkFXQztRQVZBLElBQUksVUFBVSxHQUEyQixNQUFNLENBQUM7UUFDaEQsVUFBVSxDQUFDLE1BQU0sR0FBRyxVQUFDLElBQStCO1lBQ25ELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2IsQ0FBQztZQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssVUFBVSxDQUFDLEtBQUssQ0FBQztRQUN2RSxDQUFDLENBQUM7UUFFRixNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFDRixzQkFBQztBQUFELENBQUMsQUE5QkQsQ0FBcUMsaUNBQVcsR0E4Qi9DO0FBOUJZLHVCQUFlLGtCQThCM0IsQ0FBQTtBQU1ELHNCQUFzQixDQUFDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN4RCxnQ0FBdUMsTUFBK0I7SUFDckUsWUFBWSxDQUFDO0lBQ2IsTUFBTSxDQUFDO1FBQ04sV0FBVyxZQUFDLFFBQXVDO1lBQ2xELE1BQU0sQ0FBQyxJQUFJLGVBQWUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUMsQ0FBQztLQUNELENBQUM7QUFDSCxDQUFDO0FBUGUsOEJBQXNCLHlCQU9yQyxDQUFBO0FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBVSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQy9DLE9BQU8sQ0FBQyxtQkFBVyxFQUFFLHNCQUFzQixDQUFDLENBQUMifQ==

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __object = typescript_angular_utilities_1.services.object;
	exports.factoryName = 'filterGroup';
	var FilterGroup = (function (_super) {
	    __extends(FilterGroup, _super);
	    function FilterGroup(settings, object) {
	        _super.call(this);
	        this.settings = settings;
	        this.object = object;
	        this.template = '<rl-filter-group filter-group="filter" source="dataSource"></rl-filter-group>';
	        this.label = settings.label;
	        this.type = settings.type != null ? settings.type : settings.label;
	        this.initOptions();
	    }
	    FilterGroup.prototype.initOptions = function () {
	        var _this = this;
	        this.options = this.settings.options;
	        this.activeOption = this.setDefaultOption();
	        _.each(this.options, function (option) {
	            if (_.isUndefined(option.type)) {
	                option.type = option.label;
	            }
	            option.type = _this.object.toString(option.type).toLowerCase();
	        });
	    };
	    Object.defineProperty(FilterGroup.prototype, "activeOption", {
	        get: function () {
	            return this._activeOption;
	        },
	        set: function (value) {
	            this._activeOption = value;
	            this.onChange(false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FilterGroup.prototype.setDefaultOption = function () {
	        var defaultOption = this.options[0];
	        _.each(this.options, function (item) {
	            if (item.active != null && item.active === true) {
	                defaultOption = item;
	            }
	        });
	        return defaultOption;
	    };
	    FilterGroup.prototype.filter = function (item) {
	        return this.activeOption.filter(item);
	    };
	    FilterGroup.prototype.serialize = function () {
	        if (_.isFunction(this.settings.serialize)) {
	            return this.settings.serialize();
	        }
	        if (_.isFunction(this.activeOption.serialize)) {
	            return this.activeOption.serialize();
	        }
	        return this.activeOption.value;
	    };
	    FilterGroup.prototype.setActiveOption = function (index) {
	        if (index >= 0 && index < this.options.length) {
	            this.activeOption = this.options[index];
	        }
	    };
	    FilterGroup.prototype.setOptionCounts = function (counts) {
	        _.each(this.options, function (option) {
	            if (_.has(counts, option.type)) {
	                option.count = counts[option.type];
	            }
	        });
	    };
	    FilterGroup.prototype.updateOptionCounts = function (filteredDataSet) {
	        _.each(this.options, function (option) {
	            option.count = _.filter(filteredDataSet, option.filter.bind(option)).length;
	        });
	    };
	    return FilterGroup;
	}(typescript_angular_utilities_1.filters.SerializableFilter));
	exports.FilterGroup = FilterGroup;
	filterGroupFactory.$inject = [__object.serviceName];
	function filterGroupFactory(object) {
	    'use strict';
	    return {
	        getInstance: function (settings) {
	            return new FilterGroup(settings, object);
	        },
	    };
	}
	exports.filterGroupFactory = filterGroupFactory;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyR3JvdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbHRlckdyb3VwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7QUFHYixJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUU1Qiw2Q0FBa0MsOEJBQThCLENBQUMsQ0FBQTtBQUNqRSxJQUFPLFFBQVEsR0FBRyx1Q0FBUSxDQUFDLE1BQU0sQ0FBQztBQUV2QixtQkFBVyxHQUFXLGFBQWEsQ0FBQztBQStCL0M7SUFBaUMsK0JBQStCO0lBTy9ELHFCQUFvQixRQUE4QixFQUFVLE1BQStCO1FBQzFGLGlCQUFPLENBQUM7UUFEVyxhQUFRLEdBQVIsUUFBUSxDQUFzQjtRQUFVLFdBQU0sR0FBTixNQUFNLENBQXlCO1FBSDNGLGFBQVEsR0FBVywrRUFBK0UsQ0FBQztRQUtsRyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDbkUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxpQ0FBVyxHQUFYO1FBQUEsaUJBV0M7UUFWQSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFNUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQUMsTUFBcUI7WUFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxNQUFNLENBQUMsSUFBSSxHQUFH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

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __object = typescript_angular_utilities_1.services.object;
	var __transform = typescript_angular_utilities_1.services.transform.transform;
	var filterGroup_service_1 = __webpack_require__(36);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.filterGroup.rangeFilterGroup';
	exports.factoryName = 'rangeFilterGroup';
	var RangeFilterGroup = (function (_super) {
	    __extends(RangeFilterGroup, _super);
	    function RangeFilterGroup(settings, object) {
	        _super.call(this, settings, object);
	        this.getValue = settings.getValue;
	        settings.options = _.map(settings.options, this.buildRangeOption.bind(this));
	        this.initOptions();
	    }
	    RangeFilterGroup.prototype.serialize = function () {
	        var activeOption = this.activeOption;
	        if (this.isNullOption(activeOption)) {
	            return null;
	        }
	        return {
	            highInclusive: activeOption.highInclusive,
	            highExclusive: activeOption.highExclusive,
	            lowInclusive: activeOption.lowInclusive,
	            lowExclusive: activeOption.lowExclusive,
	        };
	    };
	    RangeFilterGroup.prototype.buildRangeOption = function (option) {
	        var _this = this;
	        var modeOption = option;
	        modeOption.filter = function (item) {
	            var value = __transform.getValue(item, _this.getValue);
	            var result = true;
	            if (_.isUndefined(option.highExclusive) === false) {
	                result = value < option.highExclusive;
	            }
	            else if (_.isUndefined(option.highInclusive) === false) {
	                result = value <= option.highInclusive;
	            }
	            if (_.isUndefined(option.lowExclusive) === false) {
	                result = result && value > option.lowExclusive;
	            }
	            else if (_.isUndefined(option.lowInclusive) === false) {
	                result = result && value >= option.lowInclusive;
	            }
	            return result;
	        };
	        return modeOption;
	    };
	    RangeFilterGroup.prototype.isNullOption = function (option) {
	        return option.highInclusive == null
	            && option.highExclusive == null
	            && option.lowInclusive == null
	            && option.lowExclusive == null;
	    };
	    return RangeFilterGroup;
	}(filterGroup_service_1.FilterGroup));
	rangeFilterGroupFactory.$inject = [__object.serviceName];
	function rangeFilterGroupFactory(object) {
	    'use strict';
	    return {
	        getInstance: function (settings) {
	            return new RangeFilterGroup(settings, object);
	        },
	    };
	}
	exports.rangeFilterGroupFactory = rangeFilterGroupFactory;
	angular.module(exports.moduleName, [__object.moduleName])
	    .factory(exports.factoryName, rangeFilterGroupFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2VGaWx0ZXJHcm91cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmFuZ2VGaWx0ZXJHcm91cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7O0FBRWIsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDbkMsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsNkNBQXlCLDhCQUE4QixDQUFDLENBQUE7QUFDeEQsSUFBTyxRQUFRLEdBQUcsdUNBQVEsQ0FBQyxNQUFNLENBQUM7QUFDbEMsSUFBTyxXQUFXLEdBQUcsdUNBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBRWxELG9DQUF5RCx3QkFBd0IsQ0FBQyxDQUFBO0FBRXZFLGtCQUFVLEdBQVcscUVBQXFFLENBQUM7QUFDM0YsbUJBQVcsR0FBVyxrQkFBa0IsQ0FBQztBQW9DcEQ7SUFBK0Isb0NBQVc7SUFHekMsMEJBQVksUUFBd0MsRUFBRSxNQUErQjtRQUNwRixrQkFBVyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQ2xDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBaUQsUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0gsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxvQ0FBUyxHQUFUO1FBQ0MsSUFBSSxZQUFZLEdBQTRCLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDOUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNiLENBQUM7UUFDRCxNQUFNLENBQUM7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

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../../typings/commonjs.d.ts' />
	'use strict';
	exports.componentName = 'rlFilterGroup';
	exports.controllerName = 'FilterGroupController';
	var FilterGroupController = (function () {
	    function FilterGroupController($scope) {
	        this.$scope = $scope;
	        this.hasIcon = this.icon != null && this.icon !== '';
	        this.showChildren = true;
	    }
	    FilterGroupController.prototype.toggleChildren = function () {
	        this.showChildren = !this.showChildren;
	    };
	    FilterGroupController.prototype.selectOption = function (option) {
	        this.filterGroup.activeOption = option;
	        this.showChildren = false;
	        if (this.source != null) {
	            this.source.refresh();
	        }
	        else {
	            this.$scope.$emit('dataSource.requestRefresh'); //*event?
	        }
	    };
	    FilterGroupController.$inject = ['$scope'];
	    return FilterGroupController;
	}());
	exports.FilterGroupController = FilterGroupController;
	exports.filterGroup = {
	    template: __webpack_require__(39),
	    controller: exports.controllerName,
	    controllerAs: 'controller',
	    bindings: {
	        icon: '=',
	        filterGroup: '=',
	        source: '=',
	    },
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyR3JvdXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsdGVyR3JvdXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdFQUFnRTtBQUVoRSxZQUFZLENBQUM7QUFVRixxQkFBYSxHQUFXLGVBQWUsQ0FBQztBQUN4QyxzQkFBYyxHQUFXLHVCQUF1QixDQUFDO0FBUTVEO0lBVUMsK0JBQW9CLE1BQXNCO1FBQXRCLFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7UUFDckQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVELDhDQUFjLEdBQWQ7UUFDQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDO0lBRUQsNENBQVksR0FBWixVQUFhLE1BQXFCO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUUxQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN2QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUMxRCxDQUFDO0lBQ0YsQ0FBQztJQW5CTSw2QkFBTyxHQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFvQnZDLDRCQUFDO0FBQUQsQ0FBQyxBQTdCRCxJQTZCQztBQTdCWSw2QkFBcUIsd0JBNkJqQyxDQUFBO0FBRVUsbUJBQVcsR0FBOEI7SUFDbkQsUUFBUSxFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztJQUNqRCxVQUFVLEVBQUUsc0JBQWM7SUFDMUIsWUFBWSxFQUFFLFlBQVk7SUFDMUIsUUFBUSxFQUFFO1FBQ1QsSUFBSSxFQUFFLEdBQUc7UUFDVCxXQUFXLEVBQUUsR0FBRztRQUNoQixNQUFNLEVBQUUsR0FBRztLQUNYO0NBQ0QsQ0FBQyJ9

/***/ },
/* 39 */
/***/ function(module, exports) {

	module.exports = "<div class=\"filter-group\">\r\n\t<div class=\"row filter-header\" ng-click=\"controller.toggleChildren()\">\r\n\t\t<div class=\"col-sm-12\">\r\n\t\t\t<i class=\"collapse-icon fa fa-caret-down fa-2x\" ng-show=\"controller.showChildren\" title=\"Hide filter list\"></i>\r\n\t\t\t<i class=\"collapse-icon fa fa-caret-right fa-2x\" ng-hide=\"controller.showChildren\" title=\"Show filter list\"></i>\r\n\t\t\t<div class=\"filter-option\">\r\n\t\t\t\t<div style=\"display:inline-block\" ng-show=\"controller.hasIcon\" ng-bind-html=\"controller.icon\"></div>\r\n\t\t\t\t<h4 style=\"display: inline-block\">{{controller.filterGroup.label}}: {{controller.filterGroup.activeOption.label}}</h4>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div ng-show=\"controller.showChildren\" ng-repeat=\"filterOption in controller.filterGroup.options\">\r\n\t\t<rl-filter-option option=\"filterOption\" active=\"filterGroup.activeOption === filterOption\" activate=\"controller.selectOption(filterOption)\"></rl-filter-option>\r\n\t</div>\r\n</div>\r\n"

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(16);
	var selectFilter_service_1 = __webpack_require__(41);
	var selectFilter_component_1 = __webpack_require__(42);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.selectFilter';
	__export(__webpack_require__(41));
	__export(__webpack_require__(42));
	angular.module(exports.moduleName, [])
	    .factory(selectFilter_service_1.factoryName, selectFilter_service_1.selectFilterFactory)
	    .component(selectFilter_component_1.componentName, selectFilter_component_1.selectFilter)
	    .controller(selectFilter_component_1.controllerName, selectFilter_component_1.SelectFilterController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0RmlsdGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlbGVjdEZpbHRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O0FBRWIsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFbkMscUNBQStDLHdCQUF3QixDQUFDLENBQUE7QUFDeEUsdUNBQWtGLDBCQUVsRixDQUFDLENBRjJHO0FBRWpHLGtCQUFVLEdBQVcscURBQXFELENBQUM7QUFDdEYsaUJBQWUsd0JBQXdCLENBQUMsRUFBQTtBQUN4QyxpQkFBYywwQkFFZCxDQUFDLEVBRnVDO0FBRXhDLE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQVUsRUFBRSxFQUUxQixDQUFDO0tBQ0EsT0FBTyxDQUFDLGtDQUFXLEVBQUUsMENBQW1CLENBQUM7S0FDekMsU0FBUyxDQUFDLHNDQUFhLEVBQUUscUNBQVksQ0FBQztLQUN0QyxVQUFVLENBQUMsdUNBQWMsRUFBRSwrQ0FBc0IsQ0FBQyxDQUFDIn0=

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __object = typescript_angular_utilities_1.services.object;
	var __transform = typescript_angular_utilities_1.services.transform.transform;
	exports.factoryName = 'rlSelectFilterFactory';
	var SelectFilter = (function () {
	    function SelectFilter(settings) {
	        this.type = 'selectFilter';
	        this.valueSelector = settings.valueSelector;
	        this.comparer = settings.comparer;
	        this.options = settings.options;
	        this.getOptions = settings.getOptions;
	        this.label = settings.label;
	        this.displayNameSelector = settings.displayNameSelector;
	        this.nullOption = settings.nullOption;
	        this.template = "<rl-select-filter filter=\"filter\" source=\"dataSource\" options=\"filter.options\" get-options=\"filter.getOptions()\"\n\t\t\t\t\t\t\t\t\t\t   label=\"{{filter.label}}\" selector=\"filter.displayNameSelector\" null-option=\"{{filter.nullOption}}\"></rl-select-filter>";
	    }
	    SelectFilter.prototype.filter = function (item) {
	        if (this.selectedValue == null) {
	            return true;
	        }
	        if (this.comparer != null) {
	            return this.comparer(this.getValue(item), this.selectedValue);
	        }
	        return __object.objectUtility.areEqual(this.getValue(item), this.selectedValue);
	    };
	    SelectFilter.prototype.getValue = function (item) {
	        return __transform.getValue(item, this.valueSelector);
	    };
	    return SelectFilter;
	}());
	function selectFilterFactory() {
	    return {
	        getInstance: function (settings) {
	            return new SelectFilter(settings);
	        },
	    };
	}
	exports.selectFilterFactory = selectFilterFactory;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0RmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZWxlY3RGaWx0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFHYiw2Q0FBZ0MsOEJBQThCLENBQUMsQ0FBQTtBQUMvRCxJQUFPLFFBQVEsR0FBRyx1Q0FBUSxDQUFDLE1BQU0sQ0FBQztBQUNsQyxJQUFPLFdBQVcsR0FBRyx1Q0FBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFFdkMsbUJBQVcsR0FBVyx1QkFBdUIsQ0FBQztBQXNCekQ7SUFlQyxzQkFBWSxRQUF1RDtRQWJuRSxTQUFJLEdBQVcsY0FBYyxDQUFDO1FBYzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUM1QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztRQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztRQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRywrUUFDa0gsQ0FBQztJQUNwSSxDQUFDO0lBRUQsNkJBQU0sR0FBTixVQUFPLElBQWU7UUFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVPLCtCQUFRLEdBQWhCLFVBQWlCLElBQWU7UUFDL0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUYsbUJBQUM7QUFBRCxDQUFDLEFBM0NELElBMkNDO0FBTUQ7SUFDQyxNQUFNLENBQUM7UUFDTixXQUFXLFlBQXlCLFFBQXVEO1lBQzFGLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBeUIsUUFBUSxDQUFDLENBQUM7UUFDM0QsQ0FBQztLQUNELENBQUM7QUFDSCxDQUFDO0FBTmUsMkJBQW1CLHNCQU1sQyxDQUFBIn0=

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../../typings/commonjs.d.ts' />
	'use strict';
	exports.componentName = 'rlSelectFilter';
	exports.controllerName = 'SelectFilterController';
	var SelectFilterController = (function () {
	    function SelectFilterController($scope) {
	        this.$scope = $scope;
	    }
	    Object.defineProperty(SelectFilterController.prototype, "selectedValue", {
	        get: function () {
	            return this.filter.selectedValue;
	        },
	        set: function (v) {
	            this.filter.selectedValue = v;
	            if (this.source != null) {
	                this.source.refresh();
	            }
	            else {
	                this.$scope.$emit('dataSource.requestRefresh'); //*event?
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SelectFilterController.$inject = ['$scope'];
	    return SelectFilterController;
	}());
	exports.SelectFilterController = SelectFilterController;
	exports.selectFilter = {
	    template: __webpack_require__(43),
	    controller: exports.controllerName,
	    controllerAs: 'filter',
	    bindings: {
	        filter: '<',
	        options: '<?',
	        getOptions: '&',
	        source: '<?',
	        label: '@',
	        selector: '<?',
	        nullOption: '@'
	    },
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0RmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlbGVjdEZpbHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0VBQWdFO0FBRWhFLFlBQVksQ0FBQztBQU1GLHFCQUFhLEdBQVcsZ0JBQWdCLENBQUM7QUFDekMsc0JBQWMsR0FBVyx3QkFBd0IsQ0FBQztBQWtCN0Q7SUFVQyxnQ0FBb0IsTUFBc0I7UUFBdEIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7SUFBSSxDQUFDO0lBRS9DLHNCQUFXLGlEQUFhO2FBQXhCO1lBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQ2xDLENBQUM7YUFDRCxVQUF5QixDQUFNO1lBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztZQUM5QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdkIsQ0FBQztZQUFBLElBQUksQ0FBQyxDQUFDO2dCQUNHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxTQUFTO1lBQzdELENBQUM7UUFDUixDQUFDOzs7T0FSQTtJQUxNLDhCQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQWM3Qiw2QkFBQztBQUFELENBQUMsQUF2QkQsSUF1QkM7QUF2QlksOEJBQXNCLHlCQXVCbEMsQ0FBQTtBQUVVLG9CQUFZLEdBQThCO0lBQ3BELFFBQVEsRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUM7SUFDeEMsVUFBVSxFQUFFLHNCQUFjO0lBQzFCLFlBQVksRUFBRSxRQUFRO0lBQ3RCLFFBQVEsRUFBRTtRQUNULE1BQU0sRUFBRSxHQUFHO1FBQ1gsT0FBTyxFQUFFLElBQUk7UUFDYixVQUFVLEVBQUUsR0FBRztRQUNmLE1BQU0sRUFBRSxJQUFJO1FBQ1osS0FBSyxFQUFFLEdBQUc7UUFDVixRQUFRLEVBQUUsSUFBSTtRQUNkLFVBQVUsRUFBRSxHQUFHO0tBQ2Y7Q0FDRCxDQUFDIn0=

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = "<div class=\"filter-group\">\r\n\t<rl-select ng-model=\"filter.selectedValue\" options=\"filter.options\" label=\"{{filter.label}}\"\r\n\t\t\t   selector=\"filter.selector\" get-options=\"filter.getOptions()\" null-option=\"{{filter.nullOption}}\"></rl-select>\r\n</div>"

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(16);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __date = typescript_angular_utilities_1.services.date;
	var dateFilter_service_1 = __webpack_require__(45);
	var dateFilter_component_1 = __webpack_require__(47);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.dateFilter';
	__export(__webpack_require__(45));
	__export(__webpack_require__(47));
	angular.module(exports.moduleName, [__date.moduleName])
	    .factory(dateFilter_service_1.factoryName, dateFilter_service_1.dateFilterFactory)
	    .component(dateFilter_component_1.componentName, dateFilter_component_1.dateFilter)
	    .controller(dateFilter_component_1.controllerName, dateFilter_component_1.DateFilterController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZUZpbHRlci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRlRmlsdGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7QUFFYixJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUVuQyw2Q0FBdUIsOEJBQThCLENBQUMsQ0FBQTtBQUN0RCxJQUFPLE1BQU0sR0FBRyx1Q0FBUSxDQUFDLElBQUksQ0FBQztBQUU5QixtQ0FBNkMsc0JBQXNCLENBQUMsQ0FBQTtBQUNwRSxxQ0FBOEUsd0JBQXdCLENBQUMsQ0FBQTtBQUU1RixrQkFBVSxHQUFXLG1EQUFtRCxDQUFDO0FBQ3BGLGlCQUFlLHNCQUFzQixDQUFDLEVBQUE7QUFDdEMsaUJBQWMsd0JBQXdCLENBQUMsRUFBQTtBQUV2QyxPQUFPLENBQUMsTUFBTSxDQUFDLGtCQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDN0MsT0FBTyxDQUFDLGdDQUFXLEVBQUUsc0NBQWlCLENBQUM7S0FDdkMsU0FBUyxDQUFDLG9DQUFhLEVBQUUsaUNBQVUsQ0FBQztLQUNwQyxVQUFVLENBQUMscUNBQWMsRUFBRSwyQ0FBb0IsQ0FBQyxDQUFDIn0=

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var moment = __webpack_require__(46);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __date = typescript_angular_utilities_1.services.date;
	var __transform = typescript_angular_utilities_1.services.transform.transform;
	exports.factoryName = 'rlDateFilterFactory';
	var DateFilter = (function () {
	    function DateFilter(settings, dateUtility) {
	        this.dateUtility = dateUtility;
	        this.valueSelector = settings.valueSelector;
	        this.type = settings.type;
	        this.clearButton = settings.clearButton;
	        this.includeDateRange = settings.includeDateRange;
	        this.includeTime = settings.includeTime != null ? settings.includeTime : false;
	        this.label = settings.label;
	        this.template = "<rl-date-filter filter=\"filter\" source=\"dataSource\" label=\"{{filter.label}}\" include-time=\"filter.includeTime\"\n\t\t\t\t\t\t\t\t\t     include-date-range=\"filter.includeDateRange\" clear-button=\"filter.clearButton\"></rl-date-filter>";
	    }
	    DateFilter.prototype.filter = function (item) {
	        if (!this.dateUtility.isDate(this.selectedDate1)) {
	            return true;
	        }
	        if (this.dateRange) {
	            var itemDate = this.getValue(item);
	            var selectedDate1 = void 0;
	            //have to set the selectedDate1 to a valid Date object for comparisons.
	            if (this.includeTime) {
	                selectedDate1 = moment(this.selectedDate1);
	            }
	            else {
	                //increase it by 1 days. to inlcude the selectec date in the range.
	                selectedDate1 = moment(this.selectedDate1).add(1, 'days');
	            }
	            return this.dateUtility.dateInRange(itemDate, this.selectedDate2, this.selectedDate1);
	        }
	        else {
	            if (this.includeTime) {
	                return this.dateUtility.sameDateTime(this.getValue(item), this.selectedDate1);
	            }
	            else {
	                return this.dateUtility.sameDate(this.getValue(item), this.selectedDate1);
	            }
	        }
	    };
	    DateFilter.prototype.getValue = function (item) {
	        return __transform.getValue(item, this.valueSelector);
	    };
	    return DateFilter;
	}());
	dateFilterFactory.$inject = [__date.serviceName];
	function dateFilterFactory(dateUtility) {
	    return {
	        getInstance: function (settings) {
	            return new DateFilter(settings, dateUtility);
	        },
	    };
	}
	exports.dateFilterFactory = dateFilterFactory;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZUZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0ZUZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUdiLElBQVksTUFBTSxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBRWpDLDZDQUFnQyw4QkFBOEIsQ0FBQyxDQUFBO0FBQy9ELElBQU8sTUFBTSxHQUFHLHVDQUFRLENBQUMsSUFBSSxDQUFDO0FBQzlCLElBQU8sV0FBVyxHQUFHLHVDQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUV2QyxtQkFBVyxHQUFXLHFCQUFxQixDQUFDO0FBdUJ2RDtJQWVDLG9CQUFZLFFBQTZCLEVBQVUsV0FBZ0M7UUFBaEMsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO1FBQ2xGLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUM1QyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7UUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUMvRSxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxxUEFDNkYsQ0FBQztJQUMvRyxDQUFDO0lBRUQsMkJBQU0sR0FBTixVQUFPLElBQVM7UUFDZixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNiLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNwQixJQUFJLFFBQVEsR0FBa0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNqRCxJQUFJLGFBQWEsU0FBZSxDQUFDO1lBRWpDLHVFQUF1RTtZQUN2RSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDdEIsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDNUMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNQLG1FQUFtRTtnQkFDbkUsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMzRCxDQUFDO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV2RixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQy9FLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDM0UsQ0FBQztRQUNGLENBQUM7SUFDRixDQUFDO0lBRU8sNkJBQVEsR0FBaEIsVUFBaUIsSUFBUztRQUN6QixNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRixpQkFBQztBQUFELENBQUMsQUF6REQsSUF5REM7QUFNRCxpQkFBaUIsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDakQsMkJBQWtDLFdBQWdDO0lBQ2pFLE1BQU0sQ0FBQztRQUNOLFdBQVcsWUFBQyxRQUE0QjtZQUN2QyxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLENBQUM7S0FDRCxDQUFDO0FBQ0gsQ0FBQztBQU5lLHlCQUFpQixvQkFNaEMsQ0FBQSJ9

/***/ },
/* 46 */
/***/ function(module, exports) {

	module.exports = moment;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/node/node.d.ts' />
	'use strict';
	var moment = __webpack_require__(46);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __date = typescript_angular_utilities_1.services.date;
	exports.componentName = 'rlDateFilter';
	exports.controllerName = 'rlDateFilterController';
	// Optional interface for bound attributes
	var DateOptions;
	(function (DateOptions) {
	    DateOptions[DateOptions["Day"] = 0] = "Day";
	    DateOptions[DateOptions["Week"] = 1] = "Week";
	    DateOptions[DateOptions["Month"] = 2] = "Month";
	})(DateOptions || (DateOptions = {}));
	;
	var DateFilterController = (function () {
	    function DateFilterController($scope, dateUtility, $element) {
	        this.$scope = $scope;
	        this.dateUtility = dateUtility;
	        this.$element = $element;
	        this.count = 0;
	        this.type = "days";
	        this.filter.includeTime = this.includeTime;
	        //this is added to address an agular quirk on the service event list page.
	        //the input field was not clearing correclty when the selectedDate1 value is null.
	        this.inputField = this.$element.find('rl-date-time input');
	        this.filter.dateRange = false;
	        if (this.clearButton == null)
	            this.clearButton = true;
	    }
	    Object.defineProperty(DateFilterController.prototype, "selectedDate1", {
	        get: function () {
	            if (this.filter.selectedDate1 != null) {
	                return moment(this.filter.selectedDate1);
	            }
	            else {
	                //clear input field of date value. and rest past day/week count
	                this.inputField.val('');
	                this.clearCount();
	                return null;
	            }
	        },
	        set: function (dateString) {
	            if (this.dateUtility.isDate(dateString)) {
	                this.filter.selectedDate1 = moment(dateString);
	            }
	            else {
	                //clear input field of date value. and rest past day/week count
	                this.inputField.val('');
	                this.clearCount();
	                this.filter.selectedDate1 = null;
	            }
	            this.refreshDataSource();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateFilterController.prototype, "selectedDate2", {
	        get: function () {
	            return this.filter.selectedDate2;
	        },
	        set: function (date) {
	            this.filter.selectedDate2 = date;
	            this.refreshDataSource();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DateFilterController.prototype.refreshDataSource = function () {
	        if (this.source != null) {
	            this.source.refresh();
	        }
	        else {
	            this.$scope.$emit('dataSource.requestRefresh'); //*event?
	        }
	    };
	    DateFilterController.prototype.clearCount = function () {
	        this.count = 0;
	        this.countChange();
	    };
	    DateFilterController.prototype.decreaseCount = function () {
	        this.count -= 1;
	        this.setDateTimeNowIfNull();
	        //do not allow count below 0
	        if (this.count < 0 || this.count === 0) {
	            this.count = 0;
	        }
	        this.countChange();
	    };
	    DateFilterController.prototype.countChange = function () {
	        if (this.count == null) {
	            this.count = 0;
	        }
	        if (this.count > 0) {
	            this.filter.dateRange = true;
	            // add days has to be a negative number to go backwords.
	            this.selectedDate2 = moment(this.selectedDate1).add((this.count * -1), this.type);
	        }
	        else if (this.count == 0) {
	            //only change this values the first time.
	            if (this.filter.dateRange) {
	                this.filter.dateRange = false;
	                this.selectedDate2 = null;
	            }
	        }
	    };
	    DateFilterController.prototype.increaseCount = function () {
	        this.count += 1;
	        this.setDateTimeNowIfNull();
	        this.countChange();
	    };
	    DateFilterController.prototype.setDateTimeNowIfNull = function () {
	        if (this.selectedDate1 == null) {
	            this.selectedDate1 = this.dateUtility.getNow();
	        }
	    };
	    DateFilterController.prototype.toggle = function () {
	        if (this.type === 'days') {
	            this.type = 'weeks';
	        }
	        else {
	            this.type = 'days';
	        }
	        this.countChange();
	    };
	    DateFilterController.$inject = ['$scope', __date.serviceName, '$element'];
	    return DateFilterController;
	}());
	exports.DateFilterController = DateFilterController;
	exports.dateFilter = {
	    template: __webpack_require__(48),
	    controller: exports.controllerName,
	    controllerAs: 'filter',
	    bindings: {
	        filter: '<',
	        source: '<?',
	        label: '@',
	        includeTime: '<?',
	        includeDateRange: '<?',
	        clearButton: '<?'
	    },
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZUZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRlRmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyREFBMkQ7QUFFM0QsWUFBWSxDQUFDO0FBR2IsSUFBWSxNQUFNLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFakMsNkNBQXVCLDhCQUE4QixDQUFDLENBQUE7QUFDdEQsSUFBTyxNQUFNLEdBQUcsdUNBQVEsQ0FBQyxJQUFJLENBQUM7QUFNbkIscUJBQWEsR0FBVyxjQUFjLENBQUM7QUFDdkMsc0JBQWMsR0FBVyx3QkFBd0IsQ0FBQztBQUU3RCwwQ0FBMEM7QUFDMUMsSUFBSyxXQUFnQztBQUFyQyxXQUFLLFdBQVc7SUFBRywyQ0FBRyxDQUFBO0lBQUUsNkNBQUksQ0FBQTtJQUFFLCtDQUFLLENBQUE7QUFBQyxDQUFDLEVBQWhDLFdBQVcsS0FBWCxXQUFXLFFBQXFCO0FBQUEsQ0FBQztBQWN0QztJQVlDLDhCQUFvQixNQUFzQixFQUFVLFdBQWdDLEVBQVUsUUFBa0M7UUFBNUcsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBcUI7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQVZoSSxVQUFLLEdBQVcsQ0FBQyxDQUFDO1FBTWxCLFNBQUksR0FBVyxNQUFNLENBQUM7UUFLckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQTtRQUMxQywwRUFBMEU7UUFDMUUsa0ZBQWtGO1FBQ2xGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDOUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUM7WUFDNUIsSUFBSSxDQUFD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

/***/ },
/* 48 */
/***/ function(module, exports) {

	module.exports = "<div class=\"filter-group\">\r\n\t<div class=\"content-group\">\r\n\t\t<label>{{::filter.label}}</label>\r\n\t\t<rl-date-time ng-model=\"filter.selectedDate1\" use-time=\"filter.includeTime\" clear-button=\"filter.clearButton\" on-clear-event=\"filter.clearCount()\"\r\n\t\tclass=\"pull-left\"></rl-date-time>\r\n\t</div>\r\n\t<div ng-if=\"filter.includeDateRange\" class=\"content-group\">\r\n\t\t<label>Add previous</label>\r\n\t\t<div class=\"input-group\">\r\n\t\t<span class=\"input-group-btn\">\r\n\t\t\t<button  class=\"btn btn-default\" ng-click=\"filter.decreaseCount();\">\r\n\t\t\t\t<i class=\"fa fa-minus\"></i>\r\n\t\t\t</button>\r\n\t\t</span>\r\n\t\t<input type=\"number\" class=\"form-control\" ng-model=\"filter.count\" ng-change=\"filter.countChange();\" />\r\n\t\t<span class=\"input-group-btn\">\r\n\t\t\t<button class=\"btn btn-default\" ng-click=\"filter.toggle();\">\r\n\t\t\t{{filter.type}}\r\n\t\t\t</button>\r\n\t\t</span>\r\n\t\t<span class=\"input-group-btn\">\r\n\t\t\t<button class=\"btn btn-default\" ng-click=\"filter.increaseCount();\">\r\n\t\t\t\t<i class=\"fa fa-plus\"></i>\r\n\t\t\t</button>\r\n\t\t</span>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(16);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __object = typescript_angular_utilities_1.services.object;
	var __string = typescript_angular_utilities_1.services.string;
	var __transform = typescript_angular_utilities_1.services.transform.transform;
	exports.moduleName = 'rl.ui.components.cardContainer.filters.columnSearchFilter';
	exports.factoryName = 'columnSearchFilter';
	exports.filterName = 'column-search';
	var ColumnSearchFilter = (function () {
	    function ColumnSearchFilter(object, string) {
	        this.object = object;
	        this.string = string;
	        this.type = exports.filterName;
	    }
	    ColumnSearchFilter.prototype.filter = function (item) {
	        if (this.column == null) {
	            return true;
	        }
	        var value = this.object.toString(__transform.getValue(item, this.column.getValue));
	        var search = this.searchText;
	        if (!this.caseSensitive) {
	            search = search.toLowerCase();
	            value = value.toLowerCase();
	        }
	        return this.string.contains(value, search);
	    };
	    return ColumnSearchFilter;
	}());
	exports.ColumnSearchFilter = ColumnSearchFilter;
	columnSearchFilterFactory.$inject = [__object.serviceName, __string.serviceName];
	function columnSearchFilterFactory(object, string) {
	    'use strict';
	    return {
	        getInstance: function () {
	            return new ColumnSearchFilter(object, string);
	        },
	    };
	}
	exports.columnSearchFilterFactory = columnSearchFilterFactory;
	angular.module(exports.moduleName, [__object.moduleName, __string.moduleName])
	    .factory(exports.factoryName, columnSearchFilterFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uU2VhcmNoRmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2x1bW5TZWFyY2hGaWx0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUVuQyw2Q0FBa0MsOEJBQThCLENBQUMsQ0FBQTtBQUNqRSxJQUFPLFFBQVEsR0FBRyx1Q0FBUSxDQUFDLE1BQU0sQ0FBQztBQUNsQyxJQUFPLFFBQVEsR0FBRyx1Q0FBUSxDQUFDLE1BQU0sQ0FBQztBQUNsQyxJQUFPLFdBQVcsR0FBRyx1Q0FBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFJdkMsa0JBQVUsR0FBVywyREFBMkQsQ0FBQztBQUNqRixtQkFBVyxHQUFXLG9CQUFvQixDQUFDO0FBQzNDLGtCQUFVLEdBQVcsZUFBZSxDQUFDO0FBUWhEO0lBTUMsNEJBQW9CLE1BQStCLEVBQ3ZDLE1BQXNDO1FBRDlCLFdBQU0sR0FBTixNQUFNLENBQXlCO1FBQ3ZDLFdBQU0sR0FBTixNQUFNLENBQWdDO1FBTmxELFNBQUksR0FBVyxrQkFBVSxDQUFDO0lBTTRCLENBQUM7SUFFdkQsbUNBQU0sR0FBTixVQUFrQixJQUFlO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2IsQ0FBQztRQUVELElBQUksS0FBSyxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUUzRixJQUFJLE1BQU0sR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRXJDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM5QixLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdCLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFDRix5QkFBQztBQUFELENBQUMsQUF6QkQsSUF5QkM7QUF6QlksMEJBQWtCLHFCQXlCOUIsQ0FBQTtBQU1ELHlCQUF5QixDQUFDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2pGLG1DQUEwQyxNQUErQixFQUFFLE1BQXNDO0lBQ2hILFlBQVksQ0FBQztJQUNiLE1BQU0sQ0FBQztRQUNOLFdBQVc7WUFDVixNQUFNLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0MsQ0FBQztLQUNELENBQUM7QUFDSCxDQUFDO0FBUGUsaUNBQXlCLDRCQU94QyxDQUFBO0FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBVSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDcEUsT0FBTyxDQUFDLG1CQUFXLEVBQUUseUJBQXlCLENBQUMsQ0FBQyJ9

/***/ },
/* 50 */
/***/ function(module, exports) {

	(function() {
		var textComponent = {
			transclude: true,
			template: '<span>{{$ctrl.text}}</span>',
			controller: TextController,
		};
	
		TextController.$inject = ['$transclude'];
		function TextController($transclude) {
			var self = this;
			$transclude(function(content) {
				self.text = angular.element('<div></div>').append(content).html();
			});
		}
	
		angular.module('app')
			.component('tsText', textComponent);
	} ())

/***/ },
/* 51 */
/***/ function(module, exports) {

	module.exports = "<h3><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/blob/master/source/components/input/input.md\">Inputs</a></h3>\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/blob/master/source/components/textbox/textbox.md\">Textbox</a>:</label>\r\n\t<rl-textbox ng-model=\"input.otherText\" ></rl-textbox>\r\n</div>\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/blob/master/source/components/textarea/textarea.md\">Textarea</a>:</label>\r\n\t<rl-textarea ng-model=\"input.textAreaText\"></rl-textarea>\r\n</div>\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/spinner/spinner.md\">Spinner</a>:</label>\r\n\t<rl-spinner ng-model=\"input.number\"></rl-spinner>\r\n</div>\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/dateTime/dateTime.md\">Datetime</a>:</label>\r\n\t<rl-date-time ng-model=\"input.date\" use-date=\"false\"></rl-date-time>\r\n\t<rl-date-time ng-model=\"input.date\" use-time=\"false\"></rl-date-time>\r\n\t<rl-date-time ng-model=\"input.date\"></rl-date-time>\r\n\t<rl-date-time ng-model=\"input.date2\"></rl-date-time>\r\n\t<rl-button action=\"input.logDates()\">Log dates</rl-button>\r\n</div>\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/select/select.md\">Select</a>:</label>\r\n\t<rl-select ng-model=\"input.dropdownSelection\" get-options=\"input.getOptions()\" selector=\"'name'\"></rl-select>\r\n</div>\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/typeahead/typeahead.md\">Typeahead</a>:</label>\r\n\t<rl-typeahead get-items=\"input.getOptions()\" ng-model=\"input.selection\" transform=\"'name'\"\r\n\t\t\t\t\tcreate=\"input.create(value)\" label=\"Test create\"></rl-typeahead>\r\n\t<rl-typeahead get-items=\"input.getOptions()\" ng-model=\"input.any\" transform=\"'name'\" use-client-searching=\"true\"\r\n\t\t\t\t\tselect=\"input.select(value)\" label=\"Test select\"></rl-typeahead>\r\n\t<rl-typeahead get-items=\"input.getOptions()\" ng-model=\"input.any2\" transform=\"'name'\"\r\n\t\t\t\t\tallow-collapse=\"true\" select=\"input.select(value)\" label=\"Test collapse\"></rl-typeahead>\r\n\r\n\t<div ng-repeat=\"value in input.set\">\r\n\t\t{{value}}\r\n\t</div>\r\n</div>\r\n\r\n<div>\r\n\t<label>Rich text editor:</label>\r\n\t<rl-rich-text-editor ng-model=\"input.text\"></rl-rich-text-editor>\r\n</div>\r\n\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/checkbox/checkbox.md\">Checkbox</a>:</label>\r\n\t<rl-checkbox ng-model=\"input.checked\">Checkbox</rl-checkbox>\r\n\t<div>Value: {{input.checked}}</div>\r\n</div>\r\n\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/radio/radio.md\">Radio buttons</a>:</label>\r\n\t<div>\r\n\t\t<rl-radio-group ng-model=\"input.radio1\">\r\n\t\t\t<rl-radio value=\"{ value: 1 }\">1</rl-radio>\r\n\t\t\t<rl-radio value=\"{ value: 2 }\">2</rl-radio>\r\n\t\t\t<rl-radio value=\"{ value: 3 }\">3</rl-radio>\r\n\t\t</rl-radio-group>\r\n\t</div>\r\n\t<div>{{input.radio1}}</div>\r\n\t<div><rl-radio ng-model=\"input.radio2\" value=\"{ value: 4 }\">4</rl-radio></div>\r\n\t<div>{{input.radio2}}</div>\r\n</div>\r\n\r\n<div>\r\n\t<label>Typeahead list:</label>\r\n\t<rl-typeahead-list get-items=\"input.getOptions()\" ng-model=\"input.typeaheadList\" transform=\"'name'\"\r\n\t\t\t\t\t\tlabel=\"Test list\">\r\n\t\t<rl-list-header><div class=\"col-xs-12\">Test list</div></rl-list-header>\r\n\t\t<rl-list-item>\r\n\t\t\t\t<div class=\"col-xs-10\">{{$item.name}}</div>\r\n\t\t\t\t<div class=\"col-xs-2\">\r\n\t\t\t\t\t<rl-button type=\"danger\" action=\"$remove($item)\"><i class=\"fa fa-remove\"></i></rl-button>\r\n\t\t\t\t</div>\r\n\t\t</rl-list-item>\r\n\t</rl-typeahead-list>\r\n</div>\r\n\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/behaviors/required/required.md\">Required input</a>:</label>\r\n\t<rl-textbox ng-model=\"input.requiredText\" rl-required=\"Input required\"></rl-textbox>\r\n</div>\r\n<br/>\r\n<br/>"

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(16);
	var moment = __webpack_require__(46);
	__webpack_require__(46);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __timezone = typescript_angular_utilities_1.services.timezone;
	var InputTestController = (function () {
	    function InputTestController($q) {
	        this.$q = $q;
	    }
	    InputTestController.prototype.$onInit = function () {
	        this.options = [
	            { name: 'item1' },
	            { name: 'item2' },
	            { name: 'item3' },
	            { name: 'item4' },
	            { name: 'item5' },
	        ];
	        this.typeaheadList = [this.options[0], this.options[4]];
	        this.date = moment('2016-04-01T12:00:00.000-08:00').tz('US/Pacific');
	        __timezone.timezoneService.setCurrentTimezone('-08:00');
	    };
	    InputTestController.prototype.select = function (value) {
	        this.set.push(value);
	    };
	    InputTestController.prototype.create = function (value) {
	        return {
	            name: value,
	        };
	    };
	    InputTestController.prototype.getOptions = function () {
	        return this.$q.when(_.clone(this.options));
	    };
	    InputTestController.prototype.logDates = function () {
	        var format = 'YYYY-MM-DDTHH:mm:ssZ';
	        console.log(this.date.format(format));
	        console.log(this.date2.format(format));
	    };
	    InputTestController.$inject = ['$q'];
	    return InputTestController;
	}());
	angular.module('app')
	    .controller('InputTestController', InputTestController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRCb290c3RyYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnB1dEJvb3RzdHJhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDbkMsSUFBWSxNQUFNLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFDakMsUUFBTyxpQkFBaUIsQ0FBQyxDQUFBO0FBRXpCLDZDQUF5Qiw4QkFBOEIsQ0FBQyxDQUFBO0FBQ3hELElBQU8sVUFBVSxHQUFHLHVDQUFRLENBQUMsUUFBUSxDQUFDO0FBTXRDO0lBUUMsNkJBQW9CLEVBQXFCO1FBQXJCLE9BQUUsR0FBRixFQUFFLENBQW1CO0lBQUcsQ0FBQztJQUU3QyxxQ0FBTyxHQUFQO1FBQ0MsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNkLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUNqQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDakIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQ2pCLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUNqQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7U0FDakIsQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNyRSxVQUFVLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxvQ0FBTSxHQUFOLFVBQU8sS0FBZ0I7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELG9DQUFNLEdBQU4sVUFBTyxLQUFhO1FBQ25CLE1BQU0sQ0FBQztZQUNOLElBQUksRUFBRSxLQUFLO1NBQ1gsQ0FBQztJQUNILENBQUM7SUFFRCx3Q0FBVSxHQUFWO1FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELHNDQUFRLEdBQVI7UUFDQyxJQUFNLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFwQ00sMkJBQU8sR0FBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBcUNuQywwQkFBQztBQUFELENBQUMsQUE1Q0QsSUE0Q0M7QUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztLQUNuQixVQUFVLENBQUMscUJBQXFCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyJ9

/***/ },
/* 53 */
/***/ function(module, exports) {

	module.exports = "<h3><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/button/buttons.md\">Buttons</a></h3>\r\n<div class=\"row\">\r\n\t<div class=\"col-xs-1 form-control-static\">\r\n\t\t<a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/button/button.md\">rl-button</a>:\r\n\t</div>\r\n\t<div class=\"col-xs-11\">\r\n\t\t<rl-button action=\"button.action('Simple button')\">Simple button</rl-button>\r\n\t</div>\r\n</div>\r\n<div class=\"row\">\r\n\t<div class=\"col-xs-1 form-control-static\">\r\n\t\t<a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/buttonAsync/buttonAsync.md\">rl-button-async</a>:\r\n\t</div>\r\n\t<div class=\"col-xs-11\">\r\n\t\t<rl-button-async action=\"button.wait(button.action, 'Async button')\">Async button</rl-button-async>\r\n\t</div>\r\n</div>\r\n<div class=\"row\">\r\n\t<div class=\"col-xs-1 form-control-static\">\r\n\t\t<a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/buttonLink/buttonLink.md\">rl-button-link</a>:\r\n\t</div>\r\n\t<div class=\"col-xs-11\">\r\n\t\t<rl-button-link link=\"http://www.google.com\">Link button</rl-button-link>\r\n\t</div>\r\n</div>\r\n<div class=\"row\">\r\n\t<div class=\"col-xs-1 form-control-static\">\r\n\t\t<a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/buttonToggle/buttonToggle.md\">rl-button-toggle</a>:\r\n\t</div>\r\n\t<div class=\"col-xs-11\">\r\n\t\t<rl-button-toggle ng-model=\"button.toggled\" on-toggle=\"button.action('Toggle button')\">Toggle button</rl-button-toggle>\r\n\t</div>\r\n</div>\r\n<div class=\"row\">\r\n\t<div class=\"col-xs-1 form-control-static\">\r\n\t\t<a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/longClickButton/longClickButton.md\">rl-long-click-button</a>:\r\n\t</div>\r\n\t<div class=\"col-xs-11\">\r\n\t\t<rl-long-click-button action=\"button.wait(button.action, 'Long click button')\" text=\"Long click button\"></rl-long-click-button>\r\n\t</div>\r\n</div>\r\n<div class=\"row\">\r\n\t<div class=\"col-xs-1 form-control-static\">\r\n\t\t<a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/components/buttonSubmit/buttonSubmit.md\">rl-button-submit</a>:\r\n\t</div>\r\n\t<div class=\"col-xs-11\">\r\n\t\t<form ng-submit=\"button.action('Submit button')\">\r\n\t\t\t<rl-button-submit>Submit button</rl-button-submit>\r\n\t\t</form>\r\n\t</div>\r\n</div>"

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(16);
	var ButtonTestController = (function () {
	    function ButtonTestController($timeout) {
	        this.$timeout = $timeout;
	    }
	    ButtonTestController.prototype.action = function (name) {
	        console.log('Action: ' + name);
	    };
	    ButtonTestController.prototype.wait = function (callback, name) {
	        return this.$timeout(function () { return callback(name); }, 1000);
	    };
	    ButtonTestController.$inject = ['$timeout'];
	    return ButtonTestController;
	}());
	angular.module('app')
	    .controller('ButtonTestController', ButtonTestController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uQm9vdHN0cmFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnV0dG9uQm9vdHN0cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUVuQztJQUVDLDhCQUFvQixRQUFpQztRQUFqQyxhQUFRLEdBQVIsUUFBUSxDQUF5QjtJQUFJLENBQUM7SUFFMUQscUNBQU0sR0FBTixVQUFPLElBQVk7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELG1DQUFJLEdBQUosVUFBSyxRQUFRLEVBQUUsSUFBSTtRQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFNLE9BQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFkLENBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBVE0sNEJBQU8sR0FBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBVXpDLDJCQUFDO0FBQUQsQ0FBQyxBQVhELElBV0M7QUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztLQUNuQixVQUFVLENBQUMsc0JBQXNCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyJ9

/***/ },
/* 55 */
/***/ function(module, exports) {

	module.exports = "<h3>Popup content</h3>\r\n<div>\r\n\t<label><a href=\"https://github.com/SamGraber/TypeScript-Angular-Components/tree/master/source/behaviors/popover/popover.md\">Popover</a>:</label>\r\n\t<span class=\"btn btn-default\" rl-popover=\"popup.popover\" popover-trigger=\"mouseenter\">Show rl-popover</span>\r\n\t<span class=\"btn btn-default\" rl-popover=\"A popover {{popup.content}}\" text-only=\"true\">Show simple popover</span>\r\n</div>\r\n\r\n<div>\r\n\t<label><a href=\"\">Dialog</a>:</label>\r\n\t<rl-button action=\"popup.prompt()\">Open prompt</rl-button>\r\n\t<rl-button action=\"popup.openDialog()\">Open custom dialog</rl-button>\r\n</div>"

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(16);
	var dialog_service_1 = __webpack_require__(57);
	var PopupTestController = (function () {
	    function PopupTestController(dialog) {
	        this.dialog = dialog;
	    }
	    PopupTestController.prototype.$onInit = function () {
	        this.popover = '<div>{{popup.content}}</div>';
	        this.content = 'Some content';
	    };
	    PopupTestController.prototype.prompt = function () {
	        this.dialog.prompt({
	            acceptHandler: function () { alert('Yes'); },
	            cancelHandler: function () { alert('No'); },
	            okButton: 'Yes',
	            cancelButton: 'No',
	            message: 'Do you want to do this?',
	        });
	    };
	    PopupTestController.prototype.openDialog = function () {
	        this.dialog.open({
	            template: "<rl-dialog>\n\t\t\t\t\t\t<rl-dialog-header>Header</rl-dialog-header>\n\t\t\t\t\t\t<rl-dialog-content>Content</rl-dialog-content>\n\t\t\t\t\t\t<rl-dialog-footer>Footer</rl-dialog-footer>\n\t\t\t\t\t</rl-dialog >",
	        });
	    };
	    PopupTestController.$inject = [dialog_service_1.serviceName];
	    return PopupTestController;
	}());
	angular.module('app')
	    .controller('PopupTestController', PopupTestController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXBCb290c3RyYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwb3B1cEJvb3RzdHJhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFbkMsK0JBQW1FLDZDQUE2QyxDQUFDLENBQUE7QUFFakg7SUFLQyw2QkFBb0IsTUFBeUQ7UUFBekQsV0FBTSxHQUFOLE1BQU0sQ0FBbUQ7SUFBSSxDQUFDO0lBRWxGLHFDQUFPLEdBQVA7UUFDQyxJQUFJLENBQUMsT0FBTyxHQUFHLDhCQUE4QixDQUFDO1FBQzlDLElBQUksQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFFRCxvQ0FBTSxHQUFOO1FBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDbEIsYUFBYSxFQUFFLGNBQWEsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxhQUFhLEVBQUUsY0FBYSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFDLFFBQVEsRUFBRSxLQUFLO1lBQ2YsWUFBWSxFQUFFLElBQUk7WUFDbEIsT0FBTyxFQUFFLHlCQUF5QjtTQUNsQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsd0NBQVUsR0FBVjtRQUNDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxvTkFJTTtTQUNoQixDQUFDLENBQUM7SUFDSixDQUFDO0lBMUJNLDJCQUFPLEdBQWEsQ0FBQyw0QkFBYSxDQUFDLENBQUM7SUEyQjVDLDBCQUFDO0FBQUQsQ0FBQyxBQS9CRCxJQStCQztBQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0tBQ25CLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDIn0=

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __promise = typescript_angular_utilities_1.services.promise;
	var __notification = typescript_angular_utilities_1.services.notification;
	var bootstrapModalDialog = __webpack_require__(58);
	exports.bootstrapModalDialog = bootstrapModalDialog;
	var autosave_service_1 = __webpack_require__(61);
	var form_service_1 = __webpack_require__(66);
	var dialog_1 = __webpack_require__(67);
	exports.componentName = dialog_1.componentName;
	exports.controllerName = dialog_1.controllerName;
	exports.DialogController = dialog_1.DialogController;
	exports.moduleName = 'rl.ui.services.dialog';
	exports.serviceName = 'dialog';
	var DialogService = (function () {
	    function DialogService(dialog, $rootScope, autosaveFactory, promise, notification, formService) {
	        var _this = this;
	        this.dialog = dialog;
	        this.$rootScope = $rootScope;
	        this.autosaveFactory = autosaveFactory;
	        this.promise = promise;
	        this.notification = notification;
	        this.formService = formService;
	        this.autosaveCloseHandler = function (explicit) {
	            if (explicit) {
	                return true;
	            }
	            return _this.autosave.autosave(_this.data);
	        };
	    }
	    DialogService.prototype.open = function (options, closeHandler) {
	        var _this = this;
	        var dialogInstance = this.dialog.open(options, closeHandler);
	        dialogInstance.validateAndNotify = function () {
	            var valid = _this.form.$valid;
	            if (!valid) {
	                _this.notification.warning(_this.formService.getAggregateError(_this.form));
	            }
	            return valid;
	        };
	        return dialogInstance;
	    };
	    DialogService.prototype.prompt = function (options) {
	        options.okButton = options.okButton || 'Ok';
	        options.cancelButton = options.cancelButton || 'Cancel';
	        return this.dialog.prompt(options, __webpack_require__(70));
	    };
	    DialogService.prototype.openForm = function (options) {
	        var _this = this;
	        var dialogInstance = {
	            close: function () { },
	            dismiss: function () { },
	            save: function () { },
	            saveAndClose: function () { },
	            validateAndNotify: function () { },
	        };
	        this.promise.resolvePromises(options.resolve).then(function (resolveData) {
	            var scope = options.scope;
	            if (scope == null) {
	                scope = _this.$rootScope.$new();
	                options.scope = scope;
	            }
	            if (options.data == null) {
	                options.data = {};
	            }
	            if (options.triggers == null) {
	                options.triggers = 'none';
	            }
	            _this.autosave = _this.autosaveFactory.getInstance({
	                save: options.save,
	                triggers: options.triggers,
	            });
	            _this.data = _.extend(options.data, resolveData);
	            scope.dialog = _this.data;
	            var instance = _this.open(options, _this.autosaveCloseHandler);
	            dialogInstance.close = instance.close;
	            dialogInstance.dismiss = instance.dismiss;
	            scope.$save = function () { return _this.autosave.validateAndSave(_this.data); };
	            ;
	            scope.$saveAndClose = function () {
	                var promise = scope.$save();
	                if (_.isBoolean(promise) && promise) {
	                    instance.close();
	                }
	                else if (_this.promise.isPromise(promise)) {
	                    promise.then(function () {
	                        instance.close();
	                    });
	                }
	                return promise;
	            };
	            dialogInstance.save = scope.$save;
	            dialogInstance.saveAndClose = scope.$saveAndClose;
	            dialogInstance.validateAndNotify = instance.validateAndNotify;
	        });
	        return dialogInstance;
	    };
	    DialogService.prototype.setForm = function (form) {
	        if (this.autosave != null) {
	            this.autosave.contentForm = form;
	        }
	        this.form = form;
	    };
	    return DialogService;
	}());
	exports.DialogService = DialogService;
	function dialogServiceProvider() {
	    'use strict';
	    var _this = this;
	    var provider = {
	        setImplementation: function (dialogImplementation) {
	            _this.dialogImplementation = dialogImplementation;
	        },
	        $get: function (bootstrapModalDialog, $rootScope, autosaveFactory, promise, notification, formService) {
	            var dialogImplementation = _this.dialogImplementation != null
	                ? _this.dialogImplementation
	                : bootstrapModalDialog;
	            return new DialogService(dialogImplementation, $rootScope, autosaveFactory, promise, notification, formService);
	        },
	    };
	    provider.$get.$inject = [bootstrapModalDialog.serviceName, '$rootScope', autosave_service_1.factoryName, __promise.serviceName, __notification.serviceName, form_service_1.serviceName];
	    return provider;
	}
	exports.dialogServiceProvider = dialogServiceProvider;
	angular.module(exports.moduleName, [bootstrapModalDialog.moduleName, autosave_service_1.moduleName, __notification.moduleName, form_service_1.moduleName])
	    .provider(exports.serviceName, dialogServiceProvider);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUNuQyxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUU1Qiw2Q0FBeUIsOEJBQThCLENBQUMsQ0FBQTtBQUN4RCxJQUFPLFNBQVMsR0FBRyx1Q0FBUSxDQUFDLE9BQU8sQ0FBQztBQUNwQyxJQUFPLGNBQWMsR0FBRyx1Q0FBUSxDQUFDLFlBQVksQ0FBQztBQUU5QyxJQUFZLG9CQUFvQixXQUFNLG9EQUFvRCxDQUFDLENBQUE7QUFXbEYsNEJBQW9CO0FBVDdCLGlDQUtPLDhCQUE4QixDQUFDLENBQUE7QUFDdEMsNkJBQXVGLHNCQUFzQixDQUFDLENBQUE7QUFJOUcsdUJBQWdFLGdDQUFnQyxDQUFDO0FBQXhGLCtDQUFhO0FBQUUsaURBQWM7QUFBRSxxREFBeUQ7QUFHdEYsa0JBQVUsR0FBVyx1QkFBdUIsQ0FBQztBQUM3QyxtQkFBVyxHQUFXLFFBQVEsQ0FBQztBQVExQztJQUtDLHVCQUFvQixNQUFvRCxFQUM1RCxVQUFxQyxFQUNyQyxlQUF3QyxFQUN4QyxPQUFrQyxFQUNsQyxZQUFpRCxFQUNqRCxXQUF5QjtRQVZ0QyxpQkF5R0M7UUFwR29CLFdBQU0sR0FBTixNQUFNLENBQThDO1FBQzVELGVBQVUsR0FBVixVQUFVLENBQTJCO1FBQ3JDLG9CQUFlLEdBQWYsZUFBZSxDQUF5QjtRQUN4QyxZQUFPLEdBQVAsT0FBTyxDQUEyQjtRQUNsQyxpQkFBWSxHQUFaLFlBQVksQ0FBcUM7UUFDakQsZ0JBQVcsR0FBWCxXQUFXLENBQWM7UUFpRjdCLHlCQUFvQixHQUE4QixVQUFDLFFBQWlCO1lBQzNFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNiLENBQUM7WUFFRCxNQUFNLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQTtJQXZGd0MsQ0FBQztJQUUxQyw0QkFBSSxHQUFKLFVBQUssT0FBd0IsRUFBRSxZQUF3QztRQUF2RSxpQkFZQztRQVhBLElBQUksY0FBYyxHQUEwQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEYsY0FBYyxDQUFDLGlCQUFpQixHQUFHO1lBQ2xDLElBQUksS0FBSyxHQUFZLEtBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRXRDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDWixLQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFFLENBQUM7WUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2QsQ0FBQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUN2QixDQUFDO0lBRUQsOEJBQU0sR0FBTixVQUFPLE9BQThCO1FBQ3BDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUM7UUFDNUMsT0FBTyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxJQUFJLFFBQVEsQ0FBQztRQUV4RCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELGdDQUFRLEdBQVIsVUFBUyxPQUFzQztRQUEvQyxpQkF3REM7UUF2REEsSUFBSSxjQUFjLEdBQWtDO1lBQ25ELEtBQUssZ0JBQVUsQ0FBQztZQUNoQixPQUFPLGdCQUFXLENBQUM7WUFDbkIsSUFBSSxnQkFBVSxDQUFDO1lBQ2YsWUFBWSxnQkFBVSxDQUFDO1lBQ3ZCLGlCQUFpQixnQkFBVyxDQUFDO1NBQzdCLENBQUM7UUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsV0FBZ0I7WUFDbkUsSUFBSSxLQUFLLEdBQTJELE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFFbEYsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLEtBQUssR0FBK0IsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDM0QsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDdkIsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDMUIsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7WUFDbkIsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDOUIsT0FBTyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7WUFDM0IsQ0FBQztZQUVELEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUM7Z0JBQ2hELElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO2FBQzFCLENBQUMsQ0FBQztZQUVILEtBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ2hELEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQztZQUV6QixJQUFJLFFBQVEsR0FBdUMsS0FBSSxDQUFDLElBQUksQ0FBTSxPQUFPLEVBQUUsS0FBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDdEcsY0FBYyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQ3RDLGNBQWMsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUUxQyxLQUFLLENBQUMsS0FBSyxHQUFHLGNBQTBDLE1BQU0sQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQSxDQUFDO1lBQzVHLEtBQUssQ0FBQyxhQUFhLEdBQUc7Z0JBQ3JCLElBQUksT0FBTyxHQUFRLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDakMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUNyQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2xCLENBQUM7Z0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUMsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDWixRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2xCLENBQUMsQ0FBQyxDQUFDO2dCQUNKLENBQUM7Z0JBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNoQixDQUFDLENBQUM7WUFFRixjQUFjLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDbEMsY0FBYyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO1lBQ2xELGNBQWMsQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQ3ZCLENBQUM7SUFVRCwrQkFBTyxHQUFQLFVBQVEsSUFBb0I7UUFDM0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUNsQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUNGLG9CQUFDO0FBQUQsQ0FBQyxBQXpHRCxJQXlHQztBQXpHWSxxQkFBYSxnQkF5R3pCLENBQUE7QUFZRDtJQUNDLFlBQVksQ0FBQztJQURkLGlCQXFCQztJQWxCQSxJQUFJLFFBQVEsR0FBNEM7UUFDdkQsaUJBQWlCLEVBQUUsVUFBQyxvQkFBa0U7WUFDckYsS0FBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBQ2xELENBQUM7UUFDRCxJQUFJLEVBQUUsVUFBQyxvQkFBdUUsRUFDM0UsVUFBcUMsRUFDckMsZUFBd0MsRUFDeEMsT0FBa0MsRUFDbEMsWUFBaUQsRUFDakQsV0FBeUI7WUFDM0IsSUFBSSxvQkFBb0IsR0FBaUQsS0FBSSxDQUFDLG9CQUFvQixJQUFJLElBQUk7a0JBQ3hGLEtBQUksQ0FBQyxvQkFBb0I7a0JBQ3pCLG9CQUFvQixDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBa0Isb0JBQW9CLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2xJLENBQUM7S0FDRCxDQUFDO0lBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsWUFBWSxFQUFFLDhCQUFtQixFQUFFLFNBQVMsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLFdBQVcsRUFBRSwwQkFBZSxDQUFDLENBQUM7SUFDbEssTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNqQixDQUFDO0FBckJlLDZCQUFxQix3QkFxQnBDLENBQUE7QUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLGtCQUFVLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsNkJBQWMsRUFBRSxjQUFjLENBQUMsVUFBVSxFQUFFLHlCQUFVLENBQUMsQ0FBQztLQUNsSCxRQUFRLENBQUMsbUJBQVcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDIn0=

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(16);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __promise = typescript_angular_utilities_1.services.promise;
	var bootstrapModalDialog_controller_1 = __webpack_require__(59);
	var bootstrapModalDialog_service_1 = __webpack_require__(60);
	__export(__webpack_require__(59));
	__export(__webpack_require__(60));
	exports.moduleName = 'rl.ui.services.dialog.bootstrapModalDialog';
	angular.module(exports.moduleName, [__promise.moduleName])
	    .controller(bootstrapModalDialog_controller_1.controllerName, bootstrapModalDialog_controller_1.BootstrapModalDialogController)
	    .service(bootstrapModalDialog_service_1.serviceName, bootstrapModalDialog_service_1.BootstrapModalDialogService);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwTW9kYWxEaWFsb2cubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwTW9kYWxEaWFsb2cubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztBQUViLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBRW5DLDZDQUF5Qiw4QkFBOEIsQ0FBQyxDQUFBO0FBQ3hELElBQU8sU0FBUyxHQUFHLHVDQUFRLENBQUMsT0FBTyxDQUFDO0FBRXBDLGdEQUErRCxtQ0FBbUMsQ0FBQyxDQUFBO0FBQ25HLDZDQUF5RCxnQ0FBZ0MsQ0FBQyxDQUFBO0FBRTFGLGlCQUFjLG1DQUFtQyxDQUFDLEVBQUE7QUFDbEQsaUJBQWMsZ0NBQWdDLENBQUMsRUFBQTtBQUVwQyxrQkFBVSxHQUFXLDRDQUE0QyxDQUFDO0FBRTdFLE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNoRCxVQUFVLENBQUMsZ0RBQWMsRUFBRSxnRUFBOEIsQ0FBQztLQUMxRCxPQUFPLENBQUMsMENBQVcsRUFBRSwwREFBMkIsQ0FBQyxDQUFDIn0=

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var bootstrapModalDialog_service_1 = __webpack_require__(60);
	exports.controllerName = 'BootstrapModalDialogController';
	var BootstrapModalDialogController = (function () {
	    function BootstrapModalDialogController($scope, $controller, baseDialog) {
	        var controller;
	        if ($scope.modalController != null) {
	            var locals = $scope.resolveData || {};
	            $scope.resolveData = null;
	            locals.$scope = $scope;
	            controller = $controller($scope.modalController, locals);
	        }
	        $scope.$on('modal.closing', baseDialog.modalClosing);
	        return controller;
	    }
	    BootstrapModalDialogController.$inject = ['$scope', '$controller', bootstrapModalDialog_service_1.serviceName];
	    return BootstrapModalDialogController;
	}());
	exports.BootstrapModalDialogController = BootstrapModalDialogController;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwTW9kYWxEaWFsb2cuY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvb3RzdHJhcE1vZGFsRGlhbG9nLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBR2IsNkNBQXlELGdDQUFnQyxDQUFDLENBQUE7QUFFL0Usc0JBQWMsR0FBVyxnQ0FBZ0MsQ0FBQztBQU9yRTtJQUVDLHdDQUFZLE1BQWtDLEVBQzFDLFdBQWtDLEVBQ2xDLFVBQXVDO1FBQzFDLElBQUksVUFBZSxDQUFDO1FBRXBCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLE1BQU0sR0FBUSxNQUFNLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztZQUMzQyxNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztZQUMxQixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUV2QixVQUFVLEdBQUcsV0FBVyxDQUFNLE1BQU0sQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0QsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyRCxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFqQk0sc0NBQU8sR0FBYSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsMENBQVcsQ0FBQyxDQUFDO0lBa0JuRSxxQ0FBQztBQUFELENBQUMsQUFuQkQsSUFtQkM7QUFuQlksc0NBQThCLGlDQW1CMUMsQ0FBQSJ9

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __promise = typescript_angular_utilities_1.services.promise;
	var bootstrapModalDialog_controller_1 = __webpack_require__(59);
	exports.serviceName = 'uiBootstrapModelDialog';
	var BootstrapModalDialogService = (function () {
	    function BootstrapModalDialogService($modal, $rootScope, promise) {
	        var _this = this;
	        this.$modal = $modal;
	        this.$rootScope = $rootScope;
	        this.promise = promise;
	        this.modalClosing = function (event, reason, explicitlyClosed) {
	            var canClose = true;
	            if (_.isFunction(_this.closeHandler)) {
	                canClose = _this.closeHandler(explicitlyClosed);
	            }
	            if (!canClose) {
	                event.preventDefault();
	            }
	        };
	    }
	    BootstrapModalDialogService.prototype.open = function (options, closeHandler) {
	        var _this = this;
	        if (options == null) {
	            options = {};
	        }
	        var dialogInstance = {
	            close: function () { },
	            dismiss: function () { },
	        };
	        this.promise.resolvePromises(options.resolve).then(function (results) {
	            _this.closeHandler = closeHandler;
	            options = _this.configureModalSettings(options, results);
	            var modalInstance = _this.$modal.open(options);
	            dialogInstance.close = modalInstance.close;
	            dialogInstance.dismiss = modalInstance.dismiss;
	        });
	        return dialogInstance;
	    };
	    BootstrapModalDialogService.prototype.prompt = function (options, template) {
	        var acceptHandler = options.acceptHandler;
	        var cancelHandler = options.cancelHandler;
	        options.acceptHandler = null;
	        options.cancelHandler = null;
	        var modalScope = this.$rootScope.$new();
	        modalScope.prompt = options;
	        var settings = {
	            scope: modalScope,
	            template: template,
	            controller: bootstrapModalDialog_controller_1.controllerName,
	        };
	        var modalInstance = this.$modal.open(settings);
	        var accept = function () {
	            acceptHandler();
	            modalInstance.close();
	        };
	        var cancel = function () {
	            cancelHandler();
	            modalInstance.close();
	        };
	        modalScope.$accept = accept;
	        modalScope.$cancel = cancel;
	        return {
	            accept: accept,
	            cancel: cancel,
	            close: modalInstance.close,
	            dismiss: modalInstance.dismiss,
	        };
	    };
	    BootstrapModalDialogService.prototype.configureModalSettings = function (options, resolveData) {
	        var modalScope = options.scope;
	        if (modalScope == null) {
	            modalScope = this.$rootScope.$new();
	        }
	        if (options.resolveToDialog) {
	            if (options.dialogAs != null) {
	                modalScope[options.dialogAs] = resolveData;
	            }
	            else {
	                modalScope = _.extend(modalScope, resolveData);
	            }
	        }
	        else {
	            modalScope.resolveData = resolveData;
	        }
	        modalScope.modalController = options.controller;
	        options.resolve = null;
	        options.controller = bootstrapModalDialog_controller_1.controllerName;
	        options.scope = modalScope;
	        return options;
	    };
	    BootstrapModalDialogService.$inject = ['$uibModal', '$rootScope', __promise.serviceName];
	    return BootstrapModalDialogService;
	}());
	exports.BootstrapModalDialogService = BootstrapModalDialogService;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwTW9kYWxEaWFsb2cuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvb3RzdHJhcE1vZGFsRGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBR2IsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsNkNBQXlCLDhCQUE4QixDQUFDLENBQUE7QUFDeEQsSUFBTyxTQUFTLEdBQUcsdUNBQVEsQ0FBQyxPQUFPLENBQUM7QUFVcEMsZ0RBQTJELG1DQUFtQyxDQUFDLENBQUE7QUFFcEYsbUJBQVcsR0FBVyx3QkFBd0IsQ0FBQztBQWlCMUQ7SUFJQyxxQ0FBb0IsTUFBcUMsRUFDN0MsVUFBZ0MsRUFDaEMsT0FBa0M7UUFOL0MsaUJBd0dDO1FBcEdvQixXQUFNLEdBQU4sTUFBTSxDQUErQjtRQUM3QyxlQUFVLEdBQVYsVUFBVSxDQUFzQjtRQUNoQyxZQUFPLEdBQVAsT0FBTyxDQUEyQjtRQTZEOUMsaUJBQVksR0FDVCxVQUFDLEtBQXVCLEVBQUUsTUFBVyxFQUFFLGdCQUF5QjtZQUNsRSxJQUFJLFFBQVEsR0FBWSxJQUFJLENBQUM7WUFFN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxRQUFRLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hELENBQUM7WUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3hCLENBQUM7UUFDRixDQUFDLENBQUE7SUF4RWlELENBQUM7SUFFbkQsMENBQUksR0FBSixVQUFLLE9BQXNDLEVBQUUsWUFBa0M7UUFBL0UsaUJBbUJDO1FBbEJBLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxD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

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var typescript_angular_utilities_1 = __webpack_require__(2);
	var __notification = typescript_angular_utilities_1.services.notification;
	var autosaveAction_service_1 = __webpack_require__(62);
	var triggers = __webpack_require__(63);
	exports.triggers = triggers;
	var form_service_1 = __webpack_require__(66);
	exports.moduleName = 'rl.ui.services.autosave';
	exports.factoryName = 'autosaveFactory';
	var AutosaveService = (function () {
	    function AutosaveService(notification, autosaveService, options, triggerServiceFactory, formService) {
	        var _this = this;
	        this.notification = notification;
	        this.autosaveService = autosaveService;
	        this.formService = formService;
	        this.autosave = function () {
	            var data = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                data[_i - 0] = arguments[_i];
	            }
	            var result = _this.validateAndSave.apply(_this, data);
	            if (_.isBoolean(result)) {
	                return result;
	            }
	            else {
	                _this.autosaveService.trigger(result);
	                return true;
	            }
	        };
	        this.contentForm = options.contentForm || this.nullForm();
	        this.save = options.save;
	        this.saveWhenInvalid = options.saveWhenInvalid;
	        this.triggerService = triggerServiceFactory.getInstance();
	        this.configureTriggers(options);
	        this.triggerService.setTriggers(options.triggers, this.autosave);
	    }
	    AutosaveService.prototype.validateAndSave = function () {
	        var _this = this;
	        var data = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            data[_i - 0] = arguments[_i];
	        }
	        if (this.contentForm.$pristine) {
	            return true;
	        }
	        if (this.contentForm.$valid || this.saveWhenInvalid) {
	            var promise = this.save.apply(this, data);
	            if (!_.isUndefined(promise)) {
	                return promise.then(function () {
	                    if (_this.contentForm != null) {
	                        _this.contentForm.$setPristine();
	                    }
	                });
	            }
	            return true;
	        }
	        else {
	            this.notification.warning(this.formService.getAggregateError(this.contentForm));
	            return false;
	        }
	    };
	    AutosaveService.prototype.configureTriggers = function (options) {
	        this.triggerService.triggers.onChange.configure({
	            form: options.contentForm,
	            setChangeListener: options.setChangeListener,
	            debounceDuration: options.debounceDuration,
	            saveWhenInvalid: options.saveWhenInvalid,
	        });
	    };
	    AutosaveService.prototype.nullForm = function () {
	        return {
	            $pristine: false,
	            $dirty: true,
	            $valid: true,
	            $setPristine: function () {
	                return;
	            },
	        };
	    };
	    return AutosaveService;
	}());
	autosaveServiceFactory.$inject = [__notification.serviceName, autosaveAction_service_1.serviceName, triggers.factoryName, form_service_1.serviceName];
	function autosaveServiceFactory(notification, autosaveService, triggerServiceFactory, formService) {
	    'use strict';
	    return {
	        getInstance: function (options) {
	            return new AutosaveService(notification, autosaveService, options, triggerServiceFactory, formService);
	        }
	    };
	}
	angular.module(exports.moduleName, [__notification.moduleName, autosaveAction_service_1.moduleName, triggers.moduleName, form_service_1.moduleName])
	    .factory(exports.factoryName, autosaveServiceFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b3NhdmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dG9zYXZlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDbkMsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsNkNBQXlCLDhCQUE4QixDQUFDLENBQUE7QUFDeEQsSUFBTyxjQUFjLEdBQUcsdUNBQVEsQ0FBQyxZQUFZLENBQUM7QUFFOUMsdUNBSU8sMENBQTBDLENBQUMsQ0FBQTtBQUNsRCxJQUFZLFFBQVEsV0FBTSw2QkFBNkIsQ0FBQyxDQUFBO0FBSS9DLGdCQUFRO0FBSGpCLDZCQUF1RixzQkFBc0IsQ0FBQyxDQUFBO0FBS25HLGtCQUFVLEdBQVcseUJBQXlCLENBQUM7QUFDL0MsbUJBQVcsR0FBVyxpQkFBaUIsQ0FBQztBQWlCbkQ7SUFNQyx5QkFBb0IsWUFBaUQsRUFDekQsZUFBdUMsRUFDL0MsT0FBZ0MsRUFDaEMscUJBQXNELEVBQzlDLFdBQXlCO1FBVnRDLGlCQXdFQztRQWxFb0IsaUJBQVksR0FBWixZQUFZLENBQXFDO1FBQ3pELG9CQUFlLEdBQWYsZUFBZSxDQUF3QjtRQUd2QyxnQkFBVyxHQUFYLFdBQVcsQ0FBYztRQVVyQyxhQUFRLEdBQWtDO1lBQUMsY0FBYztpQkFBZCxXQUFjLENBQWQsc0JBQWMsQ0FBZCxJQUFjO2dCQUFkLDZCQUFjOztZQUN4RCxJQUFJLE1BQU0sR0FBcUMsS0FBSSxDQUFDLGVBQWUsT0FBcEIsS0FBSSxFQUFvQixJQUFJLENBQUMsQ0FBQztZQUM3RSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekIsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNmLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDUCxLQUFJLENBQUMsZUFBZSxDQUFD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

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ng = __webpack_require__(16);
	exports.moduleName = 'rl.utilities.services.autosaveAction';
	exports.serviceName = 'autosaveAction';
	var AutosaveActionService = (function () {
	    function AutosaveActionService($timeout) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.completeMessageDuration = 1000;
	        this.autosaveSuccessful = function (data) {
	            return _this.resolveAutosave(data, true);
	        };
	        this.autosaveFailed = function (data) {
	            return _this.resolveAutosave(data, false);
	        };
	        this.resolveAutosave = function (data, success) {
	            _this._saving = false;
	            _this._complete = true;
	            _this._successful = success;
	            _this.$timeout(function () {
	                _this._complete = false;
	            }, _this.completeMessageDuration);
	            return data;
	        };
	    }
	    Object.defineProperty(AutosaveActionService.prototype, "saving", {
	        get: function () {
	            return this._saving;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AutosaveActionService.prototype, "complete", {
	        get: function () {
	            return this._complete;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AutosaveActionService.prototype, "successful", {
	        get: function () {
	            return this._successful;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AutosaveActionService.prototype.trigger = function (promise) {
	        this._saving = true;
	        return promise.then(this.autosaveSuccessful)
	            .catch(this.autosaveFailed);
	    };
	    AutosaveActionService.$inject = ['$timeout'];
	    return AutosaveActionService;
	}());
	ng.module(exports.moduleName, [])
	    .service(exports.serviceName, AutosaveActionService);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b3NhdmVBY3Rpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dG9zYXZlQWN0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsSUFBWSxFQUFFLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFbkIsa0JBQVUsR0FBVyxzQ0FBc0MsQ0FBQztBQUM1RCxtQkFBVyxHQUFXLGdCQUFnQixDQUFDO0FBU2xEO0lBRUMsK0JBQW9CLFFBQTRCO1FBRmpELGlCQStDQztRQTdDb0IsYUFBUSxHQUFSLFFBQVEsQ0FBb0I7UUFFeEMsNEJBQXVCLEdBQVcsSUFBSSxDQUFDO1FBd0J2Qyx1QkFBa0IsR0FBeUIsVUFBQyxJQUFTO1lBQzVELE1BQU0sQ0FBQyxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUE7UUFFTyxtQkFBYyxHQUF5QixVQUFDLElBQVM7WUFDeEQsTUFBTSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQTtRQUVPLG9CQUFlLEdBQTJDLFVBQUMsSUFBUyxFQUFFLE9BQWdCO1lBQzdGLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLEtBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1lBRTNCLEtBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ2IsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDeEIsQ0FBQyxFQUFFLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBRWpDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDYixDQUFDLENBQUE7SUE1Q2tELENBQUM7SUFRcEQsc0JBQUkseUNBQU07YUFBVjtZQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksMkNBQVE7YUFBWjtZQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNkNBQVU7YUFBZDtZQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3pCLENBQUM7OztPQUFBO0lBRUQsdUNBQU8sR0FBUCxVQUFRLE9BQXlCO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQzthQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUF6Qk0sNkJBQU8sR0FBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBOEN6Qyw0QkFBQztBQUFELENBQUMsQUEvQ0QsSUErQ0M7QUFFRCxFQUFFLENBQUMsTUFBTSxDQUFDLGtCQUFVLEVBQUUsRUFBRSxDQUFDO0tBQ3ZCLE9BQU8sQ0FBQyxtQkFBVyxFQUFFLHFCQUFxQixDQUFDLENBQUMifQ==

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(16);
	var _ = __webpack_require__(14);
	var onChangeTrigger_1 = __webpack_require__(64);
	var trigger_1 = __webpack_require__(65);
	__export(__webpack_require__(64));
	__export(__webpack_require__(65));
	exports.defaultTriggers = 'onChange';
	exports.moduleName = 'rl.ui.services.autosave.triggers';
	exports.factoryName = 'autosaveTriggers';
	var TriggerService = (function () {
	    function TriggerService($rootScope, $timeout) {
	        this.triggers = {
	            onChange: new onChangeTrigger_1.OnChangeTrigger($rootScope, $timeout),
	            none: new trigger_1.Trigger('none'),
	        };
	    }
	    TriggerService.prototype.setTriggers = function (triggerString, autosave) {
	        if (triggerString == null) {
	            triggerString = exports.defaultTriggers;
	        }
	        _.each(this.triggers, function (trigger) {
	            if (trigger.hasMatch(triggerString)) {
	                trigger.setTrigger(autosave);
	            }
	        });
	    };
	    return TriggerService;
	}());
	triggerServiceFactory.$inject = ['$rootScope', '$timeout'];
	function triggerServiceFactory($rootScope, $timeout) {
	    return {
	        getInstance: function () {
	            return new TriggerService($rootScope, $timeout);
	        },
	    };
	}
	angular.module(exports.moduleName, [])
	    .factory(exports.factoryName, triggerServiceFactory);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlcnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRyaWdnZXJzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O0FBRWIsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDbkMsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsZ0NBQWtELG1CQUFtQixDQUFDLENBQUE7QUFDdEUsd0JBQWtDLFdBQVcsQ0FBQyxDQUFBO0FBRTlDLGlCQUFjLG1CQUFtQixDQUFDLEVBQUE7QUFDbEMsaUJBQWMsV0FBVyxDQUFDLEVBQUE7QUFFZix1QkFBZSxHQUFXLFVBQVUsQ0FBQztBQUVyQyxrQkFBVSxHQUFXLGtDQUFrQyxDQUFDO0FBQ3hELG1CQUFXLEdBQVcsa0JBQWtCLENBQUM7QUFvQnBEO0lBR0Msd0JBQVksVUFBcUMsRUFBRSxRQUFpQztRQUNuRixJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ2YsUUFBUSxFQUFFLElBQUksaUNBQWUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDO1lBQ25ELElBQUksRUFBRSxJQUFJLGlCQUFPLENBQU8sTUFBTSxDQUFDO1NBQy9CLENBQUM7SUFDSCxDQUFDO0lBRUQsb0NBQVcsR0FBWCxVQUFZLGFBQXFCLEVBQUUsUUFBb0I7UUFDdEQsRUFBRSxDQUFDLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0IsYUFBYSxHQUFHLHVCQUFlLENBQUM7UUFDakMsQ0FBQztRQUVELENBQUMsQ0FBQyxJQUFJLENBQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFDLE9BQXNCO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlCLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRixxQkFBQztBQUFELENBQUMsQUFyQkQsSUFxQkM7QUFNRCxxQkFBcUIsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0QsK0JBQStCLFVBQXFDLEVBQUUsUUFBaUM7SUFDdEcsTUFBTSxDQUFDO1FBQ04sV0FBVztZQUNWLE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDakQsQ0FBQztLQUNELENBQUM7QUFDSCxDQUFDO0FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBVSxFQUFFLEVBQUUsQ0FBQztLQUM1QixPQUFPLENBQUMsbUJBQVcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDIn0=

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var _ = __webpack_require__(14);
	var trigger_1 = __webpack_require__(65);
	var OnChangeTrigger = (function (_super) {
	    __extends(OnChangeTrigger, _super);
	    function OnChangeTrigger($rootScope, $timeout) {
	        _super.call(this, 'onChange');
	        this.$rootScope = $rootScope;
	        this.$timeout = $timeout;
	        this.debounceDuration = 1000;
	    }
	    OnChangeTrigger.prototype.setTrigger = function (autosave) {
	        var _this = this;
	        if (_.isUndefined(this.settings)) {
	            return;
	        }
	        this.initListeners();
	        this.$rootScope.$watch(function () {
	            return _this.settings.form != null
	                ? _this.settings.form.$dirty
	                : false;
	        }, function () { _this.triggerSaveAction(autosave); });
	        this.$rootScope.$watch(function () {
	            return _this.settings.form != null
	                ? _this.settings.form.$valid
	                : false;
	        }, function () { _this.triggerSaveAction(autosave); });
	    };
	    OnChangeTrigger.prototype.triggerSaveAction = function (autosave) {
	        var _this = this;
	        if (this.settings.form.$dirty && (this.settings.form.$valid || this.settings.saveWhenInvalid)) {
	            this.setTimer(autosave);
	            this.clearListener = this.setListener(function () {
	                _this.setTimer(autosave);
	            });
	        }
	    };
	    OnChangeTrigger.prototype.setTimer = function (autosave) {
	        var _this = this;
	        if (this.timer != null) {
	            this.$timeout.cancel(this.timer);
	        }
	        this.timer = this.$timeout(function () {
	            _this.clearListener();
	            autosave();
	        }, this.debounceDuration);
	    };
	    OnChangeTrigger.prototype.initListeners = function () {
	        this.setListener = this.settings.setChangeListener || this.nullSetListener;
	        this.clearListener = this.nullClearListener;
	    };
	    OnChangeTrigger.prototype.nullSetListener = function () {
	        console.log('No change listener available');
	        return this.nullClearListener;
	    };
	    OnChangeTrigger.prototype.nullClearListener = function () {
	        console.log('No change listener register');
	    };
	    return OnChangeTrigger;
	}(trigger_1.Trigger));
	exports.OnChangeTrigger = OnChangeTrigger;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25DaGFuZ2VUcmlnZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib25DaGFuZ2VUcmlnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7O0FBR2IsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsd0JBQWtDLFdBQVcsQ0FBQyxDQUFBO0FBVTlDO0lBQXFDLG1DQUF5QjtJQU03RCx5QkFBb0IsVUFBZ0MsRUFBVSxRQUE0QjtRQUN6RixrQkFBTSxVQUFVLENBQUMsQ0FBQztRQURDLGVBQVUsR0FBVixVQUFVLENBQXNCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBb0I7UUFMbEYscUJBQWdCLEdBQVcsSUFBSSxDQUFDO0lBT3hDLENBQUM7SUFFRCxvQ0FBVSxHQUFWLFVBQVcsUUFBc0I7UUFBakMsaUJBa0JDO1FBakJBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUM7UUFDUixDQUFDO1FBRUQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXJCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJO2tCQUM5QixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNO2tCQUN6QixLQUFLLENBQUM7UUFDVixDQUFDLEVBQUUsY0FBUSxLQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztZQUN0QixNQUFNLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTtrQkFDOUIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTTtrQkFDekIsS0FBSyxDQUFDO1FBQ1YsQ0FBQyxFQUFFLGNBQVEsS0FBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVPLDJDQUFpQixHQUF6QixVQUEwQixRQUFvQjtRQUE5QyxpQkFRQztRQVBBLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXhCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztnQkFDckMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUM7SUFDRixDQUFDO0lBRU8sa0NBQVEsR0FBaEIsVUFBaUIsUUFBc0I7UUFBdkMsaUJBU0M7UUFSQSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDMUIsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLFFBQVEsRUFBRSxDQUFDO1FBQ1osQ0FBQyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTyx1Q0FBYSxHQUFyQjtRQUNDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzNFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQzdDLENBQUM7SUFFTyx5Q0FBZSxHQUF2QjtRQUNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQy9CLENBQUM7SUFFTywyQ0FBaUIsR0FBekI7UUFDQyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNGLHNCQUFDO0FBQUQsQ0FBQyxBQWhFRCxDQUFxQyxpQkFBTyxHQWdFM0M7QUFoRVksdUJBQWUsa0JBZ0UzQixDQUFBIn0=

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(14);
	var Trigger = (function () {
	    function Trigger(aliases, triggerAction) {
	        this.triggerAction = triggerAction;
	        this.aliases = aliases.split(' ');
	    }
	    Trigger.prototype.setTrigger = function (autosave) {
	        if (_.isFunction(this.triggerAction)) {
	            this.triggerAction(this.settings);
	        }
	    };
	    Trigger.prototype.hasMatch = function (triggers) {
	        var _this = this;
	        var triggerList = triggers.split(' ');
	        return _.some(triggerList, function (trigger) {
	            return _.some(_this.aliases, function (alias) {
	                return trigger === alias;
	            });
	        });
	    };
	    Trigger.prototype.configure = function (settings) {
	        this.settings = settings;
	    };
	    return Trigger;
	}());
	exports.Trigger = Trigger;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRyaWdnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFTNUI7SUFJQyxpQkFBWSxPQUFlLEVBQVUsYUFBNkM7UUFBN0Msa0JBQWEsR0FBYixhQUFhLENBQWdDO1FBQ2pGLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsNEJBQVUsR0FBVixVQUFXLFFBQXNCO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuQyxDQUFDO0lBQ0YsQ0FBQztJQUVELDBCQUFRLEdBQVIsVUFBUyxRQUFnQjtRQUF6QixpQkFPQztRQU5BLElBQUksV0FBVyxHQUFhLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQUMsT0FBZTtZQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBYTtnQkFDekMsTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUM7WUFDMUIsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCwyQkFBUyxHQUFULFVBQVUsUUFBbUI7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDMUIsQ0FBQztJQUNGLGNBQUM7QUFBRCxDQUFDLEFBMUJELElBMEJDO0FBMUJZLGVBQU8sVUEwQm5CLENBQUEifQ==

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(16);
	exports.moduleName = 'rl.ui.services.form';
	exports.serviceName = 'formService';
	var FormService = (function () {
	    function FormService() {
	    }
	    FormService.prototype.getAggregateError = function (form) {
	        var filteredForm = _.filter(form, function (prop) {
	            return prop != null && prop.rlErrorMessage != null;
	        });
	        var errors = _.mapValues(filteredForm, 'rlErrorMessage');
	        return _.first(errors);
	    };
	    return FormService;
	}());
	angular.module(exports.moduleName, [])
	    .service(exports.serviceName, FormService);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBSXhCLGtCQUFVLEdBQVcscUJBQXFCLENBQUM7QUFDM0MsbUJBQVcsR0FBVyxhQUFhLENBQUM7QUFNL0M7SUFBQTtJQVFBLENBQUM7SUFQQSx1Q0FBaUIsR0FBakIsVUFBa0IsSUFBb0I7UUFDckMsSUFBSSxZQUFZLEdBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBQyxJQUFTO1lBQ2hELE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxNQUFNLEdBQWtCLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDeEUsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUNGLGtCQUFDO0FBQUQsQ0FBQyxBQVJELElBUUM7QUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLGtCQUFVLEVBQUUsRUFBRSxDQUFDO0tBQzVCLE9BQU8sQ0FBQyxtQkFBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDIn0=

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/node/node.d.ts' />
	// /// <reference path='../../../typings/jquery/jquery.d.ts' />
	'use strict';
	var angular = __webpack_require__(16);
	var dialog_service_1 = __webpack_require__(57);
	exports.moduleName = 'rl.ui.components.dialog';
	exports.componentName = 'rlDialog';
	exports.controllerName = 'DialogController';
	var DialogController = (function () {
	    function DialogController($scope, $element, $transclude, $compile, dialogService) {
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$transclude = $transclude;
	        this.$compile = $compile;
	        this.dialogService = dialogService;
	    }
	    DialogController.prototype.$onInit = function () {
	        var _this = this;
	        var unbind = this.$scope.$watch(function () { return _this.form; }, function (form) {
	            if (form != null) {
	                _this.dialogService.setForm(form);
	                unbind();
	            }
	        });
	    };
	    DialogController.prototype.$postLink = function () {
	        var _this = this;
	        this.close = this.$scope.$parent.$close;
	        this.dismiss = this.$scope.$parent.$dismiss;
	        this.saveAndClose = this.$scope.$parent.$saveAndClose;
	        var footerArea = this.$element.find('.footer-template');
	        if (this.$transclude.isSlotFilled('footerSlot')) {
	            this.$transclude(function (footer) {
	                _this.hasFooter = (footer.length > 0);
	                if (_this.hasFooter) {
	                    footerArea.append(footer);
	                }
	            }, null, 'footerSlot');
	        }
	        else if (this.autosave) {
	            var footer = this.$compile(__webpack_require__(68))(this.$scope);
	            this.hasFooter = true;
	            footerArea.append(footer);
	        }
	    };
	    DialogController.$inject = ['$scope', '$element', '$transclude', '$compile', dialog_service_1.serviceName];
	    return DialogController;
	}());
	exports.DialogController = DialogController;
	var dialog = {
	    transclude: {
	        headerSlot: '?rlDialogHeader',
	        contentSlot: '?rlDialogContent',
	        footerSlot: '?rlDialogFooter',
	    },
	    template: __webpack_require__(69),
	    controller: exports.controllerName,
	    controllerAs: 'dialog',
	    bindings: {
	        autosave: '=',
	    },
	};
	angular.module(exports.moduleName, [dialog_service_1.moduleName])
	    .component(exports.componentName, dialog)
	    .controller(exports.controllerName, DialogController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJEQUEyRDtBQUMzRCwrREFBK0Q7QUFFL0QsWUFBWSxDQUFDO0FBRWIsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFbkMsK0JBQTRGLHNDQUFzQyxDQUFDLENBQUE7QUFHeEgsa0JBQVUsR0FBVyx5QkFBeUIsQ0FBQztBQUMvQyxxQkFBYSxHQUFXLFVBQVUsQ0FBQztBQUNuQyxzQkFBYyxHQUFXLGtCQUFrQixDQUFDO0FBaUJ2RDtJQVVDLDBCQUFvQixNQUFvQixFQUM1QixRQUFrQyxFQUNsQyxXQUF3QyxFQUN4QyxRQUFpQyxFQUNqQyxhQUFpQztRQUp6QixXQUFNLEdBQU4sTUFBTSxDQUFjO1FBQzVCLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGdCQUFXLEdBQVgsV0FBVyxDQUE2QjtRQUN4QyxhQUFRLEdBQVIsUUFBUSxDQUF5QjtRQUNqQyxrQkFBYSxHQUFiLGFBQWEsQ0FBb0I7SUFBRyxDQUFDO0lBRWpELGtDQUFPLEdBQVA7UUFBQSxpQkFPQztRQU5BLElBQUksTUFBTSxHQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQXdCLE1BQU0sQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQUMsSUFBb0I7WUFDM0csRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLEVBQUUsQ0FBQztZQUNWLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxvQ0FBUyxHQUFUO1FBQUEsaUJBa0JDO1FBakJBLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ3RELElBQUksVUFBVSxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFaEUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxXQUFXLENBQUMsVUFBQyxNQUFjO2dCQUMvQixLQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDckMsRUFBRSxDQUFDLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BCLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzNCLENBQUM7WUFDRixDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3hCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxNQUFNLEdBQVcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLENBQUM7SUFDRixDQUFDO0lBbENNLHdCQUFPLEdBQWEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsNEJBQWlCLENBQUMsQ0FBQztJQW1DakcsdUJBQUM7QUFBRCxDQUFDLEFBNUNELElBNENDO0FBNUNZLHdCQUFnQixtQkE0QzVCLENBQUE7QUFFRCxJQUFJLE1BQU0sR0FBOEI7SUFDdkMsVUFBVSxFQUFPO1FBQ2hCLFVBQVUsRUFBRSxpQkFBaUI7UUFDN0IsV0FBVyxFQUFFLGtCQUFrQjtRQUMvQixVQUFVLEVBQUUsaUJBQWlCO0tBQzdCO0lBQ0QsUUFBUSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7SUFDbEMsVUFBVSxFQUFFLHNCQUFjO0lBQzFCLFlBQVksRUFBRSxRQUFRO0lBQ3RCLFFBQVEsRUFBRTtRQUNULFFBQVEsRUFBRSxHQUFHO0tBQ2I7Q0FDRCxDQUFDO0FBRUYsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBVSxFQUFFLENBQUMsMkJBQVksQ0FBQyxDQUFDO0tBQ3hDLFNBQVMsQ0FBQyxxQkFBYSxFQUFFLE1BQU0sQ0FBQztLQUNoQyxVQUFVLENBQUMsc0JBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDIn0=

/***/ },
/* 68 */
/***/ function(module, exports) {

	module.exports = "<rl-button type=\"danger\" action=\"dialog.close()\"><i class=\"fa fa-times\"></i> Cancel</rl-button>\r\n<rl-button-async type=\"success\" action=\"dialog.saveAndClose()\"><i class=\"fa fa-check\"></i> Save</rl-button-submit>"

/***/ },
/* 69 */
/***/ function(module, exports) {

	module.exports = "<rl-form save=\"dialog.saveAndClose()\" saving=\"dialog.saving\" form=\"dialog.form\">\r\n\t<div class=\"modal-header\">\r\n\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"dialog.close()\">\r\n\t\t\t<span class=\"fa-stack\">\r\n\t\t\t\t<i class=\"close-bg fa fa-circle fa-stack-2x\"></i>\r\n\t\t\t\t<i class=\"close-icon fa fa-close fa-stack-1x\"></i>\r\n\t\t\t</span>\r\n\t\t</button>\r\n\t\t<div ng-transclude=\"headerSlot\"></div>\r\n\t\t<div class=\"clearfix \"></div>\r\n\t</div>\r\n\t<div class=\"modal-body\">\r\n\t\t<div ng-transclude=\"contentSlot\"></div>\r\n\t\t<div class=\"clearfix\"></div>\r\n\t</div>\r\n\t<div class=\"modal-footer\" ng-show=\"dialog.hasFooter\">\r\n\t\t<div class=\"footer-template\"></div>\r\n\t\t<div class=\"clearfix\"></div>\r\n\t</div>\r\n</rl-form>"

/***/ },
/* 70 */
/***/ function(module, exports) {

	module.exports = "<div class=\"modal-body\">\r\n\t<div class=\"row\">\r\n\t\t<div class=\"col-xs-12\">\r\n\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"$dismiss()\">\r\n\t\t\t\t<span class=\"fa-stack\">\r\n\t\t\t\t\t<i class=\"close-bg fa fa-circle fa-stack-2x\"></i>\r\n\t\t\t\t\t<i class=\"close-icon fa fa-close fa-stack-1x\"></i>\r\n\t\t\t\t</span>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t{{prompt.message}}\r\n\t<div class=\"clearfix\"></div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n\t<button class=\"btn btn-danger\" type=\"button\" ng-click=\"$cancel()\"><i class=\"fa fa-times\"></i> {{prompt.cancelButton}}</button>\r\n\t<button class=\"btn btn-success\" type=\"button\" ng-click=\"$accept()\"><i class=\"fa fa-check\"></i> {{prompt.okButton}}</button>\r\n\t<div class=\"clearfix\"></div>\r\n</div>"

/***/ },
/* 71 */
/***/ function(module, exports) {

	module.exports = "<h3>Tabs</h3>\r\n<label>Tabset</label>\r\n<rl-tabset>\r\n\t<rl-tab>\r\n\t\t<rl-tab-header>Header</rl-tab-header>\r\n\t\t<rl-tab-content>Content 1</rl-tab-content>\r\n\t\t<rl-tab-footer>Footer 1</rl-tab-footer>\r\n\t</rl-tab>\r\n\t<rl-tab>\r\n\t\t<rl-tab-header>Header 2</rl-tab-header>\r\n\t\t<rl-tab-content>Content 2</rl-tab-content>\r\n\t\t<rl-tab-footer>Footer 2</rl-tab-footer>\r\n\t</rl-tab>\r\n</rl-tabset>\r\n<label>Multi-step indicator</label>\r\n<rl-multi-step-indicator steps=\"tabs.steps\"></rl-multi-step-indicator>"

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(16);
	var TabTestController = (function () {
	    function TabTestController() {
	    }
	    TabTestController.prototype.$onInit = function () {
	        this.steps = [
	            {
	                title: 'Step 1',
	                subtitle: 'Do something',
	                onClick: function () { return console.log('Visited step 1'); },
	            },
	            {
	                title: 'Step 2',
	                subtitle: 'Do more work',
	                onClick: function () { return console.log('Visited step 2'); },
	            },
	        ];
	    };
	    return TabTestController;
	}());
	angular.module('app')
	    .controller('TabTestController', TabTestController);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFic0Jvb3RzdHJhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRhYnNCb290c3RyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBSW5DO0lBQUE7SUFpQkEsQ0FBQztJQWRBLG1DQUFPLEdBQVA7UUFDQyxJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1o7Z0JBQ0MsS0FBSyxFQUFFLFFBQVE7Z0JBQ2YsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLE9BQU8sRUFBRSxjQUFZLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUE3QixDQUE2QjthQUNsRDtZQUNEO2dCQUNDLEtBQUssRUFBRSxRQUFRO2dCQUNmLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixPQUFPLEVBQUUsY0FBWSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBN0IsQ0FBNkI7YUFDbEQ7U0FDRCxDQUFDO0lBQ0gsQ0FBQztJQUNGLHdCQUFDO0FBQUQsQ0FBQyxBQWpCRCxJQWlCQztBQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0tBQ25CLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDIn0=

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,