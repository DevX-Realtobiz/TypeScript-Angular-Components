this["rl_components"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "output";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	__webpack_require__(2);
	__webpack_require__(3);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(13);
	var behaviors = __webpack_require__(14);
	exports.behaviors = behaviors;
	var components = __webpack_require__(24);
	exports.components = components;
	var services = __webpack_require__(173);
	exports.services = services;
	var types = __webpack_require__(187);
	exports.types = types;
	exports.moduleName = 'rl.ui';
	angular.module(exports.moduleName, [
	    'ui.bootstrap',
	    'ui.bootstrap-slider',
	    'ngSanitize',
	    typescript_angular_utilities_1.name,
	    behaviors.moduleName,
	    components.moduleName,
	    services.moduleName,
	]);


/***/ },
/* 1 */
/***/ function(module, exports) {

	(function() { module.exports = this["angular"]; }());

/***/ },
/* 2 */
/***/ function(module, exports) {

	(function() { module.exports = this["angular-ui"]; }());

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	module.exports = 'ngSanitize';


/***/ },
/* 4 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.0
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular, undefined) {'use strict';
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	var $sanitizeMinErr = angular.$$minErr('$sanitize');
	
	/**
	 * @ngdoc module
	 * @name ngSanitize
	 * @description
	 *
	 * # ngSanitize
	 *
	 * The `ngSanitize` module provides functionality to sanitize HTML.
	 *
	 *
	 * <div doc-module-components="ngSanitize"></div>
	 *
	 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
	 */
	
	/**
	 * @ngdoc service
	 * @name $sanitize
	 * @kind function
	 *
	 * @description
	 *   Sanitizes an html string by stripping all potentially dangerous tokens.
	 *
	 *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
	 *   then serialized back to properly escaped html string. This means that no unsafe input can make
	 *   it into the returned string.
	 *
	 *   The whitelist for URL sanitization of attribute values is configured using the functions
	 *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider
	 *   `$compileProvider`}.
	 *
	 *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
	 *
	 * @param {string} html HTML input.
	 * @returns {string} Sanitized HTML.
	 *
	 * @example
	   <example module="sanitizeExample" deps="angular-sanitize.js">
	   <file name="index.html">
	     <script>
	         angular.module('sanitizeExample', ['ngSanitize'])
	           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
	             $scope.snippet =
	               '<p style="color:blue">an html\n' +
	               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
	               'snippet</p>';
	             $scope.deliberatelyTrustDangerousSnippet = function() {
	               return $sce.trustAsHtml($scope.snippet);
	             };
	           }]);
	     </script>
	     <div ng-controller="ExampleController">
	        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
	       <table>
	         <tr>
	           <td>Directive</td>
	           <td>How</td>
	           <td>Source</td>
	           <td>Rendered</td>
	         </tr>
	         <tr id="bind-html-with-sanitize">
	           <td>ng-bind-html</td>
	           <td>Automatically uses $sanitize</td>
	           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
	           <td><div ng-bind-html="snippet"></div></td>
	         </tr>
	         <tr id="bind-html-with-trust">
	           <td>ng-bind-html</td>
	           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
	           <td>
	           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
	&lt;/div&gt;</pre>
	           </td>
	           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
	         </tr>
	         <tr id="bind-default">
	           <td>ng-bind</td>
	           <td>Automatically escapes</td>
	           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
	           <td><div ng-bind="snippet"></div></td>
	         </tr>
	       </table>
	       </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should sanitize the html snippet by default', function() {
	       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
	         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
	     });
	
	     it('should inline raw snippet if bound to a trusted value', function() {
	       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
	         toBe("<p style=\"color:blue\">an html\n" +
	              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
	              "snippet</p>");
	     });
	
	     it('should escape snippet without any filter', function() {
	       expect(element(by.css('#bind-default div')).getInnerHtml()).
	         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
	              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
	              "snippet&lt;/p&gt;");
	     });
	
	     it('should update', function() {
	       element(by.model('snippet')).clear();
	       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
	       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
	         toBe('new <b>text</b>');
	       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
	         'new <b onclick="alert(1)">text</b>');
	       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
	         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
	     });
	   </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc provider
	 * @name $sanitizeProvider
	 *
	 * @description
	 * Creates and configures {@link $sanitize} instance.
	 */
	function $SanitizeProvider() {
	  var svgEnabled = false;
	
	  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
	    if (svgEnabled) {
	      angular.extend(validElements, svgElements);
	    }
	    return function(html) {
	      var buf = [];
	      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
	        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
	      }));
	      return buf.join('');
	    };
	  }];
	
	
	  /**
	   * @ngdoc method
	   * @name $sanitizeProvider#enableSvg
	   * @kind function
	   *
	   * @description
	   * Enables a subset of svg to be supported by the sanitizer.
	   *
	   * <div class="alert alert-warning">
	   *   <p>By enabling this setting without taking other precautions, you might expose your
	   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
	   *   outside of the containing element and be rendered over other elements on the page (e.g. a login
	   *   link). Such behavior can then result in phishing incidents.</p>
	   *
	   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
	   *   tags within the sanitized content:</p>
	   *
	   *   <br>
	   *
	   *   <pre><code>
	   *   .rootOfTheIncludedContent svg {
	   *     overflow: hidden !important;
	   *   }
	   *   </code></pre>
	   * </div>
	   *
	   * @param {boolean=} regexp New regexp to whitelist urls with.
	   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called
	   *    without an argument or self for chaining otherwise.
	   */
	  this.enableSvg = function(enableSvg) {
	    if (angular.isDefined(enableSvg)) {
	      svgEnabled = enableSvg;
	      return this;
	    } else {
	      return svgEnabled;
	    }
	  };
	}
	
	function sanitizeText(chars) {
	  var buf = [];
	  var writer = htmlSanitizeWriter(buf, angular.noop);
	  writer.chars(chars);
	  return buf.join('');
	}
	
	
	// Regular Expressions for parsing tags and attributes
	var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
	  // Match everything outside of normal chars and " (quote character)
	  NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	
	
	// Good source of info about elements and attributes
	// http://dev.w3.org/html5/spec/Overview.html#semantics
	// http://simon.html5.org/html-elements
	
	// Safe Void Elements - HTML5
	// http://dev.w3.org/html5/spec/Overview.html#void-elements
	var voidElements = toMap("area,br,col,hr,img,wbr");
	
	// Elements that you can, intentionally, leave open (and which close themselves)
	// http://dev.w3.org/html5/spec/Overview.html#optional-tags
	var optionalEndTagBlockElements = toMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
	    optionalEndTagInlineElements = toMap("rp,rt"),
	    optionalEndTagElements = angular.extend({},
	                                            optionalEndTagInlineElements,
	                                            optionalEndTagBlockElements);
	
	// Safe Block Elements - HTML5
	var blockElements = angular.extend({}, optionalEndTagBlockElements, toMap("address,article," +
	        "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," +
	        "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul"));
	
	// Inline Elements - HTML5
	var inlineElements = angular.extend({}, optionalEndTagInlineElements, toMap("a,abbr,acronym,b," +
	        "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," +
	        "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));
	
	// SVG Elements
	// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
	// Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
	// They can potentially allow for arbitrary javascript to be executed. See #11290
	var svgElements = toMap("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph," +
	        "hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline," +
	        "radialGradient,rect,stop,svg,switch,text,title,tspan");
	
	// Blocked Elements (will be stripped)
	var blockedElements = toMap("script,style");
	
	var validElements = angular.extend({},
	                                   voidElements,
	                                   blockElements,
	                                   inlineElements,
	                                   optionalEndTagElements);
	
	//Attributes that have href and hence need to be sanitized
	var uriAttrs = toMap("background,cite,href,longdesc,src,xlink:href");
	
	var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +
	    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +
	    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +
	    'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +
	    'valign,value,vspace,width');
	
	// SVG attributes (without "id" and "name" attributes)
	// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
	var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +
	    'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +
	    'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +
	    'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +
	    'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +
	    'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +
	    'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +
	    'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +
	    'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +
	    'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +
	    'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +
	    'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +
	    'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +
	    'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +
	    'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);
	
	var validAttrs = angular.extend({},
	                                uriAttrs,
	                                svgAttrs,
	                                htmlAttrs);
	
	function toMap(str, lowercaseKeys) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[lowercaseKeys ? angular.lowercase(items[i]) : items[i]] = true;
	  }
	  return obj;
	}
	
	var inertBodyElement;
	(function(window) {
	  var doc;
	  if (window.document && window.document.implementation) {
	    doc = window.document.implementation.createHTMLDocument("inert");
	  } else {
	    throw $sanitizeMinErr('noinert', "Can't create an inert html document");
	  }
	  var docElement = doc.documentElement || doc.getDocumentElement();
	  var bodyElements = docElement.getElementsByTagName('body');
	
	  // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one
	  if (bodyElements.length === 1) {
	    inertBodyElement = bodyElements[0];
	  } else {
	    var html = doc.createElement('html');
	    inertBodyElement = doc.createElement('body');
	    html.appendChild(inertBodyElement);
	    doc.appendChild(html);
	  }
	})(window);
	
	/**
	 * @example
	 * htmlParser(htmlString, {
	 *     start: function(tag, attrs) {},
	 *     end: function(tag) {},
	 *     chars: function(text) {},
	 *     comment: function(text) {}
	 * });
	 *
	 * @param {string} html string
	 * @param {object} handler
	 */
	function htmlParser(html, handler) {
	  if (html === null || html === undefined) {
	    html = '';
	  } else if (typeof html !== 'string') {
	    html = '' + html;
	  }
	  inertBodyElement.innerHTML = html;
	
	  //mXSS protection
	  var mXSSAttempts = 5;
	  do {
	    if (mXSSAttempts === 0) {
	      throw $sanitizeMinErr('uinput', "Failed to sanitize html because the input is unstable");
	    }
	    mXSSAttempts--;
	
	    // strip custom-namespaced attributes on IE<=11
	    if (document.documentMode <= 11) {
	      stripCustomNsAttrs(inertBodyElement);
	    }
	    html = inertBodyElement.innerHTML; //trigger mXSS
	    inertBodyElement.innerHTML = html;
	  } while (html !== inertBodyElement.innerHTML);
	
	  var node = inertBodyElement.firstChild;
	  while (node) {
	    switch (node.nodeType) {
	      case 1: // ELEMENT_NODE
	        handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
	        break;
	      case 3: // TEXT NODE
	        handler.chars(node.textContent);
	        break;
	    }
	
	    var nextNode;
	    if (!(nextNode = node.firstChild)) {
	      if (node.nodeType == 1) {
	        handler.end(node.nodeName.toLowerCase());
	      }
	      nextNode = node.nextSibling;
	      if (!nextNode) {
	        while (nextNode == null) {
	          node = node.parentNode;
	          if (node === inertBodyElement) break;
	          nextNode = node.nextSibling;
	          if (node.nodeType == 1) {
	            handler.end(node.nodeName.toLowerCase());
	          }
	        }
	      }
	    }
	    node = nextNode;
	  }
	
	  while (node = inertBodyElement.firstChild) {
	    inertBodyElement.removeChild(node);
	  }
	}
	
	function attrToMap(attrs) {
	  var map = {};
	  for (var i = 0, ii = attrs.length; i < ii; i++) {
	    var attr = attrs[i];
	    map[attr.name] = attr.value;
	  }
	  return map;
	}
	
	
	/**
	 * Escapes all potentially dangerous characters, so that the
	 * resulting string can be safely inserted into attribute or
	 * element text.
	 * @param value
	 * @returns {string} escaped text
	 */
	function encodeEntities(value) {
	  return value.
	    replace(/&/g, '&amp;').
	    replace(SURROGATE_PAIR_REGEXP, function(value) {
	      var hi = value.charCodeAt(0);
	      var low = value.charCodeAt(1);
	      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	    }).
	    replace(NON_ALPHANUMERIC_REGEXP, function(value) {
	      return '&#' + value.charCodeAt(0) + ';';
	    }).
	    replace(/</g, '&lt;').
	    replace(/>/g, '&gt;');
	}
	
	/**
	 * create an HTML/XML writer which writes to buffer
	 * @param {Array} buf use buf.join('') to get out sanitized html string
	 * @returns {object} in the form of {
	 *     start: function(tag, attrs) {},
	 *     end: function(tag) {},
	 *     chars: function(text) {},
	 *     comment: function(text) {}
	 * }
	 */
	function htmlSanitizeWriter(buf, uriValidator) {
	  var ignoreCurrentElement = false;
	  var out = angular.bind(buf, buf.push);
	  return {
	    start: function(tag, attrs) {
	      tag = angular.lowercase(tag);
	      if (!ignoreCurrentElement && blockedElements[tag]) {
	        ignoreCurrentElement = tag;
	      }
	      if (!ignoreCurrentElement && validElements[tag] === true) {
	        out('<');
	        out(tag);
	        angular.forEach(attrs, function(value, key) {
	          var lkey=angular.lowercase(key);
	          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
	          if (validAttrs[lkey] === true &&
	            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
	            out(' ');
	            out(key);
	            out('="');
	            out(encodeEntities(value));
	            out('"');
	          }
	        });
	        out('>');
	      }
	    },
	    end: function(tag) {
	      tag = angular.lowercase(tag);
	      if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
	        out('</');
	        out(tag);
	        out('>');
	      }
	      if (tag == ignoreCurrentElement) {
	        ignoreCurrentElement = false;
	      }
	    },
	    chars: function(chars) {
	      if (!ignoreCurrentElement) {
	        out(encodeEntities(chars));
	      }
	    }
	  };
	}
	
	
	/**
	 * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
	 * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
	 * to allow any of these custom attributes. This method strips them all.
	 *
	 * @param node Root element to process
	 */
	function stripCustomNsAttrs(node) {
	  if (node.nodeType === Node.ELEMENT_NODE) {
	    var attrs = node.attributes;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      var attrNode = attrs[i];
	      var attrName = attrNode.name.toLowerCase();
	      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	        node.removeAttributeNode(attrNode);
	        i--;
	        l--;
	      }
	    }
	  }
	
	  var nextNode = node.firstChild;
	  if (nextNode) {
	    stripCustomNsAttrs(nextNode);
	  }
	
	  nextNode = node.nextSibling;
	  if (nextNode) {
	    stripCustomNsAttrs(nextNode);
	  }
	}
	
	
	
	// define ngSanitize module and register $sanitize service
	angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);
	
	/* global sanitizeText: false */
	
	/**
	 * @ngdoc filter
	 * @name linky
	 * @kind function
	 *
	 * @description
	 * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and
	 * plain email address links.
	 *
	 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
	 *
	 * @param {string} text Input text.
	 * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.
	 * @param {object|function(url)} [attributes] Add custom attributes to the link element.
	 *
	 *    Can be one of:
	 *
	 *    - `object`: A map of attributes
	 *    - `function`: Takes the url as a parameter and returns a map of attributes
	 *
	 *    If the map of attributes contains a value for `target`, it overrides the value of
	 *    the target parameter.
	 *
	 *
	 * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
	 *
	 * @usage
	   <span ng-bind-html="linky_expression | linky"></span>
	 *
	 * @example
	   <example module="linkyExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
	       <table>
	         <tr>
	           <th>Filter</th>
	           <th>Source</th>
	           <th>Rendered</th>
	         </tr>
	         <tr id="linky-filter">
	           <td>linky filter</td>
	           <td>
	             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
	           </td>
	           <td>
	             <div ng-bind-html="snippet | linky"></div>
	           </td>
	         </tr>
	         <tr id="linky-target">
	          <td>linky target</td>
	          <td>
	            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
	          </td>
	          <td>
	            <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
	          </td>
	         </tr>
	         <tr id="linky-custom-attributes">
	          <td>linky custom attributes</td>
	          <td>
	            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
	          </td>
	          <td>
	            <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
	          </td>
	         </tr>
	         <tr id="escaped-html">
	           <td>no filter</td>
	           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
	           <td><div ng-bind="snippet"></div></td>
	         </tr>
	       </table>
	     </file>
	     <file name="script.js">
	       angular.module('linkyExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.snippet =
	             'Pretty text with some links:\n'+
	             'http://angularjs.org/,\n'+
	             'mailto:us@somewhere.org,\n'+
	             'another@somewhere.org,\n'+
	             'and one more: ftp://127.0.0.1/.';
	           $scope.snippetWithSingleURL = 'http://angularjs.org/';
	         }]);
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should linkify the snippet with urls', function() {
	         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
	             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
	                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
	         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
	       });
	
	       it('should not linkify snippet without the linky filter', function() {
	         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
	             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
	                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
	         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
	       });
	
	       it('should update', function() {
	         element(by.model('snippet')).clear();
	         element(by.model('snippet')).sendKeys('new http://link.');
	         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
	             toBe('new http://link.');
	         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
	         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
	             .toBe('new http://link.');
	       });
	
	       it('should work with the target property', function() {
	        expect(element(by.id('linky-target')).
	            element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
	            toBe('http://angularjs.org/');
	        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
	       });
	
	       it('should optionally add custom attributes', function() {
	        expect(element(by.id('linky-custom-attributes')).
	            element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
	            toBe('http://angularjs.org/');
	        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
	       });
	     </file>
	   </example>
	 */
	angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
	  var LINKY_URL_REGEXP =
	        /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
	      MAILTO_REGEXP = /^mailto:/i;
	
	  var linkyMinErr = angular.$$minErr('linky');
	  var isString = angular.isString;
	
	  return function(text, target, attributes) {
	    if (text == null || text === '') return text;
	    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);
	
	    var match;
	    var raw = text;
	    var html = [];
	    var url;
	    var i;
	    while ((match = raw.match(LINKY_URL_REGEXP))) {
	      // We can not end in these as they are sometimes found at the end of the sentence
	      url = match[0];
	      // if we did not match ftp/http/www/mailto then assume mailto
	      if (!match[2] && !match[4]) {
	        url = (match[3] ? 'http://' : 'mailto:') + url;
	      }
	      i = match.index;
	      addText(raw.substr(0, i));
	      addLink(url, match[0].replace(MAILTO_REGEXP, ''));
	      raw = raw.substring(i + match[0].length);
	    }
	    addText(raw);
	    return $sanitize(html.join(''));
	
	    function addText(text) {
	      if (!text) {
	        return;
	      }
	      html.push(sanitizeText(text));
	    }
	
	    function addLink(url, text) {
	      var key;
	      html.push('<a ');
	      if (angular.isFunction(attributes)) {
	        attributes = attributes(url);
	      }
	      if (angular.isObject(attributes)) {
	        for (key in attributes) {
	          html.push(key + '="' + attributes[key] + '" ');
	        }
	      } else {
	        attributes = {};
	      }
	      if (angular.isDefined(target) && !('target' in attributes)) {
	        html.push('target="',
	                  target,
	                  '" ');
	      }
	      html.push('href="',
	                url.replace(/"/g, '&quot;'),
	                '">');
	      addText(text);
	      html.push('</a>');
	    }
	  };
	}]);
	
	
	})(window, window.angular);


/***/ },
/* 5 */
/***/ function(module, exports) {

	(function() { module.exports = this["rl_utilities"]; }());

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(7);
	var Slider = __webpack_require__(11);
	
	angular.module('ui.bootstrap-slider', [])
	    .directive('slider', ['$parse', '$timeout', '$rootScope', function ($parse, $timeout, $rootScope) {
	        return {
	            restrict: 'AE',
	            replace: true,
	            template: '<div><input class="slider-input" type="text" style="width:100%" /></div>',
	            require: 'ngModel',
	            scope: {
	                max: "=",
	                min: "=",
	                step: "=",
	                value: "=",
	                ngModel: '=',
	                ngDisabled: '=',
	                range: '=',
	                sliderid: '=',
	                ticks: '=',
	                ticksLabels: '=',
	                ticksSnapBounds: '=',
	                ticksPositions: '=',
	                scale: '=',
	                formatter: '&',
	                onStartSlide: '&',
	                onStopSlide: '&',
	                onSlide: '&'
	            },
	            link: function ($scope, element, attrs, ngModelCtrl, $compile) {
	                var ngModelDeregisterFn, ngDisabledDeregisterFn;
	
	                initSlider();
	
	                function initSlider() {
	                    var options = {};
	
	                    function setOption(key, value, defaultValue) {
	                        options[key] = value || defaultValue;
	                    }
	
	                    function setFloatOption(key, value, defaultValue) {
	                        options[key] = value || value === 0 ? parseFloat(value) : defaultValue;
	                    }
	
	                    function setBooleanOption(key, value, defaultValue) {
	                        options[key] = value ? value + '' === 'true' : defaultValue;
	                    }
	
	                    function getArrayOrValue(value) {
	                        return (angular.isString(value) && value.indexOf("[") === 0) ? angular.fromJson(value) : value;
	                    }
	
	                    setOption('id', $scope.sliderid);
	                    setOption('orientation', attrs.orientation, 'horizontal');
	                    setOption('selection', attrs.selection, 'before');
	                    setOption('handle', attrs.handle, 'round');
	                    setOption('tooltip', attrs.sliderTooltip || attrs.tooltip, 'show');
	                    setOption('tooltip_position', attrs.sliderTooltipPosition, 'top');
	                    setOption('tooltipseparator', attrs.tooltipseparator, ':');
	                    setOption('ticks', $scope.ticks);
	                    setOption('ticks_labels', $scope.ticksLabels);
	                    setOption('ticks_snap_bounds', $scope.ticksSnapBounds);
	                    setOption('ticks_positions', $scope.ticksPositions);
	                    setOption('scale', $scope.scale, 'linear');
	
	                    setFloatOption('min', $scope.min, 0);
	                    setFloatOption('max', $scope.max, 10);
	                    setFloatOption('step', $scope.step, 1);
	                    var strNbr = options.step + '';
	                    var decimals = strNbr.substring(strNbr.lastIndexOf('.') + 1);
	                    setFloatOption('precision', attrs.precision, decimals);
	
	                    setBooleanOption('tooltip_split', attrs.tooltipsplit, false);
	                    setBooleanOption('enabled', attrs.enabled, true);
	                    setBooleanOption('naturalarrowkeys', attrs.naturalarrowkeys, false);
	                    setBooleanOption('reversed', attrs.reversed, false);
	
	                    setBooleanOption('range', $scope.range, false);
	                    if (options.range) {
	                        if (angular.isArray($scope.value)) {
	                            options.value = $scope.value;
	                        }
	                        else if (angular.isString($scope.value)) {
	                            options.value = getArrayOrValue($scope.value);
	                            if (!angular.isArray(options.value)) {
	                                var value = parseFloat($scope.value);
	                                if (isNaN(value)) value = 5;
	
	                                if (value < $scope.min) {
	                                    value = $scope.min;
	                                    options.value = [value, options.max];
	                                }
	                                else if (value > $scope.max) {
	                                    value = $scope.max;
	                                    options.value = [options.min, value];
	                                }
	                                else {
	                                    options.value = [options.min, options.max];
	                                }
	                            }
	                        }
	                        else {
	                            options.value = [options.min, options.max]; // This is needed, because of value defined at $.fn.slider.defaults - default value 5 prevents creating range slider
	                        }
	                        $scope.ngModel = options.value; // needed, otherwise turns value into [null, ##]
	                    }
	                    else {
	                        setFloatOption('value', $scope.value, 5);
	                    }
	
	                    if ($scope.formatter) options.formatter = $scope.$eval($scope.formatter);
	
	
	                    // check if slider jQuery plugin exists
	                    if ('$' in window && $.fn.slider) {
	                        // adding methods to jQuery slider plugin prototype
	                        $.fn.slider.constructor.prototype.disable = function () {
	                            this.picker.off();
	                        };
	                        $.fn.slider.constructor.prototype.enable = function () {
	                            this.picker.on();
	                        };
	                    }
	
	                    // destroy previous slider to reset all options
	                    if (element[0].__slider)
	                        element[0].__slider.destroy();
	
	                    var slider = new Slider(element[0].getElementsByClassName('slider-input')[0], options);
	                    element[0].__slider = slider;
	
	                    // everything that needs slider element
	                    var updateEvent = getArrayOrValue(attrs.updateevent);
	                    if (angular.isString(updateEvent)) {
	                        // if only single event name in string
	                        updateEvent = [updateEvent];
	                    }
	                    else {
	                        // default to slide event
	                        updateEvent = ['slide'];
	                    }
	                    angular.forEach(updateEvent, function (sliderEvent) {
	                        slider.on(sliderEvent, function (ev) {
	                            ngModelCtrl.$setViewValue(ev);
	                            $timeout(function () {
	                                $scope.$apply();
	                            });
	                        });
	                    });
	                    slider.on('change', function (ev) {
	                        ngModelCtrl.$setViewValue(ev.newValue);
	                        $timeout(function () {
	                            $scope.$apply();
	                        });
	                    });
	
	                    // Event listeners
	                    var sliderEvents = {
	                        slideStart: 'onStartSlide',
	                        slide: 'onSlide',
	                        slideStop: 'onStopSlide'
	                    };
	                    angular.forEach(sliderEvents, function (sliderEventAttr, sliderEvent) {
	                        var fn = $parse(attrs[sliderEventAttr]);
	                        slider.on(sliderEvent, function (ev) {
	                            if ($scope[sliderEventAttr]) {
	
	                                var callback = function () {
	                                    fn($scope.$parent, { $event: ev, value: ev });
	                                }
	
	                                if ($rootScope.$$phase) {
	                                    $scope.$evalAsync(callback);
	                                } else {
	                                    $scope.$apply(callback);
	                                }
	                            }
	                        });
	                    });
	
	                    // deregister ngDisabled watcher to prevent memory leaks
	                    if (angular.isFunction(ngDisabledDeregisterFn)) {
	                        ngDisabledDeregisterFn();
	                        ngDisabledDeregisterFn = null;
	                    }
	
	                    ngDisabledDeregisterFn = $scope.$watch('ngDisabled', function (value) {
	                        if (value) {
	                            slider.disable();
	                        }
	                        else {
	                            slider.enable();
	                        }
	                    });
	
	                    // deregister ngModel watcher to prevent memory leaks
	                    if (angular.isFunction(ngModelDeregisterFn)) ngModelDeregisterFn();
	                    ngModelDeregisterFn = $scope.$watch('ngModel', function (value) {
	                        if($scope.range){
	                            slider.setValue(value);
	                        }else{
	                            slider.setValue(parseFloat(value));
	                        }
	                    }, true);
	                }
	
	
	                var watchers = ['min', 'max', 'step', 'range', 'scale'];
	                angular.forEach(watchers, function (prop) {
	                    $scope.$watch(prop, function () {
	                        initSlider();
	                    });
	                });
	            }
	        };
	    }])
	;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(8);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./bootstrap-slider.min.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./bootstrap-slider.min.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	
	
	// module
	exports.push([module.id, "/*! =======================================================\r\n                      VERSION  5.1.1\r\n========================================================= */\r\n/*! =========================================================\r\n * bootstrap-slider.js\r\n *\r\n * Maintainers:\r\n *\t\tKyle Kemp\r\n *\t\t\t- Twitter: @seiyria\r\n *\t\t\t- Github:  seiyria\r\n *\t\tRohit Kalkur\r\n *\t\t\t- Twitter: @Rovolutionary\r\n *\t\t\t- Github:  rovolution\r\n *\r\n * =========================================================\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ========================================================= */.slider{display:inline-block;vertical-align:middle;position:relative}.slider.slider-horizontal{width:210px;height:20px}.slider.slider-horizontal .slider-track{height:10px;width:100%;margin-top:-5px;top:50%;left:0}.slider.slider-horizontal .slider-selection,.slider.slider-horizontal .slider-track-low,.slider.slider-horizontal .slider-track-high{height:100%;top:0;bottom:0}.slider.slider-horizontal .slider-tick,.slider.slider-horizontal .slider-handle{margin-left:-10px;margin-top:-5px}.slider.slider-horizontal .slider-tick.triangle,.slider.slider-horizontal .slider-handle.triangle{border-width:0 10px 10px 10px;width:0;height:0;border-bottom-color:#0480be;margin-top:0}.slider.slider-horizontal .slider-tick-label-container{white-space:nowrap;margin-top:20px}.slider.slider-horizontal .slider-tick-label-container .slider-tick-label{padding-top:4px;display:inline-block;text-align:center}.slider.slider-vertical{height:210px;width:20px}.slider.slider-vertical .slider-track{width:10px;height:100%;margin-left:-5px;left:50%;top:0}.slider.slider-vertical .slider-selection{width:100%;left:0;top:0;bottom:0}.slider.slider-vertical .slider-track-low,.slider.slider-vertical .slider-track-high{width:100%;left:0;right:0}.slider.slider-vertical .slider-tick,.slider.slider-vertical .slider-handle{margin-left:-5px;margin-top:-10px}.slider.slider-vertical .slider-tick.triangle,.slider.slider-vertical .slider-handle.triangle{border-width:10px 0 10px 10px;width:1px;height:1px;border-left-color:#0480be;margin-left:0}.slider.slider-disabled .slider-handle{background-image:-webkit-linear-gradient(top,#dfdfdf 0,#bebebe 100%);background-image:-o-linear-gradient(top,#dfdfdf 0,#bebebe 100%);background-image:linear-gradient(to bottom,#dfdfdf 0,#bebebe 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdfdfdf',endColorstr='#ffbebebe',GradientType=0)}.slider.slider-disabled .slider-track{background-image:-webkit-linear-gradient(top,#e5e5e5 0,#e9e9e9 100%);background-image:-o-linear-gradient(top,#e5e5e5 0,#e9e9e9 100%);background-image:linear-gradient(to bottom,#e5e5e5 0,#e9e9e9 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffe5e5e5',endColorstr='#ffe9e9e9',GradientType=0);cursor:not-allowed}.slider input{display:none}.slider .tooltip.top{margin-top:-36px}.slider .tooltip-inner{white-space:nowrap}.slider .hide{display:none}.slider-track{position:absolute;cursor:pointer;background-image:-webkit-linear-gradient(top,#f5f5f5 0,#f9f9f9 100%);background-image:-o-linear-gradient(top,#f5f5f5 0,#f9f9f9 100%);background-image:linear-gradient(to bottom,#f5f5f5 0,#f9f9f9 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5',endColorstr='#fff9f9f9',GradientType=0);-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);border-radius:4px}.slider-selection{position:absolute;background-image:-webkit-linear-gradient(top,#f9f9f9 0,#f5f5f5 100%);background-image:-o-linear-gradient(top,#f9f9f9 0,#f5f5f5 100%);background-image:linear-gradient(to bottom,#f9f9f9 0,#f5f5f5 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff9f9f9',endColorstr='#fff5f5f5',GradientType=0);-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;border-radius:4px}.slider-selection.tick-slider-selection{background-image:-webkit-linear-gradient(top,#89cdef 0,#81bfde 100%);background-image:-o-linear-gradient(top,#89cdef 0,#81bfde 100%);background-image:linear-gradient(to bottom,#89cdef 0,#81bfde 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff89cdef',endColorstr='#ff81bfde',GradientType=0)}.slider-track-low,.slider-track-high{position:absolute;background:transparent;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;border-radius:4px}.slider-handle{position:absolute;width:20px;height:20px;background-color:#337ab7;background-image:-webkit-linear-gradient(top,#149bdf 0,#0480be 100%);background-image:-o-linear-gradient(top,#149bdf 0,#0480be 100%);background-image:linear-gradient(to bottom,#149bdf 0,#0480be 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff149bdf',endColorstr='#ff0480be',GradientType=0);filter:none;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.2),0 1px 2px rgba(0,0,0,.05);box-shadow:inset 0 1px 0 rgba(255,255,255,.2),0 1px 2px rgba(0,0,0,.05);border:0 solid transparent}.slider-handle.round{border-radius:50%}.slider-handle.triangle{background:transparent none}.slider-handle.custom{background:transparent none}.slider-handle.custom::before{line-height:20px;font-size:20px;content:'\\2605';color:#726204}.slider-tick{position:absolute;width:20px;height:20px;background-image:-webkit-linear-gradient(top,#f9f9f9 0,#f5f5f5 100%);background-image:-o-linear-gradient(top,#f9f9f9 0,#f5f5f5 100%);background-image:linear-gradient(to bottom,#f9f9f9 0,#f5f5f5 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff9f9f9',endColorstr='#fff5f5f5',GradientType=0);-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;filter:none;opacity:.8;border:0 solid transparent}.slider-tick.round{border-radius:50%}.slider-tick.triangle{background:transparent none}.slider-tick.custom{background:transparent none}.slider-tick.custom::before{line-height:20px;font-size:20px;content:'\\2605';color:#726204}.slider-tick.in-selection{background-image:-webkit-linear-gradient(top,#89cdef 0,#81bfde 100%);background-image:-o-linear-gradient(top,#89cdef 0,#81bfde 100%);background-image:linear-gradient(to bottom,#89cdef 0,#81bfde 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff89cdef',endColorstr='#ff81bfde',GradientType=0);opacity:1}", ""]);
	
	// exports


/***/ },
/* 9 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! =======================================================
	                      VERSION  5.1.1
	========================================================= */
	/*! =========================================================
	 * bootstrap-slider.js
	 *
	 * Maintainers:
	 *		Kyle Kemp
	 *			- Twitter: @seiyria
	 *			- Github:  seiyria
	 *		Rohit Kalkur
	 *			- Twitter: @Rovolutionary
	 *			- Github:  rovolution
	 *
	 * =========================================================
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 * ========================================================= */
	!function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(12)], __WEBPACK_AMD_DEFINE_FACTORY__ = (b), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if("object"==typeof module&&module.exports){var c;try{c=require("jquery")}catch(d){c=null}module.exports=b(c)}else a.Slider=b(a.jQuery)}(this,function(a){var b;return function(a){"use strict";function b(){}function c(a){function c(b){b.prototype.option||(b.prototype.option=function(b){a.isPlainObject(b)&&(this.options=a.extend(!0,this.options,b))})}function e(b,c){a.fn[b]=function(e){if("string"==typeof e){for(var g=d.call(arguments,1),h=0,i=this.length;i>h;h++){var j=this[h],k=a.data(j,b);if(k)if(a.isFunction(k[e])&&"_"!==e.charAt(0)){var l=k[e].apply(k,g);if(void 0!==l&&l!==k)return l}else f("no such method '"+e+"' for "+b+" instance");else f("cannot call methods on "+b+" prior to initialization; attempted to call '"+e+"'")}return this}var m=this.map(function(){var d=a.data(this,b);return d?(d.option(e),d._init()):(d=new c(this,e),a.data(this,b,d)),a(this)});return!m||m.length>1?m:m[0]}}if(a){var f="undefined"==typeof console?b:function(a){console.error(a)};return a.bridget=function(a,b){c(b),e(a,b)},a.bridget}}var d=Array.prototype.slice;c(a)}(a),function(a){function c(b,c){function d(a,b){var c="data-slider-"+b.replace(/_/g,"-"),d=a.getAttribute(c);try{return JSON.parse(d)}catch(e){return d}}this._state={value:null,enabled:null,offset:null,size:null,percentage:null,inDrag:!1,over:!1},"string"==typeof b?this.element=document.querySelector(b):b instanceof HTMLElement&&(this.element=b),c=c?c:{};for(var f=Object.keys(this.defaultOptions),g=0;g<f.length;g++){var h=f[g],i=c[h];i="undefined"!=typeof i?i:d(this.element,h),i=null!==i?i:this.defaultOptions[h],this.options||(this.options={}),this.options[h]=i}"vertical"!==this.options.orientation||"top"!==this.options.tooltip_position&&"bottom"!==this.options.tooltip_position?"horizontal"!==this.options.orientation||"left"!==this.options.tooltip_position&&"right"!==this.options.tooltip_position||(this.options.tooltip_position="top"):this.options.tooltip_position="right";var j,k,l,m,n,o=this.element.style.width,p=!1,q=this.element.parentNode;if(this.sliderElem)p=!0;else{this.sliderElem=document.createElement("div"),this.sliderElem.className="slider";var r=document.createElement("div");if(r.className="slider-track",k=document.createElement("div"),k.className="slider-track-low",j=document.createElement("div"),j.className="slider-selection",l=document.createElement("div"),l.className="slider-track-high",m=document.createElement("div"),m.className="slider-handle min-slider-handle",n=document.createElement("div"),n.className="slider-handle max-slider-handle",r.appendChild(k),r.appendChild(j),r.appendChild(l),this.ticks=[],Array.isArray(this.options.ticks)&&this.options.ticks.length>0){for(g=0;g<this.options.ticks.length;g++){var s=document.createElement("div");s.className="slider-tick",this.ticks.push(s),r.appendChild(s)}j.className+=" tick-slider-selection"}if(r.appendChild(m),r.appendChild(n),this.tickLabels=[],Array.isArray(this.options.ticks_labels)&&this.options.ticks_labels.length>0)for(this.tickLabelContainer=document.createElement("div"),this.tickLabelContainer.className="slider-tick-label-container",g=0;g<this.options.ticks_labels.length;g++){var t=document.createElement("div");t.className="slider-tick-label",t.innerHTML=this.options.ticks_labels[g],this.tickLabels.push(t),this.tickLabelContainer.appendChild(t)}var u=function(a){var b=document.createElement("div");b.className="tooltip-arrow";var c=document.createElement("div");c.className="tooltip-inner",a.appendChild(b),a.appendChild(c)},v=document.createElement("div");v.className="tooltip tooltip-main",u(v);var w=document.createElement("div");w.className="tooltip tooltip-min",u(w);var x=document.createElement("div");x.className="tooltip tooltip-max",u(x),this.sliderElem.appendChild(r),this.sliderElem.appendChild(v),this.sliderElem.appendChild(w),this.sliderElem.appendChild(x),this.tickLabelContainer&&this.sliderElem.appendChild(this.tickLabelContainer),q.insertBefore(this.sliderElem,this.element),this.element.style.display="none"}if(a&&(this.$element=a(this.element),this.$sliderElem=a(this.sliderElem)),this.eventToCallbackMap={},this.sliderElem.id=this.options.id,this.touchCapable="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch,this.tooltip=this.sliderElem.querySelector(".tooltip-main"),this.tooltipInner=this.tooltip.querySelector(".tooltip-inner"),this.tooltip_min=this.sliderElem.querySelector(".tooltip-min"),this.tooltipInner_min=this.tooltip_min.querySelector(".tooltip-inner"),this.tooltip_max=this.sliderElem.querySelector(".tooltip-max"),this.tooltipInner_max=this.tooltip_max.querySelector(".tooltip-inner"),e[this.options.scale]&&(this.options.scale=e[this.options.scale]),p===!0&&(this._removeClass(this.sliderElem,"slider-horizontal"),this._removeClass(this.sliderElem,"slider-vertical"),this._removeClass(this.tooltip,"hide"),this._removeClass(this.tooltip_min,"hide"),this._removeClass(this.tooltip_max,"hide"),["left","top","width","height"].forEach(function(a){this._removeProperty(this.trackLow,a),this._removeProperty(this.trackSelection,a),this._removeProperty(this.trackHigh,a)},this),[this.handle1,this.handle2].forEach(function(a){this._removeProperty(a,"left"),this._removeProperty(a,"top")},this),[this.tooltip,this.tooltip_min,this.tooltip_max].forEach(function(a){this._removeProperty(a,"left"),this._removeProperty(a,"top"),this._removeProperty(a,"margin-left"),this._removeProperty(a,"margin-top"),this._removeClass(a,"right"),this._removeClass(a,"top")},this)),"vertical"===this.options.orientation?(this._addClass(this.sliderElem,"slider-vertical"),this.stylePos="top",this.mousePos="pageY",this.sizePos="offsetHeight"):(this._addClass(this.sliderElem,"slider-horizontal"),this.sliderElem.style.width=o,this.options.orientation="horizontal",this.stylePos="left",this.mousePos="pageX",this.sizePos="offsetWidth"),this._setTooltipPosition(),Array.isArray(this.options.ticks)&&this.options.ticks.length>0&&(this.options.max=Math.max.apply(Math,this.options.ticks),this.options.min=Math.min.apply(Math,this.options.ticks)),Array.isArray(this.options.value)?(this.options.range=!0,this._state.value=this.options.value):this._state.value=this.options.range?[this.options.value,this.options.max]:this.options.value,this.trackLow=k||this.trackLow,this.trackSelection=j||this.trackSelection,this.trackHigh=l||this.trackHigh,"none"===this.options.selection&&(this._addClass(this.trackLow,"hide"),this._addClass(this.trackSelection,"hide"),this._addClass(this.trackHigh,"hide")),this.handle1=m||this.handle1,this.handle2=n||this.handle2,p===!0)for(this._removeClass(this.handle1,"round triangle"),this._removeClass(this.handle2,"round triangle hide"),g=0;g<this.ticks.length;g++)this._removeClass(this.ticks[g],"round triangle hide");var y=["round","triangle","custom"],z=-1!==y.indexOf(this.options.handle);if(z)for(this._addClass(this.handle1,this.options.handle),this._addClass(this.handle2,this.options.handle),g=0;g<this.ticks.length;g++)this._addClass(this.ticks[g],this.options.handle);this._state.offset=this._offset(this.sliderElem),this._state.size=this.sliderElem[this.sizePos],this.setValue(this._state.value),this.handle1Keydown=this._keydown.bind(this,0),this.handle1.addEventListener("keydown",this.handle1Keydown,!1),this.handle2Keydown=this._keydown.bind(this,1),this.handle2.addEventListener("keydown",this.handle2Keydown,!1),this.mousedown=this._mousedown.bind(this),this.touchCapable&&this.sliderElem.addEventListener("touchstart",this.mousedown,!1),this.sliderElem.addEventListener("mousedown",this.mousedown,!1),"hide"===this.options.tooltip?(this._addClass(this.tooltip,"hide"),this._addClass(this.tooltip_min,"hide"),this._addClass(this.tooltip_max,"hide")):"always"===this.options.tooltip?(this._showTooltip(),this._alwaysShowTooltip=!0):(this.showTooltip=this._showTooltip.bind(this),this.hideTooltip=this._hideTooltip.bind(this),this.sliderElem.addEventListener("mouseenter",this.showTooltip,!1),this.sliderElem.addEventListener("mouseleave",this.hideTooltip,!1),this.handle1.addEventListener("focus",this.showTooltip,!1),this.handle1.addEventListener("blur",this.hideTooltip,!1),this.handle2.addEventListener("focus",this.showTooltip,!1),this.handle2.addEventListener("blur",this.hideTooltip,!1)),this.options.enabled?this.enable():this.disable()}var d={formatInvalidInputErrorMsg:function(a){return"Invalid input value '"+a+"' passed in"},callingContextNotSliderInstance:"Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method"},e={linear:{toValue:function(a){var b=a/100*(this.options.max-this.options.min);if(this.options.ticks_positions.length>0){for(var c,d,e,f=0,g=0;g<this.options.ticks_positions.length;g++)if(a<=this.options.ticks_positions[g]){c=g>0?this.options.ticks[g-1]:0,e=g>0?this.options.ticks_positions[g-1]:0,d=this.options.ticks[g],f=this.options.ticks_positions[g];break}if(g>0){var h=(a-e)/(f-e);b=c+h*(d-c)}}var i=this.options.min+Math.round(b/this.options.step)*this.options.step;return i<this.options.min?this.options.min:i>this.options.max?this.options.max:i},toPercentage:function(a){if(this.options.max===this.options.min)return 0;if(this.options.ticks_positions.length>0){for(var b,c,d,e=0,f=0;f<this.options.ticks.length;f++)if(a<=this.options.ticks[f]){b=f>0?this.options.ticks[f-1]:0,d=f>0?this.options.ticks_positions[f-1]:0,c=this.options.ticks[f],e=this.options.ticks_positions[f];break}if(f>0){var g=(a-b)/(c-b);return d+g*(e-d)}}return 100*(a-this.options.min)/(this.options.max-this.options.min)}},logarithmic:{toValue:function(a){var b=0===this.options.min?0:Math.log(this.options.min),c=Math.log(this.options.max),d=Math.exp(b+(c-b)*a/100);return d=this.options.min+Math.round((d-this.options.min)/this.options.step)*this.options.step,d<this.options.min?this.options.min:d>this.options.max?this.options.max:d},toPercentage:function(a){if(this.options.max===this.options.min)return 0;var b=Math.log(this.options.max),c=0===this.options.min?0:Math.log(this.options.min),d=0===a?0:Math.log(a);return 100*(d-c)/(b-c)}}};if(b=function(a,b){return c.call(this,a,b),this},b.prototype={_init:function(){},constructor:b,defaultOptions:{id:"",min:0,max:10,step:1,precision:0,orientation:"horizontal",value:5,range:!1,selection:"before",tooltip:"show",tooltip_split:!1,handle:"round",reversed:!1,enabled:!0,formatter:function(a){return Array.isArray(a)?a[0]+" : "+a[1]:a},natural_arrow_keys:!1,ticks:[],ticks_positions:[],ticks_labels:[],ticks_snap_bounds:0,scale:"linear",focus:!1,tooltip_position:null},getElement:function(){return this.sliderElem},getValue:function(){return this.options.range?this._state.value:this._state.value[0]},setValue:function(a,b,c){a||(a=0);var d=this.getValue();this._state.value=this._validateInputValue(a);var e=this._applyPrecision.bind(this);this.options.range?(this._state.value[0]=e(this._state.value[0]),this._state.value[1]=e(this._state.value[1]),this._state.value[0]=Math.max(this.options.min,Math.min(this.options.max,this._state.value[0])),this._state.value[1]=Math.max(this.options.min,Math.min(this.options.max,this._state.value[1]))):(this._state.value=e(this._state.value),this._state.value=[Math.max(this.options.min,Math.min(this.options.max,this._state.value))],this._addClass(this.handle2,"hide"),this._state.value[1]="after"===this.options.selection?this.options.max:this.options.min),this._state.percentage=this.options.max>this.options.min?[this._toPercentage(this._state.value[0]),this._toPercentage(this._state.value[1]),100*this.options.step/(this.options.max-this.options.min)]:[0,0,100],this._layout();var f=this.options.range?this._state.value:this._state.value[0];return b===!0&&this._trigger("slide",f),d!==f&&c===!0&&this._trigger("change",{oldValue:d,newValue:f}),this._setDataVal(f),this},destroy:function(){this._removeSliderEventHandlers(),this.sliderElem.parentNode.removeChild(this.sliderElem),this.element.style.display="",this._cleanUpEventCallbacksMap(),this.element.removeAttribute("data"),a&&(this._unbindJQueryEventHandlers(),this.$element.removeData("slider"))},disable:function(){return this._state.enabled=!1,this.handle1.removeAttribute("tabindex"),this.handle2.removeAttribute("tabindex"),this._addClass(this.sliderElem,"slider-disabled"),this._trigger("slideDisabled"),this},enable:function(){return this._state.enabled=!0,this.handle1.setAttribute("tabindex",0),this.handle2.setAttribute("tabindex",0),this._removeClass(this.sliderElem,"slider-disabled"),this._trigger("slideEnabled"),this},toggle:function(){return this._state.enabled?this.disable():this.enable(),this},isEnabled:function(){return this._state.enabled},on:function(a,b){return this._bindNonQueryEventHandler(a,b),this},off:function(b,c){a?(this.$element.off(b,c),this.$sliderElem.off(b,c)):this._unbindNonQueryEventHandler(b,c)},getAttribute:function(a){return a?this.options[a]:this.options},setAttribute:function(a,b){return this.options[a]=b,this},refresh:function(){return this._removeSliderEventHandlers(),c.call(this,this.element,this.options),a&&a.data(this.element,"slider",this),this},relayout:function(){return this._layout(),this},_removeSliderEventHandlers:function(){this.handle1.removeEventListener("keydown",this.handle1Keydown,!1),this.handle1.removeEventListener("focus",this.showTooltip,!1),this.handle1.removeEventListener("blur",this.hideTooltip,!1),this.handle2.removeEventListener("keydown",this.handle2Keydown,!1),this.handle2.removeEventListener("focus",this.handle2Keydown,!1),this.handle2.removeEventListener("blur",this.handle2Keydown,!1),this.sliderElem.removeEventListener("mouseenter",this.showTooltip,!1),this.sliderElem.removeEventListener("mouseleave",this.hideTooltip,!1),this.sliderElem.removeEventListener("touchstart",this.mousedown,!1),this.sliderElem.removeEventListener("mousedown",this.mousedown,!1)},_bindNonQueryEventHandler:function(a,b){void 0===this.eventToCallbackMap[a]&&(this.eventToCallbackMap[a]=[]),this.eventToCallbackMap[a].push(b)},_unbindNonQueryEventHandler:function(a,b){var c=this.eventToCallbackMap[a];if(void 0!==c)for(var d=0;d<c.length;d++)if(c[d]===b){c.splice(d,1);break}},_cleanUpEventCallbacksMap:function(){for(var a=Object.keys(this.eventToCallbackMap),b=0;b<a.length;b++){var c=a[b];this.eventToCallbackMap[c]=null}},_showTooltip:function(){this.options.tooltip_split===!1?(this._addClass(this.tooltip,"in"),this.tooltip_min.style.display="none",this.tooltip_max.style.display="none"):(this._addClass(this.tooltip_min,"in"),this._addClass(this.tooltip_max,"in"),this.tooltip.style.display="none"),this._state.over=!0},_hideTooltip:function(){this._state.inDrag===!1&&this.alwaysShowTooltip!==!0&&(this._removeClass(this.tooltip,"in"),this._removeClass(this.tooltip_min,"in"),this._removeClass(this.tooltip_max,"in")),this._state.over=!1},_layout:function(){var a;if(a=this.options.reversed?[100-this._state.percentage[0],this.options.range?100-this._state.percentage[1]:this._state.percentage[1]]:[this._state.percentage[0],this._state.percentage[1]],this.handle1.style[this.stylePos]=a[0]+"%",this.handle2.style[this.stylePos]=a[1]+"%",Array.isArray(this.options.ticks)&&this.options.ticks.length>0){var b=Math.max.apply(Math,this.options.ticks),c=Math.min.apply(Math,this.options.ticks),d="vertical"===this.options.orientation?"height":"width",e="vertical"===this.options.orientation?"marginTop":"marginLeft",f=this._state.size/(this.options.ticks.length-1);if(this.tickLabelContainer){var g=0;if(0===this.options.ticks_positions.length)this.tickLabelContainer.style[e]=-f/2+"px",g=this.tickLabelContainer.offsetHeight;else for(h=0;h<this.tickLabelContainer.childNodes.length;h++)this.tickLabelContainer.childNodes[h].offsetHeight>g&&(g=this.tickLabelContainer.childNodes[h].offsetHeight);"horizontal"===this.options.orientation&&(this.sliderElem.style.marginBottom=g+"px")}for(var h=0;h<this.options.ticks.length;h++){var i=this.options.ticks_positions[h]||100*(this.options.ticks[h]-c)/(b-c);this.ticks[h].style[this.stylePos]=i+"%",this._removeClass(this.ticks[h],"in-selection"),this.options.range?i>=a[0]&&i<=a[1]&&this._addClass(this.ticks[h],"in-selection"):"after"===this.options.selection&&i>=a[0]?this._addClass(this.ticks[h],"in-selection"):"before"===this.options.selection&&i<=a[0]&&this._addClass(this.ticks[h],"in-selection"),this.tickLabels[h]&&(this.tickLabels[h].style[d]=f+"px",void 0!==this.options.ticks_positions[h]&&(this.tickLabels[h].style.position="absolute",this.tickLabels[h].style[this.stylePos]=this.options.ticks_positions[h]+"%",this.tickLabels[h].style[e]=-f/2+"px"))}}var j;if(this.options.range){j=this.options.formatter(this._state.value),this._setText(this.tooltipInner,j),this.tooltip.style[this.stylePos]=(a[1]+a[0])/2+"%","vertical"===this.options.orientation?this._css(this.tooltip,"margin-top",-this.tooltip.offsetHeight/2+"px"):this._css(this.tooltip,"margin-left",-this.tooltip.offsetWidth/2+"px"),"vertical"===this.options.orientation?this._css(this.tooltip,"margin-top",-this.tooltip.offsetHeight/2+"px"):this._css(this.tooltip,"margin-left",-this.tooltip.offsetWidth/2+"px");var k=this.options.formatter(this._state.value[0]);this._setText(this.tooltipInner_min,k);var l=this.options.formatter(this._state.value[1]);this._setText(this.tooltipInner_max,l),this.tooltip_min.style[this.stylePos]=a[0]+"%","vertical"===this.options.orientation?this._css(this.tooltip_min,"margin-top",-this.tooltip_min.offsetHeight/2+"px"):this._css(this.tooltip_min,"margin-left",-this.tooltip_min.offsetWidth/2+"px"),this.tooltip_max.style[this.stylePos]=a[1]+"%","vertical"===this.options.orientation?this._css(this.tooltip_max,"margin-top",-this.tooltip_max.offsetHeight/2+"px"):this._css(this.tooltip_max,"margin-left",-this.tooltip_max.offsetWidth/2+"px")}else j=this.options.formatter(this._state.value[0]),this._setText(this.tooltipInner,j),this.tooltip.style[this.stylePos]=a[0]+"%","vertical"===this.options.orientation?this._css(this.tooltip,"margin-top",-this.tooltip.offsetHeight/2+"px"):this._css(this.tooltip,"margin-left",-this.tooltip.offsetWidth/2+"px");if("vertical"===this.options.orientation)this.trackLow.style.top="0",this.trackLow.style.height=Math.min(a[0],a[1])+"%",this.trackSelection.style.top=Math.min(a[0],a[1])+"%",this.trackSelection.style.height=Math.abs(a[0]-a[1])+"%",this.trackHigh.style.bottom="0",this.trackHigh.style.height=100-Math.min(a[0],a[1])-Math.abs(a[0]-a[1])+"%";else{this.trackLow.style.left="0",this.trackLow.style.width=Math.min(a[0],a[1])+"%",this.trackSelection.style.left=Math.min(a[0],a[1])+"%",this.trackSelection.style.width=Math.abs(a[0]-a[1])+"%",this.trackHigh.style.right="0",this.trackHigh.style.width=100-Math.min(a[0],a[1])-Math.abs(a[0]-a[1])+"%";var m=this.tooltip_min.getBoundingClientRect(),n=this.tooltip_max.getBoundingClientRect();m.right>n.left?(this._removeClass(this.tooltip_max,"top"),this._addClass(this.tooltip_max,"bottom"),this.tooltip_max.style.top="18px"):(this._removeClass(this.tooltip_max,"bottom"),this._addClass(this.tooltip_max,"top"),this.tooltip_max.style.top=this.tooltip_min.style.top)}},_removeProperty:function(a,b){a.style.removeProperty?a.style.removeProperty(b):a.style.removeAttribute(b)},_mousedown:function(a){if(!this._state.enabled)return!1;this._state.offset=this._offset(this.sliderElem),this._state.size=this.sliderElem[this.sizePos];var b=this._getPercentage(a);if(this.options.range){var c=Math.abs(this._state.percentage[0]-b),d=Math.abs(this._state.percentage[1]-b);this._state.dragged=d>c?0:1}else this._state.dragged=0;this._state.percentage[this._state.dragged]=b,this._layout(),this.touchCapable&&(document.removeEventListener("touchmove",this.mousemove,!1),document.removeEventListener("touchend",this.mouseup,!1)),this.mousemove&&document.removeEventListener("mousemove",this.mousemove,!1),this.mouseup&&document.removeEventListener("mouseup",this.mouseup,!1),this.mousemove=this._mousemove.bind(this),this.mouseup=this._mouseup.bind(this),this.touchCapable&&(document.addEventListener("touchmove",this.mousemove,!1),document.addEventListener("touchend",this.mouseup,!1)),document.addEventListener("mousemove",this.mousemove,!1),document.addEventListener("mouseup",this.mouseup,!1),this._state.inDrag=!0;var e=this._calculateValue();return this._trigger("slideStart",e),this._setDataVal(e),this.setValue(e,!1,!0),this._pauseEvent(a),this.options.focus&&this._triggerFocusOnHandle(this._state.dragged),!0},_triggerFocusOnHandle:function(a){0===a&&this.handle1.focus(),1===a&&this.handle2.focus()},_keydown:function(a,b){if(!this._state.enabled)return!1;var c;switch(b.keyCode){case 37:case 40:c=-1;break;case 39:case 38:c=1}if(c){if(this.options.natural_arrow_keys){var d="vertical"===this.options.orientation&&!this.options.reversed,e="horizontal"===this.options.orientation&&this.options.reversed;(d||e)&&(c=-c)}var f=this._state.value[a]+c*this.options.step;return this.options.range&&(f=[a?this._state.value[0]:f,a?f:this._state.value[1]]),this._trigger("slideStart",f),this._setDataVal(f),this.setValue(f,!0,!0),this._setDataVal(f),this._trigger("slideStop",f),this._layout(),this._pauseEvent(b),!1}},_pauseEvent:function(a){a.stopPropagation&&a.stopPropagation(),a.preventDefault&&a.preventDefault(),a.cancelBubble=!0,a.returnValue=!1},_mousemove:function(a){if(!this._state.enabled)return!1;var b=this._getPercentage(a);this._adjustPercentageForRangeSliders(b),this._state.percentage[this._state.dragged]=b,this._layout();var c=this._calculateValue(!0);return this.setValue(c,!0,!0),!1},_adjustPercentageForRangeSliders:function(a){if(this.options.range){var b=this._getNumDigitsAfterDecimalPlace(a);b=b?b-1:0;var c=this._applyToFixedAndParseFloat(a,b);0===this._state.dragged&&this._applyToFixedAndParseFloat(this._state.percentage[1],b)<c?(this._state.percentage[0]=this._state.percentage[1],this._state.dragged=1):1===this._state.dragged&&this._applyToFixedAndParseFloat(this._state.percentage[0],b)>c&&(this._state.percentage[1]=this._state.percentage[0],this._state.dragged=0)}},_mouseup:function(){if(!this._state.enabled)return!1;this.touchCapable&&(document.removeEventListener("touchmove",this.mousemove,!1),document.removeEventListener("touchend",this.mouseup,!1)),document.removeEventListener("mousemove",this.mousemove,!1),document.removeEventListener("mouseup",this.mouseup,!1),this._state.inDrag=!1,this._state.over===!1&&this._hideTooltip();var a=this._calculateValue(!0);return this._layout(),this._setDataVal(a),this._trigger("slideStop",a),!1},_calculateValue:function(a){var b;if(this.options.range?(b=[this.options.min,this.options.max],0!==this._state.percentage[0]&&(b[0]=this._toValue(this._state.percentage[0]),b[0]=this._applyPrecision(b[0])),100!==this._state.percentage[1]&&(b[1]=this._toValue(this._state.percentage[1]),b[1]=this._applyPrecision(b[1]))):(b=this._toValue(this._state.percentage[0]),b=parseFloat(b),b=this._applyPrecision(b)),a){for(var c=[b,1/0],d=0;d<this.options.ticks.length;d++){var e=Math.abs(this.options.ticks[d]-b);e<=c[1]&&(c=[this.options.ticks[d],e])}if(c[1]<=this.options.ticks_snap_bounds)return c[0]}return b},_applyPrecision:function(a){var b=this.options.precision||this._getNumDigitsAfterDecimalPlace(this.options.step);return this._applyToFixedAndParseFloat(a,b)},_getNumDigitsAfterDecimalPlace:function(a){var b=(""+a).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return b?Math.max(0,(b[1]?b[1].length:0)-(b[2]?+b[2]:0)):0},_applyToFixedAndParseFloat:function(a,b){var c=a.toFixed(b);return parseFloat(c)},_getPercentage:function(a){!this.touchCapable||"touchstart"!==a.type&&"touchmove"!==a.type||(a=a.touches[0]);var b=a[this.mousePos],c=this._state.offset[this.stylePos],d=b-c,e=d/this._state.size*100;return e=Math.round(e/this._state.percentage[2])*this._state.percentage[2],this.options.reversed&&(e=100-e),Math.max(0,Math.min(100,e))},_validateInputValue:function(a){if("number"==typeof a)return a;if(Array.isArray(a))return this._validateArray(a),a;throw new Error(d.formatInvalidInputErrorMsg(a))},_validateArray:function(a){for(var b=0;b<a.length;b++){var c=a[b];if("number"!=typeof c)throw new Error(d.formatInvalidInputErrorMsg(c))}},_setDataVal:function(a){this.element.setAttribute("data-value",a),this.element.setAttribute("value",a),this.element.value=a},_trigger:function(b,c){c=c||0===c?c:void 0;var d=this.eventToCallbackMap[b];if(d&&d.length)for(var e=0;e<d.length;e++){var f=d[e];f(c)}a&&this._triggerJQueryEvent(b,c)},_triggerJQueryEvent:function(a,b){var c={type:a,value:b};this.$element.trigger(c),this.$sliderElem.trigger(c)},_unbindJQueryEventHandlers:function(){this.$element.off(),this.$sliderElem.off()},_setText:function(a,b){"undefined"!=typeof a.innerText?a.innerText=b:"undefined"!=typeof a.textContent&&(a.textContent=b)},_removeClass:function(a,b){for(var c=b.split(" "),d=a.className,e=0;e<c.length;e++){var f=c[e],g=new RegExp("(?:\\s|^)"+f+"(?:\\s|$)");d=d.replace(g," ")}a.className=d.trim()},_addClass:function(a,b){for(var c=b.split(" "),d=a.className,e=0;e<c.length;e++){var f=c[e],g=new RegExp("(?:\\s|^)"+f+"(?:\\s|$)"),h=g.test(d);h||(d+=" "+f)}a.className=d.trim()},_offsetLeft:function(a){return a.getBoundingClientRect().left},_offsetTop:function(a){for(var b=a.offsetTop;(a=a.offsetParent)&&!isNaN(a.offsetTop);)b+=a.offsetTop;return b},_offset:function(a){return{left:this._offsetLeft(a),top:this._offsetTop(a)}},_css:function(b,c,d){if(a)a.style(b,c,d);else{var e=c.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(a,b){return b.toUpperCase()});b.style[e]=d}},_toValue:function(a){return this.options.scale.toValue.apply(this,[a])},_toPercentage:function(a){return this.options.scale.toPercentage.apply(this,[a])},_setTooltipPosition:function(){var a=[this.tooltip,this.tooltip_min,this.tooltip_max];if("vertical"===this.options.orientation){var b=this.options.tooltip_position||"right",c="left"===b?"right":"left";a.forEach(function(a){this._addClass(a,b),a.style[c]="100%"}.bind(this))}else a.forEach("bottom"===this.options.tooltip_position?function(a){this._addClass(a,"bottom"),a.style.top="22px"}.bind(this):function(a){this._addClass(a,"top"),a.style.top=-this.tooltip.outerHeight-14+"px"}.bind(this))}},a){var f=a.fn.slider?"bootstrapSlider":"slider";a.bridget(f,b)}}(a),b});

/***/ },
/* 12 */
/***/ function(module, exports) {

	(function() { module.exports = this["$"]; }());

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module unless amdModuleId is set
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return (root['SignaturePad'] = factory());
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    root['SignaturePad'] = factory();
	  }
	}(this, function () {
	
	/*!
	 * Signature Pad v1.5.3
	 * https://github.com/szimek/signature_pad
	 *
	 * Copyright 2016 Szymon Nowak
	 * Released under the MIT license
	 *
	 * The main idea and some parts of the code (e.g. drawing variable width Bézier curve) are taken from:
	 * http://corner.squareup.com/2012/07/smoother-signatures.html
	 *
	 * Implementation of interpolation using cubic Bézier curves is taken from:
	 * http://benknowscode.wordpress.com/2012/09/14/path-interpolation-using-cubic-bezier-and-control-point-estimation-in-javascript
	 *
	 * Algorithm for approximated length of a Bézier curve is taken from:
	 * http://www.lemoda.net/maths/bezier-length/index.html
	 *
	 */
	var SignaturePad = (function (document) {
	    "use strict";
	
	    var SignaturePad = function (canvas, options) {
	        var self = this,
	            opts = options || {};
	
	        this.velocityFilterWeight = opts.velocityFilterWeight || 0.7;
	        this.minWidth = opts.minWidth || 0.5;
	        this.maxWidth = opts.maxWidth || 2.5;
	        this.dotSize = opts.dotSize || function () {
	            return (this.minWidth + this.maxWidth) / 2;
	        };
	        this.penColor = opts.penColor || "black";
	        this.backgroundColor = opts.backgroundColor || "rgba(0,0,0,0)";
	        this.onEnd = opts.onEnd;
	        this.onBegin = opts.onBegin;
	
	        this._canvas = canvas;
	        this._ctx = canvas.getContext("2d");
	        this.clear();
	
	        // we need add these inline so they are available to unbind while still having
	        //  access to 'self' we could use _.bind but it's not worth adding a dependency
	        this._handleMouseDown = function (event) {
	            if (event.which === 1) {
	                self._mouseButtonDown = true;
	                self._strokeBegin(event);
	            }
	        };
	
	        this._handleMouseMove = function (event) {
	            if (self._mouseButtonDown) {
	                self._strokeUpdate(event);
	            }
	        };
	
	        this._handleMouseUp = function (event) {
	            if (event.which === 1 && self._mouseButtonDown) {
	                self._mouseButtonDown = false;
	                self._strokeEnd(event);
	            }
	        };
	
	        this._handleTouchStart = function (event) {
	            if (event.targetTouches.length == 1) {
	                var touch = event.changedTouches[0];
	                self._strokeBegin(touch);
	             }
	        };
	
	        this._handleTouchMove = function (event) {
	            // Prevent scrolling.
	            event.preventDefault();
	
	            var touch = event.targetTouches[0];
	            self._strokeUpdate(touch);
	        };
	
	        this._handleTouchEnd = function (event) {
	            var wasCanvasTouched = event.target === self._canvas;
	            if (wasCanvasTouched) {
	                event.preventDefault();
	                self._strokeEnd(event);
	            }
	        };
	
	        this._handleMouseEvents();
	        this._handleTouchEvents();
	    };
	
	    SignaturePad.prototype.clear = function () {
	        var ctx = this._ctx,
	            canvas = this._canvas;
	
	        ctx.fillStyle = this.backgroundColor;
	        ctx.clearRect(0, 0, canvas.width, canvas.height);
	        ctx.fillRect(0, 0, canvas.width, canvas.height);
	        this._reset();
	    };
	
	    SignaturePad.prototype.toDataURL = function (imageType, quality) {
	        var canvas = this._canvas;
	        return canvas.toDataURL.apply(canvas, arguments);
	    };
	
	    SignaturePad.prototype.fromDataURL = function (dataUrl) {
	        var self = this,
	            image = new Image(),
	            ratio = window.devicePixelRatio || 1,
	            width = this._canvas.width / ratio,
	            height = this._canvas.height / ratio;
	
	        this._reset();
	        image.src = dataUrl;
	        image.onload = function () {
	            self._ctx.drawImage(image, 0, 0, width, height);
	        };
	        this._isEmpty = false;
	    };
	
	    SignaturePad.prototype._strokeUpdate = function (event) {
	        var point = this._createPoint(event);
	        this._addPoint(point);
	    };
	
	    SignaturePad.prototype._strokeBegin = function (event) {
	        this._reset();
	        this._strokeUpdate(event);
	        if (typeof this.onBegin === 'function') {
	            this.onBegin(event);
	        }
	    };
	
	    SignaturePad.prototype._strokeDraw = function (point) {
	        var ctx = this._ctx,
	            dotSize = typeof(this.dotSize) === 'function' ? this.dotSize() : this.dotSize;
	
	        ctx.beginPath();
	        this._drawPoint(point.x, point.y, dotSize);
	        ctx.closePath();
	        ctx.fill();
	    };
	
	    SignaturePad.prototype._strokeEnd = function (event) {
	        var canDrawCurve = this.points.length > 2,
	            point = this.points[0];
	
	        if (!canDrawCurve && point) {
	            this._strokeDraw(point);
	        }
	        if (typeof this.onEnd === 'function') {
	            this.onEnd(event);
	        }
	    };
	
	    SignaturePad.prototype._handleMouseEvents = function () {
	        this._mouseButtonDown = false;
	
	        this._canvas.addEventListener("mousedown", this._handleMouseDown);
	        this._canvas.addEventListener("mousemove", this._handleMouseMove);
	        document.addEventListener("mouseup", this._handleMouseUp);
	    };
	
	    SignaturePad.prototype._handleTouchEvents = function () {
	        // Pass touch events to canvas element on mobile IE11 and Edge.
	        this._canvas.style.msTouchAction = 'none';
	        this._canvas.style.touchAction = 'none';
	
	        this._canvas.addEventListener("touchstart", this._handleTouchStart);
	        this._canvas.addEventListener("touchmove", this._handleTouchMove);
	        this._canvas.addEventListener("touchend", this._handleTouchEnd);
	    };
	
	    SignaturePad.prototype.on = function () {
	        this._handleMouseEvents();
	        this._handleTouchEvents();
	    };
	
	    SignaturePad.prototype.off = function () {
	        this._canvas.removeEventListener("mousedown", this._handleMouseDown);
	        this._canvas.removeEventListener("mousemove", this._handleMouseMove);
	        document.removeEventListener("mouseup", this._handleMouseUp);
	
	        this._canvas.removeEventListener("touchstart", this._handleTouchStart);
	        this._canvas.removeEventListener("touchmove", this._handleTouchMove);
	        this._canvas.removeEventListener("touchend", this._handleTouchEnd);
	    };
	
	    SignaturePad.prototype.isEmpty = function () {
	        return this._isEmpty;
	    };
	
	    SignaturePad.prototype._reset = function () {
	        this.points = [];
	        this._lastVelocity = 0;
	        this._lastWidth = (this.minWidth + this.maxWidth) / 2;
	        this._isEmpty = true;
	        this._ctx.fillStyle = this.penColor;
	    };
	
	    SignaturePad.prototype._createPoint = function (event) {
	        var rect = this._canvas.getBoundingClientRect();
	        return new Point(
	            event.clientX - rect.left,
	            event.clientY - rect.top
	        );
	    };
	
	    SignaturePad.prototype._addPoint = function (point) {
	        var points = this.points,
	            c2, c3,
	            curve, tmp;
	
	        points.push(point);
	
	        if (points.length > 2) {
	            // To reduce the initial lag make it work with 3 points
	            // by copying the first point to the beginning.
	            if (points.length === 3) points.unshift(points[0]);
	
	            tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);
	            c2 = tmp.c2;
	            tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);
	            c3 = tmp.c1;
	            curve = new Bezier(points[1], c2, c3, points[2]);
	            this._addCurve(curve);
	
	            // Remove the first element from the list,
	            // so that we always have no more than 4 points in points array.
	            points.shift();
	        }
	    };
	
	    SignaturePad.prototype._calculateCurveControlPoints = function (s1, s2, s3) {
	        var dx1 = s1.x - s2.x, dy1 = s1.y - s2.y,
	            dx2 = s2.x - s3.x, dy2 = s2.y - s3.y,
	
	            m1 = {x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0},
	            m2 = {x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0},
	
	            l1 = Math.sqrt(dx1*dx1 + dy1*dy1),
	            l2 = Math.sqrt(dx2*dx2 + dy2*dy2),
	
	            dxm = (m1.x - m2.x),
	            dym = (m1.y - m2.y),
	
	            k = l2 / (l1 + l2),
	            cm = {x: m2.x + dxm*k, y: m2.y + dym*k},
	
	            tx = s2.x - cm.x,
	            ty = s2.y - cm.y;
	
	        return {
	            c1: new Point(m1.x + tx, m1.y + ty),
	            c2: new Point(m2.x + tx, m2.y + ty)
	        };
	    };
	
	    SignaturePad.prototype._addCurve = function (curve) {
	        var startPoint = curve.startPoint,
	            endPoint = curve.endPoint,
	            velocity, newWidth;
	
	        velocity = endPoint.velocityFrom(startPoint);
	        velocity = this.velocityFilterWeight * velocity
	            + (1 - this.velocityFilterWeight) * this._lastVelocity;
	
	        newWidth = this._strokeWidth(velocity);
	        this._drawCurve(curve, this._lastWidth, newWidth);
	
	        this._lastVelocity = velocity;
	        this._lastWidth = newWidth;
	    };
	
	    SignaturePad.prototype._drawPoint = function (x, y, size) {
	        var ctx = this._ctx;
	
	        ctx.moveTo(x, y);
	        ctx.arc(x, y, size, 0, 2 * Math.PI, false);
	        this._isEmpty = false;
	    };
	
	    SignaturePad.prototype._drawCurve = function (curve, startWidth, endWidth) {
	        var ctx = this._ctx,
	            widthDelta = endWidth - startWidth,
	            drawSteps, width, i, t, tt, ttt, u, uu, uuu, x, y;
	
	        drawSteps = Math.floor(curve.length());
	        ctx.beginPath();
	        for (i = 0; i < drawSteps; i++) {
	            // Calculate the Bezier (x, y) coordinate for this step.
	            t = i / drawSteps;
	            tt = t * t;
	            ttt = tt * t;
	            u = 1 - t;
	            uu = u * u;
	            uuu = uu * u;
	
	            x = uuu * curve.startPoint.x;
	            x += 3 * uu * t * curve.control1.x;
	            x += 3 * u * tt * curve.control2.x;
	            x += ttt * curve.endPoint.x;
	
	            y = uuu * curve.startPoint.y;
	            y += 3 * uu * t * curve.control1.y;
	            y += 3 * u * tt * curve.control2.y;
	            y += ttt * curve.endPoint.y;
	
	            width = startWidth + ttt * widthDelta;
	            this._drawPoint(x, y, width);
	        }
	        ctx.closePath();
	        ctx.fill();
	    };
	
	    SignaturePad.prototype._strokeWidth = function (velocity) {
	        return Math.max(this.maxWidth / (velocity + 1), this.minWidth);
	    };
	
	
	    var Point = function (x, y, time) {
	        this.x = x;
	        this.y = y;
	        this.time = time || new Date().getTime();
	    };
	
	    Point.prototype.velocityFrom = function (start) {
	        return (this.time !== start.time) ? this.distanceTo(start) / (this.time - start.time) : 1;
	    };
	
	    Point.prototype.distanceTo = function (start) {
	        return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
	    };
	
	    var Bezier = function (startPoint, control1, control2, endPoint) {
	        this.startPoint = startPoint;
	        this.control1 = control1;
	        this.control2 = control2;
	        this.endPoint = endPoint;
	    };
	
	    // Returns approximated length.
	    Bezier.prototype.length = function () {
	        var steps = 10,
	            length = 0,
	            i, t, cx, cy, px, py, xdiff, ydiff;
	
	        for (i = 0; i <= steps; i++) {
	            t = i / steps;
	            cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);
	            cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);
	            if (i > 0) {
	                xdiff = cx - px;
	                ydiff = cy - py;
	                length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);
	            }
	            px = cx;
	            py = cy;
	        }
	        return length;
	    };
	
	    Bezier.prototype._point = function (t, start, c1, c2, end) {
	        return          start * (1.0 - t) * (1.0 - t)  * (1.0 - t)
	               + 3.0 *  c1    * (1.0 - t) * (1.0 - t)  * t
	               + 3.0 *  c2    * (1.0 - t) * t          * t
	               +        end   * t         * t          * t;
	    };
	
	    return SignaturePad;
	})(document);
	
	return SignaturePad;
	
	}));


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(1);
	var alias = __webpack_require__(15);
	exports.alias = alias;
	var autosave = __webpack_require__(16);
	exports.autosave = autosave;
	var popover = __webpack_require__(23);
	exports.popover = popover;
	exports.moduleName = 'rl.ui.behaviors';
	angular.module(exports.moduleName, [
	    alias.moduleName,
	    autosave.moduleName,
	    popover.moduleName,
	]);
	//# sourceMappingURL=behaviors.module.js.map

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.behaviors.alias';
	exports.directiveName = 'rlAlias';
	exports.controllerName = 'AliasController';
	var AliasController = (function () {
	    function AliasController($scope, $attrs, $parse, $interpolate) {
	        var expression;
	        $scope.$watch(function () {
	            expression = $attrs.rlAlias.split(' as ');
	            return $parse(expression[0])($scope);
	        }, function (item) {
	            var alias = $interpolate(expression[1])($scope);
	            if (alias != null) {
	                $scope[alias] = item;
	            }
	        });
	    }
	    AliasController.$inject = ['$scope', '$attrs', '$parse', '$interpolate'];
	    return AliasController;
	}());
	exports.AliasController = AliasController;
	function alias() {
	    return {
	        restrict: 'A',
	        controller: exports.controllerName,
	    };
	}
	exports.alias = alias;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, alias)
	    .controller(exports.controllerName, AliasController);
	//# sourceMappingURL=alias.js.map

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __parentChild = typescript_angular_utilities_1.services.parentChildBehavior;
	var __objectUtility = typescript_angular_utilities_1.services.object;
	var autosave_service_1 = __webpack_require__(17);
	exports.moduleName = 'rl.ui.behaviors.autosave';
	exports.directiveName = 'rlAutosave';
	exports.controllerName = 'AutosaveController';
	var AutosaveController = (function () {
	    function AutosaveController($scope, $attrs, $parse, $element, $timeout, autosaveFactory, parentChildBehavior, objectUtility) {
	        this.$scope = $scope;
	        this.$attrs = $attrs;
	        this.$parse = $parse;
	        this.$element = $element;
	        this.$timeout = $timeout;
	        this.autosaveFactory = autosaveFactory;
	        this.parentChildBehavior = parentChildBehavior;
	        this.objectUtility = objectUtility;
	    }
	    AutosaveController.prototype.$onInit = function () {
	        var _this = this;
	        this.autosaveController.keyupListener = function (callback) {
	            _this.$element.on('keyup', function () { _this.$scope.$apply(callback); });
	            return function () {
	                _this.$element.off('keyup');
	            };
	        };
	        var hasValidator = this.objectUtility.isNullOrWhitespace(this.$attrs.validate) === false;
	        var validateExpression = this.$parse(this.$attrs.validate);
	        var validate;
	        if (hasValidator) {
	            validate = function () {
	                return validateExpression(_this.$scope);
	            };
	        }
	        var saveExpression = this.$parse(this.$attrs.save);
	        var save = function () {
	            return saveExpression(_this.$scope);
	        };
	        var debounce = this.$parse(this.$attrs.debounceDuration)(this.$scope);
	        var unbind = this.$scope.$watch(function () { return _this.keyupListener; }, function (keyupListener) {
	            if (keyupListener) {
	                _this.autosave = _this.autosaveFactory.getInstance({
	                    save: save,
	                    validate: validate,
	                    contentForm: _this.form,
	                    debounceDuration: debounce,
	                    triggers: _this.$attrs.triggers,
	                    setChangeListener: keyupListener,
	                });
	                var behavior = {
	                    autosave: _this.autosave.autosave,
	                };
	                // register autosave behavior and assign the value back to the parent
	                var childLink = _this.$parse(_this.$attrs.rlAutosave)(_this.$scope);
	                _this.parentChildBehavior.registerChildBehavior(childLink, behavior);
	                unbind();
	            }
	        });
	    };
	    AutosaveController.$inject = ['$scope',
	        '$attrs',
	        '$parse',
	        '$element',
	        '$timeout',
	        autosave_service_1.factoryName,
	        __parentChild.serviceName,
	        __objectUtility.serviceName];
	    return AutosaveController;
	}());
	exports.AutosaveController = AutosaveController;
	function autosave() {
	    'use strict';
	    return {
	        restrict: 'A',
	        require: {
	            autosaveController: 'rlAutosave',
	            form: '?ngForm',
	        },
	        controller: exports.controllerName,
	        bindToController: true,
	    };
	}
	exports.autosave = autosave;
	angular.module(exports.moduleName, [
	    autosave_service_1.moduleName,
	    __objectUtility.moduleName,
	    __parentChild.moduleName,
	])
	    .directive(exports.directiveName, autosave)
	    .controller(exports.controllerName, AutosaveController);
	//# sourceMappingURL=autosave.js.map

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var autosaveAction_service_1 = __webpack_require__(19);
	var triggers = __webpack_require__(20);
	exports.triggers = triggers;
	exports.moduleName = 'rl.utilities.services.autosave';
	exports.factoryName = 'autosaveFactory';
	var AutosaveService = (function () {
	    function AutosaveService(autosaveService, options, triggerServiceFactory) {
	        var _this = this;
	        this.autosaveService = autosaveService;
	        this.autosave = function () {
	            var data = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                data[_i - 0] = arguments[_i];
	            }
	            if (_this.contentForm.$pristine) {
	                return true;
	            }
	            var valid = true;
	            if (_this.hasValidator) {
	                valid = _this.validate();
	                if (valid === undefined) {
	                    valid = true;
	                }
	            }
	            if (valid) {
	                var promise = _this.save.apply(_this, data);
	                if (!_.isUndefined(promise)) {
	                    _this.autosaveService.trigger(promise.then(function () {
	                        if (_this.contentForm != null) {
	                            _this.contentForm.$setPristine();
	                        }
	                    }));
	                }
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        this.hasValidator = options.validate != null;
	        this.contentForm = options.contentForm || this.nullForm();
	        this.save = options.save;
	        this.validate = options.validate;
	        this.triggerService = triggerServiceFactory.getInstance();
	        this.configureTriggers(options);
	        this.triggerService.setTriggers(options.triggers, this.autosave);
	    }
	    AutosaveService.prototype.configureTriggers = function (options) {
	        this.triggerService.triggers.onChange.configure({
	            form: options.contentForm,
	            setChangeListener: options.setChangeListener,
	            debounceDuration: options.debounceDuration,
	        });
	    };
	    AutosaveService.prototype.nullForm = function () {
	        return {
	            $pristine: false,
	            $dirty: true,
	            $setPristine: function () {
	                return;
	            },
	        };
	    };
	    return AutosaveService;
	}());
	autosaveServiceFactory.$inject = [autosaveAction_service_1.serviceName, triggers.factoryName];
	function autosaveServiceFactory(autosaveService, triggerServiceFactory) {
	    'use strict';
	    return {
	        getInstance: function (options) {
	            return new AutosaveService(autosaveService, options, triggerServiceFactory);
	        }
	    };
	}
	angular.module(exports.moduleName, [autosaveAction_service_1.moduleName, triggers.moduleName])
	    .factory(exports.factoryName, autosaveServiceFactory);
	//# sourceMappingURL=autosave.service.js.map

/***/ },
/* 18 */
/***/ function(module, exports) {

	(function() { module.exports = this["_"]; }());

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ng = __webpack_require__(1);
	exports.moduleName = 'rl.utilities.services.autosaveAction';
	exports.serviceName = 'autosaveAction';
	var AutosaveActionService = (function () {
	    function AutosaveActionService($timeout) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.completeMessageDuration = 1000;
	        this.autosaveSuccessful = function (data) {
	            return _this.resolveAutosave(data, true);
	        };
	        this.autosaveFailed = function (data) {
	            return _this.resolveAutosave(data, false);
	        };
	        this.resolveAutosave = function (data, success) {
	            _this._saving = false;
	            _this._complete = true;
	            _this._successful = success;
	            _this.$timeout(function () {
	                _this._complete = false;
	            }, _this.completeMessageDuration);
	            return data;
	        };
	    }
	    Object.defineProperty(AutosaveActionService.prototype, "saving", {
	        get: function () {
	            return this._saving;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AutosaveActionService.prototype, "complete", {
	        get: function () {
	            return this._complete;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AutosaveActionService.prototype, "successful", {
	        get: function () {
	            return this._successful;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AutosaveActionService.prototype.trigger = function (promise) {
	        this._saving = true;
	        return promise.then(this.autosaveSuccessful)
	            .catch(this.autosaveFailed);
	    };
	    AutosaveActionService.$inject = ['$timeout'];
	    return AutosaveActionService;
	}());
	ng.module(exports.moduleName, [])
	    .service(exports.serviceName, AutosaveActionService);
	//# sourceMappingURL=autosaveAction.service.js.map

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var onChangeTrigger_1 = __webpack_require__(21);
	var trigger_1 = __webpack_require__(22);
	__export(__webpack_require__(21));
	__export(__webpack_require__(22));
	exports.defaultTriggers = 'onChange';
	exports.moduleName = 'rl.ui.services.autosave.triggers';
	exports.factoryName = 'autosaveTriggers';
	var TriggerService = (function () {
	    function TriggerService($rootScope, $timeout) {
	        this.triggers = {
	            onChange: new onChangeTrigger_1.OnChangeTrigger($rootScope, $timeout),
	            none: new trigger_1.Trigger('none'),
	        };
	    }
	    TriggerService.prototype.setTriggers = function (triggerString, autosave) {
	        if (triggerString == null) {
	            triggerString = exports.defaultTriggers;
	        }
	        _.each(this.triggers, function (trigger) {
	            if (trigger.hasMatch(triggerString)) {
	                trigger.setTrigger(autosave);
	            }
	        });
	    };
	    return TriggerService;
	}());
	triggerServiceFactory.$inject = ['$rootScope', '$timeout'];
	function triggerServiceFactory($rootScope, $timeout) {
	    return {
	        getInstance: function () {
	            return new TriggerService($rootScope, $timeout);
	        },
	    };
	}
	angular.module(exports.moduleName, [])
	    .factory(exports.factoryName, triggerServiceFactory);
	//# sourceMappingURL=triggers.service.js.map

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var _ = __webpack_require__(18);
	var trigger_1 = __webpack_require__(22);
	var OnChangeTrigger = (function (_super) {
	    __extends(OnChangeTrigger, _super);
	    function OnChangeTrigger($rootScope, $timeout) {
	        _super.call(this, 'onChange');
	        this.$rootScope = $rootScope;
	        this.$timeout = $timeout;
	        this.debounceDuration = 1000;
	    }
	    OnChangeTrigger.prototype.setTrigger = function (autosave) {
	        var _this = this;
	        if (_.isUndefined(this.settings)) {
	            return;
	        }
	        this.initChangeListeners();
	        this.$rootScope.$watch(function () {
	            return _this.settings.form != null
	                ? _this.settings.form.$dirty
	                : false;
	        }, function (value) {
	            if (value) {
	                _this.setTimer(autosave);
	                _this.clearChangeListener = _this.setChangeListener(function () {
	                    _this.$timeout.cancel(_this.timer);
	                    _this.setTimer(autosave);
	                });
	            }
	        });
	    };
	    OnChangeTrigger.prototype.setTimer = function (autosave) {
	        var _this = this;
	        this.timer = this.$timeout(function () {
	            _this.clearChangeListener();
	            autosave();
	        }, this.debounceDuration);
	    };
	    OnChangeTrigger.prototype.initChangeListeners = function () {
	        this.setChangeListener = this.settings.setChangeListener || this.nullSetListener;
	        this.clearChangeListener = this.nullClearListener;
	    };
	    OnChangeTrigger.prototype.nullSetListener = function () {
	        console.log('No change listener available');
	        return this.nullClearListener;
	    };
	    OnChangeTrigger.prototype.nullClearListener = function () {
	        console.log('No change listener register');
	    };
	    return OnChangeTrigger;
	}(trigger_1.Trigger));
	exports.OnChangeTrigger = OnChangeTrigger;
	//# sourceMappingURL=onChangeTrigger.js.map

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(18);
	var Trigger = (function () {
	    function Trigger(aliases, triggerAction) {
	        this.triggerAction = triggerAction;
	        this.aliases = aliases.split(' ');
	    }
	    Trigger.prototype.setTrigger = function (autosave) {
	        if (_.isFunction(this.triggerAction)) {
	            this.triggerAction(this.settings);
	        }
	    };
	    Trigger.prototype.hasMatch = function (triggers) {
	        var _this = this;
	        var triggerList = triggers.split(' ');
	        return _.some(triggerList, function (trigger) {
	            return _.some(_this.aliases, function (alias) {
	                return trigger === alias;
	            });
	        });
	    };
	    Trigger.prototype.configure = function (settings) {
	        this.settings = settings;
	    };
	    return Trigger;
	}());
	exports.Trigger = Trigger;
	//# sourceMappingURL=trigger.js.map

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __guid = typescript_angular_utilities_1.services.guid;
	exports.moduleName = 'rl.ui.behaviors.popover';
	exports.directiveName = 'rlPopover';
	exports.controllerName = 'PopoverController';
	var PopoverController = (function () {
	    function PopoverController($attrs, $element, $compile, $scope, $parse, $templateCache, guid) {
	        this.$attrs = $attrs;
	        this.$element = $element;
	        this.$compile = $compile;
	        this.$scope = $scope;
	        this.$parse = $parse;
	        this.$templateCache = $templateCache;
	        this.guid = guid;
	    }
	    PopoverController.prototype.$onInit = function () {
	        if (this.$parse(this.$attrs.textOnly)(this.$scope)) {
	            this.$element.attr('uib-popover', this.$attrs.rlPopover);
	        }
	        else {
	            var templatePath = this.guid.random() + '.html';
	            var templateContent = '<div>' + this.$parse(this.$attrs.rlPopover)(this.$scope) + '</div>';
	            if (templateContent != null) {
	                this.$templateCache.put(templatePath, templateContent);
	                this.$element.attr('uib-popover-template', '\'' + templatePath + '\'');
	            }
	        }
	        this.$element.removeAttr('rl-popover');
	        this.$compile(this.$element)(this.$scope);
	    };
	    PopoverController.$inject = ['$attrs',
	        '$element',
	        '$compile',
	        '$scope',
	        '$parse',
	        '$templateCache',
	        __guid.serviceName];
	    return PopoverController;
	}());
	exports.PopoverController = PopoverController;
	function popover() {
	    'use strict';
	    return {
	        restrict: 'A',
	        priority: 300,
	        controller: exports.controllerName,
	    };
	}
	exports.popover = popover;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, popover)
	    .controller(exports.controllerName, PopoverController);
	//# sourceMappingURL=popover.js.map

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var autosaveDialogFooter = __webpack_require__(25);
	exports.autosaveDialogFooter = autosaveDialogFooter;
	var busy = __webpack_require__(27);
	exports.busy = busy;
	var button = __webpack_require__(31);
	exports.button = button;
	var buttonAsync = __webpack_require__(33);
	exports.buttonAsync = buttonAsync;
	var buttonLink = __webpack_require__(35);
	exports.buttonLink = buttonLink;
	var buttonToggle = __webpack_require__(37);
	exports.buttonToggle = buttonToggle;
	var cardContainer = __webpack_require__(39);
	exports.cardContainer = cardContainer;
	var checkbox = __webpack_require__(97);
	exports.checkbox = checkbox;
	var commaList = __webpack_require__(99);
	exports.commaList = commaList;
	var dateTime = __webpack_require__(100);
	exports.dateTime = dateTime;
	var dateTimeStatic = __webpack_require__(107);
	exports.dateTimeStatic = dateTimeStatic;
	var dialog = __webpack_require__(109);
	exports.dialog = dialog;
	var genericContainer = __webpack_require__(112);
	exports.genericContainer = genericContainer;
	var lazyLoad = __webpack_require__(115);
	exports.lazyLoad = lazyLoad;
	var longClickButton = __webpack_require__(116);
	exports.longClickButton = longClickButton;
	var messageLog = __webpack_require__(118);
	exports.messageLog = messageLog;
	var multiStepIndicator = __webpack_require__(123);
	exports.multiStepIndicator = multiStepIndicator;
	var radio = __webpack_require__(125);
	exports.radio = radio;
	var ratingBar = __webpack_require__(128);
	exports.ratingBar = ratingBar;
	var richTextEditor = __webpack_require__(131);
	exports.richTextEditor = richTextEditor;
	var select = __webpack_require__(141);
	exports.select = select;
	var signaturePad = __webpack_require__(147);
	exports.signaturePad = signaturePad;
	var simpleCardList = __webpack_require__(148);
	exports.simpleCardList = simpleCardList;
	var spinner = __webpack_require__(152);
	exports.spinner = spinner;
	var stringWithWatermark = __webpack_require__(158);
	exports.stringWithWatermark = stringWithWatermark;
	var tabs = __webpack_require__(159);
	exports.tabs = tabs;
	var textarea = __webpack_require__(164);
	exports.textarea = textarea;
	var textbox = __webpack_require__(166);
	exports.textbox = textbox;
	var typeahead = __webpack_require__(168);
	exports.typeahead = typeahead;
	var userRating = __webpack_require__(170);
	exports.userRating = userRating;
	var validationGroup = __webpack_require__(171);
	exports.validationGroup = validationGroup;
	var componentsDefaultTheme_1 = __webpack_require__(30);
	exports.defaultThemeValueName = componentsDefaultTheme_1.defaultThemeValueName;
	exports.moduleName = 'rl.ui.components';
	angular.module(exports.moduleName, [
	    autosaveDialogFooter.moduleName,
	    busy.moduleName,
	    button.moduleName,
	    buttonAsync.moduleName,
	    buttonLink.moduleName,
	    buttonToggle.moduleName,
	    cardContainer.moduleName,
	    checkbox.moduleName,
	    commaList.moduleName,
	    dateTime.moduleName,
	    dateTimeStatic.moduleName,
	    dialog.moduleName,
	    genericContainer.moduleName,
	    lazyLoad.moduleName,
	    longClickButton.moduleName,
	    messageLog.moduleName,
	    multiStepIndicator.moduleName,
	    radio.moduleName,
	    ratingBar.moduleName,
	    richTextEditor.moduleName,
	    select.moduleName,
	    signaturePad.moduleName,
	    simpleCardList.moduleName,
	    spinner.moduleName,
	    stringWithWatermark.moduleName,
	    tabs.moduleName,
	    textarea.moduleName,
	    textbox.moduleName,
	    typeahead.moduleName,
	    userRating.moduleName,
	    validationGroup.moduleName,
	])
	    .value(componentsDefaultTheme_1.defaultThemeValueName, componentsDefaultTheme_1.defaultThemeValue);
	//# sourceMappingURL=components.module.js.map

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.autosaveDialogFooter';
	exports.directiveName = 'rlAutosaveDialogFooter';
	function autosaveDialogFooter() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(26),
	    };
	}
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, autosaveDialogFooter);
	//# sourceMappingURL=autosaveDialogFooter.js.map

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = "<div class=\"modal-footer\">\r\n\t<button class=\"btn btn-danger\" type=\"button\" ng-click=\"$close()\"><i class=\"fa fa-times\"></i> Cancel</button>\r\n\t<button class=\"btn btn-success\" type=\"button\" ng-click=\"$dismiss()\"><i class=\"fa fa-check\"></i> Save</button>\r\n</div>\r\n"

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(28);
	var angular = __webpack_require__(1);
	var componentsDefaultTheme_1 = __webpack_require__(30);
	exports.moduleName = 'rl.ui.components.busy';
	exports.directiveName = 'rlBusy';
	busy.$inject = [componentsDefaultTheme_1.defaultThemeValueName];
	function busy(useDefaultTheme) {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "<i class=\"busy rl-{{size}}\" ng-class=\"{ 'default-theme': useDefaultTheme }\" ng-show=\"loading\"></i>",
	        scope: {
	            loading: '=',
	            // Valid values are:
	            // `lg`, `2x`, `3x`, `4x`, and `5x`
	            size: '@',
	        },
	        link: function (scope) {
	            scope.useDefaultTheme = useDefaultTheme;
	        },
	    };
	}
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, busy);
	//# sourceMappingURL=busy.js.map

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(29);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./busy.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./busy.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	
	
	// module
	exports.push([module.id, ".default-theme.busy {\r\n\t-webkit-animation: fa-spin 2s infinite linear;\r\n\tanimation: fa-spin 2s infinite linear;\r\n\tdisplay: inline-block;\r\n\tfont-size: inherit;\r\n\tfont-style: normal;\r\n\tfont-family: FontAwesome;\r\n}\r\n\r\n.default-theme.busy:before {\r\n\tcontent: \"\\F110\"; /* fa-spinner */\r\n}", ""]);
	
	// exports


/***/ },
/* 30 */
/***/ function(module, exports) {

	"use strict";
	exports.defaultThemeValueName = 'useDefaultTheme';
	exports.defaultThemeValue = true;
	//# sourceMappingURL=componentsDefaultTheme.js.map

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.button';
	exports.directiveName = 'rlButton';
	exports.controllerName = 'ButtonController';
	var ButtonController = (function () {
	    function ButtonController() {
	        this.type = this.type != null ? this.type : 'default';
	        this.configuredSize = this.size != null ? 'btn-' + this.size : null;
	    }
	    return ButtonController;
	}());
	exports.ButtonController = ButtonController;
	function button() {
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: __webpack_require__(32),
	        scope: {},
	        bindToController: {
	            action: '&',
	            type: '@',
	            ngDisabled: '=',
	            size: '@',
	        },
	        controller: exports.controllerName,
	        controllerAs: 'button',
	    };
	}
	exports.button = button;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, button)
	    .controller(exports.controllerName, ButtonController);
	//# sourceMappingURL=button.js.map

/***/ },
/* 32 */
/***/ function(module, exports) {

	module.exports = "<button type=\"button\" class=\"btn btn-{{button.type}} {{button.configuredSize}}\" ng-click=\"button.action()\" ng-disabled=\"button.ngDisabled\">\r\n\t<span ng-transclude></span>\r\n</button>"

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __promiseUtility = typescript_angular_utilities_1.services.promise;
	exports.moduleName = 'rl.ui.components.buttonAsync';
	exports.directiveName = 'rlButtonAsync';
	exports.controllerName = 'ButtonAsyncController';
	var ButtonAsyncController = (function () {
	    function ButtonAsyncController(promiseUtility) {
	        this.promiseUtility = promiseUtility;
	        this.type = this.type != null ? this.type : 'default';
	        this.sizeClass = this.size != null ? 'btn-' + this.size : null;
	    }
	    ButtonAsyncController.prototype.trigger = function () {
	        var _this = this;
	        if (!this.busy) {
	            this.busy = true;
	            var result = this.action();
	            if (this.promiseUtility.isPromise(result) && _.isFunction(result.finally)) {
	                result.finally(function () {
	                    _this.busy = false;
	                });
	            }
	            else if (result !== true) {
	                this.busy = false;
	            }
	        }
	    };
	    ButtonAsyncController.$inject = [__promiseUtility.serviceName];
	    return ButtonAsyncController;
	}());
	exports.ButtonAsyncController = ButtonAsyncController;
	function buttonAsync() {
	    'use strict';
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: __webpack_require__(34),
	        scope: {},
	        bindToController: {
	            busy: '=?',
	            action: '&',
	            type: '@',
	            ngDisabled: '=?',
	            rightAligned: '=?',
	            size: '@',
	        },
	        controller: exports.controllerName,
	        controllerAs: 'button',
	    };
	}
	angular.module(exports.moduleName, [__promiseUtility.moduleName])
	    .directive(exports.directiveName, buttonAsync)
	    .controller(exports.controllerName, ButtonAsyncController);
	//# sourceMappingURL=buttonAsync.js.map

/***/ },
/* 34 */
/***/ function(module, exports) {

	module.exports = "<button type=\"button\" class=\"btn btn-{{button.type}} {{button.sizeClass}}\" ng-click=\"button.trigger()\" ng-disabled=\"button.busy || button.ngDisabled\">\r\n\t<rl-busy ng-show=\"button.rightAligned\" loading=\"button.busy\"></rl-busy>\r\n\t<span ng-transclude></span>\r\n\t<rl-busy ng-hide=\"button.rightAligned\" loading=\"button.busy\"></rl-busy>\r\n</button>"

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.buttonLink';
	exports.directiveName = 'rlButtonLink';
	exports.controllerName = 'ButtonLinkController';
	var ButtonLinkController = (function () {
	    function ButtonLinkController() {
	        this.type = this.type != null ? this.type : 'default';
	        this.configuredSize = this.size != null ? 'btn-' + this.size : null;
	        this.target = this.newTab ? '_blank' : '_self';
	    }
	    return ButtonLinkController;
	}());
	exports.ButtonLinkController = ButtonLinkController;
	function buttonLink() {
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: __webpack_require__(36),
	        scope: {},
	        bindToController: {
	            link: '@',
	            type: '@',
	            ngDisabled: '=',
	            size: '@',
	            newTab: '=',
	        },
	        controller: exports.controllerName,
	        controllerAs: 'button',
	    };
	}
	exports.buttonLink = buttonLink;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, buttonLink)
	    .controller(exports.controllerName, ButtonLinkController);
	//# sourceMappingURL=buttonLink.js.map

/***/ },
/* 36 */
/***/ function(module, exports) {

	module.exports = "<a class=\"btn btn-{{button.type}} {{button.configuredSize}}\" ng-href=\"{{button.link}}\" ng-disabled=\"button.ngDisabled\" target=\"{{button.target}}\">\r\n\t<span ng-transclude></span>\r\n</a>"

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __boolean = typescript_angular_utilities_1.services.boolean;
	exports.moduleName = 'rl.ui.components.buttonToggle';
	exports.directiveName = 'rlButtonToggle';
	exports.controllerName = 'ButtonToggleController';
	var ButtonToggleController = (function () {
	    function ButtonToggleController($scope, bool) {
	        var _this = this;
	        this.$scope = $scope;
	        this.buttonClass = $scope.type != null ? $scope.type : 'default';
	        this.buttonSize = $scope.size != null ? 'btn-' + $scope.size : null;
	        $scope.$watch('ngModel.$modelValue', function (value) {
	            _this.isActive = bool.toBool(value);
	            if (value != null && _.isFunction($scope.onToggle)) {
	                $scope.onToggle({ value: value });
	            }
	        });
	    }
	    ButtonToggleController.prototype.clicked = function () {
	        this.$scope.ngModel.$setViewValue(!this.$scope.ngModel.$viewValue);
	    };
	    ButtonToggleController.$inject = ['$scope', __boolean.serviceName];
	    return ButtonToggleController;
	}());
	function buttonToggle() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: '^ngModel',
	        transclude: true,
	        template: __webpack_require__(38),
	        controller: exports.controllerName,
	        controllerAs: 'buttonToggle',
	        scope: {
	            type: '@',
	            size: '@',
	            onToggle: '&',
	            disabled: '=ngDisabled',
	        },
	        link: function (scope, element, attrs, ngModel) {
	            scope.ngModel = ngModel;
	        }
	    };
	}
	angular.module(exports.moduleName, [__boolean.moduleName])
	    .directive(exports.directiveName, buttonToggle)
	    .controller(exports.controllerName, ButtonToggleController);
	//# sourceMappingURL=buttonToggle.js.map

/***/ },
/* 38 */
/***/ function(module, exports) {

	module.exports = "<button type=\"button\" class=\"btn btn-{{buttonToggle.buttonClass}} {{buttonToggle.buttonSize}}\" \r\n\t\tng-class=\"{ active : buttonToggle.isActive }\" ng-click=\"buttonToggle.clicked()\" ng-disabled=\"disabled\">\r\n\t<i ng-show=\"buttonToggle.isActive\" class=\"fa fa-check completed\"></i> <span ng-transclude></span>\r\n</button>"

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var __array = typescript_angular_utilities_1.services.array;
	var __parentChild = typescript_angular_utilities_1.services.parentChildBehavior;
	var __genericSearchFilter = typescript_angular_utilities_1.services.genericSearchFilter;
	var card = __webpack_require__(40);
	exports.card = card;
	var cardSearch = __webpack_require__(46);
	exports.cardSearch = cardSearch;
	var columnHeader = __webpack_require__(48);
	exports.columnHeader = columnHeader;
	var dataSources = __webpack_require__(50);
	exports.dataSources = dataSources;
	var filters = __webpack_require__(65);
	exports.filters = filters;
	var itemCount = __webpack_require__(84);
	exports.itemCount = itemCount;
	var pager = __webpack_require__(86);
	exports.pager = pager;
	var pageSize = __webpack_require__(88);
	exports.pageSize = pageSize;
	var selectionControl = __webpack_require__(90);
	exports.selectionControl = selectionControl;
	var sorts = __webpack_require__(51);
	exports.sorts = sorts;
	var cardContainer_1 = __webpack_require__(92);
	var builder = __webpack_require__(96);
	exports.builder = builder;
	__export(__webpack_require__(92));
	exports.moduleName = 'rl.ui.components.cardContainer';
	angular.module(exports.moduleName, [
	    // dependencies
	    dataSources.dataPager.moduleName,
	    __object.moduleName,
	    __array.moduleName,
	    __parentChild.moduleName,
	    __genericSearchFilter.moduleName,
	    // components
	    card.moduleName,
	    cardSearch.moduleName,
	    columnHeader.moduleName,
	    itemCount.moduleName,
	    pager.moduleName,
	    pageSize.moduleName,
	    selectionControl.moduleName,
	    // submodules
	    dataSources.moduleName,
	    filters.moduleName,
	    sorts.moduleName,
	])
	    .directive(cardContainer_1.directiveName, cardContainer_1.cardContainer)
	    .controller(cardContainer_1.controllerName, cardContainer_1.CardContainerController)
	    .factory(builder.factoryName, builder.cardContainerBuilderFactory);
	//# sourceMappingURL=cardContainer.module.js.map

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../typings/jquery/jquery.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __parentChild = typescript_angular_utilities_1.services.parentChildBehavior;
	var __object = typescript_angular_utilities_1.services.object;
	var headerColumn_module_1 = __webpack_require__(41);
	exports.moduleName = 'rl.ui.components.cardContainer.card';
	exports.directiveName = 'rlCard';
	exports.controllerName = 'CardController';
	var CardController = (function () {
	    function CardController($scope, $controller, $q, parentChild, object) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.parentChild = parentChild;
	        this.showContent = false;
	        this.dirty = false;
	        this.autosaveLink = {};
	        this.autosave = function () {
	            if (_this.showContent === false) {
	                return true;
	            }
	            return _this.parentChild.triggerChildBehavior(_this.autosaveLink, function (behavior) {
	                if (behavior.autosave()) {
	                    _this.showContent = false;
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            });
	        };
	        if (this.cardAs) {
	            $scope[this.cardAs] = this.item;
	        }
	        $scope.collapse = this.autosave;
	        $scope.setSelected = this.setSelected.bind(this);
	        $scope.refresh = function () {
	            _this.source.refresh();
	            $scope.$broadcast('card.refresh');
	        };
	        $scope.remove = function () {
	            _this.source.remove(_this.item);
	        };
	        $scope.containerData = this.containerData;
	        if (object.isNullOrWhitespace(this.cardController) === false) {
	            var controller = $controller(this.cardController, { $scope: $scope });
	            if (object.isNullOrWhitespace(this.cardControllerAs) === false) {
	                $scope[this.cardControllerAs] = controller;
	            }
	        }
	        parentChild.registerChildBehavior(this.item, {
	            close: this.autosave,
	        });
	        $scope.__initContents = function (hasBody, hasFooter) {
	            _this.hasBody = hasBody;
	            _this.hasFooter = hasFooter;
	        };
	    }
	    CardController.prototype.toggleContent = function () {
	        if (!this.showContent) {
	            this.open();
	        }
	        else {
	            this.autosave();
	        }
	    };
	    CardController.prototype.validateCard = function () {
	        var behavior = this.parentChild.getChildBehavior(this.item);
	        if (_.isFunction(behavior.validateCard)) {
	            return behavior.validateCard();
	        }
	        else {
	            return true;
	        }
	    };
	    CardController.prototype.saveCard = function () {
	        var behavior = this.parentChild.getChildBehavior(this.item);
	        if (_.isFunction(behavior.saveCard)) {
	            return behavior.saveCard();
	        }
	        else {
	            return this.$q.when();
	        }
	    };
	    CardController.prototype.clickCard = function () {
	        this.parentChild.triggerChildBehavior(this.item, function (behavior) {
	            if (_.isFunction(behavior.clickCard)) {
	                return behavior.clickCard();
	            }
	        });
	    };
	    CardController.prototype.open = function () {
	        this.parentChild.triggerChildBehavior(this.item, function (behavior) {
	            if (_.isFunction(behavior.initCard)) {
	                behavior.initCard();
	            }
	        });
	        if (this.$scope.__rlCardContainer.openCard()) {
	            this.showContent = true;
	        }
	    };
	    CardController.prototype.setSelected = function (value) {
	        if (_.isUndefined(this.item.viewData)) {
	            this.item.viewData = {};
	        }
	        this.item.viewData.selected = value;
	        this.selectionChanged();
	    };
	    CardController.$inject = ['$scope', '$controller', '$q', __parentChild.serviceName, __object.serviceName];
	    return CardController;
	}());
	exports.CardController = CardController;
	function card() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(45),
	        require: '^^rlCardContainer',
	        controller: exports.controllerName,
	        controllerAs: '__card',
	        scope: {},
	        bindToController: {
	            columns: '=',
	            item: '=',
	            clickable: '=',
	            source: '=',
	            containerData: '=',
	            cardController: '=',
	            cardControllerAs: '=',
	            cardAs: '=',
	            permanentFooter: '=',
	            selectable: '=',
	            selectionChanged: '&',
	        },
	        link: function (scope, element, attrs, rlCardContainer) {
	            scope.__rlCardContainer = rlCardContainer;
	            rlCardContainer.makeCard(scope, function (clone) {
	                var content = clone.filter('rl-card-content');
	                var footer = clone.filter('rl-card-footer');
	                var contentArea = element.find('.content-template');
	                contentArea.append(content);
	                var hasBody = content.length > 0;
	                var hasFooter = (footer.length > 0);
	                if (hasFooter) {
	                    var footerArea = element.find('.footer-template');
	                    footerArea.append(footer);
	                }
	                scope.__initContents(hasBody, hasFooter);
	            });
	        },
	    };
	}
	exports.card = card;
	angular.module(exports.moduleName, [
	    __parentChild.moduleName,
	    __object.moduleName,
	    headerColumn_module_1.moduleName,
	])
	    .directive(exports.directiveName, card)
	    .controller(exports.controllerName, CardController);
	//# sourceMappingURL=card.js.map

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var headerColumn_1 = __webpack_require__(42);
	var sizeForBreakpoints_1 = __webpack_require__(43);
	exports.moduleName = 'rl.ui.components.cardContainer.card.headerColumn';
	angular.module(exports.moduleName, [
	    typescript_angular_utilities_1.services.string.moduleName,
	])
	    .directive(sizeForBreakpoints_1.sizeForBreakpointsName, sizeForBreakpoints_1.sizeForBreakpoints)
	    .directive(headerColumn_1.directiveName, headerColumn_1.headerColumn)
	    .controller(headerColumn_1.controllerName, headerColumn_1.HeaderColumnController);
	//# sourceMappingURL=headerColumn.module.js.map

/***/ },
/* 42 */
/***/ function(module, exports) {

	// /// <reference path='../../../../../typings/jquery/jquery.d.ts' />
	'use strict';
	exports.directiveName = 'rlCardHeaderColumn';
	exports.controllerName = 'CardHeaderColumnController';
	var HeaderColumnController = (function () {
	    function HeaderColumnController($scope) {
	        var _this = this;
	        this.$scope = $scope;
	        this.update = function () {
	            _this.value = _this.column.getValue(_this.item);
	        };
	        this.update();
	        $scope.$on('card.refresh', this.update); //*event?
	    }
	    HeaderColumnController.$inject = ['$scope'];
	    return HeaderColumnController;
	}());
	exports.HeaderColumnController = HeaderColumnController;
	headerColumn.$inject = ['$compile'];
	function headerColumn($compile) {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "\n\t\t\t<div rl-size-for-breakpoints=\"header.column.size\" title=\"{{::header.column.description}}\">\n\t\t\t\t<div class=\"template-container\"></div>\n\t\t\t</div>\n\t\t",
	        controller: exports.controllerName,
	        controllerAs: 'header',
	        scope: {},
	        bindToController: {
	            column: '=',
	            item: '=',
	        },
	        compile: function () {
	            return {
	                pre: function (scope, element, attrs, header) {
	                    var column = header.column;
	                    if (column.templateUrl != null) {
	                        header.renderedTemplate = $compile('<div ng-include="\'' + column.templateUrl + '\'"></div>')(scope);
	                    }
	                    else if (column.template != null) {
	                        header.renderedTemplate = $compile(column.template)(scope);
	                    }
	                    else {
	                        header.renderedTemplate = $compile('<span>{{header.value}}</span>')(scope);
	                    }
	                },
	                post: function (scope, element, attrs, header) {
	                    var container = element.find('.template-container');
	                    container.append(header.renderedTemplate);
	                },
	            };
	        },
	    };
	}
	exports.headerColumn = headerColumn;
	//# sourceMappingURL=headerColumn.js.map

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __string = typescript_angular_utilities_1.services.string;
	var breakpoint_1 = __webpack_require__(44);
	exports.sizeForBreakpointsName = 'rlSizeForBreakpoints';
	sizeForBreakpoints.$inject = ['$parse', __string.serviceName];
	function sizeForBreakpoints($parse, stringUtility) {
	    'use strict';
	    return {
	        restrict: 'A',
	        link: linkDirective,
	    };
	    function linkDirective(scope, element, attributes) {
	        var sizes = $parse(attributes.rlSizeForBreakpoints)(scope);
	        var classes = [];
	        classes.push(getColumnClass(sizes, breakpoint_1.xs));
	        classes.push(getColumnClass(sizes, breakpoint_1.sm));
	        classes.push(getColumnClass(sizes, breakpoint_1.md));
	        classes.push(getColumnClass(sizes, breakpoint_1.lg));
	        element.addClass(classes.join(' '));
	    }
	    function getColumnClass(columnSizes, breakpoint) {
	        var value = columnSizes[breakpoint];
	        if (value > 0 && value !== 'hidden') {
	            return stringUtility.substitute('col-{0}-{1}', breakpoint, value);
	        }
	        else {
	            return 'hidden-' + breakpoint;
	        }
	    }
	}
	exports.sizeForBreakpoints = sizeForBreakpoints;
	//# sourceMappingURL=sizeForBreakpoints.js.map

/***/ },
/* 44 */
/***/ function(module, exports) {

	'use strict';
	exports.lg = 'lg';
	exports.md = 'md';
	exports.sm = 'sm';
	exports.xs = 'xs';
	exports.all = [exports.xs, exports.sm, exports.md, exports.lg];
	//# sourceMappingURL=breakpoint.js.map

/***/ },
/* 45 */
/***/ function(module, exports) {

	module.exports = "<rl-generic-container selector=\"__card.selectable\">\r\n\t<template when-selector=\"false\" default>\r\n\t\t<div class=\"card\" ng-class=\"{ 'selected': __card.item.viewData.selected }\">\r\n\t\t\t<div class=\"header\" ng-click=\"__card.toggleContent()\" ng-class=\"{ 'active': __card.hasBody || !__card.permanentFooter }\">\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div ng-repeat=\"column in __card.columns\">\r\n\t\t\t\t\t\t<rl-card-header-column column=\"column\" item=\"__card.item\"></rl-card-header-column>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div ng-show=\"__card.showContent\">\r\n\t\t\t\t<ng-form rl-autosave=\"__card.autosaveLink\" save=\"__card.saveCard()\" validate=\"__card.validateCard()\">\r\n\t\t\t\t\t<div class=\"body\" ng-class=\"{ 'active': __card.clickable }\" ng-click=\"__card.clickCard()\">\r\n\t\t\t\t\t\t<div class=\"content-template\"></div>\r\n\t\t\t\t\t\t<div class=\"clearfix\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ng-form>\r\n\t\t\t</div>\r\n\t\t\t<div ng-show=\"__card.hasFooter && (__card.showContent || __card.permanentFooter)\">\r\n\t\t\t\t<div class=\"footer\">\r\n\t\t\t\t\t<div class=\"footer-template\"></div>\r\n\t\t\t\t\t<div class=\"clearfix\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</template>\r\n\t<template when-selector=\"true\">\r\n\t\t<div class=\"select-group\">\r\n\t\t\t<div class=\"select-column\">\r\n\t\t\t\t<input type=\"checkbox\" class=\"stand-alone-checkbox\" ng-model=\"__card.item.viewData.selected\" ng-change=\"__card.selectionChanged()\"\r\n\t\t\t\t\t   ng-disabled=\"__card.item.viewData.disabledSelection\" title=\"{{__card.item.viewData.selectionTitle}}\" />\r\n\t\t\t</div>\r\n\t\t\t<div class=\"select-content\">\r\n\r\n\t\t\t\t<div class=\"card selectable\" ng-class=\"{ 'selected': __card.item.viewData.selected }\">\r\n\t\t\t\t\t<div class=\"header active\" ng-click=\"__card.toggleContent()\">\r\n\t\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t\t<div ng-repeat=\"column in __card.columns\">\r\n\t\t\t\t\t\t\t\t<rl-card-header-column column=\"column\" item=\"__card.item\"></rl-card-header-column>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div ng-show=\"__card.showContent\">\r\n\t\t\t\t\t\t<ng-form rl-autosave=\"__card.autosaveLink\" save=\"__card.saveCard()\" validate=\"__card.validateCard()\">\r\n\t\t\t\t\t\t\t<div class=\"body\" ng-class=\"{ 'active': __card.clickable }\" ng-click=\"__card.clickCard()\">\r\n\t\t\t\t\t\t\t\t<div class=\"content-template\"></div>\r\n\t\t\t\t\t\t\t\t<div class=\"clearfix\"></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</ng-form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div ng-show=\"__card.hasFooter && (__card.showContent || __card.permanentFooter)\">\r\n\t\t\t\t\t\t<div class=\"footer\">\r\n\t\t\t\t\t\t\t<div class=\"footer-template\"></div>\r\n\t\t\t\t\t\t\t<div class=\"clearfix\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</template>\r\n</rl-generic-container>"

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.cardContainer.cardSearch';
	exports.directiveName = 'rlCardSearch';
	exports.controllerName = 'CardSearchController';
	exports.defaultSearchPlaceholder = 'Search';
	exports.defaultSearchDelay = 1000;
	var CardSearchController = (function () {
	    function CardSearchController($scope, $timeout) {
	        this.$scope = $scope;
	        this.$timeout = $timeout;
	        this.searchLengthError = false;
	        this.hasSearchFilter = true;
	    }
	    CardSearchController.prototype.$onInit = function () {
	        var _this = this;
	        if (this.cardContainer == null) {
	            return;
	        }
	        this.minSearchError = 'You must enter at least {{cardSearch.minSearchLength}} characters to perform a search';
	        if (this.searchFilter == null) {
	            var filter = this.cardContainer.searchFilter;
	            this.searchFilter = filter;
	            if (filter == null) {
	                this.hasSearchFilter = false;
	            }
	        }
	        if (this.hasSearchFilter) {
	            this.searchPlaceholder = exports.defaultSearchPlaceholder;
	            var dataSource = this.cardContainer.dataSource;
	            var delay = this.delay != null
	                ? this.delay
	                : exports.defaultSearchDelay;
	            var timer;
	            this.$scope.$watch(function () { return _this.searchText; }, function (search) {
	                _this.searchFilter.searchText = search;
	                _this.minSearchLength = _this.searchFilter.minSearchLength;
	                _this.validateSearchLength(search, _this.minSearchLength);
	                if (timer != null) {
	                    _this.$timeout.cancel(timer);
	                }
	                timer = _this.$timeout(dataSource.refresh.bind(dataSource), delay);
	            });
	            this.$scope.$watch(function () {
	                return _this.searchFilter.searchText;
	            }, function () {
	                _this.searchText = _this.searchFilter.searchText;
	            });
	        }
	    };
	    CardSearchController.prototype.validateSearchLength = function (search, minLength) {
	        // show error if search string exists but is below minimum size
	        this.searchLengthError = search != null
	            && search.length > 0
	            && search.length < minLength;
	    };
	    CardSearchController.$inject = ['$scope', '$timeout'];
	    return CardSearchController;
	}());
	exports.CardSearchController = CardSearchController;
	function cardSearch() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: { cardContainer: '^^rlCardContainer' },
	        template: __webpack_require__(47),
	        controller: exports.controllerName,
	        controllerAs: 'cardSearch',
	        scope: {},
	        bindToController: {
	            delay: '=searchDelay',
	            searchFilter: '=?',
	        },
	    };
	}
	exports.cardSearch = cardSearch;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, cardSearch)
	    .controller(exports.controllerName, CardSearchController);
	//# sourceMappingURL=cardSearch.js.map

/***/ },
/* 47 */
/***/ function(module, exports) {

	module.exports = "<div class=\"input-group\" ng-show=\"cardSearch.hasSearchFilter\" ng-class=\"{ 'has-error': cardSearch.searchLengthError }\">\r\n\t<input class=\"form-control\" type=\"text\" placeholder=\"{{cardSearch.searchPlaceholder}}\" ng-model=\"cardSearch.searchText\"\r\n\t\t   rl-popover=\"cardSearch.minSearchError\" popover-trigger=\"mouseenter\" popover-enable=\"cardSearch.searchLengthError\" />\r\n\t<div class=\"input-group-btn\">\r\n\t\t<button type=\"button\" class=\"btn btn-default\" ng-disabled=\"cardSearch.searchText | isEmpty\" ng-click=\"cardSearch.searchText = null\">\r\n\t\t\t<i class=\"fa fa-times\"></i>\r\n\t\t</button>\r\n\t</div>\r\n</div>"

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../typings/jquery/jquery.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var sortDirection_1 = __webpack_require__(49);
	exports.moduleName = 'rl.ui.components.cardContainer.columnHeader';
	exports.directiveName = 'rlColumnHeader';
	cardColumnHeader.$inject = ['$compile'];
	function cardColumnHeader($compile) {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "\n\t\t\t<div rl-size-for-breakpoints=\"column.size\" ng-click=\"sort()\" title=\"{{::column.description}}\"\n\t\t\t\t\tclass=\"column-header\">\n\t\t\t\t<div class=\"template-container\"></div>\n\t\t\t\t<i ng-show=\"sorting === sortDirection.ascending\" class=\"fa fa-sort-asc\"></i>\n\t\t\t\t<i ng-show=\"sorting === sortDirection.descending\" class=\"fa fa-sort-desc\"></i>\n\t\t\t</div>\n\t\t",
	        scope: {
	            column: '=',
	            sorting: '=',
	            sort: '&',
	        },
	        compile: function () {
	            return {
	                pre: function (scope) {
	                    var column = scope.column;
	                    if (column.headerTemplateUrl != null) {
	                        scope.renderedTemplate = $compile('<div ng-include="\'' + column.headerTemplateUrl + '\'"></div>')(scope);
	                    }
	                    else if (column.headerTemplate != null) {
	                        scope.renderedTemplate = $compile(column.headerTemplate)(scope);
	                    }
	                    else {
	                        scope.renderedTemplate = ('<h5>' + column.label + '</h5');
	                    }
	                },
	                post: function (scope, element) {
	                    if (scope.column.displayColumnHeader != null && scope.column.displayColumnHeader === false) {
	                        element.remove();
	                        return;
	                    }
	                    var container = element.find('.template-container');
	                    container.append(scope.renderedTemplate);
	                    scope.sortDirection = sortDirection_1.SortDirection;
	                },
	            };
	        }
	    };
	}
	exports.cardColumnHeader = cardColumnHeader;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, cardColumnHeader);
	//# sourceMappingURL=columnHeader.js.map

/***/ },
/* 49 */
/***/ function(module, exports) {

	'use strict';
	var SortDirection = (function () {
	    function SortDirection(value) {
	        this.value = value;
	    }
	    SortDirection.toggle = function (direction) {
	        if (direction === SortDirection.ascending) {
	            return SortDirection.descending;
	        }
	        else if (direction === SortDirection.descending) {
	            return SortDirection.none;
	        }
	        else {
	            return SortDirection.ascending;
	        }
	    };
	    SortDirection.getFullName = function (direction) {
	        'use strict';
	        if (direction === SortDirection.ascending) {
	            return 'ascending';
	        }
	        else if (direction === SortDirection.descending) {
	            return 'descending';
	        }
	        else {
	            return 'none';
	        }
	    };
	    SortDirection.none = new SortDirection(0);
	    SortDirection.ascending = new SortDirection(1);
	    SortDirection.descending = new SortDirection(2);
	    return SortDirection;
	}());
	exports.SortDirection = SortDirection;
	//# sourceMappingURL=sortDirection.js.map

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var sorts_module_1 = __webpack_require__(51);
	var clientServerDataSource = __webpack_require__(55);
	exports.clientServerDataSource = clientServerDataSource;
	var dataPager = __webpack_require__(60);
	exports.dataPager = dataPager;
	var dataServiceDataSource = __webpack_require__(61);
	exports.dataServiceDataSource = dataServiceDataSource;
	var serverSideDataSource = __webpack_require__(62);
	exports.serverSideDataSource = serverSideDataSource;
	var simpleDataSource = __webpack_require__(63);
	exports.simpleDataSource = simpleDataSource;
	var smartDataSource = __webpack_require__(64);
	exports.smartDataSource = smartDataSource;
	var events = __webpack_require__(58);
	exports.events = events;
	var dataSourceProcessor = __webpack_require__(59);
	exports.dataSourceProcessor = dataSourceProcessor;
	var dataSourceBase = __webpack_require__(57);
	exports.dataSourceBase = dataSourceBase;
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources';
	angular.module(exports.moduleName, [
	    typescript_angular_utilities_1.services.object.moduleName,
	    sorts_module_1.moduleName,
	    clientServerDataSource.moduleName,
	    dataPager.moduleName,
	    dataServiceDataSource.moduleName,
	    serverSideDataSource.moduleName,
	    simpleDataSource.moduleName,
	    smartDataSource.moduleName,
	])
	    .service(dataSourceProcessor.processorServiceName, dataSourceProcessor.DataSourceProcessor);
	//# sourceMappingURL=dataSources.module.js.map

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var mergeSort = __webpack_require__(52);
	exports.mergeSort = mergeSort;
	var sorter = __webpack_require__(53);
	exports.sorter = sorter;
	__export(__webpack_require__(54));
	__export(__webpack_require__(49));
	exports.moduleName = 'rl.ui.components.cardContainer.sorts';
	angular.module(exports.moduleName, [
	    mergeSort.moduleName,
	    sorter.moduleName,
	]);
	//# sourceMappingURL=sorts.module.js.map

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	exports.moduleName = 'rl.ui.components.cardContainer.sorts.mergeSort';
	exports.serviceName = 'mergeSort';
	var MergeSort = (function () {
	    function MergeSort() {
	    }
	    MergeSort.prototype.sort = function (data, compare) {
	        if (data.length < 2) {
	            return data;
	        }
	        if (compare == null) {
	            compare = this.defaultCompare;
	        }
	        var mid;
	        var left;
	        var right;
	        mid = data.length / 2;
	        left = this.sort(data.slice(0, mid), compare);
	        right = this.sort(data.slice(mid, data.length), compare);
	        return this.merge(left, right, compare);
	    };
	    MergeSort.prototype.defaultCompare = function (a, b) {
	        return a < b
	            ? typescript_angular_utilities_1.types.CompareResult.less
	            : (a > b ? typescript_angular_utilities_1.types.CompareResult.greater : typescript_angular_utilities_1.types.CompareResult.equal);
	    };
	    MergeSort.prototype.merge = function (left, right, compare) {
	        var result = [];
	        while (left.length && right.length) {
	            if (compare(left[0], right[0]) === typescript_angular_utilities_1.types.CompareResult.greater) {
	                result.push(right.shift());
	            }
	            else {
	                // if equal it should preserve same order (stable)
	                result.push(left.shift());
	            }
	        }
	        if (left.length) {
	            result.push.apply(result, left);
	        }
	        if (right.length) {
	            result.push.apply(result, right);
	        }
	        return result;
	    };
	    return MergeSort;
	}());
	exports.MergeSort = MergeSort;
	angular.module(exports.moduleName, [])
	    .service(exports.serviceName, MergeSort);
	//# sourceMappingURL=mergeSort.service.js.map

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var sortDirection_1 = __webpack_require__(49);
	var mergeSort_service_1 = __webpack_require__(52);
	exports.moduleName = 'rl.ui.components.cardContainer.sorts.sorter';
	exports.serviceName = 'sorter';
	var Sorter = (function () {
	    function Sorter(mergeSort) {
	        this.mergeSort = mergeSort;
	    }
	    Sorter.prototype.sort = function (data, sort) {
	        var _this = this;
	        if (sort === null) {
	            return data;
	        }
	        if (_.isArray(sort)) {
	            var reverseSorts = _.clone(sort);
	            reverseSorts.reverse();
	            return _.reduce(reverseSorts, function (sortedData, nextSort) {
	                return _this.singleSort(sortedData, nextSort);
	            }, data);
	        }
	        return this.singleSort(data, sort);
	    };
	    Sorter.prototype.singleSort = function (data, sort) {
	        var compareFunction = this.buildSortFunction(sort);
	        return this.mergeSort.sort(data, compareFunction);
	    };
	    Sorter.prototype.buildSortFunction = function (sort) {
	        return function (a, b) {
	            if (sort.direction === sortDirection_1.SortDirection.none) {
	                return typescript_angular_utilities_1.types.CompareResult.equal;
	            }
	            var valueOfA = sort.column.getValue(a);
	            var valueOfB = sort.column.getValue(b);
	            var greaterResult = typescript_angular_utilities_1.types.CompareResult.greater;
	            var lessResult = typescript_angular_utilities_1.types.CompareResult.less;
	            var descendingSort = (sort.direction === sortDirection_1.SortDirection.descending);
	            var flip = sort.column.flipSort;
	            // Exclusive OR... if flipping a descending sort, you get an ascending sort
	            if ((descendingSort || flip) && !(descendingSort && flip)) {
	                greaterResult = typescript_angular_utilities_1.types.CompareResult.less;
	                lessResult = typescript_angular_utilities_1.types.CompareResult.greater;
	            }
	            return valueOfA > valueOfB
	                ? greaterResult
	                : (valueOfA < valueOfB ? lessResult : typescript_angular_utilities_1.types.CompareResult.equal);
	        };
	    };
	    Sorter.$inject = [mergeSort_service_1.serviceName];
	    return Sorter;
	}());
	exports.Sorter = Sorter;
	angular.module(exports.moduleName, [])
	    .service(exports.serviceName, Sorter);
	//# sourceMappingURL=sorter.service.js.map

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(49));
	//# sourceMappingURL=sort.js.map

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var __object = typescript_angular_utilities_1.services.object;
	var __synchronizedRequests = typescript_angular_utilities_1.services.synchronizedRequests;
	var asyncDataSource_service_1 = __webpack_require__(56);
	var dataSourceProcessor_service_1 = __webpack_require__(59);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.clientServerDataSource';
	exports.factoryName = 'clientServerDataSource';
	var ClientServerDataSource = (function (_super) {
	    __extends(ClientServerDataSource, _super);
	    function ClientServerDataSource(getDataSet, searchFilter, getFilterModel, validateModel, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	        _super.call(this, getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory);
	        this.searchFilter = searchFilter;
	        this.getFilterModel = getFilterModel;
	        this.validateModel = validateModel;
	        this.object = object;
	        this.minSearchLength = 4;
	        this.getFilterModel = this.getFilterModel || function () { return null; };
	        this.validateModel = this.validateModel || function () { return true; };
	        this.countFilterGroups = true;
	        this.search = searchFilter.searchText;
	        this.filterModel = _.clone(this.getFilterModel());
	        searchFilter.minSearchLength = this.minSearchLength;
	    }
	    ClientServerDataSource.prototype.refresh = function () {
	        if (this.searchFilter.searchText !== this.search
	            || this.filterModelChanged()) {
	            this.reload();
	        }
	        else {
	            _super.prototype.refresh.call(this);
	        }
	    };
	    ClientServerDataSource.prototype.reload = function () {
	        this.search = this.searchFilter.searchText;
	        this.filterModel = _.clone(this.getFilterModel());
	        var hasValidSearch = !this.object.isNullOrEmpty(this.search) && this.search.length >= this.minSearchLength;
	        var hasValidFilterModel = this.filterModel != null && this.validateModel(this.filterModel);
	        if (!hasValidSearch && !hasValidFilterModel) {
	            this.resolveReload(null);
	            return;
	        }
	        _super.prototype.reload.call(this);
	    };
	    ClientServerDataSource.prototype.filterModelChanged = function () {
	        return !this.object.areEqual(this.getFilterModel(), this.filterModel);
	    };
	    ClientServerDataSource.prototype.getParams = function () {
	        var searchModel = this.getFilterModel();
	        if (searchModel != null) {
	            searchModel.search = this.search;
	        }
	        else {
	            searchModel = this.search;
	        }
	        return searchModel;
	    };
	    return ClientServerDataSource;
	}(asyncDataSource_service_1.AsyncDataSource));
	exports.ClientServerDataSource = ClientServerDataSource;
	clientServerDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName, __object.serviceName, __synchronizedRequests.factoryName];
	function clientServerDataSourceFactory(observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	    'use strict';
	    return {
	        getInstance: function (getDataSet, searchFilter, getFilterModel, validateModel) {
	            return new ClientServerDataSource(getDataSet, searchFilter, getFilterModel, validateModel, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory);
	        },
	    };
	}
	exports.clientServerDataSourceFactory = clientServerDataSourceFactory;
	angular.module(exports.moduleName, [__observable.moduleName, __array.moduleName, __object.moduleName, __synchronizedRequests.moduleName])
	    .factory(exports.factoryName, clientServerDataSourceFactory);
	//# sourceMappingURL=clientServerDataSource.service.js.map

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var dataSourceBase_service_1 = __webpack_require__(57);
	var events = __webpack_require__(58);
	var AsyncDataSource = (function (_super) {
	    __extends(AsyncDataSource, _super);
	    function AsyncDataSource(getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory) {
	        _super.call(this, observableFactory, dataSourceProcessor, array);
	        this.synchronizedRequests = synchronizedRequestsFactory.getInstance(getDataSet, this.resolveReload.bind(this));
	    }
	    Object.defineProperty(AsyncDataSource.prototype, "getDataSet", {
	        set: function (value) {
	            this.synchronizedRequests.dataProvider = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AsyncDataSource.prototype.reload = function () {
	        this.dataSet = null;
	        this.rawDataSet = null;
	        this.loadingDataSet = true;
	        this.synchronizedRequests.getData(this.getParams());
	    };
	    AsyncDataSource.prototype.resolveReload = function (data) {
	        this.loadingDataSet = false;
	        this.rawDataSet = data;
	        this.processData();
	        this.observable.fire(events.async.reloaded);
	        this.observable.fire(events.redrawing);
	        this.observable.fire(events.changed);
	    };
	    // override with params for getDataSet
	    AsyncDataSource.prototype.getParams = function () {
	        return null;
	    };
	    return AsyncDataSource;
	}(dataSourceBase_service_1.DataSourceBase));
	exports.AsyncDataSource = AsyncDataSource;
	//# sourceMappingURL=asyncDataSource.service.js.map

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var events = __webpack_require__(58);
	var DataSourceBase = (function () {
	    function DataSourceBase(observableFactory, dataSourceProcessor, array) {
	        this.dataSourceProcessor = dataSourceProcessor;
	        this.array = array;
	        this.sorts = [];
	        this.filters = [];
	        this.count = 0;
	        this.countFilterGroups = false;
	        this.loadingDataSet = false;
	        this.observable = observableFactory.getInstance();
	    }
	    DataSourceBase.prototype.watch = function (action, event) {
	        return this.observable.register(action, event);
	    };
	    Object.defineProperty(DataSourceBase.prototype, "needsRefinedSearch", {
	        get: function () {
	            var noItemsDisplayed = __object.objectUtility.isNullOrEmpty(this.dataSet);
	            var moreItemsOnServer = this._isEmpty === false || (this.rawDataSet != null && this.rawDataSet.length < this.count);
	            return noItemsDisplayed && moreItemsOnServer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSourceBase.prototype, "isEmpty", {
	        get: function () {
	            return __object.objectUtility.isNullOrEmpty(this.rawDataSet)
	                && (this._isEmpty != null ? this._isEmpty : true);
	        },
	        set: function (value) {
	            this._isEmpty = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataSourceBase.prototype.processData = function () {
	        var processedData;
	        if (this.countFilterGroups) {
	            processedData = this.dataSourceProcessor.processAndCount(this.sorts, this.filters, this.pager, this.rawDataSet);
	        }
	        else {
	            processedData = this.dataSourceProcessor.process(this.sorts, this.filters, this.pager, this.rawDataSet);
	        }
	        this.setProcessedData(processedData);
	    };
	    //used when we need to process data but without client filters.
	    DataSourceBase.prototype.processDataNoClientFilters = function () {
	        var processedData;
	        if (this.countFilterGroups) {
	            processedData = this.dataSourceProcessor.processAndCount(this.sorts, null, this.pager, this.rawDataSet);
	        }
	        else {
	            processedData = this.dataSourceProcessor.process(this.sorts, null, this.pager, this.rawDataSet);
	        }
	        this.setProcessedData(processedData);
	    };
	    DataSourceBase.prototype.setProcessedData = function (processedData) {
	        this.count = processedData.count;
	        this.dataSet = processedData.dataSet;
	        this.filteredDataSet = processedData.filteredDataSet;
	    };
	    DataSourceBase.prototype.onSortChange = function () {
	        if (!this.loadingDataSet) {
	            this.filteredDataSet = this.dataSourceProcessor.sort(this.filteredDataSet, this.sorts);
	            this.dataSet = this.dataSourceProcessor.page(this.filteredDataSet, this.pager);
	            this.observable.fire(events.redrawing);
	        }
	    };
	    DataSourceBase.prototype.onPagingChange = function () {
	        if (!this.loadingDataSet) {
	            this.dataSet = this.dataSourceProcessor.page(this.filteredDataSet, this.pager);
	            this.observable.fire(events.redrawing);
	        }
	    };
	    DataSourceBase.prototype.refresh = function () {
	        if (!this.loadingDataSet) {
	            this.processData();
	            this.observable.fire(events.redrawing);
	        }
	    };
	    DataSourceBase.prototype.remove = function (data) {
	        var item = this.array.remove(this.rawDataSet, data);
	        if (item != null) {
	            this.observable.fire(events.removed);
	            this.observable.fire(events.changed);
	            if (this.pager) {
	                this.refresh();
	            }
	        }
	    };
	    DataSourceBase.prototype.push = function (data) {
	        this.rawDataSet.push(data);
	        this.observable.fire(events.added);
	        this.observable.fire(events.changed);
	        this.refresh();
	    };
	    DataSourceBase.prototype.replace = function (oldData, newData) {
	        var locationOfOldData = this.rawDataSet.indexOf(oldData);
	        if (locationOfOldData >= 0) {
	            this.array.replace(this.rawDataSet, oldData, newData);
	            this.observable.fire(events.replaced);
	            this.observable.fire(events.changed);
	            this.refresh();
	        }
	    };
	    return DataSourceBase;
	}());
	exports.DataSourceBase = DataSourceBase;
	//# sourceMappingURL=dataSourceBase.service.js.map

/***/ },
/* 58 */
/***/ function(module, exports) {

	'use strict';
	exports.redrawing = 'redrawing';
	exports.changed = 'changed';
	exports.added = 'added';
	exports.removed = 'removed';
	exports.replaced = 'replaced';
	exports.async = {
	    reloaded: 'reloaded',
	};
	//# sourceMappingURL=dataSourceEvents.js.map

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var sorter_service_1 = __webpack_require__(53);
	exports.processorServiceName = 'dataSourceProcessor';
	var DataSourceProcessor = (function () {
	    function DataSourceProcessor(object, sorter) {
	        this.object = object;
	        this.sorter = sorter;
	    }
	    DataSourceProcessor.prototype.process = function (sorts, filters, pager, data) {
	        var processedData = data;
	        processedData = this.sort(processedData, sorts);
	        if (this.object.isNullOrEmpty(filters) === false) {
	            processedData = _.reduce(filters, function (filteredData, filter) {
	                // Filter the data set using the filter function on the filter
	                return _.filter(filteredData, filter.filter.bind(filter));
	            }, processedData);
	        }
	        var result = {
	            count: (processedData != null ? processedData.length : 0),
	            filteredDataSet: processedData,
	            dataSet: processedData,
	        };
	        result.dataSet = this.page(processedData, pager);
	        return result;
	    };
	    DataSourceProcessor.prototype.processAndCount = function (sorts, filters, pager, data) {
	        var _this = this;
	        // If there are no filters that need to updated option counts, use the normal processor
	        if (this.object.isNullOrEmpty(filters)
	            || _.some(filters, function (filter) { return _.isFunction(filter.updateOptionCounts); }) === false) {
	            return this.process(sorts, filters, pager, data);
	        }
	        var processedData = data;
	        processedData = this.sort(processedData, sorts);
	        var wrappedData = this.wrapData(processedData);
	        // Run filtration logic and compute visible items
	        _.each(filters, function (filter /* filters.IFilterWithCounts */) {
	            _.each(wrappedData, function (item) {
	                item.filterData[filter.type] = filter.filter(item.data);
	            });
	        });
	        // Give each filter a chance to update option counts
	        _.each(filters, function (filter /* filters.IFilterWithCounts */) {
	            if (_.isFunction(filter.updateOptionCounts)) {
	                var otherFiltersApplied = _.filter(wrappedData, function (item) {
	                    // Omit the true or false of the current filter an
	                    //  only filter out items removed by other filters
	                    var filterData = _.omit(item.filterData, filter.type); //*filterData
	                    return _.every(_.values(filterData));
	                });
	                filter.updateOptionCounts(_this.unwrapData(otherFiltersApplied));
	            }
	        });
	        // Filter down to final data set by removing items that don't match all filters
	        wrappedData = _.filter(wrappedData, function (item) {
	            return _.every(_.values(item.filterData));
	        });
	        processedData = this.unwrapData(wrappedData);
	        var result = {
	            count: processedData.length,
	            filteredDataSet: processedData,
	            dataSet: processedData,
	        };
	        result.dataSet = this.page(processedData, pager);
	        return result;
	    };
	    DataSourceProcessor.prototype.sort = function (data, sorts) {
	        if (this.object.isNullOrEmpty(sorts) === false) {
	            return this.sorter.sort(data, sorts);
	        }
	        return data;
	    };
	    DataSourceProcessor.prototype.page = function (data, pager) {
	        if (pager != null) {
	            return pager.filter(data);
	        }
	        return data;
	    };
	    DataSourceProcessor.prototype.wrapData = function (data) {
	        return _.map(data, function (item) {
	            return {
	                data: item,
	                filterData: {},
	            };
	        });
	    };
	    DataSourceProcessor.prototype.unwrapData = function (data) {
	        return _.map(data, function (item) {
	            return item.data;
	        });
	    };
	    DataSourceProcessor.$inject = [__object.serviceName, sorter_service_1.serviceName];
	    return DataSourceProcessor;
	}());
	exports.DataSourceProcessor = DataSourceProcessor;
	//# sourceMappingURL=dataSourceProcessor.service.js.map

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../../typings/lodashTypeExtensions.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.dataPager';
	exports.factoryName = 'dataPager';
	exports.defaultPageSize = 10;
	var DataPager = (function () {
	    function DataPager() {
	        this.pageNumber = 1;
	        this.pageSize = exports.defaultPageSize;
	    }
	    Object.defineProperty(DataPager.prototype, "startItem", {
	        get: function () {
	            return (this.pageNumber - 1) * this.pageSize;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataPager.prototype.filter = function (dataSet) {
	        return _(dataSet)
	            .drop(this.startItem)
	            .take(this.pageSize)
	            .value();
	    };
	    return DataPager;
	}());
	exports.DataPager = DataPager;
	function dataPagerFactory() {
	    'use strict';
	    return {
	        getInstance: function () {
	            return new DataPager();
	        },
	    };
	}
	exports.dataPagerFactory = dataPagerFactory;
	angular.module(exports.moduleName, [])
	    .factory(exports.factoryName, dataPagerFactory);
	//# sourceMappingURL=dataPager.service.js.map

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var __synchronizedRequests = typescript_angular_utilities_1.services.synchronizedRequests;
	var asyncDataSource_service_1 = __webpack_require__(56);
	var dataSourceProcessor_service_1 = __webpack_require__(59);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.dataServiceDataSource';
	exports.factoryName = 'dataServiceDataSource';
	var DataServiceDataSource = (function (_super) {
	    __extends(DataServiceDataSource, _super);
	    function DataServiceDataSource(getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory) {
	        _super.call(this, getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory);
	        this.countFilterGroups = true;
	        if (_.isFunction(getDataSet)) {
	            this.reload();
	        }
	    }
	    return DataServiceDataSource;
	}(asyncDataSource_service_1.AsyncDataSource));
	exports.DataServiceDataSource = DataServiceDataSource;
	dataServiceDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName, __synchronizedRequests.factoryName];
	function dataServiceDataSourceFactory(observableFactory, dataSourceProcessor, array, synchronizedRequests) {
	    'use strict';
	    return {
	        getInstance: function (getDataSet) {
	            return new DataServiceDataSource(getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequests);
	        },
	    };
	}
	exports.dataServiceDataSourceFactory = dataServiceDataSourceFactory;
	angular.module(exports.moduleName, [__observable.moduleName, __array.moduleName])
	    .factory(exports.factoryName, dataServiceDataSourceFactory);
	//# sourceMappingURL=dataServiceDataSource.service.js.map

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var __object = typescript_angular_utilities_1.services.object;
	var __synchronizedRequests = typescript_angular_utilities_1.services.synchronizedRequests;
	var asyncDataSource_service_1 = __webpack_require__(56);
	var dataSourceProcessor_service_1 = __webpack_require__(59);
	var sort_1 = __webpack_require__(54);
	var events = __webpack_require__(58);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.serverSideDataSource';
	exports.factoryName = 'serverSideDataSource';
	var ServerSideDataSource = (function (_super) {
	    __extends(ServerSideDataSource, _super);
	    function ServerSideDataSource(getDataSet, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	        _super.call(this, getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory);
	        this.object = object;
	    }
	    ServerSideDataSource.prototype.refresh = function () {
	        this.reload();
	    };
	    ServerSideDataSource.prototype.getParams = function () {
	        var filterDictionary = this.array.toDictionary(this.filters, function (filter) {
	            return filter.type;
	        });
	        return {
	            filters: _.mapValues(filterDictionary, function (filter) {
	                if (_.isFunction(filter.serialize)) {
	                    return filter.serialize();
	                }
	                return null;
	            }),
	            sorts: _.map(this.sorts, function (sort) {
	                return {
	                    column: sort.column.label,
	                    direction: sort_1.SortDirection.getFullName(sort.direction),
	                };
	            }),
	            paging: {
	                pageNumber: this.pager.pageNumber,
	                pageSize: this.pager.pageSize,
	            },
	        };
	    };
	    ServerSideDataSource.prototype.resolveReload = function (result) {
	        var data = result;
	        _super.prototype.resolveReload.call(this, data.dataSet);
	        this.setProcessedData({
	            count: data.count,
	            filteredDataSet: data.dataSet,
	            dataSet: data.dataSet,
	        });
	        this.observable.fire(events.redrawing);
	    };
	    return ServerSideDataSource;
	}(asyncDataSource_service_1.AsyncDataSource));
	exports.ServerSideDataSource = ServerSideDataSource;
	serverSideDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName, __object.serviceName, __synchronizedRequests.factoryName];
	function serverSideDataSourceFactory(observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	    'use strict';
	    return {
	        getInstance: function (getDataSet) {
	            return new ServerSideDataSource(getDataSet, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory);
	        },
	    };
	}
	exports.serverSideDataSourceFactory = serverSideDataSourceFactory;
	angular.module(exports.moduleName, [])
	    .factory(exports.factoryName, serverSideDataSourceFactory);
	//# sourceMappingURL=serverSideDataSource.service.js.map

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var dataSourceBase_service_1 = __webpack_require__(57);
	var dataSourceProcessor_service_1 = __webpack_require__(59);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.simpleDataSource';
	exports.factoryName = 'simpleDataSource';
	var SimpleDataSource = (function (_super) {
	    __extends(SimpleDataSource, _super);
	    function SimpleDataSource(data, observableFactory, dataSourceProcessor, array) {
	        _super.call(this, observableFactory, dataSourceProcessor, array);
	        this.countFilterGroups = false;
	        this.rawDataSet = data;
	        this.processData();
	    }
	    return SimpleDataSource;
	}(dataSourceBase_service_1.DataSourceBase));
	exports.SimpleDataSource = SimpleDataSource;
	simpleDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName];
	function simpleDataSourceFactory(observableFactory, dataSourceProcessor, array) {
	    'use strict';
	    return {
	        getInstance: function (data) {
	            return new SimpleDataSource(data, observableFactory, dataSourceProcessor, array);
	        },
	    };
	}
	exports.simpleDataSourceFactory = simpleDataSourceFactory;
	angular.module(exports.moduleName, [__observable.moduleName, __array.moduleName])
	    .factory(exports.factoryName, simpleDataSourceFactory);
	//# sourceMappingURL=simpleDataSource.service.js.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __array = typescript_angular_utilities_1.services.array;
	var __object = typescript_angular_utilities_1.services.object;
	var __synchronizedRequests = typescript_angular_utilities_1.services.synchronizedRequests;
	var asyncDataSource_service_1 = __webpack_require__(56);
	var dataSourceProcessor_service_1 = __webpack_require__(59);
	var sort_1 = __webpack_require__(54);
	exports.moduleName = 'rl.ui.components.cardContainer.dataSources.smartDataSource';
	exports.factoryName = 'smartDataSource';
	var SmartDataSource = (function (_super) {
	    __extends(SmartDataSource, _super);
	    function SmartDataSource(getDataSet, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	        _super.call(this, getDataSet, observableFactory, dataSourceProcessor, array, synchronizedRequestsFactory);
	        this.object = object;
	        this.throttled = true;
	        this.throttleLimit = 200;
	    }
	    Object.defineProperty(SmartDataSource.prototype, "filters", {
	        get: function () {
	            return this._filters;
	        },
	        set: function (value) {
	            this._filters = value;
	            this.setupSubscriptions();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SmartDataSource.prototype.onSortChange = function () {
	        if (this.throttled) {
	            this.reload();
	        }
	        else {
	            _super.prototype.onSortChange.call(this);
	        }
	    };
	    SmartDataSource.prototype.refresh = function () {
	        if (this.throttled) {
	            this.reload();
	        }
	        else {
	            _super.prototype.refresh.call(this);
	        }
	    };
	    SmartDataSource.prototype.getParams = function () {
	        this.updateAppliedFilters();
	        return {
	            filters: this.appliedFilters,
	            sorts: _.map(this.sorts, function (sort) {
	                return {
	                    column: sort.column.label,
	                    direction: sort_1.SortDirection.getFullName(sort.direction),
	                };
	            }),
	            paging: {
	                pageNumber: 1,
	                pageSize: this.throttleLimit,
	            },
	        };
	    };
	    SmartDataSource.prototype.updateAppliedFilters = function () {
	        var filterDictionary = this.array.toDictionary(this.filters, function (filter) {
	            return filter.type;
	        });
	        this.appliedFilters = _.mapValues(filterDictionary, function (filter) {
	            if (_.isFunction(filter.serialize)) {
	                return filter.serialize();
	            }
	            return null;
	        });
	        this.appliedFilters = _.omitBy(this.appliedFilters, function (value) { return value == null; });
	    };
	    SmartDataSource.prototype.setupSubscriptions = function () {
	        var _this = this;
	        _.each(this.subscriptions, function (subscription) {
	            subscription.dispose();
	        });
	        this.subscriptions = [];
	        _.each(this.filters, function (filter) {
	            if (_.isFunction(filter.subscribe)) {
	                _this.subscriptions.push(filter.subscribe(function () { _this.onFilterChange(filter); }));
	            }
	        });
	    };
	    SmartDataSource.prototype.onFilterChange = function (filter) {
	        if (_.has(this.appliedFilters, filter.type)) {
	            this.reload();
	        }
	    };
	    SmartDataSource.prototype.resolveReload = function (result) {
	        var data = result;
	        this.throttled = (data.count > data.dataSet.length);
	        _super.prototype.resolveReload.call(this, data.dataSet);
	        this.count = data.count;
	        this.isEmpty = data.isEmpty;
	    };
	    return SmartDataSource;
	}(asyncDataSource_service_1.AsyncDataSource));
	exports.SmartDataSource = SmartDataSource;
	smartDataSourceFactory.$inject = [__observable.factoryName, dataSourceProcessor_service_1.processorServiceName, __array.serviceName, __object.serviceName, __synchronizedRequests.factoryName];
	function smartDataSourceFactory(observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory) {
	    'use strict';
	    return {
	        getInstance: function (getDataSet) {
	            return new SmartDataSource(getDataSet, observableFactory, dataSourceProcessor, array, object, synchronizedRequestsFactory);
	        },
	    };
	}
	exports.smartDataSourceFactory = smartDataSourceFactory;
	angular.module(exports.moduleName, [])
	    .factory(exports.factoryName, smartDataSourceFactory);
	//# sourceMappingURL=smartDataSource.service.js.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var columnSearchFilter = __webpack_require__(66);
	exports.columnSearchFilter = columnSearchFilter;
	var dateFilter = __webpack_require__(67);
	var filterGroup = __webpack_require__(72);
	exports.filterGroup = filterGroup;
	var selectFilter = __webpack_require__(80);
	exports.selectFilter = selectFilter;
	exports.moduleName = 'rl.ui.components.cardContainer.filters';
	angular.module(exports.moduleName, [
	    columnSearchFilter.moduleName,
	    dateFilter.moduleName,
	    filterGroup.moduleName,
	    selectFilter.moduleName
	]);
	//# sourceMappingURL=filters.module.js.map

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var __string = typescript_angular_utilities_1.services.string;
	exports.moduleName = 'rl.ui.components.cardContainer.filters.columnSearchFilter';
	exports.factoryName = 'columnSearchFilter';
	exports.filterName = 'column-search';
	var ColumnSearchFilter = (function () {
	    function ColumnSearchFilter(object, string) {
	        this.object = object;
	        this.string = string;
	        this.type = exports.filterName;
	    }
	    ColumnSearchFilter.prototype.filter = function (item) {
	        if (this.column == null) {
	            return true;
	        }
	        var value = this.object.toString(this.column.getValue(item));
	        var search = this.searchText;
	        if (!this.caseSensitive) {
	            search = search.toLowerCase();
	            value = value.toLowerCase();
	        }
	        return this.string.contains(value, search);
	    };
	    return ColumnSearchFilter;
	}());
	exports.ColumnSearchFilter = ColumnSearchFilter;
	columnSearchFilterFactory.$inject = [__object.serviceName, __string.serviceName];
	function columnSearchFilterFactory(object, string) {
	    'use strict';
	    return {
	        getInstance: function () {
	            return new ColumnSearchFilter(object, string);
	        },
	    };
	}
	exports.columnSearchFilterFactory = columnSearchFilterFactory;
	angular.module(exports.moduleName, [__object.moduleName, __string.moduleName])
	    .factory(exports.factoryName, columnSearchFilterFactory);
	//# sourceMappingURL=columnSearchFilter.service.js.map

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __date = typescript_angular_utilities_1.services.date;
	var dateFilter_service_1 = __webpack_require__(68);
	var dateFilter_component_1 = __webpack_require__(70);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.dateFilter';
	__export(__webpack_require__(68));
	__export(__webpack_require__(70));
	angular.module(exports.moduleName, [__date.moduleName])
	    .factory(dateFilter_service_1.factoryName, dateFilter_service_1.dateFilterFactory)
	    .directive(dateFilter_component_1.directiveName, dateFilter_component_1.dateFilter)
	    .controller(dateFilter_component_1.controllerName, dateFilter_component_1.DateFilterController);
	//# sourceMappingURL=dateFilter.module.js.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var moment = __webpack_require__(69);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __date = typescript_angular_utilities_1.services.date;
	exports.factoryName = 'rlDateFilterFactory';
	var DateFilter = (function () {
	    function DateFilter(valueSelector, dateUtility, type) {
	        this.valueSelector = valueSelector;
	        this.dateUtility = dateUtility;
	        this.type = type;
	        this.includeTime = false;
	    }
	    DateFilter.prototype.filter = function (item) {
	        if (!this.dateUtility.isDate(this.selectedDate1)) {
	            return true;
	        }
	        if (this.dateRange) {
	            var itemDate = this.getValue(item);
	            var selectedDate1 = void 0;
	            //have to set the selectedDate1 to a valid Date object for comparisons.
	            if (this.includeTime) {
	                selectedDate1 = moment(this.selectedDate1).toDate();
	            }
	            else {
	                //increase it by 1 days. to inlcude the selectec date in the range.
	                selectedDate1 = moment(this.selectedDate1).add(1, 'days').toDate();
	            }
	            return this.dateUtility.dateInRange(itemDate, this.selectedDate2, this.selectedDate1);
	        }
	        else {
	            if (this.includeTime) {
	                return this.dateUtility.sameDateTime(this.getValue(item), this.selectedDate1);
	            }
	            else {
	                return this.dateUtility.sameDate(this.getValue(item), this.selectedDate1);
	            }
	        }
	    };
	    DateFilter.prototype.getValue = function (item) {
	        var property = this.valueSelector;
	        return item[property];
	    };
	    return DateFilter;
	}());
	dateFilterFactory.$inject = [__date.serviceName];
	function dateFilterFactory(dateUtility) {
	    return {
	        getInstance: function (settings) {
	            return new DateFilter(settings.valueSelector, dateUtility, settings.type);
	        },
	    };
	}
	exports.dateFilterFactory = dateFilterFactory;
	//# sourceMappingURL=dateFilter.service.js.map

/***/ },
/* 69 */
/***/ function(module, exports) {

	(function() { module.exports = this["moment"]; }());

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/node/node.d.ts' />
	'use strict';
	var moment = __webpack_require__(69);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __date = typescript_angular_utilities_1.services.date;
	exports.directiveName = 'rlDateFilter';
	exports.controllerName = 'rlDateFilterController';
	// Optional interface for bound attributes
	var DateOptions;
	(function (DateOptions) {
	    DateOptions[DateOptions["Day"] = 0] = "Day";
	    DateOptions[DateOptions["Week"] = 1] = "Week";
	    DateOptions[DateOptions["Month"] = 2] = "Month";
	})(DateOptions || (DateOptions = {}));
	;
	var DateFilterController = (function () {
	    function DateFilterController($scope, dateUtility, $element) {
	        this.$scope = $scope;
	        this.dateUtility = dateUtility;
	        this.$element = $element;
	        this.count = 0;
	        this.type = "days";
	        this.filter.includeTime = this.includeTime;
	        //this is added to address an agular quirk on the service event list page.
	        //the input field was not clearing correclty when the selectedDate1 value is null.
	        this.inputField = this.$element.find('rl-date-time input');
	        this.filter.dateRange = false;
	        if (this.clearButton == null)
	            this.clearButton = true;
	    }
	    Object.defineProperty(DateFilterController.prototype, "selectedDate1", {
	        get: function () {
	            if (this.filter.selectedDate1 != null) {
	                return moment(this.filter.selectedDate1).format('M/D/YYYY');
	            }
	            else {
	                //clear input field of date value. and rest past day/week count
	                this.inputField.val('');
	                this.clearCount();
	                return null;
	            }
	        },
	        set: function (v) {
	            if (this.dateUtility.isDate(v)) {
	                this.filter.selectedDate1 = moment(v).toDate();
	            }
	            else {
	                //clear input field of date value. and rest past day/week count
	                this.inputField.val('');
	                this.clearCount();
	                this.filter.selectedDate1 = null;
	            }
	            this.refreshDataSource();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateFilterController.prototype, "selectedDate2", {
	        get: function () {
	            return this.filter.selectedDate2;
	        },
	        set: function (v) {
	            this.filter.selectedDate2 = v;
	            this.refreshDataSource();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DateFilterController.prototype.refreshDataSource = function () {
	        if (this.source != null) {
	            this.source.refresh();
	        }
	        else {
	            this.$scope.$emit('dataSource.requestRefresh'); //*event?
	        }
	    };
	    DateFilterController.prototype.clearCount = function () {
	        this.count = 0;
	        this.countChange();
	    };
	    DateFilterController.prototype.decreaseCount = function () {
	        this.count -= 1;
	        this.setDateTimeNowIfNull();
	        //do not allow count below 0
	        if (this.count < 0 || this.count === 0) {
	            this.count = 0;
	        }
	        this.countChange();
	    };
	    DateFilterController.prototype.countChange = function () {
	        if (this.count == null) {
	            this.count = 0;
	        }
	        if (this.count > 0) {
	            this.filter.dateRange = true;
	            // add days has to be a negative number to go backwords.
	            this.selectedDate2 = moment(this.selectedDate1).add((this.count * -1), this.type).toDate();
	        }
	        else if (this.count == 0) {
	            //only change this values the first time.
	            if (this.filter.dateRange) {
	                this.filter.dateRange = false;
	                this.selectedDate2 = null;
	            }
	        }
	    };
	    DateFilterController.prototype.increaseCount = function () {
	        this.count += 1;
	        this.setDateTimeNowIfNull();
	        this.countChange();
	    };
	    DateFilterController.prototype.setDateTimeNowIfNull = function () {
	        if (this.selectedDate1 == null) {
	            this.selectedDate1 = moment(Date.now()).format('M/D/YYYY');
	        }
	    };
	    DateFilterController.prototype.toggle = function () {
	        if (this.type === 'days') {
	            this.type = 'weeks';
	        }
	        else {
	            this.type = 'days';
	        }
	        this.countChange();
	    };
	    DateFilterController.$inject = ['$scope', __date.serviceName, '$element'];
	    return DateFilterController;
	}());
	exports.DateFilterController = DateFilterController;
	function dateFilter() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(71),
	        controller: exports.controllerName,
	        controllerAs: 'filter',
	        scope: {},
	        bindToController: {
	            filter: '=',
	            source: '=',
	            label: '@',
	            selector: '=',
	            includeTime: '=',
	            includeDateRange: '=',
	            clearButton: '='
	        },
	    };
	}
	exports.dateFilter = dateFilter;
	//# sourceMappingURL=dateFilter.component.js.map

/***/ },
/* 71 */
/***/ function(module, exports) {

	module.exports = "<div class=\"filter-group\">\r\n\t<div class=\"content-group\">\r\n\t\t<label>{{::filter.label}}</label>\r\n\t\t<div class=\"input-group-btn\">\r\n\t\t\t<rl-date-time ng-model=\"filter.selectedDate1\" use-time=\"filter.includeTime\" clear-button=\"filter.clearButton\" on-clear-event=\"filter.clearCount()\"\r\n\t\t\tclass=\"pull-left\"></rl-date-time>\r\n\t\t</div>\r\n\t</div>\r\n\t<div ng-if=\"filter.includeDateRange\" class=\"content-group\">\r\n\t\t<label>Add previous</label>\r\n\t\t<div class=\"input-group\">\r\n\t\t<span class=\"input-group-btn\">\r\n\t\t\t<button  class=\"btn btn-default\" ng-click=\"filter.decreaseCount();\">\r\n\t\t\t\t<i class=\"fa fa-minus\"></i>\r\n\t\t\t</button>\r\n\t\t</span>\r\n\t\t<input type=\"number\" class=\"form-control\" ng-model=\"filter.count\" ng-change=\"filter.countChange();\" />\r\n\t\t<span class=\"input-group-btn\">\r\n\t\t\t<button class=\"btn btn-default\" ng-click=\"filter.toggle();\">\r\n\t\t\t{{filter.type}}\r\n\t\t\t</button>\r\n\t\t</span>\r\n\t\t<span class=\"input-group-btn\">\r\n\t\t\t<button class=\"btn btn-default\" ng-click=\"filter.increaseCount();\">\r\n\t\t\t\t<i class=\"fa fa-plus\"></i>\r\n\t\t\t</button>\r\n\t\t</span>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var filterOption = __webpack_require__(73);
	exports.filterOption = filterOption;
	var modeFilterGroup = __webpack_require__(75);
	exports.modeFilterGroup = modeFilterGroup;
	var rangeFilterGroup = __webpack_require__(77);
	exports.rangeFilterGroup = rangeFilterGroup;
	var filterGroup_service_1 = __webpack_require__(76);
	var filterGroup_directive_1 = __webpack_require__(78);
	__export(__webpack_require__(78));
	__export(__webpack_require__(76));
	exports.moduleName = 'rl.ui.components.cardContainer.filters.filterGroup';
	angular.module(exports.moduleName, [
	    typescript_angular_utilities_1.services.object.moduleName,
	    filterOption.moduleName,
	    modeFilterGroup.moduleName,
	    rangeFilterGroup.moduleName,
	])
	    .factory(filterGroup_service_1.factoryName, filterGroup_service_1.filterGroupFactory)
	    .directive(filterGroup_directive_1.directiveName, filterGroup_directive_1.filterGroup)
	    .controller(filterGroup_directive_1.controllerName, filterGroup_directive_1.FilterGroupController);
	//# sourceMappingURL=filterGroup.module.js.map

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.filterGroup.filterOption';
	exports.directiveName = 'rlFilterOption';
	function filterOption() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(74),
	        scope: {
	            activate: '&',
	            isActive: '=active',
	            option: '=',
	        },
	    };
	}
	exports.filterOption = filterOption;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, filterOption);
	//# sourceMappingURL=filterOption.js.map

/***/ },
/* 74 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row filter-option\" ng-class=\"{ 'active': isActive }\" ng-click=\"activate()\">\r\n\t<div class=\"col-xs-1\">\r\n\t\t<i class='fa fa-arrow-right' ng-show=\"isActive == true\"></i>\r\n\t</div>\r\n\t<div class=\"col-xs-1\" ng-if=\"hasIcon\" ng-bind-html=\"option.icon\"></div>\r\n\t<div ng-class=\"{ 'col-xs-6': hasIcon, 'col-xs-7': !hasIcon }\">\r\n\t\t{{option.label}}\r\n\t</div>\r\n\t<div class=\"col-xs-3 text-right\" ng-show=\"option.count != null\">\r\n\t\t({{option.count}})\r\n\t</div>\r\n</div>"

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var filterGroup_service_1 = __webpack_require__(76);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.filterGroup.modeFilterGroup';
	exports.factoryName = 'modeFilterGroup';
	var ModeFilterGroup = (function (_super) {
	    __extends(ModeFilterGroup, _super);
	    function ModeFilterGroup(settings, object) {
	        _super.call(this, settings, object);
	        this.getValue = settings.getValue;
	        settings.options = _.map(settings.options, this.buildModeOption.bind(this));
	        this.initOptions();
	    }
	    ModeFilterGroup.prototype.serialize = function () {
	        var activeOption = this.activeOption;
	        if (activeOption.displayAll) {
	            return null;
	        }
	        return activeOption.value;
	    };
	    ModeFilterGroup.prototype.buildModeOption = function (option) {
	        var _this = this;
	        var modeOption = option;
	        modeOption.filter = function (item) {
	            if (modeOption.displayAll) {
	                return true;
	            }
	            return _this.getValue(item) === modeOption.value;
	        };
	        return modeOption;
	    };
	    return ModeFilterGroup;
	}(filterGroup_service_1.FilterGroup));
	exports.ModeFilterGroup = ModeFilterGroup;
	modeFilterGroupFactory.$inject = [__object.serviceName];
	function modeFilterGroupFactory(object) {
	    'use strict';
	    return {
	        getInstance: function (settings) {
	            return new ModeFilterGroup(settings, object);
	        },
	    };
	}
	exports.modeFilterGroupFactory = modeFilterGroupFactory;
	angular.module(exports.moduleName, [__object.moduleName])
	    .factory(exports.factoryName, modeFilterGroupFactory);
	//# sourceMappingURL=modeFilterGroup.service.js.map

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	exports.factoryName = 'filterGroup';
	var FilterGroup = (function (_super) {
	    __extends(FilterGroup, _super);
	    function FilterGroup(settings, object) {
	        _super.call(this);
	        this.settings = settings;
	        this.object = object;
	        this.label = settings.label;
	        this.type = settings.type != null ? settings.type : settings.label;
	        this.initOptions();
	    }
	    FilterGroup.prototype.initOptions = function () {
	        var _this = this;
	        this.options = this.settings.options;
	        this.activeOption = this.setDefaultOption();
	        _.each(this.options, function (option) {
	            if (_.isUndefined(option.type)) {
	                option.type = option.label;
	            }
	            option.type = _this.object.toString(option.type).toLowerCase();
	        });
	    };
	    Object.defineProperty(FilterGroup.prototype, "activeOption", {
	        get: function () {
	            return this._activeOption;
	        },
	        set: function (value) {
	            this._activeOption = value;
	            this.onChange(false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FilterGroup.prototype.setDefaultOption = function () {
	        var defaultOption = this.options[0];
	        _.each(this.options, function (item) {
	            if (item.active != null && item.active === true) {
	                defaultOption = item;
	            }
	        });
	        return defaultOption;
	    };
	    FilterGroup.prototype.filter = function (item) {
	        return this.activeOption.filter(item);
	    };
	    FilterGroup.prototype.serialize = function () {
	        if (_.isFunction(this.settings.serialize)) {
	            return this.settings.serialize();
	        }
	        if (_.isFunction(this.activeOption.serialize)) {
	            return this.activeOption.serialize();
	        }
	        return this.activeOption.value;
	    };
	    FilterGroup.prototype.setActiveOption = function (index) {
	        if (index >= 0 && index < this.options.length) {
	            this.activeOption = this.options[index];
	        }
	    };
	    FilterGroup.prototype.setOptionCounts = function (counts) {
	        _.each(this.options, function (option) {
	            if (_.has(counts, option.type)) {
	                option.count = counts[option.type];
	            }
	        });
	    };
	    FilterGroup.prototype.updateOptionCounts = function (filteredDataSet) {
	        _.each(this.options, function (option) {
	            option.count = _.filter(filteredDataSet, option.filter.bind(option)).length;
	        });
	    };
	    return FilterGroup;
	}(typescript_angular_utilities_1.filters.SerializableFilter));
	exports.FilterGroup = FilterGroup;
	filterGroupFactory.$inject = [__object.serviceName];
	function filterGroupFactory(object) {
	    'use strict';
	    return {
	        getInstance: function (settings) {
	            return new FilterGroup(settings, object);
	        },
	    };
	}
	exports.filterGroupFactory = filterGroupFactory;
	//# sourceMappingURL=filterGroup.service.js.map

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var filterGroup_service_1 = __webpack_require__(76);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.filterGroup.rangeFilterGroup';
	exports.factoryName = 'rangeFilterGroup';
	var RangeFilterGroup = (function (_super) {
	    __extends(RangeFilterGroup, _super);
	    function RangeFilterGroup(settings, object) {
	        _super.call(this, settings, object);
	        this.getValue = settings.getValue;
	        settings.options = _.map(settings.options, this.buildRangeOption.bind(this));
	        this.initOptions();
	    }
	    RangeFilterGroup.prototype.serialize = function () {
	        var activeOption = this.activeOption;
	        if (this.isNullOption(activeOption)) {
	            return null;
	        }
	        return {
	            highInclusive: activeOption.highInclusive,
	            highExclusive: activeOption.highExclusive,
	            lowInclusive: activeOption.lowInclusive,
	            lowExclusive: activeOption.lowExclusive,
	        };
	    };
	    RangeFilterGroup.prototype.buildRangeOption = function (option) {
	        var _this = this;
	        var modeOption = option;
	        modeOption.filter = function (item) {
	            var value = _this.getValue(item);
	            var result = true;
	            if (_.isUndefined(option.highExclusive) === false) {
	                result = value < option.highExclusive;
	            }
	            else if (_.isUndefined(option.highInclusive) === false) {
	                result = value <= option.highInclusive;
	            }
	            if (_.isUndefined(option.lowExclusive) === false) {
	                result = result && value > option.lowExclusive;
	            }
	            else if (_.isUndefined(option.lowInclusive) === false) {
	                result = result && value >= option.lowInclusive;
	            }
	            return result;
	        };
	        return modeOption;
	    };
	    RangeFilterGroup.prototype.isNullOption = function (option) {
	        return option.highInclusive == null
	            && option.highExclusive == null
	            && option.lowInclusive == null
	            && option.lowExclusive == null;
	    };
	    return RangeFilterGroup;
	}(filterGroup_service_1.FilterGroup));
	rangeFilterGroupFactory.$inject = [__object.serviceName];
	function rangeFilterGroupFactory(object) {
	    'use strict';
	    return {
	        getInstance: function (settings) {
	            return new RangeFilterGroup(settings, object);
	        },
	    };
	}
	exports.rangeFilterGroupFactory = rangeFilterGroupFactory;
	angular.module(exports.moduleName, [__object.moduleName])
	    .factory(exports.factoryName, rangeFilterGroupFactory);
	//# sourceMappingURL=rangeFilterGroup.service.js.map

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../../typings/commonjs.d.ts' />
	'use strict';
	exports.directiveName = 'rlFilterGroup';
	exports.controllerName = 'FilterGroupController';
	var FilterGroupController = (function () {
	    function FilterGroupController($scope) {
	        this.$scope = $scope;
	        this.hasIcon = this.icon != null && this.icon !== '';
	        this.showChildren = true;
	    }
	    FilterGroupController.prototype.toggleChildren = function () {
	        this.showChildren = !this.showChildren;
	    };
	    FilterGroupController.prototype.selectOption = function (option) {
	        this.filterGroup.activeOption = option;
	        this.showChildren = false;
	        if (this.source != null) {
	            this.source.refresh();
	        }
	        else {
	            this.$scope.$emit('dataSource.requestRefresh'); //*event?
	        }
	    };
	    FilterGroupController.$inject = ['$scope'];
	    return FilterGroupController;
	}());
	exports.FilterGroupController = FilterGroupController;
	function filterGroup() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(79),
	        controller: exports.controllerName,
	        controllerAs: 'controller',
	        scope: {},
	        bindToController: {
	            icon: '=',
	            filterGroup: '=',
	            source: '=',
	        },
	    };
	}
	exports.filterGroup = filterGroup;
	//# sourceMappingURL=filterGroup.directive.js.map

/***/ },
/* 79 */
/***/ function(module, exports) {

	module.exports = "<div class=\"filter-group\">\r\n\t<div class=\"row filter-header\" ng-click=\"controller.toggleChildren()\">\r\n\t\t<div class=\"col-sm-12\">\r\n\t\t\t<i class=\"collapse-icon fa fa-caret-down fa-2x\" ng-show=\"controller.showChildren\" title=\"Hide filter list\"></i>\r\n\t\t\t<i class=\"collapse-icon fa fa-caret-right fa-2x\" ng-hide=\"controller.showChildren\" title=\"Show filter list\"></i>\r\n\t\t\t<div class=\"filter-option\">\r\n\t\t\t\t<div style=\"display:inline-block\" ng-show=\"controller.hasIcon\" ng-bind-html=\"controller.icon\"></div>\r\n\t\t\t\t<h4 style=\"display: inline-block\">{{controller.filterGroup.label}}: {{controller.filterGroup.activeOption.label}}</h4>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div ng-show=\"controller.showChildren\" ng-repeat=\"filterOption in controller.filterGroup.options\">\r\n\t\t<rl-filter-option option=\"filterOption\" active=\"filterGroup.activeOption === filterOption\" activate=\"controller.selectOption(filterOption)\"></rl-filter-option>\r\n\t</div>\r\n</div>\r\n"

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var selectFilter_service_1 = __webpack_require__(81);
	var selectFilter_component_1 = __webpack_require__(82);
	exports.moduleName = 'rl.ui.components.cardContainer.filters.selectFilter';
	__export(__webpack_require__(81));
	__export(__webpack_require__(82));
	angular.module(exports.moduleName, [])
	    .factory(selectFilter_service_1.factoryName, selectFilter_service_1.selectFilterFactory)
	    .directive(selectFilter_component_1.directiveName, selectFilter_component_1.selectFilter)
	    .controller(selectFilter_component_1.controllerName, selectFilter_component_1.SelectFilterController);
	//# sourceMappingURL=selectFilter.module.js.map

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	exports.factoryName = 'rlSelectFilterFactory';
	var SelectFilter = (function () {
	    function SelectFilter(valueSelector, comparer) {
	        this.valueSelector = valueSelector;
	        this.comparer = comparer;
	        this.type = 'selectFilter';
	    }
	    SelectFilter.prototype.filter = function (item) {
	        if (this.selectedValue == null) {
	            return true;
	        }
	        if (this.comparer != null) {
	            return this.comparer(this.getValue(item), this.selectedValue);
	        }
	        return __object.objectUtility.areEqual(this.getValue(item), this.selectedValue);
	    };
	    SelectFilter.prototype.getValue = function (item) {
	        if (_.isFunction(this.valueSelector)) {
	            var func = this.valueSelector;
	            return (func(item));
	        }
	        else {
	            var property = this.valueSelector;
	            return item[property];
	        }
	    };
	    return SelectFilter;
	}());
	function selectFilterFactory() {
	    return {
	        getInstance: function (valueSelector, comparer) {
	            return new SelectFilter(valueSelector, comparer);
	        },
	    };
	}
	exports.selectFilterFactory = selectFilterFactory;
	//# sourceMappingURL=selectFilter.service.js.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../../typings/commonjs.d.ts' />
	'use strict';
	exports.directiveName = 'rlSelectFilter';
	exports.controllerName = 'SelectFilterController';
	var SelectFilterController = (function () {
	    function SelectFilterController($scope) {
	        this.$scope = $scope;
	    }
	    Object.defineProperty(SelectFilterController.prototype, "selectedValue", {
	        get: function () {
	            return this.filter.selectedValue;
	        },
	        set: function (v) {
	            this.filter.selectedValue = v;
	            if (this.source != null) {
	                this.source.refresh();
	            }
	            else {
	                this.$scope.$emit('dataSource.requestRefresh'); //*event?
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SelectFilterController.$inject = ['$scope'];
	    return SelectFilterController;
	}());
	exports.SelectFilterController = SelectFilterController;
	function selectFilter() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(83),
	        controller: exports.controllerName,
	        controllerAs: 'filter',
	        scope: {},
	        bindToController: {
	            filter: '=',
	            options: '=',
	            getOptions: '&',
	            source: '=',
	            label: '@',
	            selector: '=',
	            nullOption: '@'
	        },
	    };
	}
	exports.selectFilter = selectFilter;
	//# sourceMappingURL=selectFilter.component.js.map

/***/ },
/* 83 */
/***/ function(module, exports) {

	module.exports = "<div class=\"filter-group\">\r\n\t<rl-select ng-model=\"filter.selectedValue\" options=\"filter.options\" label=\"{{filter.label}}\"\r\n\t\t\t   selector=\"filter.selector\" get-options=\"filter.getOptions()\" null-option=\"{{filter.nullOption}}\"></rl-select>\r\n</div>"

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.cardContainer.itemCount';
	exports.directiveName = 'rlItemCount';
	function itemCount() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: { cardContainer: '^^rlCardContainer' },
	        template: __webpack_require__(85),
	        controller: function () { },
	        controllerAs: 'itemCount',
	        scope: {},
	        bindToController: true,
	    };
	}
	exports.itemCount = itemCount;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, itemCount);
	//# sourceMappingURL=itemCount.js.map

/***/ },
/* 85 */
/***/ function(module, exports) {

	module.exports = "<p ng-show=\"!itemCount.cardContainer.dataSource.loadingDataSet\">\r\n\tShowing <strong>{{itemCount.cardContainer.dataSource.dataSet.length}} of {{itemCount.cardContainer.dataSource.count}}</strong> total items\r\n</p>"

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	exports.moduleName = 'rl.ui.components.cardContainer.pager';
	exports.directiveName = 'rlPager';
	exports.controllerName = 'PagerController';
	exports.defaultVisiblePageCount = 5;
	var PagerController = (function () {
	    function PagerController($scope) {
	        var _this = this;
	        this.$scope = $scope;
	        this.canGoBack = false;
	        this.canGoForward = false;
	        this.hasPageFilter = true;
	        this.updatePageCount = function () {
	            var totalItems = _this.dataSource.count;
	            var newLastPage = Math.ceil(totalItems / _this.pager.pageSize);
	            if (newLastPage !== _this.lastPage) {
	                _this.lastPage = newLastPage;
	                _this.currentPage = 1;
	            }
	            _this.updatePaging();
	        };
	    }
	    PagerController.prototype.$onInit = function () {
	        var _this = this;
	        if (this.cardContainer == null) {
	            return;
	        }
	        this.pager = this.cardContainer.dataSource.pager;
	        if (this.pager == null) {
	            this.hasPageFilter = false;
	        }
	        else {
	            this.visiblePageCount = this.pageCount != null ? this.pageCount : exports.defaultVisiblePageCount;
	            this.lastPage = 1;
	            this.dataSource = this.cardContainer.dataSource;
	            this.$scope.$watch(function () { return _this.dataSource.count; }, this.updatePageCount);
	            this.$scope.$watch(function () { return _this.pager.pageSize; }, this.updatePageCount);
	            this.$scope.$watch(function () { return _this.currentPage; }, function (page) {
	                _this.updatePaging();
	                _this.pager.pageNumber = page;
	                _this.dataSource.onPagingChange();
	            });
	        }
	    };
	    PagerController.prototype.updatePaging = function () {
	        var page = this.currentPage;
	        this.canGoBack = page > 1;
	        this.canGoForward = page < this.lastPage;
	        var nonCurrentVisiblePages = this.visiblePageCount - 1;
	        var before = Math.floor(nonCurrentVisiblePages / 2);
	        var after = Math.ceil(nonCurrentVisiblePages / 2);
	        var startPage = page - before;
	        var endPage = page + after;
	        if (startPage < 1) {
	            startPage = 1;
	            endPage = Math.min(this.visiblePageCount, this.lastPage);
	        }
	        else if (endPage > this.lastPage) {
	            endPage = this.lastPage;
	            startPage = Math.max(this.lastPage - nonCurrentVisiblePages, 1);
	        }
	        this.pages = _.range(startPage, endPage + 1);
	    };
	    PagerController.prototype.first = function () {
	        this.currentPage = 1;
	    };
	    PagerController.prototype.previous = function () {
	        if (this.currentPage > 1) {
	            this.currentPage--;
	        }
	    };
	    PagerController.prototype.goto = function (page) {
	        if (page >= 1 && page <= this.lastPage) {
	            this.currentPage = page;
	        }
	    };
	    PagerController.prototype.next = function () {
	        if (this.currentPage < this.lastPage) {
	            this.currentPage++;
	        }
	    };
	    PagerController.prototype.last = function () {
	        this.currentPage = this.lastPage;
	    };
	    PagerController.$inject = ['$scope'];
	    return PagerController;
	}());
	exports.PagerController = PagerController;
	function pager() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: { cardContainer: '^^rlCardContainer' },
	        template: __webpack_require__(87),
	        controller: exports.controllerName,
	        controllerAs: 'pager',
	        scope: {},
	        bindToController: {
	            pageCount: '=visiblePages',
	        },
	    };
	}
	exports.pager = pager;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, pager)
	    .controller(exports.controllerName, PagerController);
	//# sourceMappingURL=pager.js.map

/***/ },
/* 87 */
/***/ function(module, exports) {

	module.exports = "<nav ng-if=\"pager.hasPageFilter\">\r\n\t<ul class=\"pagination\">\r\n\t\t<li title=\"Go to first page\" ng-click=\"pager.first()\"\r\n\t\t\tng-class=\"{ 'disabled': !pager.canGoBack }\">\r\n\t\t\t<a><i class=\"fa fa-angle-double-left\"></i></a>\r\n\t\t</li>\r\n\t\t<li title=\"Go to previous page\" ng-click=\"pager.previous()\"\r\n\t\t\tng-class=\"{ 'disabled': !pager.canGoBack }\">\r\n\t\t\t<a><i class=\"fa fa-angle-left\"></i></a>\r\n\t\t</li>\r\n\t\t<li title=\"Go to page {{pager.page}}\" ng-click=\"pager.goto(page)\"\r\n\t\t\tng-repeat=\"page in pager.pages\"\r\n\t\t\tng-class=\"{ 'active': pager.currentPage == page }\">\r\n\t\t\t<a>{{page}}</a>\r\n\t\t</li>\r\n\t\t<li title=\"Go to next page\" ng-click=\"pager.next()\"\r\n\t\t\tng-class=\"{ 'disabled': !pager.canGoForward }\">\r\n\t\t\t<a><i class=\"fa fa-angle-right\"></i></a>\r\n\t\t</li>\r\n\t\t<li title=\"Go to last page\" ng-click=\"pager.last()\"\r\n\t\t\tng-class=\"{ 'disabled': !pager.canGoForward }\">\r\n\t\t\t<a><i class=\"fa fa-angle-double-right\"></i></a>\r\n\t\t</li>\r\n\t</ul>\r\n</nav>\r\n"

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.cardContainer.pageSize';
	exports.directiveName = 'rlPageSize';
	exports.controllerName = 'PageSizeController';
	exports.availablePageSizes = [10, 25, 50, 100];
	exports.defaultPageSize = 10;
	var PageSizeController = (function () {
	    function PageSizeController($scope) {
	        this.$scope = $scope;
	    }
	    PageSizeController.prototype.$onInit = function () {
	        var _this = this;
	        if (this.cardContainer == null) {
	            return;
	        }
	        this.selectedPageSize = exports.defaultPageSize;
	        this.pageSizes = exports.availablePageSizes;
	        this.hasPageFilter = true;
	        var pager = this.cardContainer.dataSource.pager;
	        if (pager == null) {
	            this.hasPageFilter = false;
	        }
	        else {
	            this.$scope.$watch(function () { return _this.selectedPageSize; }, function (newPageSize) {
	                if (pager != null) {
	                    pager.pageSize = newPageSize;
	                    _this.cardContainer.dataSource.onPagingChange();
	                }
	            });
	        }
	    };
	    PageSizeController.$inject = ['$scope'];
	    return PageSizeController;
	}());
	exports.PageSizeController = PageSizeController;
	function pageSize() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: { cardContainer: '^^rlCardContainer' },
	        template: __webpack_require__(89),
	        controller: exports.controllerName,
	        controllerAs: 'controller',
	        scope: {},
	        bindToController: {},
	    };
	}
	exports.pageSize = pageSize;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, pageSize)
	    .controller(exports.controllerName, PageSizeController);
	//# sourceMappingURL=pageSize.js.map

/***/ },
/* 89 */
/***/ function(module, exports) {

	module.exports = "<div ng-show=\"controller.hasPageFilter\">\r\n\t<select class=\"form-control\" title=\"Cards per page\" ng-model=\"controller.selectedPageSize\"\r\n\t\t\tng-options=\"pageSize for pageSize in controller.pageSizes\"></select>\r\n</div>\r\n"

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __boolean = typescript_angular_utilities_1.services.boolean;
	exports.moduleName = 'rl.ui.components.cardContainer.selectionControl';
	exports.directiveName = 'rlSelectionControl';
	exports.controllerName = 'SelectionControlController';
	var SelectionControlController = (function () {
	    function SelectionControlController($scope, bool) {
	        this.$scope = $scope;
	        this.bool = bool;
	    }
	    SelectionControlController.prototype.$onInit = function () {
	        var _this = this;
	        if (this.cardContainer == null) {
	            return;
	        }
	        this.selectedItems = this.cardContainer.numberSelected;
	        this.pagingEnabled = this.bool.toBool(this.cardContainer.dataSource.pager);
	        this.dataSource = this.cardContainer.dataSource;
	        this.$scope.$watch(function () { return _this.cardContainer.numberSelected; }, function (value) {
	            _this.selectedItems = value;
	        });
	    };
	    SelectionControlController.prototype.selectPage = function () {
	        _.each(this.dataSource.dataSet, function (item) {
	            item.viewData.selected = true;
	        });
	        this.$scope.$emit('selectionChanged'); //*events?
	    };
	    SelectionControlController.prototype.selectAll = function () {
	        _.each(this.dataSource.filteredDataSet, function (item) {
	            item.viewData.selected = true;
	        });
	        this.$scope.$emit('selectionChanged'); //*events?
	    };
	    SelectionControlController.prototype.clearPage = function () {
	        _.each(this.dataSource.dataSet, function (item) {
	            item.viewData.selected = false;
	        });
	        this.$scope.$emit('selectionChanged'); //*events?
	    };
	    SelectionControlController.prototype.clearAll = function () {
	        _.each(this.dataSource.filteredDataSet, function (item) {
	            item.viewData.selected = false;
	        });
	        this.$scope.$emit('selectionChanged'); //*events?
	    };
	    SelectionControlController.$inject = ['$scope', __boolean.serviceName];
	    return SelectionControlController;
	}());
	exports.SelectionControlController = SelectionControlController;
	function selectionControl() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: { cardContainer: '^^rlCardContainer' },
	        template: __webpack_require__(91),
	        controller: exports.controllerName,
	        controllerAs: 'selection',
	        scope: {},
	        bindToController: {},
	    };
	}
	exports.selectionControl = selectionControl;
	angular.module(exports.moduleName, [__boolean.moduleName])
	    .directive(exports.directiveName, selectionControl)
	    .controller(exports.controllerName, SelectionControlController);
	//# sourceMappingURL=selectionControl.js.map

/***/ },
/* 91 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n\t<div style=\"margin-bottom: 5px\">\r\n\t\t<span><strong>{{selection.selectedItems}}</strong> items selected</span>\r\n\t</div>\r\n\t<div style=\"margin-bottom: 5px\" ng-if=\"selection.pagingEnabled\">\r\n\t\t<button type=\"button\" class=\"btn btn-default\" ng-click=\"selection.selectPage()\">Select page</button>\r\n\t\t<button type=\"button\" class=\"btn btn-default\" ng-click=\"selection.clearPage()\">Clear page</button>\r\n\t</div>\r\n\t<div>\r\n\t\t<button type=\"button\" class=\"btn btn-default\" ng-click=\"selection.selectAll()\">Select all</button>\r\n\t\t<button type=\"button\" class=\"btn btn-default\" ng-click=\"selection.clearAll()\">Clear all</button>\r\n\t</div>\r\n</div>\r\n"

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	// /// <reference path='../../../typings/jquery/jquery.d.ts' />
	'use strict';
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var __array = typescript_angular_utilities_1.services.array;
	var __parentChild = typescript_angular_utilities_1.services.parentChildBehavior;
	var dataSources_module_1 = __webpack_require__(50);
	var sorts_module_1 = __webpack_require__(51);
	var breakpoint_1 = __webpack_require__(44);
	exports.directiveName = 'rlCardContainer';
	exports.controllerName = 'CardContainerController';
	exports.defaultMaxColumnSorts = 2;
	exports.defaultSelectionTitle = 'Select card';
	var CardContainerController = (function () {
	    function CardContainerController($scope, $attrs, object, array, dataPagerFactory, parentChild) {
	        var _this = this;
	        this.$scope = $scope;
	        this.object = object;
	        this.array = array;
	        this.dataPagerFactory = dataPagerFactory;
	        this.parentChild = parentChild;
	        this.numberSelected = 0;
	        this.addViewData = function () {
	            _.each(_this.dataSource.rawDataSet, function (item) {
	                if (_.isUndefined(item.viewData)) {
	                    item.viewData = {
	                        selected: false,
	                    };
	                }
	            });
	            _this.updateDisabledSelections();
	        };
	        this.clearFilteredSelections = function () {
	            var nonVisibleItems = _.difference(_this.dataSource.rawDataSet, _this.dataSource.filteredDataSet);
	            _.each(nonVisibleItems, function (item) {
	                if (_.isUndefined(item.viewData)) {
	                    item.viewData = {
	                        selected: false,
	                    };
	                }
	                item.viewData.selected = false;
	                item.viewData.selectionTitle = exports.defaultSelectionTitle;
	            });
	            _this.updateSelected();
	        };
	        this.updateSelected = function () {
	            _this.numberSelected = _.filter(_this.dataSource.filteredDataSet, function (item) {
	                return item.viewData != null && item.viewData.selected;
	            }).length;
	        };
	        this.updateDisabledSelections = function () {
	            if (_this.disablingSelections) {
	                _.each(_this.dataSource.rawDataSet, function (item) {
	                    var disabledReason = _this.disableSelection({ item: item });
	                    item.viewData.disabledSelection = (disabledReason != null);
	                    item.viewData.selectionTitle = (item.viewData.disabledSelection ? disabledReason : exports.defaultSelectionTitle);
	                });
	            }
	        };
	        if (this.builder != null) {
	            this.builder.setCardContainerProperties(this);
	        }
	        this.dataSource = this.source;
	        this.permanentFooters = _.isUndefined(this.permanentFooters) ? false : this.permanentFooters;
	        this.maxColSorts = this.maxColumnSorts != null ? this.maxColumnSorts : exports.defaultMaxColumnSorts;
	        this.disablingSelections = object.isNullOrWhitespace($attrs.disableSelection) === false;
	        this.sortDirection = sorts_module_1.SortDirection;
	        this.syncFilters();
	        this.setupPaging();
	        this.buildColumnSizes();
	        if (this.selectableCards) {
	            //*use card container event service?
	            $scope.$on('selectionChanged', this.updateSelected);
	            $scope.$on('updateDisabledSelections', this.updateDisabledSelections);
	            this.dataSource.watch(this.addViewData, 'changed');
	            this.dataSource.watch(this.clearFilteredSelections, 'redrawing');
	            this.addViewData();
	            this.selectionColumn = {
	                label: null,
	                size: null,
	                getValue: function (item) {
	                    return item.viewData.selected;
	                },
	                flipSort: true,
	            };
	        }
	        if (this.dataSource.sorts == null) {
	            this.dataSource.sorts = [];
	        }
	        $scope.containerData = this.containerData;
	    }
	    CardContainerController.prototype.sortSelected = function () {
	        this.sort(this.selectionColumn);
	    };
	    CardContainerController.prototype.openCard = function () {
	        var behaviors = this.parentChild.getAllChildBehaviors(this.dataSource.dataSet);
	        return _.every(_.map(behaviors, function (behavior) { return behavior.close(); }));
	    };
	    CardContainerController.prototype.sort = function (column) {
	        var sortList = this.dataSource.sorts;
	        var firstSort = sortList[0];
	        // If column is already the primary sort, change the direction
	        if (firstSort != null
	            && firstSort.column === column) {
	            firstSort.direction = sorts_module_1.SortDirection.toggle(firstSort.direction);
	            // Clear sort
	            if (firstSort.direction === sorts_module_1.SortDirection.none) {
	                this.clearVisualSortIndicator(firstSort);
	                firstSort = null;
	                // If the column has secondary sorts don't fall back to a
	                //  secondary sort, instead just clear all sorts
	                if (column.secondarySorts != null) {
	                    sortList.length = 0;
	                }
	                else {
	                    sortList.shift();
	                }
	            }
	        }
	        else {
	            // Else make column primary ascending sort
	            // Remove any existing non-primary sorts on column
	            this.array.remove(sortList, function (sort) {
	                return column === sort.column;
	            });
	            // Build ascending sort for column
	            var newSort = {
	                column: column,
	                direction: sorts_module_1.SortDirection.ascending,
	            };
	            sortList.unshift(newSort);
	            firstSort = newSort;
	        }
	        this.updateVisualColumnSorting();
	        // If column has secondary sorts, wipe the sort order and just apply the secondary sorts
	        if (firstSort != null && column.secondarySorts != null) {
	            sortList.length = 0;
	            var secondarySorts = this.buildSecondarySorts(firstSort.direction, column.secondarySorts);
	            sortList.push(firstSort);
	            sortList.push.apply(sortList, secondarySorts);
	        }
	        else {
	            // If not using column secondary sorts, limit the maximum number
	            //  of sorts applied to the maximum number of sorts
	            this.dataSource.sorts = _.take(sortList, this.maxColSorts);
	        }
	        this.dataSource.onSortChange();
	    };
	    CardContainerController.prototype.selectionChanged = function () {
	        this.updateSelected();
	        this.$scope.$emit('selectionChanged');
	    };
	    CardContainerController.prototype.syncFilters = function () {
	        if (!this.object.isNullOrEmpty(this.filters)) {
	            this.dataSource.filters = this.filters;
	            this.dataSource.refresh();
	        }
	        else if (this.dataSource.filters != null) {
	            this.filters = this.dataSource.filters;
	        }
	    };
	    CardContainerController.prototype.setupPaging = function () {
	        // If paging flag is specified, card container controls pager instance
	        if (this.paging != null) {
	            if (this.paging === false) {
	                this.dataSource.pager = null;
	            }
	            else {
	                this.builder._pager = this.dataPagerFactory.getInstance();
	                this.dataSource.pager = this.builder._pager;
	            }
	        }
	        else if (this.dataSource.pager) {
	            // If the paging flag is not set and the dataSource has a pager, save a reference here
	            this.builder._pager = this.dataSource.pager;
	        }
	    };
	    CardContainerController.prototype.buildColumnSizes = function () {
	        var _this = this;
	        _.each(this.columns, function (column) {
	            var sizes = column.size;
	            if (_.isObject(sizes)) {
	                sizes[breakpoint_1.xs] = _this.object.valueOrDefault(sizes[breakpoint_1.xs], 0);
	                sizes[breakpoint_1.sm] = _this.object.valueOrDefault(sizes[breakpoint_1.sm], sizes[breakpoint_1.xs]);
	                sizes[breakpoint_1.md] = _this.object.valueOrDefault(sizes[breakpoint_1.md], sizes[breakpoint_1.sm]);
	                sizes[breakpoint_1.lg] = _this.object.valueOrDefault(sizes[breakpoint_1.lg], sizes[breakpoint_1.md]);
	            }
	            else {
	                column.size = {
	                    xs: sizes,
	                    sm: sizes,
	                    md: sizes,
	                    lg: sizes,
	                };
	            }
	        });
	    };
	    CardContainerController.prototype.lookupColumn = function (label) {
	        return _.find(this.columns, function (column) {
	            return column.label === label;
	        });
	    };
	    CardContainerController.prototype.buildSecondarySorts = function (direction, secondarySorts) {
	        var _this = this;
	        var sortList = secondarySorts[sorts_module_1.SortDirection.getFullName(direction)];
	        return _.map(sortList, function (sort) {
	            return {
	                direction: sort.direction,
	                column: _this.lookupColumn(sort.column),
	            };
	        });
	    };
	    CardContainerController.prototype.updateVisualColumnSorting = function () {
	        var _this = this;
	        _.each(this.dataSource.sorts, function (sort, index) {
	            // Only first sort should have visible direction
	            if (index === 0) {
	                _this.updateVisualSortIndicator(sort);
	            }
	            else {
	                _this.clearVisualSortIndicator(sort);
	            }
	        });
	    };
	    CardContainerController.prototype.updateVisualSortIndicator = function (sort) {
	        sort.column.sortDirection = sort.direction;
	    };
	    CardContainerController.prototype.clearVisualSortIndicator = function (sort) {
	        sort.column.sortDirection = null;
	    };
	    CardContainerController.$inject = ['$scope', '$attrs', __object.serviceName, __array.serviceName, dataSources_module_1.dataPager.factoryName, __parentChild.serviceName];
	    return CardContainerController;
	}());
	exports.CardContainerController = CardContainerController;
	cardContainer.$inject = ['$compile'];
	function cardContainer($compile) {
	    'use strict';
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: __webpack_require__(93),
	        controller: exports.controllerName,
	        controllerAs: 'cardContainer',
	        scope: {},
	        bindToController: {
	            // summary: a builder for the card container
	            builder: '=?',
	            // summary: controller shared by all components on a card
	            // remarks: this controller cannot override any of the following letiable names:
	            //          columns
	            //          item
	            //          contentTemplate
	            //          footerTemplate
	            //          clickable
	            //          cardController
	            //          cardControllerAs
	            //          cardAs
	            //          showContent
	            //          toggleContent
	            //          collapse
	            //          selected
	            //          setSelected
	            cardController: '@',
	            // summary: controller alias specified using controllerAs syntax
	            cardControllerAs: '@',
	            // summary: name used to access the card data
	            cardAs: '@',
	        },
	        link: function (scope, element, attrs, controller, transclude) {
	            var headerArea = element.find('.container-header-template');
	            var footerArea = element.find('.container-footer-template');
	            controller.makeCard = transclude;
	            transclude(scope, function (clone) {
	                var header = clone.filter('rl-container-header');
	                if (header.length === 0) {
	                    var defaultHeader = __webpack_require__(94);
	                    header = headerArea.append(defaultHeader);
	                    $compile(header)(scope);
	                }
	                else {
	                    headerArea.append(header);
	                }
	                var footer = clone.filter('rl-container-footer');
	                if (footer.length === 0) {
	                    var defaultFooter = __webpack_require__(95);
	                    footer = footerArea.append(defaultFooter);
	                    $compile(footer)(scope);
	                }
	                else {
	                    footerArea.append(footer);
	                }
	            });
	        }
	    };
	}
	exports.cardContainer = cardContainer;
	//# sourceMappingURL=cardContainer.js.map

/***/ },
/* 93 */
/***/ function(module, exports) {

	module.exports = "<div class=\"card-container\">\r\n\t<div>\r\n\t\t<div class=\"card-container-header\">\r\n\t\t\t<div class=\"container-header-template\"></div>\r\n\t\t</div>\r\n\r\n\t\t<rl-generic-container selector=\"cardContainer.selectableCards\">\r\n\t\t\t<template when-selector=\"false\" default>\r\n\t\t\t\t<div class=\"card-columns-header\">\r\n\t\t\t\t\t<div ng-repeat=\"column in cardContainer.columns\">\r\n\t\t\t\t\t\t<rl-column-header sort=\"cardContainer.sort(column)\" sorting=\"column.sortDirection\" column=\"column\"></rl-column-header>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"clearfix\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t\t<template when-selector=\"true\">\r\n\t\t\t\t<div class=\"card-columns-header\">\r\n\t\t\t\t\t<div class=\"select-group\">\r\n\t\t\t\t\t\t<div class=\"select-column\">\r\n\t\t\t\t\t\t\t<i class=\"fa fa-check\" style=\"margin-left: 6px; cursor: pointer\" ng-click=\"cardContainer.sortSelected()\"></i>\r\n\t\t\t\t\t\t\t<i ng-show=\"cardContainer.sortColumn.sortDirection === cardContainer.sortDirection.ascending\" class=\"fa fa-sort-asc\"></i>\r\n\t\t\t\t\t\t\t<i ng-show=\"cardContainer.sortColumn.sortDirection === cardContainer.sortDirection.descending\" class=\"fa fa-sort-desc\"></i>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"select-content\">\r\n\t\t\t\t\t\t\t<div ng-repeat=\"column in cardContainer.columns\">\r\n\t\t\t\t\t\t\t\t<rl-column-header sort=\"cardContainer.sort(column)\" sorting=\"column.sortDirection\" column=\"column\"></rl-column-header>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"clearfix\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</rl-generic-container>\r\n\r\n\t\t<div ng-if=\"cardContainer.dataSource.dataSet | isEmpty:false\">\r\n\t\t\t<div ng-repeat=\"card in cardContainer.dataSource.dataSet\">\r\n\t\t\t\t<rl-card columns=\"cardContainer.columns\" item=\"card\"\r\n\t\t\t\t\t\t clickable=\"cardContainer.clickableCards\"\r\n\t\t\t\t\t\t selectable=\"cardContainer.selectableCards\"\r\n\t\t\t\t\t\t selection-changed=\"cardContainer.selectionChanged()\"\r\n\t\t\t\t\t\t container-data=\"cardContainer.containerData\"\r\n\t\t\t\t\t\t source=\"cardContainer.dataSource\"\r\n\t\t\t\t\t\t permanent-footer=\"cardContainer.permanentFooters\"\r\n\t\t\t\t\t\t card-controller=\"cardContainer.cardController\"\r\n\t\t\t\t\t\t card-controller-as=\"cardContainer.cardControllerAs\"\r\n\t\t\t\t\t\t card-as=\"cardContainer.cardAs\"></rl-card>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div ng-if=\"cardContainer.dataSource.needsRefinedSearch\">\r\n\t\t\tPlease refine your search results\r\n\t\t</div>\r\n\t\t<div ng-if=\"cardContainer.dataSource.isEmpty\">\r\n\t\t\tThere are no items to show\r\n\t\t</div>\r\n\r\n\t\t<div>\r\n\t\t\t<rl-busy loading=\"cardContainer.dataSource.loadingDataSet\" size=\"2x\"></rl-busy>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"card-container-footer\">\r\n\t\t\t<div class=\"container-footer-template\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ },
/* 94 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n\t<div class=\"col-xs-12 col-sm-9\">\r\n\t\t<rl-card-search></rl-card-search>\r\n\t</div>\r\n\t<div class=\"hidden-xs col-sm-3\">\r\n\t\t<rl-page-size></rl-page-size>\r\n\t</div>\r\n</div>\r\n"

/***/ },
/* 95 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n\t<div ng-if=\"!cardContainer.selectableCards\" class=\"col-sm-6\">\r\n\t\t<rl-item-count></rl-item-count>\r\n\t</div>\r\n\t<span ng-if=\"cardContainer.selectableCards\">\r\n\t\t<div class=\"col-sm-3\">\r\n\t\t\t<rl-selection-control></rl-selection-control>\r\n\t\t</div>\r\n\t\t<div class=\"col-sm-3\">\r\n\t\t\t<rl-item-count></rl-item-count>\r\n\t\t</div>\r\n\t</span>\r\n\t<div class=\"col-sm-6\">\r\n\t\t<rl-pager class=\"pull-right\"></rl-pager>\r\n\t</div>\r\n</div>\r\n"

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __genericSearchFilter = typescript_angular_utilities_1.services.genericSearchFilter;
	var dataSources = __webpack_require__(50);
	var filterGroup = __webpack_require__(72);
	var selectFilter = __webpack_require__(80);
	var dateFilter = __webpack_require__(67);
	var columnSearchFilter_service_1 = __webpack_require__(66);
	exports.factoryName = 'cardContainerBuilder';
	var CardContainerBuilder = (function () {
	    function CardContainerBuilder($injector) {
	        this.$injector = $injector;
	        this.dataSource = new DataSourceBuilder($injector, this);
	        this.filters = new FilterBuilder($injector, this);
	        this._columns = [];
	    }
	    CardContainerBuilder.prototype.useSearch = function (filter) {
	        if (filter == null) {
	            var factory = this.$injector.get(__genericSearchFilter.factoryName);
	            filter = factory.getInstance();
	        }
	        this._searchFilter = filter;
	        return this._searchFilter;
	    };
	    CardContainerBuilder.prototype.usePaging = function () {
	        this._paging = true;
	    };
	    CardContainerBuilder.prototype.addColumn = function (column) {
	        this._columns.push(column);
	    };
	    CardContainerBuilder.prototype.useClickableCards = function () {
	        this._clickableCards = true;
	    };
	    CardContainerBuilder.prototype.usePermanentFooters = function () {
	        this._permanentFooters = true;
	    };
	    CardContainerBuilder.prototype.useSelection = function () {
	        this._selectableCards = true;
	    };
	    Object.defineProperty(CardContainerBuilder.prototype, "disableSelection", {
	        set: function (value) {
	            if (!this._selectableCards) {
	                this.useSelection();
	            }
	            this._disableSelection = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CardContainerBuilder.prototype.setCardContainerProperties = function (cardContainer) {
	        if (this._searchFilter != null) {
	            this._filters.push(this._searchFilter);
	        }
	        cardContainer.source = this._dataSource;
	        cardContainer.filters = this._filters;
	        cardContainer.searchFilter = this._searchFilter;
	        cardContainer.paging = this._paging;
	        cardContainer.columns = this._columns;
	        cardContainer.containerData = this.containerData;
	        cardContainer.clickableCards = this._clickableCards;
	        cardContainer.maxColumnSorts = this.maxColumnSorts;
	        cardContainer.permanentFooters = this._permanentFooters;
	        cardContainer.selectableCards = this._selectableCards;
	        cardContainer.disableSelection = this._disableSelection;
	        if (cardContainer.cardController == null) {
	            cardContainer.cardController = this.cardController;
	        }
	        if (cardContainer.cardControllerAs == null) {
	            cardContainer.cardControllerAs = this.cardControllerAs;
	        }
	        if (cardContainer.cardAs == null) {
	            cardContainer.cardAs = this.cardAs;
	        }
	    };
	    return CardContainerBuilder;
	}());
	exports.CardContainerBuilder = CardContainerBuilder;
	var DataSourceBuilder = (function () {
	    function DataSourceBuilder($injector, parent) {
	        this.$injector = $injector;
	        this.parent = parent;
	        var factory = this.$injector.get(dataSources.simpleDataSource.factoryName);
	        parent._dataSource = factory.getInstance([]);
	    }
	    DataSourceBuilder.prototype.buildSimpleDataSource = function (data) {
	        var factory = this.$injector.get(dataSources.simpleDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(data);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildDataServiceDataSource = function (getDataSet) {
	        var factory = this.$injector.get(dataSources.dataServiceDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(getDataSet);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildClientServerDataSource = function (getDataSet, getFilterModel, validateModel) {
	        if (_.isUndefined(this.parent._searchFilter)) {
	            this.parent.useSearch();
	        }
	        var factory = this.$injector.get(dataSources.clientServerDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(getDataSet, this.parent._searchFilter, getFilterModel, validateModel);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildServerSideDataSource = function (getDataSet) {
	        var factory = this.$injector.get(dataSources.serverSideDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(getDataSet);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildSmartDataSource = function (getDataSet) {
	        var factory = this.$injector.get(dataSources.smartDataSource.factoryName);
	        this.parent._dataSource = factory.getInstance(getDataSet);
	        return this.parent._dataSource;
	    };
	    DataSourceBuilder.prototype.buildCustomDataSource = function (dataSource) {
	        this.parent._dataSource = dataSource;
	        return this.parent._dataSource;
	    };
	    return DataSourceBuilder;
	}());
	exports.DataSourceBuilder = DataSourceBuilder;
	var FilterBuilder = (function () {
	    function FilterBuilder($injector, parent) {
	        this.$injector = $injector;
	        this.parent = parent;
	        this.parent._filters = [];
	    }
	    FilterBuilder.prototype.buildFilterGroup = function (settings) {
	        var factory = this.$injector.get(filterGroup.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildModeFilterGroup = function (settings) {
	        var factory = this.$injector.get(filterGroup.modeFilterGroup.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildRangeFilterGroup = function (settings) {
	        var factory = this.$injector.get(filterGroup.rangeFilterGroup.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildSelectFilter = function (valueSelector, comparer) {
	        var factory = this.$injector.get(selectFilter.factoryName);
	        var filter = factory.getInstance(valueSelector, comparer);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildDateFilter = function (settings) {
	        var factory = this.$injector.get(dateFilter.factoryName);
	        var filter = factory.getInstance(settings);
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.buildColumnSearchFilter = function () {
	        var factory = this.$injector.get(columnSearchFilter_service_1.factoryName);
	        var filter = factory.getInstance();
	        this.parent._filters.push(filter);
	        return filter;
	    };
	    FilterBuilder.prototype.addCustomFilter = function (filter) {
	        this.parent._filters.push(filter);
	    };
	    return FilterBuilder;
	}());
	exports.FilterBuilder = FilterBuilder;
	cardContainerBuilderFactory.$inject = ['$injector'];
	function cardContainerBuilderFactory($injector) {
	    return {
	        useMock: false,
	        getInstance: function () {
	            return this.useMock ? this.mockBuilder : new CardContainerBuilder($injector);
	        },
	        mockBuilder: new CardContainerBuilder($injector),
	    };
	}
	exports.cardContainerBuilderFactory = cardContainerBuilderFactory;
	//# sourceMappingURL=cardContainerBuilder.service.js.map

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.checkbox';
	exports.directiveName = 'rlCheckbox';
	exports.controllerName = 'CheckboxController';
	var CheckboxController = (function () {
	    function CheckboxController($element) {
	        this.ngModel = $element.controller('ngModel');
	    }
	    Object.defineProperty(CheckboxController.prototype, "checked", {
	        get: function () {
	            return this.ngModel.$viewValue;
	        },
	        set: function (value) {
	            this.ngModel.$setViewValue(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CheckboxController.$inject = ['$element'];
	    return CheckboxController;
	}());
	exports.CheckboxController = CheckboxController;
	function checkbox() {
	    return {
	        restrict: 'E',
	        require: 'ngModel',
	        transclude: true,
	        template: __webpack_require__(98),
	        controller: exports.controllerName,
	        controllerAs: 'checkbox',
	        scope: {},
	        bindToController: {
	            ngDisabled: '=',
	        },
	    };
	}
	exports.checkbox = checkbox;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, checkbox)
	    .controller(exports.controllerName, CheckboxController);
	//# sourceMappingURL=checkbox.js.map

/***/ },
/* 98 */
/***/ function(module, exports) {

	module.exports = "<label>\r\n\t<input type=\"checkbox\" ng-model=\"checkbox.checked\" ng-disabled=\"checkbox.ngDisabled\" />\r\n\t<span ng-transclude></span>\r\n</label>"

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	exports.moduleName = 'rl.ui.components.commaList';
	exports.directiveName = 'rlCommaList';
	exports.controllerName = 'CommaListController';
	var CommaListController = (function () {
	    function CommaListController($attrs, object) {
	        this.remainingItems = 0;
	        this.hasTransform = object.isNullOrWhitespace($attrs.transform) === false;
	        this.list = this.getFirstItems(this.inList);
	    }
	    CommaListController.prototype.getFirstItems = function (list) {
	        var _this = this;
	        if (this.hasTransform) {
	            list = _.map(list, function (item) {
	                return _this.transform({ item: item });
	            });
	        }
	        ;
	        var newList;
	        if (this.max != null) {
	            newList = _.take(list, this.max);
	            this.remainingItems = list.length - this.max;
	        }
	        else {
	            newList = _.clone(list);
	        }
	        return newList;
	    };
	    CommaListController.$inject = ['$attrs', __object.serviceName];
	    return CommaListController;
	}());
	exports.CommaListController = CommaListController;
	function commaList() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "\n\t\t\t<span>\n\t\t\t\t<span ng-repeat=\"item in commaList.list track by $index\">\n\t\t\t\t\t<span>{{item}}</span><span ng-hide=\"$last\">, </span>\n\t\t\t\t</span>\n\t\t\t\t<span ng-show=\"commaList.remainingItems > 0\">... {{commaList.remainingItems}} more items</span>\n\t\t\t</span>\n\t\t",
	        controller: exports.controllerName,
	        controllerAs: 'commaList',
	        scope: {},
	        bindToController: {
	            inList: '=list',
	            max: '=',
	            transform: '&',
	        },
	    };
	}
	angular.module(exports.moduleName, [__object.moduleName])
	    .directive(exports.directiveName, commaList)
	    .controller(exports.controllerName, CommaListController);
	//# sourceMappingURL=commaList.js.map

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// /// <reference path='../../../typings/bootstrapDateTimePicker.d.ts' />
	__webpack_require__(101);
	var angular = __webpack_require__(1);
	var $ = __webpack_require__(12);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __dateTimeFormatStrings = typescript_angular_utilities_1.services.date;
	var __object = typescript_angular_utilities_1.services.object;
	var componentValidator_service_1 = __webpack_require__(105);
	exports.moduleName = 'rl.ui.components.dateTime';
	exports.directiveName = 'rlDateTime';
	exports.controllerName = 'DateTimeController';
	var DateTimeController = (function () {
	    function DateTimeController($scope, componentValidatorFactory) {
	        var _this = this;
	        var unregister = $scope.$watch(function () { return _this.ngModel; }, function (value) {
	            if (!_.isUndefined(_this.validator)) {
	                _this.dateTimeValidator = componentValidatorFactory.getInstance({
	                    ngModel: _this.ngModel,
	                    $scope: $scope,
	                    validators: [_this.validator],
	                });
	            }
	            unregister();
	        });
	    }
	    DateTimeController.prototype.onClearClick = function () {
	        this.ngModel.$setViewValue('');
	        this.onClearEvent();
	    };
	    DateTimeController.$inject = ['$scope', componentValidator_service_1.factoryName];
	    return DateTimeController;
	}());
	exports.DateTimeController = DateTimeController;
	dateTime.$inject = [typescript_angular_utilities_1.services.moment.serviceName, __dateTimeFormatStrings.dateTimeFormatServiceName, __object.serviceName];
	function dateTime(moment, dateTimeFormatStrings, object) {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(106),
	        require: '?^ngModel',
	        controller: exports.controllerName,
	        controllerAs: 'dateTime',
	        scope: {},
	        bindToController: {
	            minuteStepping: '=',
	            useDate: '=',
	            useTime: '=',
	            min: '=',
	            max: '=',
	            validator: '=',
	            clearButton: '=',
	            onClearEvent: '&'
	        },
	        link: function (scope, element, attrs, ngModel) {
	            var dateTime = scope.dateTime;
	            dateTime.ngModel = ngModel;
	            // defaults to true
	            var hasDate = _.isUndefined(dateTime.useDate) ? true : dateTime.useDate;
	            var hasTime = _.isUndefined(dateTime.useTime) ? true : dateTime.useTime;
	            var defaults = element.datetimepicker.defaults;
	            var min = dateTime.min != null ? dateTime.min : defaults.minDate;
	            var max = dateTime.max != null ? dateTime.max : defaults.maxDate;
	            scope.$watch(function () { return ngModel.$viewValue; }, function (newValue) {
	                dateTime.validFormat = object.isNullOrEmpty(newValue)
	                    ? true
	                    : moment(newValue).isValid();
	            });
	            element.find('.show-date-picker').datetimepicker({
	                stepping: dateTime.minuteStepping || 1,
	                format: dateTime.format || defaultFormat(hasDate, hasTime),
	                direction: 'bottom',
	                elementHeight: 2,
	                pickDate: hasDate,
	                pickTime: hasTime,
	                minDate: min,
	                maxDate: max,
	            }).on('change.dp', function () {
	                var newValue = $(this).find('input').val();
	                ngModel.$setViewValue(newValue);
	                scope.$apply();
	            });
	            function defaultFormat(hasDate, hasTime) {
	                if (hasDate && hasTime) {
	                    return dateTimeFormatStrings.dateTimeFormat;
	                }
	                else if (hasDate) {
	                    return dateTimeFormatStrings.dateFormat;
	                }
	                else if (hasTime) {
	                    return dateTimeFormatStrings.timeFormat;
	                }
	                else {
	                    // revert to default format
	                    return false;
	                }
	            }
	        },
	    };
	}
	angular.module(exports.moduleName, [typescript_angular_utilities_1.services.moment.moduleName, typescript_angular_utilities_1.services.date.moduleName, componentValidator_service_1.moduleName, __object.moduleName])
	    .directive(exports.directiveName, dateTime)
	    .controller(exports.controllerName, DateTimeController);
	//# sourceMappingURL=dateTime.js.map

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(102);
	__webpack_require__(104);

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(103);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./bootstrap-datetimepicker.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./bootstrap-datetimepicker.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	
	
	// module
	exports.push([module.id, "/*!\r\n * Datetimepicker for Bootstrap v3\r\n//! version : 3.1.3\r\n * https://github.com/Eonasdan/bootstrap-datetimepicker/\r\n */\r\n.bootstrap-datetimepicker-widget {\r\n  top: 0;\r\n  left: 0;\r\n  width: 250px;\r\n  padding: 4px;\r\n  margin-top: 1px;\r\n  z-index: 99999 !important;\r\n  border-radius: 4px;\r\n}\r\n.bootstrap-datetimepicker-widget.timepicker-sbs {\r\n  width: 600px;\r\n}\r\n.bootstrap-datetimepicker-widget.bottom:before {\r\n  content: '';\r\n  display: inline-block;\r\n  border-left: 7px solid transparent;\r\n  border-right: 7px solid transparent;\r\n  border-bottom: 7px solid #ccc;\r\n  border-bottom-color: rgba(0, 0, 0, 0.2);\r\n  position: absolute;\r\n  top: -7px;\r\n  left: 7px;\r\n}\r\n.bootstrap-datetimepicker-widget.bottom:after {\r\n  content: '';\r\n  display: inline-block;\r\n  border-left: 6px solid transparent;\r\n  border-right: 6px solid transparent;\r\n  border-bottom: 6px solid white;\r\n  position: absolute;\r\n  top: -6px;\r\n  left: 8px;\r\n}\r\n.bootstrap-datetimepicker-widget.top:before {\r\n  content: '';\r\n  display: inline-block;\r\n  border-left: 7px solid transparent;\r\n  border-right: 7px solid transparent;\r\n  border-top: 7px solid #ccc;\r\n  border-top-color: rgba(0, 0, 0, 0.2);\r\n  position: absolute;\r\n  bottom: -7px;\r\n  left: 6px;\r\n}\r\n.bootstrap-datetimepicker-widget.top:after {\r\n  content: '';\r\n  display: inline-block;\r\n  border-left: 6px solid transparent;\r\n  border-right: 6px solid transparent;\r\n  border-top: 6px solid white;\r\n  position: absolute;\r\n  bottom: -6px;\r\n  left: 7px;\r\n}\r\n.bootstrap-datetimepicker-widget .dow {\r\n  width: 14.2857%;\r\n}\r\n.bootstrap-datetimepicker-widget.pull-right:before {\r\n  left: auto;\r\n  right: 6px;\r\n}\r\n.bootstrap-datetimepicker-widget.pull-right:after {\r\n  left: auto;\r\n  right: 7px;\r\n}\r\n.bootstrap-datetimepicker-widget > ul {\r\n  list-style-type: none;\r\n  margin: 0;\r\n}\r\n.bootstrap-datetimepicker-widget a[data-action] {\r\n  padding: 0;\r\n}\r\n.bootstrap-datetimepicker-widget a[data-action]:active {\r\n  box-shadow: none;\r\n}\r\n.bootstrap-datetimepicker-widget .timepicker {\r\n  margin: 0 4px 4px 4px;\r\n}\r\n.bootstrap-datetimepicker-widget .timepicker-hour,\r\n.bootstrap-datetimepicker-widget .timepicker-minute,\r\n.bootstrap-datetimepicker-widget .timepicker-second {\r\n  width: 54px;\r\n  font-weight: bold;\r\n  font-size: 1.2em;\r\n  margin-top: 4px;\r\n}\r\n.bootstrap-datetimepicker-widget button[data-action] {\r\n  padding: 6px;\r\n}\r\n.bootstrap-datetimepicker-widget table[data-hour-format=\"12\"] .separator {\r\n  width: 4px;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n.bootstrap-datetimepicker-widget .datepicker > div {\r\n  display: none;\r\n}\r\n.bootstrap-datetimepicker-widget .picker-switch {\r\n  text-align: center;\r\n}\r\n.bootstrap-datetimepicker-widget table {\r\n  width: 100%;\r\n  margin: 0;\r\n}\r\n.bootstrap-datetimepicker-widget td,\r\n.bootstrap-datetimepicker-widget th {\r\n  text-align: center;\r\n  border-radius: 4px;\r\n}\r\n.bootstrap-datetimepicker-widget td {\r\n  height: 25px;\r\n  line-height: 25px;\r\n  width: 54px;\r\n}\r\n.bootstrap-datetimepicker-widget td.cw {\r\n  font-size: 10px;\r\n  height: 20px;\r\n  line-height: 20px;\r\n  color: #777777;\r\n}\r\n.bootstrap-datetimepicker-widget td.day {\r\n  height: 20px;\r\n  line-height: 20px;\r\n  width: 20px;\r\n}\r\n.bootstrap-datetimepicker-widget td.day:hover,\r\n.bootstrap-datetimepicker-widget td.hour:hover,\r\n.bootstrap-datetimepicker-widget td.minute:hover,\r\n.bootstrap-datetimepicker-widget td.second:hover {\r\n  background: #eeeeee;\r\n  cursor: pointer;\r\n}\r\n.bootstrap-datetimepicker-widget td.old,\r\n.bootstrap-datetimepicker-widget td.new {\r\n  color: #777777;\r\n}\r\n.bootstrap-datetimepicker-widget td.today {\r\n  position: relative;\r\n}\r\n.bootstrap-datetimepicker-widget td.today:before {\r\n  content: '';\r\n  display: inline-block;\r\n  border-left: 7px solid transparent;\r\n  border-bottom: 7px solid #428bca;\r\n  border-top-color: rgba(0, 0, 0, 0.2);\r\n  position: absolute;\r\n  bottom: 4px;\r\n  right: 4px;\r\n}\r\n.bootstrap-datetimepicker-widget td.active,\r\n.bootstrap-datetimepicker-widget td.active:hover {\r\n  background-color: #428bca;\r\n  color: #ffffff;\r\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);\r\n}\r\n.bootstrap-datetimepicker-widget td.active.today:before {\r\n  border-bottom-color: #fff;\r\n}\r\n.bootstrap-datetimepicker-widget td.disabled,\r\n.bootstrap-datetimepicker-widget td.disabled:hover {\r\n  background: none;\r\n  color: #777777;\r\n  cursor: not-allowed;\r\n}\r\n.bootstrap-datetimepicker-widget td span {\r\n  display: inline-block;\r\n  width: 54px;\r\n  height: 25px;\r\n  line-height: 25px;\r\n  margin: 0px 1.5px;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n}\r\n.bootstrap-datetimepicker-widget td span:hover {\r\n  background: #eeeeee;\r\n}\r\n.bootstrap-datetimepicker-widget td span.active {\r\n  background-color: #428bca;\r\n  color: #ffffff;\r\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);\r\n}\r\n.bootstrap-datetimepicker-widget td span.old {\r\n  color: #777777;\r\n}\r\n.bootstrap-datetimepicker-widget td span.disabled,\r\n.bootstrap-datetimepicker-widget td span.disabled:hover {\r\n  background: none;\r\n  color: #777777;\r\n  cursor: not-allowed;\r\n}\r\n.bootstrap-datetimepicker-widget th {\r\n  height: 20px;\r\n  line-height: 20px;\r\n  width: 20px;\r\n}\r\n.bootstrap-datetimepicker-widget th.picker-switch {\r\n  width: 145px;\r\n}\r\n.bootstrap-datetimepicker-widget th.next,\r\n.bootstrap-datetimepicker-widget th.prev {\r\n  font-size: 21px;\r\n}\r\n.bootstrap-datetimepicker-widget th.disabled,\r\n.bootstrap-datetimepicker-widget th.disabled:hover {\r\n  background: none;\r\n  color: #777777;\r\n  cursor: not-allowed;\r\n}\r\n.bootstrap-datetimepicker-widget thead tr:first-child th {\r\n  cursor: pointer;\r\n}\r\n.bootstrap-datetimepicker-widget thead tr:first-child th:hover {\r\n  background: #eeeeee;\r\n}\r\n.input-group.date .input-group-addon span {\r\n  display: block;\r\n  cursor: pointer;\r\n  width: 16px;\r\n  height: 16px;\r\n}\r\n.bootstrap-datetimepicker-widget.left-oriented:before {\r\n  left: auto;\r\n  right: 6px;\r\n}\r\n.bootstrap-datetimepicker-widget.left-oriented:after {\r\n  left: auto;\r\n  right: 7px;\r\n}\r\n.bootstrap-datetimepicker-widget ul.list-unstyled li div.timepicker div.timepicker-picker table.table-condensed tbody > tr > td {\r\n  padding: 0px !important;\r\n}\r\n@media screen and (max-width: 767px) {\r\n  .bootstrap-datetimepicker-widget.timepicker-sbs {\r\n    width: 283px;\r\n  }\r\n}\r\n", ""]);
	
	// exports


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	//! version : 3.1.3
	=========================================================
	bootstrap-datetimepicker.js
	https://github.com/Eonasdan/bootstrap-datetimepicker
	=========================================================
	The MIT License (MIT)
	
	Copyright (c) 2014 Jonathan Peterson
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/
	; (function (root, factory) {
		'use strict';
		if (true) {
			// AMD is used - Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(12), __webpack_require__(69)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof exports === 'object') {
			factory(require('jquery'), require('moment'));
		}
		else {
			// Neither AMD or CommonJS used. Use global variables.
			if (!jQuery) {
				throw new Error('bootstrap-datetimepicker requires jQuery to be loaded first');
			}
			if (!moment) {
				throw new Error('bootstrap-datetimepicker requires moment.js to be loaded first');
			}
			factory(root.jQuery, moment);
		}
	}(this, function ($, moment) {
		'use strict';
		if (typeof moment === 'undefined') {
			throw new Error('momentjs is required');
		}
	
		var dpgId = 0,
	
	    DateTimePicker = function (element, options) {
	    	var defaults = $.fn.datetimepicker.defaults,
	
	            icons = {
	            	time: 'fa fa-clock-o',
	            	date: 'fa fa-calendar',
	            	up: 'fa fa-chevron-up',
	            	down: 'fa fa-chevron-down'
	            },
	
	            picker = this,
	            errored = false,
	            dDate,
	
	        init = function () {
	        	var icon = false, localeData, rInterval;
	        	picker.options = $.extend({}, defaults, options);
	        	picker.options.icons = $.extend({}, icons, picker.options.icons);
	
	        	picker.element = $(element);
	
	        	dataToOptions();
	
	        	if (!(picker.options.pickTime || picker.options.pickDate)) {
	        		throw new Error('Must choose at least one picker');
	        	}
	
	        	picker.id = dpgId++;
	        	moment.locale(picker.options.language);
	        	picker.date = moment();
	        	picker.unset = false;
	        	picker.isInput = picker.element.is('input');
	        	picker.component = false;
	
	        	if (picker.element.hasClass('input-group')) {
	        		if (picker.element.find('.datepickerbutton').size() === 0) {//in case there is more then one 'input-group-addon' Issue #48
	        			picker.component = picker.element.find('[class^="input-group-"]');
	        		}
	        		else {
	        			picker.component = picker.element.find('.datepickerbutton');
	        		}
	        	}
	        	picker.format = picker.options.format;
	
	        	localeData = moment().localeData();
	
	        	if (!picker.format) {
	        		picker.format = (picker.options.pickDate ? localeData.longDateFormat('L') : '');
	        		if (picker.options.pickDate && picker.options.pickTime) {
	        			picker.format += ' ';
	        		}
	        		picker.format += (picker.options.pickTime ? localeData.longDateFormat('LT') : '');
	        		if (picker.options.useSeconds) {
	        			if (localeData.longDateFormat('LT').indexOf(' A') !== -1) {
	        				picker.format = picker.format.split(' A')[0] + ':ss A';
	        			}
	        			else {
	        				picker.format += ':ss';
	        			}
	        		}
	        	}
	        	picker.use24hours = (picker.format.toLowerCase().indexOf('a') < 0 && picker.format.indexOf('h') < 0);
	
	        	if (picker.component) {
	        		icon = picker.component.find('span');
	        	}
	
	        	if (picker.options.pickTime) {
	        		if (icon) {
	        			icon.addClass(picker.options.icons.time);
	        		}
	        	}
	        	if (picker.options.pickDate) {
	        		if (icon) {
	        			icon.removeClass(picker.options.icons.time);
	        			icon.addClass(picker.options.icons.date);
	        		}
	        	}
	
	        	picker.options.widgetParent =
	                typeof picker.options.widgetParent === 'string' && picker.options.widgetParent ||
	                picker.element.parents().filter(function () {
	                	return 'scroll' === $(this).css('overflow-y');
	                }).get(0) ||
	                'body';
	
	        	picker.widget = $(getTemplate()).appendTo(picker.options.widgetParent);
	
	        	picker.minViewMode = picker.options.minViewMode || 0;
	        	if (typeof picker.minViewMode === 'string') {
	        		switch (picker.minViewMode) {
	        			case 'months':
	        				picker.minViewMode = 1;
	        				break;
	        			case 'years':
	        				picker.minViewMode = 2;
	        				break;
	        			default:
	        				picker.minViewMode = 0;
	        				break;
	        		}
	        	}
	        	picker.viewMode = picker.options.viewMode || 0;
	        	if (typeof picker.viewMode === 'string') {
	        		switch (picker.viewMode) {
	        			case 'months':
	        				picker.viewMode = 1;
	        				break;
	        			case 'years':
	        				picker.viewMode = 2;
	        				break;
	        			default:
	        				picker.viewMode = 0;
	        				break;
	        		}
	        	}
	
	        	picker.viewMode = Math.max(picker.viewMode, picker.minViewMode);
	
	        	picker.options.disabledDates = indexGivenDates(picker.options.disabledDates);
	        	picker.options.enabledDates = indexGivenDates(picker.options.enabledDates);
	
	        	picker.startViewMode = picker.viewMode;
	        	picker.setMinDate(picker.options.minDate);
	        	picker.setMaxDate(picker.options.maxDate);
	        	fillDow();
	        	fillMonths();
	        	fillHours();
	        	fillMinutes();
	        	fillSeconds();
	        	update();
	        	showMode();
	        	if (!getPickerInput().prop('disabled')) {
	        		attachDatePickerEvents();
	        	}
	        	if (picker.options.defaultDate !== '' && getPickerInput().val() === '') {
	        		picker.setValue(picker.options.defaultDate);
	        	}
	        	if (picker.options.minuteStepping !== 1) {
	        		rInterval = picker.options.minuteStepping;
	        		picker.date.minutes((Math.round(picker.date.minutes() / rInterval) * rInterval) % 60).seconds(0);
	        	}
	        },
	
	        getPickerInput = function () {
	        	var input;
	
	        	if (picker.isInput) {
	        		return picker.element;
	        	}
	        	input = picker.element.find('.datepickerinput');
	        	if (input.size() === 0) {
	        		input = picker.element.find('input');
	        	}
	        	else if (!input.is('input')) {
	        		throw new Error('CSS class "datepickerinput" cannot be applied to non input element');
	        	}
	        	return input;
	        },
	
	        dataToOptions = function () {
	        	var eData;
	        	if (picker.element.is('input')) {
	        		eData = picker.element.data();
	        	}
	        	else {
	        		eData = picker.element.find('input').data();
	        	}
	        	if (eData.dateFormat !== undefined) {
	        		picker.options.format = eData.dateFormat;
	        	}
	        	if (eData.datePickdate !== undefined) {
	        		picker.options.pickDate = eData.datePickdate;
	        	}
	        	if (eData.datePicktime !== undefined) {
	        		picker.options.pickTime = eData.datePicktime;
	        	}
	        	if (eData.dateUseminutes !== undefined) {
	        		picker.options.useMinutes = eData.dateUseminutes;
	        	}
	        	if (eData.dateUseseconds !== undefined) {
	        		picker.options.useSeconds = eData.dateUseseconds;
	        	}
	        	if (eData.dateUsecurrent !== undefined) {
	        		picker.options.useCurrent = eData.dateUsecurrent;
	        	}
	        	if (eData.calendarWeeks !== undefined) {
	        		picker.options.calendarWeeks = eData.calendarWeeks;
	        	}
	        	if (eData.dateMinutestepping !== undefined) {
	        		picker.options.minuteStepping = eData.dateMinutestepping;
	        	}
	        	if (eData.dateMindate !== undefined) {
	        		picker.options.minDate = eData.dateMindate;
	        	}
	        	if (eData.dateMaxdate !== undefined) {
	        		picker.options.maxDate = eData.dateMaxdate;
	        	}
	        	if (eData.dateShowtoday !== undefined) {
	        		picker.options.showToday = eData.dateShowtoday;
	        	}
	        	if (eData.dateCollapse !== undefined) {
	        		picker.options.collapse = eData.dateCollapse;
	        	}
	        	if (eData.dateLanguage !== undefined) {
	        		picker.options.language = eData.dateLanguage;
	        	}
	        	if (eData.dateDefaultdate !== undefined) {
	        		picker.options.defaultDate = eData.dateDefaultdate;
	        	}
	        	if (eData.dateDisableddates !== undefined) {
	        		picker.options.disabledDates = eData.dateDisableddates;
	        	}
	        	if (eData.dateEnableddates !== undefined) {
	        		picker.options.enabledDates = eData.dateEnableddates;
	        	}
	        	if (eData.dateIcons !== undefined) {
	        		picker.options.icons = eData.dateIcons;
	        	}
	        	if (eData.dateUsestrict !== undefined) {
	        		picker.options.useStrict = eData.dateUsestrict;
	        	}
	        	if (eData.dateDirection !== undefined) {
	        		picker.options.direction = eData.dateDirection;
	        	}
	        	if (eData.dateSidebyside !== undefined) {
	        		picker.options.sideBySide = eData.dateSidebyside;
	        	}
	        	if (eData.dateDaysofweekdisabled !== undefined) {
	        		picker.options.daysOfWeekDisabled = eData.dateDaysofweekdisabled;
	        	}
	        },
	
	        place = function () {
	        	var position = 'absolute',
	                offset = picker.component ? picker.component.offset() : picker.element.offset(),
	                $window = $(window),
	                placePosition;
	
	        	picker.width = picker.component ? picker.component.outerWidth() : picker.element.outerWidth();
	        	offset.top = offset.top + picker.element.outerHeight();
	
	        	if (picker.options.direction === 'up') {
	        		placePosition = 'top';
	        	} else if (picker.options.direction === 'bottom') {
	        		placePosition = 'bottom';
	        	} else if (picker.options.direction === 'auto') {
	        		if (offset.top + picker.widget.height() > $window.height() + $window.scrollTop() && picker.widget.height() + picker.element.outerHeight() < offset.top) {
	        			placePosition = 'top';
	        		} else {
	        			placePosition = 'bottom';
	        		}
	        	}
	        	if (placePosition === 'top') {
	        		offset.bottom = $window.height() - offset.top + picker.element.outerHeight() + 3;
	        		picker.widget.addClass('top').removeClass('bottom');
	        	} else {
	        		offset.top += 1;
	        		offset.top += picker.options.elementHeight;
	        		picker.widget.addClass('bottom').removeClass('top');
	        	}
	
	        	if (picker.options.width !== undefined) {
	        		picker.widget.width(picker.options.width);
	        	}
	
	        	if (picker.options.orientation === 'left') {
	        		picker.widget.addClass('left-oriented');
	        		offset.left = offset.left - picker.widget.width() + 20;
	        	}
	
	        	if (isInFixed()) {
	        		position = 'fixed';
	        		offset.top -= $window.scrollTop();
	        		offset.left -= $window.scrollLeft();
	        	}
	
	        	if ($window.width() < offset.left + picker.widget.outerWidth()) {
	        		offset.right = $window.width() - offset.left - picker.width;
	        		offset.left = 'auto';
	        		picker.widget.addClass('pull-right');
	        	} else {
	        		offset.right = 'auto';
	        		picker.widget.removeClass('pull-right');
	        	}
	
	        	if (placePosition === 'top') {
	        		picker.widget.css({
	        			position: position,
	        			bottom: offset.bottom,
	        			top: 'auto',
	        			left: offset.left,
	        			right: offset.right
	        		});
	        	} else {
	        		picker.widget.css({
	        			position: position,
	        			top: offset.top,
	        			bottom: 'auto',
	        			left: offset.left,
	        			right: offset.right
	        		});
	        	}
	        },
	
	        notifyChange = function (oldDate, eventType) {
	        	if (moment(picker.date).isSame(moment(oldDate)) && !errored) {
	        		return;
	        	}
	        	errored = false;
	        	picker.element.trigger({
	        		type: 'dp.change',
	        		date: moment(picker.date),
	        		oldDate: moment(oldDate)
	        	});
	
	        	if (eventType !== 'change') {
	        		picker.element.change();
	        	}
	        },
	
	        notifyError = function (date) {
	        	errored = true;
	        	picker.element.trigger({
	        		type: 'dp.error',
	        		date: moment(date, picker.format, picker.options.useStrict)
	        	});
	        },
	
	        update = function (newDate) {
	        	moment.locale(picker.options.language);
	        	var dateStr = newDate;
	        	if (!dateStr) {
	        		dateStr = getPickerInput().val();
	        		if (dateStr) {
	        			picker.date = moment(dateStr, picker.format, picker.options.useStrict);
	        		}
	        		if (!picker.date) {
	        			picker.date = moment();
	        		}
	        	}
	        	picker.viewDate = moment(picker.date).startOf('month');
	        	fillDate();
	        	fillTime();
	        },
	
	        fillDow = function () {
	        	moment.locale(picker.options.language);
	        	var html = $('<tr>'), weekdaysMin = moment.weekdaysMin(), i;
	        	if (picker.options.calendarWeeks === true) {
	        		html.append('<th class="cw">#</th>');
	        	}
	        	if (moment().localeData()._week.dow === 0) { // starts on Sunday
	        		for (i = 0; i < 7; i++) {
	        			html.append('<th class="dow">' + weekdaysMin[i] + '</th>');
	        		}
	        	} else {
	        		for (i = 1; i < 8; i++) {
	        			if (i === 7) {
	        				html.append('<th class="dow">' + weekdaysMin[0] + '</th>');
	        			} else {
	        				html.append('<th class="dow">' + weekdaysMin[i] + '</th>');
	        			}
	        		}
	        	}
	        	picker.widget.find('.datepicker-days thead').append(html);
	        },
	
	        fillMonths = function () {
	        	moment.locale(picker.options.language);
	        	var html = '', i, monthsShort = moment.monthsShort();
	        	for (i = 0; i < 12; i++) {
	        		html += '<span class="month">' + monthsShort[i] + '</span>';
	        	}
	        	picker.widget.find('.datepicker-months td').append(html);
	        },
	
	        fillDate = function () {
	        	if (!picker.options.pickDate) {
	        		return;
	        	}
	        	moment.locale(picker.options.language);
	        	var year = picker.viewDate.year(),
	                month = picker.viewDate.month(),
	                startYear = picker.options.minDate.year(),
	                startMonth = picker.options.minDate.month(),
	                endYear = picker.options.maxDate.year(),
	                endMonth = picker.options.maxDate.month(),
	                currentDate,
	                prevMonth, nextMonth, html = [], row, clsName, i, days, yearCont, currentYear, months = moment.months();
	
	        	picker.widget.find('.datepicker-days').find('.disabled').removeClass('disabled');
	        	picker.widget.find('.datepicker-months').find('.disabled').removeClass('disabled');
	        	picker.widget.find('.datepicker-years').find('.disabled').removeClass('disabled');
	
	        	picker.widget.find('.datepicker-days th:eq(1)').text(
	                months[month] + ' ' + year);
	
	        	prevMonth = moment(picker.viewDate, picker.format, picker.options.useStrict).subtract(1, 'months');
	        	days = prevMonth.daysInMonth();
	        	prevMonth.date(days).startOf('week');
	        	if ((year === startYear && month <= startMonth) || year < startYear) {
	        		picker.widget.find('.datepicker-days th:eq(0)').addClass('disabled');
	        	}
	        	if ((year === endYear && month >= endMonth) || year > endYear) {
	        		picker.widget.find('.datepicker-days th:eq(2)').addClass('disabled');
	        	}
	
	        	nextMonth = moment(prevMonth).add(42, 'd');
	        	while (prevMonth.isBefore(nextMonth)) {
	        		if (prevMonth.weekday() === moment().startOf('week').weekday()) {
	        			row = $('<tr>');
	        			html.push(row);
	        			if (picker.options.calendarWeeks === true) {
	        				row.append('<td class="cw">' + prevMonth.week() + '</td>');
	        			}
	        		}
	        		clsName = '';
	        		if (prevMonth.year() < year || (prevMonth.year() === year && prevMonth.month() < month)) {
	        			clsName += ' old';
	        		} else if (prevMonth.year() > year || (prevMonth.year() === year && prevMonth.month() > month)) {
	        			clsName += ' new';
	        		}
	        		if (prevMonth.isSame(moment({ y: picker.date.year(), M: picker.date.month(), d: picker.date.date() }))) {
	        			clsName += ' active';
	        		}
	        		if (isInDisableDates(prevMonth, 'day') || !isInEnableDates(prevMonth)) {
	        			clsName += ' disabled';
	        		}
	        		if (picker.options.showToday === true) {
	        			if (prevMonth.isSame(moment(), 'day')) {
	        				clsName += ' today';
	        			}
	        		}
	        		if (picker.options.daysOfWeekDisabled) {
	        			for (i = 0; i < picker.options.daysOfWeekDisabled.length; i++) {
	        				if (prevMonth.day() === picker.options.daysOfWeekDisabled[i]) {
	        					clsName += ' disabled';
	        					break;
	        				}
	        			}
	        		}
	        		row.append('<td class="day' + clsName + '">' + prevMonth.date() + '</td>');
	
	        		currentDate = prevMonth.date();
	        		prevMonth.add(1, 'd');
	
	        		if (currentDate === prevMonth.date()) {
	        			prevMonth.add(1, 'd');
	        		}
	        	}
	        	picker.widget.find('.datepicker-days tbody').empty().append(html);
	        	currentYear = picker.date.year();
	        	months = picker.widget.find('.datepicker-months').find('th:eq(1)').text(year).end().find('span').removeClass('active');
	        	if (currentYear === year) {
	        		months.eq(picker.date.month()).addClass('active');
	        	}
	        	if (year - 1 < startYear) {
	        		picker.widget.find('.datepicker-months th:eq(0)').addClass('disabled');
	        	}
	        	if (year + 1 > endYear) {
	        		picker.widget.find('.datepicker-months th:eq(2)').addClass('disabled');
	        	}
	        	for (i = 0; i < 12; i++) {
	        		if ((year === startYear && startMonth > i) || (year < startYear)) {
	        			$(months[i]).addClass('disabled');
	        		} else if ((year === endYear && endMonth < i) || (year > endYear)) {
	        			$(months[i]).addClass('disabled');
	        		}
	        	}
	
	        	html = '';
	        	year = parseInt(year / 10, 10) * 10;
	        	yearCont = picker.widget.find('.datepicker-years').find(
	                'th:eq(1)').text(year + '-' + (year + 9)).parents('table').find('td');
	        	picker.widget.find('.datepicker-years').find('th').removeClass('disabled');
	        	if (startYear > year) {
	        		picker.widget.find('.datepicker-years').find('th:eq(0)').addClass('disabled');
	        	}
	        	if (endYear < year + 9) {
	        		picker.widget.find('.datepicker-years').find('th:eq(2)').addClass('disabled');
	        	}
	        	year -= 1;
	        	for (i = -1; i < 11; i++) {
	        		html += '<span class="year' + (i === -1 || i === 10 ? ' old' : '') + (currentYear === year ? ' active' : '') + ((year < startYear || year > endYear) ? ' disabled' : '') + '">' + year + '</span>';
	        		year += 1;
	        	}
	        	yearCont.html(html);
	        },
	
	        fillHours = function () {
	        	moment.locale(picker.options.language);
	        	var table = picker.widget.find('.timepicker .timepicker-hours table'), html = '', current, i, j;
	        	table.parent().hide();
	        	if (picker.use24hours) {
	        		current = 0;
	        		for (i = 0; i < 6; i += 1) {
	        			html += '<tr>';
	        			for (j = 0; j < 4; j += 1) {
	        				html += '<td class="hour">' + padLeft(current.toString()) + '</td>';
	        				current++;
	        			}
	        			html += '</tr>';
	        		}
	        	}
	        	else {
	        		current = 1;
	        		for (i = 0; i < 3; i += 1) {
	        			html += '<tr>';
	        			for (j = 0; j < 4; j += 1) {
	        				html += '<td class="hour">' + padLeft(current.toString()) + '</td>';
	        				current++;
	        			}
	        			html += '</tr>';
	        		}
	        	}
	        	table.html(html);
	        },
	
	        fillMinutes = function () {
	        	var table = picker.widget.find('.timepicker .timepicker-minutes table'), html = '', current = 0, i, j, step = picker.options.minuteStepping;
	        	table.parent().hide();
	        	if (step === 1) {
	        		step = 5;
	        	}
	        	for (i = 0; i < Math.ceil(60 / step / 4) ; i++) {
	        		html += '<tr>';
	        		for (j = 0; j < 4; j += 1) {
	        			if (current < 60) {
	        				html += '<td class="minute">' + padLeft(current.toString()) + '</td>';
	        				current += step;
	        			} else {
	        				html += '<td></td>';
	        			}
	        		}
	        		html += '</tr>';
	        	}
	        	table.html(html);
	        },
	
	        fillSeconds = function () {
	        	var table = picker.widget.find('.timepicker .timepicker-seconds table'), html = '', current = 0, i, j;
	        	table.parent().hide();
	        	for (i = 0; i < 3; i++) {
	        		html += '<tr>';
	        		for (j = 0; j < 4; j += 1) {
	        			html += '<td class="second">' + padLeft(current.toString()) + '</td>';
	        			current += 5;
	        		}
	        		html += '</tr>';
	        	}
	        	table.html(html);
	        },
	
	        fillTime = function () {
	        	if (!picker.date) {
	        		return;
	        	}
	        	var timeComponents = picker.widget.find('.timepicker span[data-time-component]'),
	                hour = picker.date.hours(),
	                period = picker.date.format('A');
	        	if (!picker.use24hours) {
	        		if (hour === 0) {
	        			hour = 12;
	        		} else if (hour !== 12) {
	        			hour = hour % 12;
	        		}
	        		picker.widget.find('.timepicker [data-action=togglePeriod]').text(period);
	        	}
	        	timeComponents.filter('[data-time-component=hours]').text(padLeft(hour));
	        	timeComponents.filter('[data-time-component=minutes]').text(padLeft(picker.date.minutes()));
	        	timeComponents.filter('[data-time-component=seconds]').text(padLeft(picker.date.second()));
	        },
	
	        click = function (e) {
	        	e.stopPropagation();
	        	e.preventDefault();
	        	picker.unset = false;
	        	var target = $(e.target).closest('span, td, th'), month, year, step, day, oldDate = moment(picker.date);
	        	if (target.length === 1) {
	        		if (!target.is('.disabled')) {
	        			switch (target[0].nodeName.toLowerCase()) {
	        				case 'th':
	        					switch (target[0].className) {
	        						case 'picker-switch':
	        							showMode(1);
	        							break;
	        						case 'prev':
	        						case 'next':
	        							step = dpGlobal.modes[picker.viewMode].navStep;
	        							if (target[0].className === 'prev') {
	        								step = step * -1;
	        							}
	        							picker.viewDate.add(step, dpGlobal.modes[picker.viewMode].navFnc);
	        							fillDate();
	        							break;
	        					}
	        					break;
	        				case 'span':
	        					if (target.is('.month')) {
	        						month = target.parent().find('span').index(target);
	        						picker.viewDate.month(month);
	        					} else {
	        						year = parseInt(target.text(), 10) || 0;
	        						picker.viewDate.year(year);
	        					}
	        					if (picker.viewMode === picker.minViewMode) {
	        						picker.date = moment({
	        							y: picker.viewDate.year(),
	        							M: picker.viewDate.month(),
	        							d: picker.viewDate.date(),
	        							h: picker.date.hours(),
	        							m: picker.date.minutes(),
	        							s: picker.date.seconds()
	        						});
	        						set();
	        						notifyChange(oldDate, e.type);
	        					}
	        					showMode(-1);
	        					fillDate();
	        					break;
	        				case 'td':
	        					if (target.is('.day')) {
	        						day = parseInt(target.text(), 10) || 1;
	        						month = picker.viewDate.month();
	        						year = picker.viewDate.year();
	        						if (target.is('.old')) {
	        							if (month === 0) {
	        								month = 11;
	        								year -= 1;
	        							} else {
	        								month -= 1;
	        							}
	        						} else if (target.is('.new')) {
	        							if (month === 11) {
	        								month = 0;
	        								year += 1;
	        							} else {
	        								month += 1;
	        							}
	        						}
	        						picker.date = moment({
	        							y: year,
	        							M: month,
	        							d: day,
	        							h: picker.date.hours(),
	        							m: picker.date.minutes(),
	        							s: picker.date.seconds()
	        						}
	                                );
	        						picker.viewDate = moment({
	        							y: year, M: month, d: Math.min(28, day)
	        						});
	        						fillDate();
	        						set();
	        						notifyChange(oldDate, e.type);
	        					}
	        					break;
	        			}
	        		}
	        	}
	        },
	
	        actions = {
	        	incrementHours: function () {
	        		checkDate('add', 'hours', 1);
	        	},
	
	        	incrementMinutes: function () {
	        		checkDate('add', 'minutes', picker.options.minuteStepping);
	        	},
	
	        	incrementSeconds: function () {
	        		checkDate('add', 'seconds', 1);
	        	},
	
	        	decrementHours: function () {
	        		checkDate('subtract', 'hours', 1);
	        	},
	
	        	decrementMinutes: function () {
	        		checkDate('subtract', 'minutes', picker.options.minuteStepping);
	        	},
	
	        	decrementSeconds: function () {
	        		checkDate('subtract', 'seconds', 1);
	        	},
	
	        	togglePeriod: function () {
	        		var hour = picker.date.hours();
	        		if (hour >= 12) {
	        			hour -= 12;
	        		} else {
	        			hour += 12;
	        		}
	        		picker.date.hours(hour);
	        	},
	
	        	showPicker: function () {
	        		picker.widget.find('.timepicker > div:not(.timepicker-picker)').hide();
	        		picker.widget.find('.timepicker .timepicker-picker').show();
	        	},
	
	        	showHours: function () {
	        		picker.widget.find('.timepicker .timepicker-picker').hide();
	        		picker.widget.find('.timepicker .timepicker-hours').show();
	        	},
	
	        	showMinutes: function () {
	        		picker.widget.find('.timepicker .timepicker-picker').hide();
	        		picker.widget.find('.timepicker .timepicker-minutes').show();
	        	},
	
	        	showSeconds: function () {
	        		picker.widget.find('.timepicker .timepicker-picker').hide();
	        		picker.widget.find('.timepicker .timepicker-seconds').show();
	        	},
	
	        	selectHour: function (e) {
	        		var hour = parseInt($(e.target).text(), 10);
	        		if (!picker.use24hours) {
	        			if (picker.date.hours() >= 12) {
	        				if (hour !== 12) {
	        					hour += 12;
	        				}
	        			} else {
	        				if (hour === 12) {
	        					hour = 0;
	        				}
	        			}
	        		}
	        		picker.date.hours(hour);
	        		actions.showPicker.call(picker);
	        	},
	
	        	selectMinute: function (e) {
	        		picker.date.minutes(parseInt($(e.target).text(), 10));
	        		actions.showPicker.call(picker);
	        	},
	
	        	selectSecond: function (e) {
	        		picker.date.seconds(parseInt($(e.target).text(), 10));
	        		actions.showPicker.call(picker);
	        	}
	        },
	
	        doAction = function (e) {
	        	var oldDate = moment(picker.date),
	                action = $(e.currentTarget).data('action'),
	                rv = actions[action].apply(picker, arguments);
	        	stopEvent(e);
	        	if (!picker.date) {
	        		picker.date = moment({ y: 1970 });
	        	}
	        	set();
	        	fillTime();
	        	notifyChange(oldDate, e.type);
	        	return rv;
	        },
	
	        stopEvent = function (e) {
	        	e.stopPropagation();
	        	e.preventDefault();
	        },
	
	        keydown = function (e) {
	        	if (e.keyCode === 27) { // allow escape to hide picker
	        		picker.hide();
	        	}
	        },
	
	        change = function (e) {
	        	moment.locale(picker.options.language);
	        	var input = $(e.target), oldDate = moment(picker.date), newDate = moment(input.val(), picker.format, picker.options.useStrict);
	        	if (newDate.isValid() && !isInDisableDates(newDate) && isInEnableDates(newDate)) {
	        		update();
	        		picker.setValue(newDate);
	        		notifyChange(oldDate, e.type);
	        		set();
	        	}
	        	else {
	        		picker.viewDate = oldDate;
	        		picker.unset = true;
	        		notifyChange(oldDate, e.type);
	        		notifyError(newDate);
	        	}
	        },
	
	        showMode = function (dir) {
	        	if (dir) {
	        		picker.viewMode = Math.max(picker.minViewMode, Math.min(2, picker.viewMode + dir));
	        	}
	        	picker.widget.find('.datepicker > div').hide().filter('.datepicker-' + dpGlobal.modes[picker.viewMode].clsName).show();
	        },
	
	        attachDatePickerEvents = function () {
	        	var $this, $parent, expanded, closed, collapseData;
	        	picker.widget.on('click', '.datepicker *', $.proxy(click, this)); // this handles date picker clicks
	        	picker.widget.on('click', '[data-action]', $.proxy(doAction, this)); // this handles time picker clicks
	        	picker.widget.on('mousedown', $.proxy(stopEvent, this));
	        	picker.element.on('keydown', $.proxy(keydown, this));
	        	if (picker.options.pickDate && picker.options.pickTime) {
	        		picker.widget.on('click.togglePicker', '.accordion-toggle', function (e) {
	        			e.stopPropagation();
	        			$this = $(this);
	        			$parent = $this.closest('ul');
	        			expanded = $parent.find('.in');
	        			closed = $parent.find('.collapse:not(.in)');
	
	        			if (expanded && expanded.length) {
	        				collapseData = expanded.data('collapse');
	        				if (collapseData && collapseData.transitioning) {
	        					return;
	        				}
	        				expanded.collapse('hide');
	        				closed.collapse('show');
	        				$this.find('span').toggleClass(picker.options.icons.time + ' ' + picker.options.icons.date);
	        				if (picker.component) {
	        					picker.component.find('span').toggleClass(picker.options.icons.time + ' ' + picker.options.icons.date);
	        				}
	        			}
	        		});
	        	}
	        	if (picker.isInput) {
	        		picker.element.on({
	        			'click': $.proxy(picker.show, this),
	        			'focus': $.proxy(picker.show, this),
	        			'change': $.proxy(change, this),
	        			'blur': $.proxy(picker.hide, this)
	        		});
	        	} else {
	        		picker.element.on({
	        			'change': $.proxy(change, this)
	        		}, 'input');
	        		if (picker.component) {
	        			picker.component.on('click', $.proxy(picker.show, this));
	        			picker.component.on('mousedown', $.proxy(stopEvent, this));
	        		} else {
	        			picker.element.on('click', $.proxy(picker.show, this));
	        		}
	        	}
	        	picker.widget.on('click.togglePicker', '#today-button', function (e) {
	        		if (picker.options.minuteStepping !== 1) {
	        			var mDate = moment(),
							rInterval = picker.options.minuteStepping;
	        			mDate.minutes((Math.round(mDate.minutes() / rInterval) * rInterval) % 60).seconds(0);
	        			picker.setValue(mDate.format(picker.format));
	        		} else {
	        			picker.setValue(moment().format(picker.format));
	        		}
	        		notifyChange('', e.type);
	        		set();
	        	});
	        	picker.widget.on('click.togglePicker', '#clear-button', function (e) {
	        		picker.setValue(null);
	        		notifyChange('', e.type);
	        	});
	        	picker.widget.on('click.togglePicker', '#close-button', function (e) {
	        		picker.hide();
	        	});
	        },
	
	        attachDatePickerGlobalEvents = function () {
	        	$(window).on(
	                'resize.datetimepicker' + picker.id, $.proxy(place, this));
	        	if (!picker.isInput) {
	        		$(document).on(
	                    'mousedown.datetimepicker' + picker.id, $.proxy(picker.hide, this));
	        	}
	        },
	
	        detachDatePickerEvents = function () {
	        	picker.widget.off('click', '.datepicker *', picker.click);
	        	picker.widget.off('click', '[data-action]');
	        	picker.widget.off('mousedown', picker.stopEvent);
	        	if (picker.options.pickDate && picker.options.pickTime) {
	        		picker.widget.off('click.togglePicker');
	        	}
	        	if (picker.isInput) {
	        		picker.element.off({
	        			'focus': picker.show,
	        			'change': change,
	        			'click': picker.show,
	        			'blur': picker.hide
	        		});
	        	} else {
	        		picker.element.off({
	        			'change': change
	        		}, 'input');
	        		if (picker.component) {
	        			picker.component.off('click', picker.show);
	        			picker.component.off('mousedown', picker.stopEvent);
	        		} else {
	        			picker.element.off('click', picker.show);
	        		}
	        	}
	        },
	
	        detachDatePickerGlobalEvents = function () {
	        	$(window).off('resize.datetimepicker' + picker.id);
	        	if (!picker.isInput) {
	        		$(document).off('mousedown.datetimepicker' + picker.id);
	        	}
	        },
	
	        isInFixed = function () {
	        	if (picker.element) {
	        		var parents = picker.element.parents(), inFixed = false, i;
	        		for (i = 0; i < parents.length; i++) {
	        			if ($(parents[i]).css('position') === 'fixed') {
	        				inFixed = true;
	        				break;
	        			}
	        		}
	        		return inFixed;
	        	} else {
	        		return false;
	        	}
	        },
	
	        set = function () {
	        	moment.locale(picker.options.language);
	        	var formatted = '';
	        	if (!picker.unset) {
	        		formatted = moment(picker.date).format(picker.format);
	        	}
	        	getPickerInput().val(formatted);
	        	picker.element.data('date', formatted);
	        	if (!picker.options.pickTime) {
	        		picker.hide();
	        	}
	        },
	
	        checkDate = function (direction, unit, amount) {
	        	moment.locale(picker.options.language);
	        	var newDate;
	        	if (direction === 'add') {
	        		newDate = moment(picker.date);
	        		if (newDate.hours() === 23) {
	        			newDate.add(amount, unit);
	        		}
	        		newDate.add(amount, unit);
	        	}
	        	else {
	        		newDate = moment(picker.date).subtract(amount, unit);
	        	}
	        	if (isInDisableDates(moment(newDate.subtract(amount, unit))) || isInDisableDates(newDate)) {
	        		notifyError(newDate.format(picker.format));
	        		return;
	        	}
	
	        	if (direction === 'add') {
	        		picker.date.add(amount, unit);
	        	}
	        	else {
	        		picker.date.subtract(amount, unit);
	        	}
	        	picker.unset = false;
	        },
	
	        isInDisableDates = function (date, timeUnit) {
	        	moment.locale(picker.options.language);
	        	var maxDate = moment(picker.options.maxDate, picker.format, picker.options.useStrict),
	                minDate = moment(picker.options.minDate, picker.format, picker.options.useStrict);
	
	        	if (timeUnit) {
	        		maxDate = maxDate.endOf(timeUnit);
	        		minDate = minDate.startOf(timeUnit);
	        	}
	
	        	if (date.isAfter(maxDate) || date.isBefore(minDate)) {
	        		return true;
	        	}
	        	if (picker.options.disabledDates === false) {
	        		return false;
	        	}
	        	return picker.options.disabledDates[date.format('YYYY-MM-DD')] === true;
	        },
	        isInEnableDates = function (date) {
	        	moment.locale(picker.options.language);
	        	if (picker.options.enabledDates === false) {
	        		return true;
	        	}
	        	return picker.options.enabledDates[date.format('YYYY-MM-DD')] === true;
	        },
	
	        indexGivenDates = function (givenDatesArray) {
	        	// Store given enabledDates and disabledDates as keys.
	        	// This way we can check their existence in O(1) time instead of looping through whole array.
	        	// (for example: picker.options.enabledDates['2014-02-27'] === true)
	        	var givenDatesIndexed = {}, givenDatesCount = 0, i;
	        	for (i = 0; i < givenDatesArray.length; i++) {
	        		if (moment.isMoment(givenDatesArray[i]) || givenDatesArray[i] instanceof Date) {
	        			dDate = moment(givenDatesArray[i]);
	        		} else {
	        			dDate = moment(givenDatesArray[i], picker.format, picker.options.useStrict);
	        		}
	        		if (dDate.isValid()) {
	        			givenDatesIndexed[dDate.format('YYYY-MM-DD')] = true;
	        			givenDatesCount++;
	        		}
	        	}
	        	if (givenDatesCount > 0) {
	        		return givenDatesIndexed;
	        	}
	        	return false;
	        },
	
	        padLeft = function (string) {
	        	string = string.toString();
	        	if (string.length >= 2) {
	        		return string;
	        	}
	        	return '0' + string;
	        },
	
	        getTemplate = function () {
	        	var
	                headTemplate =
	                        '<thead>' +
	                            '<tr>' +
	                                '<th class="prev">&lsaquo;</th><th colspan="' + (picker.options.calendarWeeks ? '6' : '5') + '" class="picker-switch"></th><th class="next">&rsaquo;</th>' +
	                            '</tr>' +
	                        '</thead>',
	                contTemplate =
	                        '<tbody><tr><td colspan="' + (picker.options.calendarWeeks ? '8' : '7') + '"></td></tr></tbody>',
	                template = '<div class="datepicker-days">' +
	                    '<table class="table-condensed">' + headTemplate + '<tbody></tbody></table>' +
	                '</div>' +
	                '<div class="datepicker-months">' +
	                    '<table class="table-condensed">' + headTemplate + contTemplate + '</table>' +
	                '</div>' +
	                '<div class="datepicker-years">' +
	                    '<table class="table-condensed">' + headTemplate + contTemplate + '</table>' +
	                '</div>',
	                ret = '';
	        	if (picker.options.pickDate && picker.options.pickTime) {
	        		ret = '<div class="bootstrap-datetimepicker-widget' + (picker.options.sideBySide ? ' timepicker-sbs' : '') + (picker.use24hours ? ' usetwentyfour' : '') + ' dropdown-menu" style="z-index:9999 !important;">';
	        		if (picker.options.sideBySide) {
	        			ret += '<div class="row">' +
	                       '<div class="col-sm-6 datepicker">' + template + '</div>' +
	                       '<div class="col-sm-6 timepicker">' + tpGlobal.getTemplate() + '</div>' +
	                     '</div>';
	        		} else {
	        			ret += '<ul class="list-unstyled">' +
	                        '<li' + (picker.options.collapse ? ' class="collapse in"' : '') + '>' +
	                            '<div class="datepicker">' + template + '</div>' +
	                        '</li>' +
							'<li>' +
							'<span class="btn-group" style="float:left; margin-left:4px">' +
							'<button class="btn btn-info"" id="today-button"> Now </button>' +
							'<button class="btn btn-danger" id="clear-button"> Clear </button>' +
							'</span>' +
							'<button class="btn btn-success" id="close-button" style="float:right; margin-right:4px;">Done</button>' +
							'<div style="clear:both; padding-bottom:5px;"></div>' +
							'</li>' +
	                        '<li' + (picker.options.collapse ? ' class="collapse"' : '') + '>' +
	                            '<div class="timepicker">' + tpGlobal.getTemplate() + '</div>' +
	                        '</li>' +
	                   '</ul>';
	        		}
	        		ret += '</div>';
	        		return ret;
	        	}
	        	if (picker.options.pickTime) {
	        		return (
	                    '<div class="bootstrap-datetimepicker-widget dropdown-menu">' +
	                        '<div class="timepicker">' + tpGlobal.getTemplate() + '</div>' +
	                    '</div>'
	                );
	        	}
	        	return (
	                '<div class="bootstrap-datetimepicker-widget dropdown-menu">' +
	                    '<div class="datepicker">' + template + '</div>' +
	                '</div>'
	            );
	        },
	
	        dpGlobal = {
	        	modes: [
	                {
	                	clsName: 'days',
	                	navFnc: 'month',
	                	navStep: 1
	                },
	                {
	                	clsName: 'months',
	                	navFnc: 'year',
	                	navStep: 1
	                },
	                {
	                	clsName: 'years',
	                	navFnc: 'year',
	                	navStep: 10
	                }
	        	]
	        },
	
	        tpGlobal = {
	        	hourTemplate: '<span data-action="showHours"   data-time-component="hours"   class="timepicker-hour"></span>',
	        	minuteTemplate: '<span data-action="showMinutes" data-time-component="minutes" class="timepicker-minute"></span>',
	        	secondTemplate: '<span data-action="showSeconds"  data-time-component="seconds" class="timepicker-second"></span>'
	        };
	
	    	tpGlobal.getTemplate = function () {
	    		return (
	                '<div class="timepicker-picker">' +
	                    '<table class="table-condensed">' +
	                        '<tr>' +
	                            '<td><a href="#" class="btn" data-action="incrementHours"><span class="' + picker.options.icons.up + '"></span></a></td>' +
	                            '<td class="separator"></td>' +
	                            '<td>' + (picker.options.useMinutes ? '<a href="#" class="btn" data-action="incrementMinutes"><span class="' + picker.options.icons.up + '"></span></a>' : '') + '</td>' +
	                            (picker.options.useSeconds ?
	                                '<td class="separator"></td><td><a href="#" class="btn" data-action="incrementSeconds"><span class="' + picker.options.icons.up + '"></span></a></td>' : '') +
	                            (picker.use24hours ? '' : '<td class="separator"></td>') + '<td></td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td>' + tpGlobal.hourTemplate + '</td> ' +
	                            '<td class="separator">:</td>' +
	                            '<td>' + (picker.options.useMinutes ? tpGlobal.minuteTemplate : '<span class="timepicker-minute">00</span>') + '</td> ' +
	                            (picker.options.useSeconds ?
	                                '<td class="separator">:</td><td>' + tpGlobal.secondTemplate + '</td>' : '') +
	                            (picker.use24hours ? '' : '<td class="separator"></td>' +
	                            '<td><button type="button" class="btn btn-primary" data-action="togglePeriod"></button></td>') +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td><a href="#" class="btn" data-action="decrementHours"><span class="' + picker.options.icons.down + '"></span></a></td>' +
	                            '<td class="separator"></td>' +
	                            '<td>' + (picker.options.useMinutes ? '<a href="#" class="btn" data-action="decrementMinutes"><span class="' + picker.options.icons.down + '"></span></a>' : '') + '</td>' +
	                            (picker.options.useSeconds ?
	                                '<td class="separator"></td><td><a href="#" class="btn" data-action="decrementSeconds"><span class="' + picker.options.icons.down + '"></span></a></td>' : '') +
	                            (picker.use24hours ? '' : '<td class="separator"></td>') + '<td></td>' +
	                        '</tr>' +
	                    '</table>' +
	                '</div>' +
	                '<div class="timepicker-hours" data-action="selectHour">' +
	                    '<table class="table-condensed"></table>' +
	                '</div>' +
	                '<div class="timepicker-minutes" data-action="selectMinute">' +
	                    '<table class="table-condensed"></table>' +
	                '</div>' +
	                (picker.options.useSeconds ?
	                    '<div class="timepicker-seconds" data-action="selectSecond"><table class="table-condensed"></table></div>' : '')
	            );
	    	};
	
	    	picker.destroy = function () {
	    		detachDatePickerEvents();
	    		detachDatePickerGlobalEvents();
	    		picker.widget.remove();
	    		picker.element.removeData('DateTimePicker');
	    		if (picker.component) {
	    			picker.component.removeData('DateTimePicker');
	    		}
	    	};
	
	    	picker.show = function (e) {
	    		if (getPickerInput().prop('disabled')) {
	    			return;
	    		}
	    		if (picker.options.useCurrent) {
	    			if (getPickerInput().val() === '') {
	    				if (picker.options.fillEmpty) {
	    					if (picker.options.minuteStepping !== 1) {
	    						var mDate = moment(),
					                rInterval = picker.options.minuteStepping;
	    						mDate.minutes((Math.round(mDate.minutes() / rInterval) * rInterval) % 60).seconds(0);
	    						picker.setValue(mDate.format(picker.format));
	    					} else {
	    						picker.setValue(moment().format(picker.format));
	    					}
	    					notifyChange('', e.type);
	    				}
	    			} else
	    				picker.setValue(getPickerInput().val());
	    		}
	    		// if this is a click event on the input field and picker is already open don't hide it
	    		if (e && e.type === 'click' && picker.isInput && picker.widget.hasClass('picker-open')) {
	    			return;
	    		}
	    		if (picker.widget.hasClass('picker-open')) {
	    			picker.widget.hide();
	    			picker.widget.removeClass('picker-open');
	    		}
	    		else {
	    			picker.widget.show();
	    			picker.widget.addClass('picker-open');
	    		}
	    		picker.height = picker.component ? picker.component.outerHeight() : picker.element.outerHeight();
	    		place();
	    		picker.element.trigger({
	    			type: 'dp.show',
	    			date: moment(picker.date)
	    		});
	    		attachDatePickerGlobalEvents();
	    		if (e) {
	    			stopEvent(e);
	    		}
	    	};
	
	    	picker.disable = function () {
	    		var input = getPickerInput();
	    		if (input.prop('disabled')) {
	    			return;
	    		}
	    		input.prop('disabled', true);
	    		detachDatePickerEvents();
	    	};
	
	    	picker.enable = function () {
	    		var input = getPickerInput();
	    		if (!input.prop('disabled')) {
	    			return;
	    		}
	    		input.prop('disabled', false);
	    		attachDatePickerEvents();
	    	};
	
	    	picker.hide = function () {
	    		// Ignore event if in the middle of a picker transition
	    		var collapse = picker.widget.find('.collapse'), i, collapseData;
	    		for (i = 0; i < collapse.length; i++) {
	    			collapseData = collapse.eq(i).data('collapse');
	    			if (collapseData && collapseData.transitioning) {
	    				return;
	    			}
	    		}
	    		picker.widget.hide();
	    		picker.widget.removeClass('picker-open');
	    		picker.viewMode = picker.startViewMode;
	    		showMode();
	    		picker.element.trigger({
	    			type: 'dp.hide',
	    			date: moment(picker.date)
	    		});
	    		detachDatePickerGlobalEvents();
	    	};
	
	    	picker.setValue = function (newDate) {
	    		moment.locale(picker.options.language);
	    		if (!newDate) {
	    			picker.unset = true;
	    			set();
	    		} else {
	    			picker.unset = false;
	    		}
	    		if (!moment.isMoment(newDate)) {
	    			newDate = (newDate instanceof Date) ? moment(newDate) : moment(newDate, picker.format, picker.options.useStrict);
	    		} else {
	    			newDate = newDate.locale(picker.options.language);
	    		}
	    		if (newDate.isValid()) {
	    			picker.date = newDate;
	    			set();
	    			picker.viewDate = moment({ y: picker.date.year(), M: picker.date.month() });
	    			fillDate();
	    			fillTime();
	    		}
	    		else {
	    			notifyError(newDate);
	    		}
	    	};
	
	    	picker.getDate = function () {
	    		if (picker.unset) {
	    			return null;
	    		}
	    		return moment(picker.date);
	    	};
	
	    	picker.setDate = function (date) {
	    		var oldDate = moment(picker.date);
	    		if (!date) {
	    			picker.setValue(null);
	    		} else {
	    			picker.setValue(date);
	    		}
	    		notifyChange(oldDate, 'function');
	    	};
	
	    	picker.setDisabledDates = function (dates) {
	    		picker.options.disabledDates = indexGivenDates(dates);
	    		if (picker.viewDate) {
	    			update();
	    		}
	    	};
	
	    	picker.setEnabledDates = function (dates) {
	    		picker.options.enabledDates = indexGivenDates(dates);
	    		if (picker.viewDate) {
	    			update();
	    		}
	    	};
	
	    	picker.setMaxDate = function (date) {
	    		if (date === undefined) {
	    			return;
	    		}
	    		if (moment.isMoment(date) || date instanceof Date) {
	    			picker.options.maxDate = moment(date);
	    		} else {
	    			picker.options.maxDate = moment(date, picker.format, picker.options.useStrict);
	    		}
	    		if (picker.viewDate) {
	    			update();
	    		}
	    	};
	
	    	picker.setMinDate = function (date) {
	    		if (date === undefined) {
	    			return;
	    		}
	    		if (moment.isMoment(date) || date instanceof Date) {
	    			picker.options.minDate = moment(date);
	    		} else {
	    			picker.options.minDate = moment(date, picker.format, picker.options.useStrict);
	    		}
	    		if (picker.viewDate) {
	    			update();
	    		}
	    	};
	
	    	init();
	    };
	
		$.fn.datetimepicker = function (options) {
			return this.each(function () {
				var $this = $(this),
	                data = $this.data('DateTimePicker');
				if (!data) {
					$this.data('DateTimePicker', new DateTimePicker(this, options));
				}
			});
		};
	
		$.fn.datetimepicker.defaults = {
			format: false,
			pickDate: true,
			pickTime: true,
			useMinutes: true,
			useSeconds: false,
			useCurrent: true,
			calendarWeeks: false,
			minuteStepping: 1,
			minDate: moment({ y: 1900 }),
			maxDate: moment().add(100, 'y'),
			showToday: true,
			collapse: false,
			language: moment.locale(),
			defaultDate: '',
			disabledDates: false,
			enabledDates: false,
			icons: {},
			useStrict: false,
			direction: 'auto',
			sideBySide: false,
			daysOfWeekDisabled: [],
			widgetParent: false,
			fillEmpty: false
		};
	}));


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __validation = typescript_angular_utilities_1.services.validation;
	exports.moduleName = 'rl.ui.services.componentValidator';
	exports.factoryName = 'componentValidator';
	var ComponentValidator = (function () {
	    function ComponentValidator(validationService, options) {
	        var _this = this;
	        this.$scope = options.$scope;
	        this.ngModel = options.ngModel;
	        this.form = options.form;
	        this.validator = validationService.buildCustomValidator(function (error) {
	            _this.error = error;
	        });
	        _.each(options.validators, function (customValidator) {
	            _this.validator.registerValidationHandler(customValidator);
	        });
	        this.setValidator();
	    }
	    ComponentValidator.prototype.setValidator = function () {
	        var _this = this;
	        return this.$scope.$watch(this.validator.validate.bind(this.validator), function (value) {
	            if (!_.isUndefined(_this.ngModel)) {
	                _this.ngModel.$setValidity('customValidation', value);
	            }
	            else if (!_.isUndefined(_this.form)) {
	                _this.form.$setValidity('customValidation', value, 'group');
	            }
	            else if (_.isFunction(_this.setValidity)) {
	                _this.setValidity(value);
	            }
	            if (value) {
	                _this.error = null;
	            }
	        });
	    };
	    return ComponentValidator;
	}());
	exports.ComponentValidator = ComponentValidator;
	componentValidatorFactory.$inject = [__validation.serviceName];
	function componentValidatorFactory(validationService) {
	    return {
	        getInstance: function (options) {
	            return new ComponentValidator(validationService, options);
	        },
	    };
	}
	exports.componentValidatorFactory = componentValidatorFactory;
	angular.module(exports.moduleName, [__validation.moduleName])
	    .factory(exports.factoryName, componentValidatorFactory);
	//# sourceMappingURL=componentValidator.service.js.map

/***/ },
/* 106 */
/***/ function(module, exports) {

	module.exports = "<div class=\"validation-input-group\">\r\n\t<div class=\"input-group validation-input\" ng-class=\"{ 'has-warning': !dateTime.validFormat, 'error': dateTime.ngModel.$invalid, 'required-error': dateTime.ngModel.$error.required }\">\r\n\t\t<span class=\"show-date-picker\">\r\n\t\t\t<input type=\"text\" class=\"form-control\" ng-model=\"dateTime.ngModel.$viewValue\" />\r\n\t\t\t<span class=\"input-group-btn\">\r\n\t\t\t\t<button class=\"btn btn-default\" ng-click=\"toggle()\"><i class=\"fa fa-calendar\"></i></button>\r\n\t\t\t</span>\r\n\t\t</span>\r\n\t\t<span class=\"input-group-btn\" ng-if=\"dateTime.clearButton\">\r\n\t\t\t<button type=\"button\" class=\"btn btn-default pull-left\"  ng-disabled=\"dateTime.ngModel.$viewValue | isEmpty\" ng-click=\"dateTime.onClearClick()\" >\r\n\t\t\t\t<i class=\"fa fa-times\"></i>\r\n\t\t\t</button>\r\n\t\t</span>\r\n\t\t<span class=\"error-string\" ng-hide=\"dateTime.dateTimeValidator.error | isEmpty\">{{dateTime.dateTimeValidator.error}}</span>\r\n\t</div>\r\n</div>"

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// /// <reference path='../../../typings/bootstrapDateTimePicker.d.ts' />
	var angular = __webpack_require__(1);
	var moment = __webpack_require__(69);
	exports.moduleName = 'rl.ui.components.dateTimeStatic';
	exports.directiveName = 'rlDateTimeStatic';
	exports.controllerName = 'DateTimeStaticController';
	var DateTimeStaticController = (function () {
	    function DateTimeStaticController(dateUtility) {
	        this.dateUtility = dateUtility;
	        this.displayValue = '';
	        if (this.dateValue != null && this.dateUtility.isDate(this.dateValue)) {
	            this.displayValue = moment(this.dateValue).format('MM/DD/YYYY');
	            if (this.includeTime) {
	                this.displayTimeZone = true;
	                this.displayValue = this.displayValue + moment(this.dateValue).format(' h:mm a');
	            }
	        }
	    }
	    return DateTimeStaticController;
	}());
	exports.DateTimeStaticController = DateTimeStaticController;
	dateTimeStatic.$inject = [];
	function dateTimeStatic() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(108),
	        controller: exports.controllerName,
	        controllerAs: 'view',
	        scope: {},
	        bindToController: {
	            dateValue: '=',
	            includeTime: '=?',
	            displayTimeZone: '=?'
	        }
	    };
	}
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, dateTimeStatic)
	    .controller(exports.controllerName, DateTimeStaticController);
	//# sourceMappingURL=dateTimeStatic.js.map

/***/ },
/* 108 */
/***/ function(module, exports) {

	module.exports = "<span class=\"rl-date-time-static\">{{::view.displayValue}}&nbsp;<span ng-if=\"::view.displayTimeZone\" class=\"time-zone\">EST</span></span>"

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/node/node.d.ts' />
	// /// <reference path='../../../typings/jquery/jquery.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.dialog';
	exports.directiveName = 'rlDialog';
	exports.controllerName = 'DialogController';
	var DialogController = (function () {
	    function DialogController() {
	    }
	    return DialogController;
	}());
	exports.DialogController = DialogController;
	dialog.$inject = ['$compile'];
	function dialog($compile) {
	    'use strict';
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: __webpack_require__(110),
	        controller: exports.controllerName,
	        controllerAs: 'dialog',
	        scope: {},
	        bindToController: {
	            autosave: '=',
	        },
	        link: function (scope, element, attrs, controller, transclude) {
	            controller.close = scope.$parent.$close;
	            transclude(function (clone, dialogScope) {
	                var header = clone.filter('rl-dialog-header');
	                var content = clone.filter('rl-dialog-content');
	                var footer = clone.filter('rl-dialog-footer');
	                var headerArea = element.find('.header-template');
	                headerArea.append(header);
	                var contentArea = element.find('.content-template');
	                contentArea.append(content);
	                controller.hasFooter = (footer.length > 0);
	                if (!controller.hasFooter && controller.autosave) {
	                    footer = $compile(__webpack_require__(111))(dialogScope);
	                    controller.hasFooter = true;
	                }
	                if (controller.hasFooter) {
	                    var footerArea = element.find('.footer-template');
	                    footerArea.append(footer);
	                }
	            });
	        },
	    };
	}
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, dialog)
	    .controller(exports.controllerName, DialogController);
	//# sourceMappingURL=dialog.js.map

/***/ },
/* 110 */
/***/ function(module, exports) {

	module.exports = "<div class=\"modal-header\">\r\n\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\r\n\t\t<i class=\"fa fa-close\" \" ng-click=\"dialog.close() \"></i></button>\r\n\t<div class=\"header-template \"></div>\r\n\t<div class=\"clearfix \"></div>\r\n</div>\r\n<div class=\"modal-body \">\r\n\t<div class=\"content-template \"></div>\r\n\t<div class=\"clearfix \"></div>\r\n</div>\r\n<div class=\"modal-footer \" ng-show=\"dialog.hasFooter \">\r\n\t<div class=\"footer-template \"></div>\r\n\t<div class=\"clearfix \"></div>\r\n</div>"

/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = "<button class=\"btn btn-danger\" type=\"button\" ng-click=\"$close()\"><i class=\"fa fa-times\"></i> Cancel</button>\r\n<button class=\"btn btn-success\" type=\"button\" ng-click=\"$dismiss()\"><i class=\"fa fa-check\"></i> Save</button>"

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var jquery_service_1 = __webpack_require__(113);
	var templateLoader_service_1 = __webpack_require__(114);
	exports.moduleName = 'rl.ui.components.genericContainer';
	exports.directiveName = 'rlGenericContainer';
	exports.controllerName = 'GenericContainerController';
	var __object = typescript_angular_utilities_1.services.object;
	var GenericContainerController = (function () {
	    function GenericContainerController($scope, object) {
	        var _this = this;
	        this.object = object;
	        $scope.$watch(function () { return _this.selector; }, function (newType, oldType) {
	            if (_this.object.areEqual(newType, oldType)) {
	                return;
	            }
	            var template = _this.resolveTemplate(newType);
	            _this.swapTemplates(template);
	        });
	    }
	    GenericContainerController.prototype.refresh = function () {
	        var template = this.resolveTemplate(this.selector);
	        this.swapTemplates(template);
	    };
	    GenericContainerController.prototype.resolveTemplate = function (type) {
	        if (_.has(this.templates, type)) {
	            return this.templates[type];
	        }
	        else {
	            return this.default;
	        }
	    };
	    GenericContainerController.$inject = ['$scope', __object.serviceName];
	    return GenericContainerController;
	}());
	exports.GenericContainerController = GenericContainerController;
	genericContainer.$inject = [
	    '$compile',
	    '$interpolate',
	    jquery_service_1.serviceName,
	    templateLoader_service_1.serviceName,
	    __object.serviceName,
	];
	function genericContainer($compile, $interpolate, jquery, templateLoader, object) {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: '<div id="container"></div>',
	        transclude: true,
	        controller: exports.controllerName,
	        controllerAs: 'genericContainer',
	        scope: {},
	        bindToController: {
	            selector: '=',
	            configuredTemplates: '=templates',
	            defaultTemplate: '=',
	        },
	        link: function (scope, element, attributes, controller, transclude) {
	            initDefaults(controller);
	            var container = element.find('#container');
	            var templateResult = templateLoader.loadTemplates(transclude);
	            controller.templates = _.extend(controller.templates, templateResult.templates);
	            controller.default = templateResult.default;
	            var templateScope = templateResult.transclusionScope;
	            if (!controller.default) {
	                controller.default = '<div></div>';
	            }
	            controller.refresh();
	            function initDefaults(controller) {
	                controller.default = controller.defaultTemplate;
	                controller.templates = controller.configuredTemplates ? controller.configuredTemplates : {};
	                controller.swapTemplates = swapTemplates;
	            }
	            function swapTemplates(template) {
	                var content = angular.element(template);
	                jquery.replaceContent(container, content);
	                $compile(content)(templateScope);
	            }
	        }
	    };
	}
	angular.module(exports.moduleName, [jquery_service_1.moduleName, __object.moduleName, templateLoader_service_1.moduleName])
	    .directive(exports.directiveName, genericContainer)
	    .controller(exports.controllerName, GenericContainerController);
	//# sourceMappingURL=genericContainer.js.map

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path="../../../typings/jquery/jquery.d.ts" />
	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.utilities.services.jquery';
	exports.serviceName = 'jqueryUtility';
	var JQueryUtility = (function () {
	    function JQueryUtility() {
	    }
	    JQueryUtility.prototype.replaceContent = function (contentArea, newContent) {
	        contentArea.empty();
	        contentArea.append(newContent);
	    };
	    return JQueryUtility;
	}());
	angular.module(exports.moduleName, [])
	    .service(exports.serviceName, JQueryUtility);
	//# sourceMappingURL=jquery.service.js.map

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/jquery/jquery.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	exports.moduleName = 'rl.utilities.services.templateLoader';
	exports.serviceName = 'templateLoader';
	var TemplateLoader = (function () {
	    function TemplateLoader($interpolate, templateSelectorValue, objectUtility) {
	        this.$interpolate = $interpolate;
	        this.templateSelectorValue = templateSelectorValue;
	        this.objectUtility = objectUtility;
	    }
	    TemplateLoader.prototype.loadTemplates = function (transclude) {
	        var _this = this;
	        var result = {
	            templates: {},
	            default: null,
	            transclusionScope: null,
	        };
	        // Load templates from the DOM
	        transclude(function (clone, transclusionScope) {
	            var templates = clone.filter(_this.templateSelectorValue);
	            templates.each(function (index, template) {
	                var templateElement = angular.element(template);
	                var templateHtml = templateElement.html();
	                var triggerAttribute = templateElement.attr('when-selector');
	                if (!_this.objectUtility.isNullOrWhitespace(triggerAttribute)) {
	                    var trigger = _this.$interpolate(triggerAttribute)(transclusionScope);
	                    result.templates[trigger] = templateHtml;
	                }
	                var isDefault = templateElement.attr('default');
	                if (!_.isUndefined(isDefault) && isDefault.toLowerCase() !== 'false') {
	                    result.default = templateHtml;
	                }
	            });
	            result.transclusionScope = transclusionScope;
	        });
	        return result;
	    };
	    TemplateLoader.$inject = ['$interpolate', 'templateSelectorValue', __object.serviceName];
	    return TemplateLoader;
	}());
	angular.module(exports.moduleName, [__object.moduleName])
	    .value('templateSelectorValue', 'template')
	    .service(exports.serviceName, TemplateLoader);
	//# sourceMappingURL=templateLoader.service.js.map

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	exports.moduleName = 'rl.ui.components.lazyLoad';
	exports.directiveName = 'rlLazyLoad';
	exports.controllerName = 'LazyLoadController';
	var LazyLoadController = (function () {
	    function LazyLoadController($scope) {
	        var _this = this;
	        this.init = false;
	        var unbind = $scope.$watch(function () { return _this.show; }, function (value) {
	            if (value) {
	                _this.init = true;
	                unbind();
	            }
	        });
	    }
	    LazyLoadController.$inject = ['$scope'];
	    return LazyLoadController;
	}());
	exports.LazyLoadController = LazyLoadController;
	function lazyLoad() {
	    'use strict';
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: "\n\t\t\t<div ng-if=\"lazyLoad.init\">\n\t\t\t\t<div ng-show=\"lazyLoad.show\">\n\t\t\t\t\t<div ng-transclude></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t",
	        controller: exports.controllerName,
	        controllerAs: 'lazyLoad',
	        scope: {},
	        bindToController: {
	            show: '=',
	        },
	    };
	}
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, lazyLoad)
	    .controller(exports.controllerName, LazyLoadController);
	//# sourceMappingURL=lazyLoad.js.map

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var $ = __webpack_require__(12);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __promise = typescript_angular_utilities_1.services.promise;
	exports.moduleName = 'rl.ui.components.longClickButton';
	exports.directiveName = 'rlLongClickButton';
	exports.controllerName = 'LongClickButtonController';
	var __object = typescript_angular_utilities_1.services.object;
	var LongClickButtonController = (function () {
	    function LongClickButtonController($scope, $interval, $timeout, objectUtility, promise) {
	        var _this = this;
	        this.$interval = $interval;
	        this.$timeout = $timeout;
	        this.objectUtility = objectUtility;
	        this.promise = promise;
	        this.interval = 25;
	        this.duration = 1500;
	        this.buttonText = this.text;
	        this.type = this.type != null ? this.type : 'default';
	        this.size = this.size != null ? 'btn-' + this.size : null;
	        $scope.$watch(function () { return _this.buttonText; }, function () {
	            $timeout(function () {
	                _this.width = $('#actionButton').outerWidth();
	            });
	        });
	    }
	    LongClickButtonController.prototype.startAction = function () {
	        var _this = this;
	        if (this.active || this.busy) {
	            return;
	        }
	        this.actionProgress = 0;
	        this.active = true;
	        this.actionInterval = this.$interval(function () {
	            _this.actionProgress += _this.interval;
	            if (_this.actionProgress >= _this.duration) {
	                _this.cleanup();
	                _this.buttonText = _this.text;
	                _this.trigger();
	            }
	        }, this.interval);
	    };
	    LongClickButtonController.prototype.stopAction = function () {
	        if (this.active) {
	            if (this.actionProgress < this.duration) {
	                this.warn();
	            }
	            this.cleanup();
	        }
	    };
	    LongClickButtonController.prototype.cleanup = function () {
	        this.$interval.cancel(this.actionInterval);
	        this.actionProgress = 0;
	        this.active = false;
	    };
	    LongClickButtonController.prototype.warn = function () {
	        if (this.objectUtility.isNullOrEmpty(this.onShortClickText) === false) {
	            this.buttonText = this.onShortClickText;
	        }
	    };
	    LongClickButtonController.prototype.trigger = function () {
	        var _this = this;
	        if (!this.busy) {
	            this.busy = true;
	            var result = this.action();
	            if (this.promise.isPromise(result) && _.isFunction(result.finally)) {
	                result.finally(function () {
	                    _this.busy = false;
	                });
	            }
	        }
	    };
	    LongClickButtonController.$inject = ['$scope', '$interval', '$timeout', __object.serviceName, __promise.serviceName];
	    return LongClickButtonController;
	}());
	exports.LongClickButtonController = LongClickButtonController;
	function longClickButton() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(117),
	        controller: exports.controllerName,
	        controllerAs: 'button',
	        scope: {},
	        bindToController: {
	            action: '&',
	            text: '@',
	            onShortClickText: '@',
	            icon: '@',
	            busy: '=?',
	            rightAligned: '=?',
	            type: '@',
	            ngDisabled: '=?',
	        },
	    };
	}
	angular.module(exports.moduleName, [__object.moduleName])
	    .directive(exports.directiveName, longClickButton)
	    .controller(exports.controllerName, LongClickButtonController);
	//# sourceMappingURL=longClickButton.js.map

/***/ },
/* 117 */
/***/ function(module, exports) {

	module.exports = "<div class=\"long-click-button\">\r\n\t<button id=\"actionButton\" class=\"btn btn-{{button.type}} {{button.size}}\" ng-mousedown=\"button.startAction()\" ng-mouseleave=\"button.stopAction()\" ng-mouseup=\"button.stopAction()\" ng-disabled=\"button.busy || button.ngDisabled\">\r\n\t\t<rl-busy loading=\"button.busy\" ng-if=\"button.rightAligned\"></rl-busy>\r\n\t\t<i ng-show=\"button.icon != null\" class=\"fa fa-{{button.icon}}\"></i> {{button.buttonText}}\r\n\t\t<rl-busy loading=\"button.busy\" ng-if=\"!button.rightAligned\"></rl-busy>\r\n\t</button>\r\n\t<rl-rating-bar ng-if=\"button.active\" width=\"button.width\" height=\"5\" min=\"0\" max=\"button.duration\"\r\n\t\t\t\tvalue=\"button.actionProgress\" background=\"transparent\"></rl-rating-bar>\r\n</div>"

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var jquery_service_1 = __webpack_require__(113);
	var messageLog_service_1 = __webpack_require__(119);
	var messageLog_directive_1 = __webpack_require__(120);
	var editableMessageLog_1 = __webpack_require__(122);
	var templateLoader_service_1 = __webpack_require__(114);
	__export(__webpack_require__(119));
	__export(__webpack_require__(120));
	exports.moduleName = 'rl.ui.components.messageLog';
	angular.module(exports.moduleName, [__object.moduleName, jquery_service_1.moduleName, templateLoader_service_1.moduleName])
	    .factory(messageLog_service_1.factoryName, messageLog_service_1.messageLogFactory)
	    .directive(messageLog_directive_1.directiveName, messageLog_directive_1.messageLog)
	    .controller(messageLog_directive_1.controllerName, messageLog_directive_1.MessageLogController)
	    .directive(editableMessageLog_1.directiveName, editableMessageLog_1.editableMessageLog)
	    .controller(editableMessageLog_1.controllerName, editableMessageLog_1.EditableMessageLogController);
	//# sourceMappingURL=messageLog.module.js.map

/***/ },
/* 119 */
/***/ function(module, exports) {

	'use strict';
	exports.factoryName = 'messageLog';
	exports.defaultPageSize = 10;
	var MessageLog = (function () {
	    function MessageLog() {
	        this.currentStartingMessage = 0;
	        this._hasForwardMessages = false;
	        this._hasBackwardMessages = false;
	        this._pageSize = exports.defaultPageSize;
	    }
	    Object.defineProperty(MessageLog.prototype, "pageSize", {
	        get: function () {
	            return this._pageSize;
	        },
	        /* tslint:disable */
	        set: function (value) {
	            this._pageSize = value;
	            this.updateCurrentPage();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MessageLog.prototype, "hasForwardMessages", {
	        /* tslint:enable */
	        get: function () {
	            return this._hasForwardMessages;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MessageLog.prototype, "hasBackwardMessages", {
	        get: function () {
	            return this._hasBackwardMessages;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MessageLog.prototype, "dataService", {
	        get: function () {
	            return this._dataService;
	        },
	        /* tslint:disable */
	        set: function (value) {
	            this._dataService = value;
	            if (value != null) {
	                this.visibleMessages = null;
	                this.updateCurrentPage();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /* tslint:enable */
	    MessageLog.prototype.addMessage = function (message) {
	        var _this = this;
	        return this.dataService.saveMessage(message).then(function () {
	            _this.getTopPage();
	        });
	    };
	    MessageLog.prototype.deleteMessage = function (message) {
	        var _this = this;
	        return this.dataService.deleteMessage(message).then(function () {
	            _this.refresh();
	        });
	    };
	    MessageLog.prototype.getNextPage = function () {
	        if (!this.hasForwardMessages) {
	            return;
	        }
	        this.currentStartingMessage += this.pageSize;
	        return this.updateCurrentPage();
	    };
	    MessageLog.prototype.getPreviousPage = function () {
	        if (!this.hasBackwardMessages) {
	            return;
	        }
	        this.currentStartingMessage -= this.pageSize;
	        if (this.currentStartingMessage < 0) {
	            this.currentStartingMessage = 0;
	        }
	        return this.updateCurrentPage();
	    };
	    MessageLog.prototype.getTopPage = function () {
	        this.currentStartingMessage = 0;
	        return this.updateCurrentPage();
	    };
	    MessageLog.prototype.refresh = function () {
	        return this.updateCurrentPage();
	    };
	    MessageLog.prototype.updateCurrentPage = function () {
	        var _this = this;
	        if (this.dataService == null) {
	            return null;
	        }
	        this.busy = true;
	        return this.dataService.getMessages(this.currentStartingMessage, this.pageSize).then(function (result) {
	            _this.visibleMessages = result.messages;
	            _this._hasForwardMessages = result.hasMoreMessages;
	            _this._hasBackwardMessages = (_this.currentStartingMessage > 0);
	            _this.busy = false;
	        });
	    };
	    return MessageLog;
	}());
	exports.MessageLog = MessageLog;
	function messageLogFactory() {
	    'use strict';
	    return {
	        getInstance: function () {
	            return new MessageLog();
	        },
	    };
	}
	exports.messageLogFactory = messageLogFactory;
	//# sourceMappingURL=messageLog.service.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var jquery_service_1 = __webpack_require__(113);
	var messageLog_service_1 = __webpack_require__(119);
	var templateLoader_service_1 = __webpack_require__(114);
	exports.directiveName = 'rlMessageLog';
	exports.controllerName = 'MessageLogController';
	var MessageLogController = (function () {
	    function MessageLogController($scope, messageLogFactory) {
	        var _this = this;
	        this.messageLog = this.messageLogBinding || messageLogFactory.getInstance();
	        $scope.$watch(function () { return _this.messageLog.visibleMessages; }, function (value) {
	            _this.messages = value;
	        });
	        $scope.$watch(function () { return _this.messageLog.hasForwardMessages; }, function (value) {
	            _this.hasNextPage = value;
	        });
	        $scope.$watch(function () { return _this.messageLog.hasBackwardMessages; }, function (value) {
	            _this.hasPreviousPage = value;
	        });
	        $scope.$watch(function () { return _this.messageLog.busy; }, function (value) {
	            if (!value) {
	                _this.loading = false;
	                _this.loadingInitial = false;
	            }
	            else {
	                _this.loading = true;
	            }
	        });
	        $scope.$watch(function () { return _this.service; }, function (service) {
	            _this.messageLog.dataService = service;
	            _this.loadingInitial = true;
	        });
	        this.messageLog.pageSize = this.pageSize != null ? this.pageSize : 8;
	    }
	    MessageLogController.prototype.getEntrySelector = function (entry) {
	        if (_.isString(this.selector)) {
	            return entry[this.selector];
	        }
	        else if (_.isFunction(this.selector)) {
	            return this.selector(entry);
	        }
	    };
	    MessageLogController.prototype.getOlder = function () {
	        return this.messageLog.getNextPage();
	    };
	    MessageLogController.prototype.getTop = function () {
	        return this.messageLog.getTopPage();
	    };
	    MessageLogController.prototype.canDeleteEntry = function (entry) {
	        return this.canDelete && (this.currentUser == null || this.currentUser.id == entry.createdBy.id);
	    };
	    MessageLogController.$inject = ['$scope', messageLog_service_1.factoryName];
	    return MessageLogController;
	}());
	exports.MessageLogController = MessageLogController;
	messageLog.$inject = [
	    '$interpolate',
	    jquery_service_1.serviceName,
	    templateLoader_service_1.serviceName,
	    __object.serviceName,
	];
	function messageLog($interpolate, jquery, templateLoader, object) {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(121),
	        transclude: true,
	        controller: exports.controllerName,
	        controllerAs: 'log',
	        scope: {
	            messageData: "=",
	        },
	        bindToController: {
	            service: '=',
	            selector: '=',
	            pageSize: '=',
	            messageLogBinding: '=messageLog',
	            messageAs: "@",
	            currentUser: '=?',
	            canDelete: '=?',
	        },
	        link: function (scope, element, attributes, controller, transclude) {
	            controller.templates = templateLoader.loadTemplates(transclude).templates;
	        }
	    };
	}
	exports.messageLog = messageLog;
	//# sourceMappingURL=messageLog.directive.js.map

/***/ },
/* 121 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n\t<rl-busy loading=\"log.loadingInitial\" size=\"2x\"></rl-busy>\r\n\t<div class=\"content-group\" ng-repeat=\"entry in log.messages\" rl-alias=\"entry as {{log.messageAs}}\">\r\n\t\t<rl-generic-container selector=\"log.getEntrySelector(entry)\" templates=\"log.templates\">\r\n\t\t\t<template default>\r\n\t\t\t\t<div class=\"message-body\">\r\n\t\t\t\t\t<div class=\"message-content\">\r\n\t\t\t\t\t\t<div ng-bind-html=\"entry.message\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<span class=\"message-button\" ng-if=\"log.canDeleteEntry(entry)\">\r\n\t\t\t\t\t\t<rl-button-async type=\"message-delete-button flat\" action=\"log.messageLog.deleteMessage(entry)\" size=\"xs\"><i class=\"fa fa-remove\"></i></rl-button-async>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"message-byline\">\r\n\t\t\t\t\t<div class=\"byline\">{{entry.createdBy.name}}</div>\r\n\t\t\t\t\t<div class=\"byline\">{{entry.createdDate | date:'short'}} UTC</div>\r\n\t\t\t\t</div>\r\n\t\t\t</template>\r\n\t\t</rl-generic-container>\r\n\t</div>\r\n\t<div class=\"content-group\" ng-if=\"(log.messages | isEmpty) && !log.loadingInitial\">No existing messages</div>\r\n\t<div class=\"row\">\r\n\t\t<div class=\"col-xs-12\">\r\n\t\t\t<div class=\"text-center\">\r\n\t\t\t\t<rl-button-async action=\"log.getTop()\" ng-disabled=\"log.loading\" button-right-aligned=\"true\">\r\n\t\t\t\t\t<span ng-show=\"log.hasPreviousPage\">Top <i class=\"fa fa-caret-up\"></i></span>\r\n\t\t\t\t\t<span ng-hide=\"log.hasPreviousPage\"><i class=\"fa fa-refresh\"></i> Refresh</span>\r\n\t\t\t\t</rl-button-async>\r\n\t\t\t\t<rl-button-async ng-disabled=\"log.hasNextPage == false || log.loading\" action=\"log.getOlder()\">\r\n\t\t\t\t\tOlder <i class=\"fa fa-caret-right\"></i>\r\n\t\t\t\t</rl-button-async>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var messageLog_service_1 = __webpack_require__(119);
	exports.directiveName = 'rlEditableMessageLog';
	exports.controllerName = 'EditableMessageLogController';
	var __object = typescript_angular_utilities_1.services.object;
	;
	var EditableMessageLogController = (function () {
	    function EditableMessageLogController($scope, messageLogFactory, object) {
	        var _this = this;
	        this.object = object;
	        this.messageLogService = messageLogFactory.getInstance();
	        $scope.$watch(function () { return _this.messageLogService.busy; }, function (value) {
	            if (value === false) {
	                _this.busy = false;
	                _this.savingMessage = false;
	            }
	            else {
	                _this.busy = true;
	            }
	        });
	    }
	    EditableMessageLogController.prototype.add = function () {
	        if (this.object.isNullOrWhitespace(this.newMessage)) {
	            return null;
	        }
	        this.savingMessage = true;
	        var message = this.newMessage;
	        this.newMessage = '';
	        return this.messageLogService.addMessage({ message: message });
	    };
	    EditableMessageLogController.$inject = ['$scope', messageLog_service_1.factoryName, __object.serviceName];
	    return EditableMessageLogController;
	}());
	exports.EditableMessageLogController = EditableMessageLogController;
	function editableMessageLog() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "\n\t\t\t<form ng-submit=\"log.add()\">\n\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t<input type=\"text\" class=\"form-control\" ng-model=\"log.newMessage\" placeholder=\"Enter log message\" />\n\t\t\t\t\t<span class=\"input-group-btn\">\n\t\t\t\t\t\t<button class=\"btn btn-default\" type=\"submit\" ng-disabled=\"log.busy\">\n\t\t\t\t\t\t\t<rl-busy loading=\"log.savingMessage\"></rl-busy> Add\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"message-log\">\n\t\t\t\t\t<rl-message-log service=\"log.service\" page-size=\"log.pageSize\" message-log=\"log.messageLogService\"\n\t\t\t\t\t\t\t\t\tcurrent-user=\"log.currentUser\" can-delete=\"log.canDelete\"></rl-message-log>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t",
	        controller: exports.controllerName,
	        controllerAs: 'log',
	        scope: {},
	        bindToController: {
	            service: '=',
	            pageSize: '=',
	            currentUser: '=?',
	            canDelete: '=?',
	        },
	    };
	}
	exports.editableMessageLog = editableMessageLog;
	//# sourceMappingURL=editableMessageLog.js.map

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	exports.moduleName = 'rl.ui.components.multiStepIndicator';
	exports.directiveName = 'rlMultiStepIndicator';
	exports.controllerName = 'MultiStepIndicatorController';
	var __object = typescript_angular_utilities_1.services.object;
	var MultiStepIndicatorController = (function () {
	    function MultiStepIndicatorController($state, $q, object) {
	        this.$state = $state;
	        this.$q = $q;
	        this.object = object;
	        this.configureSteps();
	    }
	    MultiStepIndicatorController.prototype.onClick = function (step) {
	        if (!this.anyLoading()) {
	            step.loading = true;
	            this.$q.when(step.onClick()).then(function () {
	                step.loading = false;
	            });
	        }
	    };
	    MultiStepIndicatorController.prototype.anyLoading = function () {
	        return _.some(this.steps, function (step) {
	            return step.loading;
	        });
	    };
	    MultiStepIndicatorController.prototype.configureSteps = function () {
	        var _this = this;
	        _.each(this.steps, function (step) {
	            step.hasCount = _.isFunction(step.count);
	            step.getCompleted = function () { return _this.getIsCompleted(step); };
	            step.getValid = function () { return _this.getIsValid(step); };
	            if (!_.isFunction(step.onClick)) {
	                if (_this.object.isNullOrWhitespace(step.stateName)) {
	                    step.inactive = true;
	                }
	                else {
	                    step.onClick = function () { return _this.redirectToState(step); };
	                    if (_this.$state.includes(step.stateName)) {
	                        step.isCurrent = true;
	                    }
	                }
	            }
	        });
	    };
	    MultiStepIndicatorController.prototype.redirectToState = function (step) {
	        var _this = this;
	        return this.$state.go(step.stateName).then(function () {
	            _this.clearCurrentState();
	            step.isCurrent = true;
	        });
	    };
	    MultiStepIndicatorController.prototype.clearCurrentState = function () {
	        _.each(this.steps, function (step) {
	            step.isCurrent = false;
	        });
	    };
	    MultiStepIndicatorController.prototype.getIsCompleted = function (step) {
	        return _.isFunction(step.isCompleted)
	            ? step.isCompleted()
	            : step.isCompleted;
	    };
	    MultiStepIndicatorController.prototype.setIsCompleted = function (step, isCompleted) {
	        if (!_.isFunction(step.isCompleted)) {
	            step.isCompleted = isCompleted;
	        }
	    };
	    MultiStepIndicatorController.prototype.getIsValid = function (step) {
	        if (_.isFunction(step.isValid)) {
	            return step.isValid();
	        }
	        else if (!_.isUndefined(step.isValid != null)) {
	            return step.isValid;
	        }
	        else {
	            return true;
	        }
	    };
	    MultiStepIndicatorController.$inject = ['$state', '$q', __object.serviceName];
	    return MultiStepIndicatorController;
	}());
	exports.MultiStepIndicatorController = MultiStepIndicatorController;
	function multiStepIndicator() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(124),
	        controller: exports.controllerName,
	        controllerAs: 'breadcrumb',
	        scope: {},
	        bindToController: {
	            steps: '=',
	            numbered: '=',
	        },
	    };
	}
	angular.module(exports.moduleName, [__object.moduleName])
	    .directive(exports.directiveName, multiStepIndicator)
	    .controller(exports.controllerName, MultiStepIndicatorController);
	//# sourceMappingURL=multiStepIndicator.js.map

/***/ },
/* 124 */
/***/ function(module, exports) {

	module.exports = "<div class=\"multi-step checked\" ng-class=\"{ 'numbered': breadcrumb.numbered }\">\r\n\t<ol>\r\n\t\t<li ng-repeat=\"step in breadcrumb.steps\" ng-click=\"breadcrumb.onClick(step)\"\r\n\t\t\tng-class=\"{ 'completed': step.getCompleted(), 'current': step.isCurrent, 'active': !step.inactive && !breadcrumb.anyLoading() }\">\r\n\t\t\t<div class=\"wrap\">\r\n\t\t\t\t<p class=\"badge\" ng-show=\"step.hasCount\">{{step.count()}}</p>\r\n\t\t\t\t<p class=\"error\" ng-if=\"!step.getValid()\"></p>\r\n\t\t\t\t<p class=\"title\">{{step.title}} <rl-busy loading=\"step.loading\"></rl-busy></p>\r\n\t\t\t\t<p class=\"subtitle\">{{step.subtitle}}</p>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t</ol>\r\n</div>"

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var radioGroup_1 = __webpack_require__(126);
	exports.radioGroupDirectiveName = radioGroup_1.directiveName;
	exports.radioGroup = radioGroup_1.radioGroup;
	exports.radioGroupControllerName = radioGroup_1.controllerName;
	exports.RadioGroupController = radioGroup_1.RadioGroupController;
	var radio_1 = __webpack_require__(127);
	exports.radioDirectiveName = radio_1.directiveName;
	exports.radio = radio_1.radio;
	exports.radioControllerName = radio_1.controllerName;
	exports.RadioController = radio_1.RadioController;
	exports.moduleName = 'rl21.components.radio';
	angular.module(exports.moduleName, [__object.moduleName])
	    .directive(radioGroup_1.directiveName, radioGroup_1.radioGroup)
	    .controller(radioGroup_1.controllerName, radioGroup_1.RadioGroupController)
	    .directive(radio_1.directiveName, radio_1.radio)
	    .controller(radio_1.controllerName, radio_1.RadioController);
	//# sourceMappingURL=radio.module.js.map

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	exports.directiveName = 'rlRadioGroup';
	exports.controllerName = 'RadioGroupController';
	var RadioGroup = (function () {
	    function RadioGroup($scope, ngModel, name) {
	        var _this = this;
	        this.name = name;
	        $scope.$watch(function () { return ngModel.$viewValue; }, function (value) {
	            _this.selection = value;
	        });
	        $scope.$watch(function () { return _this.selection; }, function (value) {
	            ngModel.$setViewValue(value);
	        });
	    }
	    return RadioGroup;
	}());
	exports.RadioGroup = RadioGroup;
	var RadioGroupController = (function () {
	    function RadioGroupController($scope, $attrs, $element, object) {
	        var name;
	        if (!object.isNullOrWhitespace($attrs.rlRadioGroup)) {
	            name = $attrs.rlRadioGroup;
	        }
	        else if (!object.isNullOrWhitespace($attrs.name)) {
	            name = $attrs.name;
	        }
	        else {
	            name = 'RadioGroup' + this.getNextId();
	        }
	        var ngModel = $element.controller('ngModel');
	        this.group = new RadioGroup($scope, ngModel, name);
	    }
	    RadioGroupController.prototype.registerButton = function () {
	        return this.group;
	    };
	    RadioGroupController.prototype.getNextId = function () {
	        var nextId = RadioGroupController.nextId.toString();
	        RadioGroupController.nextId++;
	        return nextId;
	    };
	    RadioGroupController.nextId = 1;
	    RadioGroupController.$inject = ['$scope', '$attrs', '$element', __object.serviceName];
	    return RadioGroupController;
	}());
	exports.RadioGroupController = RadioGroupController;
	function radioGroup() {
	    'use strict';
	    return {
	        restrict: 'AE',
	        require: 'ngModel',
	        controller: exports.controllerName,
	    };
	}
	exports.radioGroup = radioGroup;
	//# sourceMappingURL=radioGroup.js.map

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var radioGroup_1 = __webpack_require__(126);
	exports.directiveName = 'rlRadio';
	exports.controllerName = 'RadioController';
	var RadioController = (function () {
	    function RadioController($scope, $element) {
	        var radioGroupController = $element.controller('rlRadioGroup');
	        if (radioGroupController != null) {
	            this.radioGroup = radioGroupController.registerButton();
	        }
	        else {
	            var ngModel = $element.controller('ngModel');
	            this.radioGroup = new radioGroup_1.RadioGroup($scope, ngModel);
	        }
	    }
	    RadioController.$inject = ['$scope', '$element'];
	    return RadioController;
	}());
	exports.RadioController = RadioController;
	function radio() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: ['?^^rlRadioGroup', '?ngModel'],
	        transclude: true,
	        template: "\n\t\t\t<label>\n\t\t\t\t<input id=\"radio\" type=\"radio\" name=\"{{radio.radioGroup.name}}\" ng-model=\"radio.radioGroup.selection\" ng-value=\"radio.value\" />\n\t\t\t\t<span ng-transclude></div>\n\t\t\t</label>\n\t\t",
	        controller: exports.controllerName,
	        controllerAs: 'radio',
	        scope: true,
	        bindToController: {
	            value: '=',
	        },
	    };
	}
	exports.radio = radio;
	//# sourceMappingURL=radio.js.map

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var ratingBarBackgrounds_service_1 = __webpack_require__(129);
	var ratingBarClass_service_1 = __webpack_require__(130);
	exports.moduleName = 'rl.ui.components.ratingBar';
	exports.directiveName = 'rlRatingBar';
	exports.controllerName = 'RatingBarController';
	var RatingBarController = (function () {
	    function RatingBarController($scope) {
	        var _this = this;
	        this.$scope = $scope;
	        var ratingBarBackgrounds = new ratingBarBackgrounds_service_1.RatingBarBackgroundService;
	        this.ratingBarClass = new ratingBarClass_service_1.RatingBarClassService;
	        this.backgroundClass = ratingBarBackgrounds.getBackground(this.background);
	        if (this.value == null) {
	            this.value = 0;
	        }
	        $scope.$watch(function () { return _this.value; }, function (newValue) {
	            _this.updateValue(newValue);
	        });
	        $scope.$watch(function () { return _this.totalWidth; }, function (newWidth) {
	            _this.dimensions = {
	                width: newWidth + 2,
	                height: _this.height + 2,
	            };
	            _this.updateValue(_this.value);
	        });
	    }
	    RatingBarController.prototype.updateValue = function (newValue) {
	        var confidenceScore = (newValue - this.min) / (this.max - this.min);
	        this.barClass = this.ratingBarClass.getClass(confidenceScore);
	        this.width = Math.round(confidenceScore * this.totalWidth);
	    };
	    RatingBarController.$inject = ['$scope'];
	    return RatingBarController;
	}());
	exports.RatingBarController = RatingBarController;
	function ratingBar() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "\n\t\t\t<div class=\"rating-bar\">\n\t\t\t\t<div class=\"{{ratingBar.backgroundClass}}\" ng-class=\"{ empty: ratingBar.value == min }\" ng-style=\"ratingBar.dimensions\">\n\t\t\t\t\t<div ng-class=\"ratingBar.barClass\" ng-style=\"{ width: ratingBar.width, height: ratingBar.height }\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t",
	        controller: exports.controllerName,
	        controllerAs: 'ratingBar',
	        scope: {},
	        bindToController: {
	            totalWidth: '=width',
	            height: '=',
	            value: '=',
	            min: '=',
	            max: '=',
	            background: '=',
	        },
	    };
	}
	exports.ratingBar = ratingBar;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, ratingBar)
	    .controller(exports.controllerName, RatingBarController);
	//# sourceMappingURL=ratingBar.js.map

/***/ },
/* 129 */
/***/ function(module, exports) {

	'use strict';
	var RatingBarBackgroundService = (function () {
	    function RatingBarBackgroundService() {
	        this.standard = {
	            type: 'standard',
	            class: 'background',
	        };
	        this.dark = {
	            type: 'dark',
	            class: 'background-dark',
	        };
	        this.transparent = {
	            type: 'transparent',
	            class: 'background-transparent',
	        };
	    }
	    RatingBarBackgroundService.prototype.getBackground = function (type) {
	        if (type === this.dark.type) {
	            return this.dark.class;
	        }
	        else if (type === this.transparent.type) {
	            return this.transparent.class;
	        }
	        else {
	            return this.standard.class;
	        }
	    };
	    return RatingBarBackgroundService;
	}());
	exports.RatingBarBackgroundService = RatingBarBackgroundService;
	//# sourceMappingURL=ratingBarBackgrounds.service.js.map

/***/ },
/* 130 */
/***/ function(module, exports) {

	'use strict';
	var RatingBarClassService = (function () {
	    function RatingBarClassService() {
	    }
	    RatingBarClassService.prototype.getClass = function (confidence) {
	        if (confidence >= 0.8) {
	            return 'very-high';
	        }
	        else if (confidence >= 0.6) {
	            return 'high';
	        }
	        else if (confidence >= 0.4) {
	            return 'medium';
	        }
	        else if (confidence >= 0.2) {
	            return 'low';
	        }
	        else {
	            return 'very-low';
	        }
	    };
	    return RatingBarClassService;
	}());
	exports.RatingBarClassService = RatingBarClassService;
	//# sourceMappingURL=ratingBarClass.service.js.map

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	__webpack_require__(132);
	__webpack_require__(134);
	__webpack_require__(135);
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var richTextEditor_config_1 = __webpack_require__(137);
	var headerButton_1 = __webpack_require__(138);
	var paragraphButton_1 = __webpack_require__(139);
	var externalProviderName = richTextEditor_config_1.providerName + 'Provider';
	exports.providerName = externalProviderName;
	exports.moduleName = 'rl.ui.components.richTextEditor';
	exports.directiveName = 'rlRichTextEditor';
	exports.controllerName = 'RichTextEditorController';
	var RichTextEditorController = (function () {
	    function RichTextEditorController(object, provider) {
	        this.toolbar = 'h1, paragraph, bold, italic, underline, list1, list2, indent, outdent';
	        if (!object.isNullOrEmpty(this.customButtons)) {
	            this.toolbar += ', ' + this.customButtons;
	        }
	    }
	    RichTextEditorController.$inject = [__object.serviceName, richTextEditor_config_1.providerName];
	    return RichTextEditorController;
	}());
	exports.RichTextEditorController = RichTextEditorController;
	function richTextEditor() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(140),
	        controller: exports.controllerName,
	        controllerAs: 'editor',
	        scope: {},
	        bindToController: {
	            ngModel: '=',
	            customButtons: '=',
	            ngDisabled: '=',
	        },
	    };
	}
	exports.richTextEditor = richTextEditor;
	angular.module(exports.moduleName, ['ngWig', __object.moduleName])
	    .directive(exports.directiveName, richTextEditor)
	    .controller(exports.controllerName, RichTextEditorController)
	    .directive(headerButton_1.headerButtonDirectiveName, headerButton_1.headerButton)
	    .directive(paragraphButton_1.paragraphButtonDirectiveName, paragraphButton_1.paragraphButton)
	    .provider(richTextEditor_config_1.providerName, richTextEditor_config_1.richTextEditorProvider);
	//# sourceMappingURL=richTextEditor.js.map

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(133);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../css-loader/index.js!./ng-wig.css", function() {
				var newContent = require("!!./../../../css-loader/index.js!./ng-wig.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	exports.push([module.id, "@import url(https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css);", ""]);
	
	// module
	exports.push([module.id, "/* -------- NG-WIG -------- */\n/**\n *\n *  RESET BOX MODEL\n *\n */\n.ng-wig,\n[class^=\"nw-\"] {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n\n/**\n *   main wrapper for the editor\n *\n *  .ng-wig\n *\n */\n.ng-wig {\n  display: block;\n  padding: 0;\n  margin: 0;\n}\n\n\n/**\n *  styling for toolbar and its items\n *\n *  .nw-toolbar\n *    &__item\n *\n */\n.nw-toolbar {\n  display: block;\n  margin: 0 !important;\n  padding: 0 !important;\n  list-style: none !important;\n  font-size: 12px;\n  color: #6B7277;\n\n  background: -webkit-linear-gradient(90deg, #ffffff 0%, #f9f9f9 100%);\n  background:    -moz-linear-gradient(90deg, #ffffff 0%, #f9f9f9 100%);\n  background:         linear-gradient(180deg, #ffffff 0%, #f9f9f9 100%);\n  border: 1px solid #CCCCCC;\n  border-radius: 3px 3px 0 0;\n}\n\n.nw-toolbar__item {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0;\n\n  border-right: 1px solid #DEDEDE;\n}\n\n.nw-toolbar label {\n  line-height: 30px;\n  display: inline-block;\n  padding: 0 6px 0 3px;\n}\n\n.nw-toolbar input[type=checkbox] {\n  vertical-align: -3px;\n  margin-right: -1px;\n}\n\n/**\n *  styling for the editor part: source code (original textarea) and resulting div\n *\n *  .nw-editor\n *    &__src\n *    &__res\n *\n */\n.nw-editor {\n  display: table;\n  /* Default when height is not set */\n  height: 300px;\n  background: #fff;\n  cursor: text;\n  width:100%;\n}\n\n.nw-editor-container {\n  border: 1px solid #CCCCCC;\n  border-top: none;\n  border-radius: 0 0 3px 3px;\n  position: relative;\n}\n\n.nw-editor__res {\n  min-height: 100%;\n  padding: 0 8px;\n  display: table-cell;\n}\n\n.nw-editor__src,\n.nw-editor__res {\n  width: 100%;\n  outline: none;\n  box-sizing: border-box;\n  border: none;\n  margin: 0;\n}\n\n.nw-editor__src-container {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.nw-editor__src {\n  height: 100%;\n  resize: none;\n  padding: 0 8px;\n}\n\n.nw-editor--fixed .nw-editor {\n  display:block;\n  overflow-y: auto;\n}\n\n.nw-editor--fixed .nw-editor__res {\n  padding: 1px 8px;\n  display:block;\n}\n\n.nw-invisible {\n  visibility: hidden;\n}\n\n.nw-editor--fixed .nw-invisible {\n  display: none;\n}\n\n.nw-editor.nw-disabled {\n\tcursor: default;\n}\n\n/**\n *  styling for toolbar button, has two modifiers: active and type of icon for background\n *\n *  .nw-button\n *    &--active\n *    &--{button type}\n *\n */\n.nw-button {\n  -webkit-appearance: none;\n  -moz-appearance:    none;\n  appearance:         none;\n\n  display: block;\n  width: 30px;\n  height: 30px;\n  margin: 0;\n  padding: 0;\n  opacity: 0.5;\n\n  background-color: transparent;\n  background-position: center center;\n  background-repeat: no-repeat;\n  border: none;\n  border-radius: 2px;\n\n  font-size: 0;\n\n  cursor: pointer;\n}\n\n.nw-button:before {\n  font-size: 12px;\n  font-family: FontAwesome;\n}\n\n.nw-button.bold:before {\n  content: '\\F032';\n}\n\n.nw-button.italic:before {\n  content: '\\F033';\n}\n\n.nw-button.list-ul:before {\n  content: '\\F0CA';\n}\n\n.nw-button.list-ol:before {\n  content: '\\F0CB';\n}\n\n.nw-button.link:before {\n  content: '\\F0C1';\n}\n\n.nw-button.font-color:before {\n  content: '\\F031';\n}\n\n.nw-button.nw-button--source:before {\n  content: '\\F040';\n}\n\n.nw-button:focus {\n  outline: none;\n}\n\n.nw-button:hover,\n.nw-button.nw-button--active {\n  opacity: 1\n}\n\n.nw-button--active {\n  background-color: #EEEEEE;\n}\n\n.nw-button:disabled {\n  cursor: default;\n}\n.nw-button:disabled:hover {\n  opacity: 0.5;\n}\n\n/**\n *  styling & formatting of content inside contenteditable div\n *\n *  .nw-content\n *\n */\n.nw-content {\n  padding: 12px;\n  margin: 0;\n\n  font-family: sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n}\n\n.nw-select {\n  height: 30px;\n  padding: 6px;\n  color: #555;\n  background-color: inherit;\n  border: 0;\n}\n\n.nw-select:disabled {\n\topacity: 0.5;\n}\n\n.nw-select:focus { outline: none; }\n\n", ""]);
	
	// exports


/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * version: 2.3.4
	 */
	angular.module('ngWig', ['ngwig-app-templates']);
	
	angular.module('ngWig')
	  .directive('ngWig', ["$window", "$document", "ngWigToolbar", function ($window, $document, ngWigToolbar) {
	
	    return {
	      scope: {
	        content: '=ngWig',
	        onPaste: '='
	      },
	      restrict: 'A',
	      replace: true,
	      templateUrl: 'ng-wig/views/ng-wig.html',
	      link: function (scope, element, attrs) {
	        scope.formElementName = attrs.name;
	        element.removeAttr('name');
	
	        scope.isRequired = !!attrs.required;
	        scope.isSourceModeAllowed = Object.keys(attrs).indexOf('sourceModeAllowed') !== -1 ? true : false;
	        scope.editMode = false;
	        scope.toolbarButtons = ngWigToolbar.getToolbarButtons(attrs.buttons && string2array(attrs.buttons));
	
	        function string2array(keysString){
	          return keysString.split(',').map(Function.prototype.call, String.prototype.trim);
	        }
	
	        scope.toggleEditMode = function () {
	          scope.editMode = !scope.editMode;
	
	          if ($window.getSelection().removeAllRanges) {
	            $window.getSelection().removeAllRanges();
	          }
	        };
	
	        scope.execCommand = function (command, options) {
	          if(scope.editMode ) return false;
	
	          if (command === 'createlink') {
	            options = prompt('Please enter the URL', 'http://');
	            if(!options) {
	              return;
	            }
	          }
	          scope.$broadcast('execCommand', {command: command, options: options});
	        };
			
			if (attrs.ngDisabled != null || attrs.disabled != null) {
				scope.$watch(function() { return !!attrs.disabled; }, function(isDisabled) {
					scope.isDisabled = isDisabled;
					scope.$broadcast('nw-disabled', isDisabled);
				});	
			}
	      }
	    }
	  }]
	);
	
	
	angular.module('ngWig')
	  .directive('ngWigEditable', ["$document", function ($document) {
	    function init(scope, $element, attrs, ngModelController) {
	
	      $element.attr('contenteditable', true);
	
	      //model --> view
	      ngModelController.$render = function () {
	        $element.html(ngModelController.$viewValue || '');
	      };
	
	      //view --> model
	      function viewToModel() {
	        ngModelController.$setViewValue($element.html());
	      }
	
	      var eventsToBind = [
	        'blur',
	        'keyup',
	        'change',
	        'focus',
	        'click'
	      ];
	
	      if (angular.isFunction(scope.onPaste)) {
	        $element.on('paste', function(e) {
	          scope.onPaste(e, $element.html()).then(function(val) {
	            $element.html(val);
	          })
	        });
	      }else{
	        eventsToBind.push('paste');
	      }
	
	      $element.bind(eventsToBind.join(' '), function() {
	        viewToModel();
	        scope.$applyAsync();
	      });
	
	      scope.isEditorActive = function () {
	        return $element[0] === $document[0].activeElement;
	      };
	
	      scope.$on('execCommand', function (event, params) {
	        $element[0].focus();
	
	        var ieStyleTextSelection = $document[0].selection,
	          command = params.command,
	          options = params.options;
	
	        if (ieStyleTextSelection) {
	          var textRange = ieStyleTextSelection.createRange();
	        }
	
	        if ($document[0].queryCommandSupported && !$document[0].queryCommandSupported(command)) {
	          throw 'The command "' + command + '" is not supported';
	        }
	
	        $document[0].execCommand(command, false, options);
	
	        if (ieStyleTextSelection) {
	          textRange.collapse(false);
	          textRange.select();
	        }
	
	        viewToModel();
	      });
		  
		  scope.$on('nw-disabled', function(event, isDisabled) {
			  $element.attr('contenteditable', !isDisabled);
		  });
	    }
	
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      replace: true,
	      link: init
	    }
	  }]
	);
	
	angular.module('ngWig')
	    .directive('ngWigPlugin', ["$compile", function ($compile) {
	        return {
	            restrict: 'E',
	            link: function(scope, element) {
	                var template = '<' + scope.button.pluginName + ' />',
	                    compiled = $compile(template)(scope);
	
	                element.replaceWith(compiled);
	            }
	        }
	    }]);
	
	angular.module('ngWig').provider('ngWigToolbar', function () {
	
	  var buttonLibrary = {
	    list1: {title: 'Unordered List', command: 'insertunorderedlist', styleClass: 'list-ul'},
	    list2: {title: 'Ordered List', command: 'insertorderedlist', styleClass: 'list-ol'},
	    bold: {title: 'Bold', command: 'bold', styleClass: 'bold'},
	    italic: {title: 'Italic', command: 'italic', styleClass: 'italic'},
	    link: {title: 'Link', command: 'createlink', styleClass: 'link'}
	  };
	
	  var defaultButtonsList = ['list1', 'list2', 'bold', 'italic', 'link'];
	
	  var isButtonActive = function () {
	    return this.command && document.queryCommandState(this.command);
	  };
	
	  this.setButtons = function(buttons) {
	    if(!angular.isArray(buttons)) {
	      throw 'Argument "buttons" should be an array';
	    }
	
	    defaultButtonsList = buttons;
	  };
	
	  this.addStandardButton = function (name, title, command, styleClass) {
	    if(!name || !title || !command) {
	      throw 'Arguments "name", "title" and "command" are required';
	    }
	
	    styleClass = styleClass || '';
	    buttonLibrary[name] = {title: title, command: command, styleClass: styleClass}
	    defaultButtonsList.push(name);
	  };
	
	  this.addCustomButton = function (name, pluginName) {
	    if(!name || !pluginName) {
	      throw 'Arguments "name" and "pluginName" are required';
	    }
	
	    buttonLibrary[name] = {pluginName: pluginName, isComplex: true};
	    defaultButtonsList.push(name);
	  };
	
	  this.$get = function () {
	    return {
	      getToolbarButtons: function(list) {
	        var toolbarButtons = [];
	        (list || defaultButtonsList).forEach(function(buttonKey) {
	          if(!buttonLibrary[buttonKey]) {
	            throw 'There is no "' + buttonKey + '" in your library. Possible variants: ' + Object.keys(buttonLibrary);
	          }
	
	          var button = angular.copy(buttonLibrary[buttonKey]);
	
	          if(!angular.isFunction(button.isActive)) {
	            button.isActive = isButtonActive;
	          }
	
	          toolbarButtons.push(button);
	        });
	        return toolbarButtons;
	      }
	    };
	  };
	
	
	});
	angular.module('ngWig')
	    .config(['ngWigToolbarProvider', function (ngWigToolbarProvider) {
	       ngWigToolbarProvider.addCustomButton('formats', 'nw-formats-button');
	    }])
	    .directive('nwFormatsButton', function() {
	        return {
	            restrict: 'E',
	            replace: true,
	            template: '<select class="nw-select" ng-model="format" ng-change="execCommand(\'formatblock\', format.value)" ng-options="format.name for format in formats" ng-disabled="editMode || isDisabled"></select>',
	            link: function (scope) {
	                scope.formats = [
	                    {name: 'Normal text', value: 'p'},
	                    {name: 'Header 1', value: 'h1'},
	                    {name: 'Header 2', value: 'h2'},
	                    {name: 'Header 3', value: 'h3'}
	                ];
	
	                scope.format = scope.formats[0];
	            }
	        };
	    });
	
	
	angular.module('ngwig-app-templates', ['ng-wig/views/ng-wig.html']);
	
	angular.module("ng-wig/views/ng-wig.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("ng-wig/views/ng-wig.html",
	    "<div class=\"ng-wig\">\n" +
	    "  <ul class=\"nw-toolbar\">\n" +
	    "    <li class=\"nw-toolbar__item\" ng-repeat=\"button in toolbarButtons\" >\n" +
	    "        <div ng-if=\"!button.isComplex\">\n" +
	    "          <button type=\"button\" class=\"nw-button {{button.styleClass}}\" title=\"{{button.title}}\" ng-click=\"execCommand(button.command)\" ng-class=\"{ 'nw-button--active': isEditorActive() && button.isActive() }\" ng-disabled=\"editMode || isDisabled\">\n" +
	    "            {{ button.title }}\n" +
	    "          </button>\n" +
	    "        </div>\n" +
	    "        <div ng-if=\"button.isComplex\">\n" +
	    "          <ng-wig-plugin plugin=\"{{button}}\"></ng-wig-plugin>\n" +
	    "        </div>\n" +
	    "    </li><!--\n" +
	    "    --><li class=\"nw-toolbar__item\">\n" +
	    "      <button type=\"button\" class=\"nw-button nw-button--source\" title=\"Edit HTML\" ng-class=\"{ 'nw-button--active': editMode }\" ng-show=\"isSourceModeAllowed\" ng-click=\"toggleEditMode()\" ng-disabled=\"isDisabled\">\n" +
	    "        Edit HTML\n" +
	    "      </button>\n" +
	    "    </li>\n" +
	    "  </ul>\n" +
	    "\n" +
	    "  <div class=\"nw-editor-container\">\n" +
	    "    <div class=\"nw-editor__src-container\" ng-show=\"editMode\">\n" +
	    "      <textarea ng-required=\"isRequired\" ng-disabled=\"isDisabled\" class=\"nw-editor__src\" ng-model=\"content\"></textarea>\n" +
	    "    </div>\n" +
	    "    <div class=\"nw-editor\" ng-class=\"{ 'nw-disabled': isDisabled }\">\n" +
	    "      <div name=\"{{formElementName}}\" ng-required=\"isRequired\" tabindex=\"-1\" ng-class=\"{'nw-invisible': editMode}\" class=\"nw-editor__res\" ng-model=\"content\" ng-wig-editable on-paste=\"onPaste\"></div>\n" +
	    "    </div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(136);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./editorButtons.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./editorButtons.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	
	
	// module
	exports.push([module.id, ".nw-button.header:before {\r\n  content: '\\F1DC'; /* fa-header */\r\n}\r\n\r\n.nw-button.paragraph:before {\r\n  content: '\\F1DD'; /* fa-paragraph */\r\n}", ""]);
	
	// exports


/***/ },
/* 137 */
/***/ function(module, exports) {

	'use strict';
	exports.providerName = 'richTextEditor';
	richTextEditorProvider.$inject = ['ngWigToolbarProvider'];
	function richTextEditorProvider(ngWigToolbarProvider) {
	    'use strict';
	    return {
	        addCustomButton: function (name, component) {
	            ngWigToolbarProvider.addCustomButton(name, component);
	        },
	        addStandardButton: function (name, tooltip, command, icon) {
	            ngWigToolbarProvider.addStandardButton(name, toolbar, command, 'fa-' + icon);
	        },
	        $get: function () {
	            ngWigToolbarProvider.addCustomButton('paragraph', 'rl-paragraph-button');
	            ngWigToolbarProvider.addCustomButton('h1', 'rl-header-button');
	            ngWigToolbarProvider.addStandardButton('underline', 'Underline', 'underline', 'fa-underline');
	            ngWigToolbarProvider.addStandardButton('indent', 'Indent', 'indent', 'fa-indent');
	            ngWigToolbarProvider.addStandardButton('outdent', 'Outdent', 'outdent', 'fa-outdent');
	        },
	    };
	}
	exports.richTextEditorProvider = richTextEditorProvider;
	//# sourceMappingURL=richTextEditor.config.js.map

/***/ },
/* 138 */
/***/ function(module, exports) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	exports.headerButtonDirectiveName = 'rlHeaderButton';
	function headerButton() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "\n\t\t\t<button type=\"button\" class=\"nw-button header\" ng-click=\"trigger()\" ng-disabled=\"editMode || isDisabled\" title=\"Header 1\"></button>\n\t\t",
	        link: function (scope) {
	            scope.trigger = function () {
	                scope.execCommand('formatblock', 'h1');
	            };
	        },
	    };
	}
	exports.headerButton = headerButton;
	//# sourceMappingURL=headerButton.js.map

/***/ },
/* 139 */
/***/ function(module, exports) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	exports.paragraphButtonDirectiveName = 'rlParagraphButton';
	function paragraphButton() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "\n\t\t\t<button type=\"button\" class=\"nw-button paragraph\" ng-click=\"trigger()\" ng-disabled=\"editMode || isDisabled\" title=\"paragraph\"></button>\n\t\t",
	        link: function (scope) {
	            scope.trigger = function () {
	                scope.execCommand('formatblock', 'p');
	            };
	        },
	    };
	}
	exports.paragraphButton = paragraphButton;
	//# sourceMappingURL=paragraphButton.js.map

/***/ },
/* 140 */
/***/ function(module, exports) {

	module.exports = "<textarea class=\"rich-text-editor\" ng-wig=\"editor.ngModel\" buttons=\"{{editor.toolbar}}\" ng-disabled=\"editor.ngDisabled\"></textarea>"

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	__webpack_require__(142);
	__webpack_require__(144);
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	var componentValidator_service_1 = __webpack_require__(105);
	exports.moduleName = 'rl.ui.components.select';
	exports.directiveName = 'rlSelect';
	exports.controllerName = 'SelectController';
	var SelectController = (function () {
	    function SelectController($element, $scope, $q, componentValidatorFactory, object) {
	        var _this = this;
	        this.$q = $q;
	        this.object = object;
	        this._nullOption = {
	            __isNullOption: true,
	        };
	        this.ngModel = $element.controller('ngModel');
	        if (_.isUndefined(this.options)) {
	            this.loading = true;
	            this.loadItems().then(function (options) {
	                _this.options = options;
	                _this.loading = false;
	            });
	        }
	        else {
	            this.options = this.configureOptions(this.options);
	        }
	        if (!_.isUndefined(this.validator)) {
	            this.selectValidator = componentValidatorFactory.getInstance({
	                ngModel: this.ngModel,
	                $scope: $scope,
	                validators: [this.validator],
	            });
	        }
	    }
	    Object.defineProperty(SelectController.prototype, "selection", {
	        get: function () {
	            return this.ngModel.$viewValue;
	        },
	        set: function (value) {
	            if (value.__isNullOption) {
	                this.ngModel.$setViewValue(null);
	            }
	            else {
	                this.ngModel.$setViewValue(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SelectController.prototype.getDisplayName = function (item) {
	        if (item == null) {
	            return null;
	        }
	        if (item.__isNullOption) {
	            return this.nullOption;
	        }
	        if (this.selector == null) {
	            return item;
	        }
	        return _.isFunction(this.selector)
	            ? this.selector(item)
	            : item[this.selector];
	    };
	    SelectController.prototype.loadItems = function () {
	        var _this = this;
	        var promise;
	        promise = this.getOptions();
	        if (promise == null) {
	            promise = this.$q.when(this.options);
	        }
	        return promise.then(function (options) { return _this.configureOptions(options); });
	    };
	    SelectController.prototype.configureOptions = function (options) {
	        if (!this.object.isNullOrWhitespace(this.nullOption)) {
	            options.unshift(this._nullOption);
	        }
	        return options;
	    };
	    SelectController.$inject = ['$element', '$scope', '$q', componentValidator_service_1.factoryName, __object.serviceName];
	    return SelectController;
	}());
	exports.SelectController = SelectController;
	function select() {
	    return {
	        restrict: 'E',
	        require: 'ngModel',
	        template: __webpack_require__(146),
	        controller: exports.controllerName,
	        controllerAs: 'select',
	        scope: {},
	        bindToController: {
	            options: '=',
	            getOptions: '&',
	            selector: '=',
	            validator: '=',
	            label: '@',
	            ngDisabled: '=',
	            nullOption: '@',
	        },
	    };
	}
	exports.select = select;
	angular.module(exports.moduleName, ['ui.select', componentValidator_service_1.moduleName, __object.moduleName])
	    .directive(exports.directiveName, select)
	    .controller(exports.controllerName, SelectController);
	//# sourceMappingURL=select.js.map

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(143);
	module.exports = 'ui.select';


/***/ },
/* 143 */
/***/ function(module, exports) {

	/*!
	 * ui-select
	 * http://github.com/angular-ui/ui-select
	 * Version: 0.14.6 - 2016-02-18T21:01:36.893Z
	 * License: MIT
	 */
	
	
	(function () { 
	"use strict";
	var KEY = {
	    TAB: 9,
	    ENTER: 13,
	    ESC: 27,
	    SPACE: 32,
	    LEFT: 37,
	    UP: 38,
	    RIGHT: 39,
	    DOWN: 40,
	    SHIFT: 16,
	    CTRL: 17,
	    ALT: 18,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    HOME: 36,
	    END: 35,
	    BACKSPACE: 8,
	    DELETE: 46,
	    COMMAND: 91,
	
	    MAP: { 91 : "COMMAND", 8 : "BACKSPACE" , 9 : "TAB" , 13 : "ENTER" , 16 : "SHIFT" , 17 : "CTRL" , 18 : "ALT" , 19 : "PAUSEBREAK" , 20 : "CAPSLOCK" , 27 : "ESC" , 32 : "SPACE" , 33 : "PAGE_UP", 34 : "PAGE_DOWN" , 35 : "END" , 36 : "HOME" , 37 : "LEFT" , 38 : "UP" , 39 : "RIGHT" , 40 : "DOWN" , 43 : "+" , 44 : "PRINTSCREEN" , 45 : "INSERT" , 46 : "DELETE", 48 : "0" , 49 : "1" , 50 : "2" , 51 : "3" , 52 : "4" , 53 : "5" , 54 : "6" , 55 : "7" , 56 : "8" , 57 : "9" , 59 : ";", 61 : "=" , 65 : "A" , 66 : "B" , 67 : "C" , 68 : "D" , 69 : "E" , 70 : "F" , 71 : "G" , 72 : "H" , 73 : "I" , 74 : "J" , 75 : "K" , 76 : "L", 77 : "M" , 78 : "N" , 79 : "O" , 80 : "P" , 81 : "Q" , 82 : "R" , 83 : "S" , 84 : "T" , 85 : "U" , 86 : "V" , 87 : "W" , 88 : "X" , 89 : "Y" , 90 : "Z", 96 : "0" , 97 : "1" , 98 : "2" , 99 : "3" , 100 : "4" , 101 : "5" , 102 : "6" , 103 : "7" , 104 : "8" , 105 : "9", 106 : "*" , 107 : "+" , 109 : "-" , 110 : "." , 111 : "/", 112 : "F1" , 113 : "F2" , 114 : "F3" , 115 : "F4" , 116 : "F5" , 117 : "F6" , 118 : "F7" , 119 : "F8" , 120 : "F9" , 121 : "F10" , 122 : "F11" , 123 : "F12", 144 : "NUMLOCK" , 145 : "SCROLLLOCK" , 186 : ";" , 187 : "=" , 188 : "," , 189 : "-" , 190 : "." , 191 : "/" , 192 : "`" , 219 : "[" , 220 : "\\" , 221 : "]" , 222 : "'"
	    },
	
	    isControl: function (e) {
	        var k = e.which;
	        switch (k) {
	        case KEY.COMMAND:
	        case KEY.SHIFT:
	        case KEY.CTRL:
	        case KEY.ALT:
	            return true;
	        }
	
	        if (e.metaKey) return true;
	
	        return false;
	    },
	    isFunctionKey: function (k) {
	        k = k.which ? k.which : k;
	        return k >= 112 && k <= 123;
	    },
	    isVerticalMovement: function (k){
	      return ~[KEY.UP, KEY.DOWN].indexOf(k);
	    },
	    isHorizontalMovement: function (k){
	      return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);
	    },
	    toSeparator: function (k) {
	      var sep = {ENTER:"\n",TAB:"\t",SPACE:" "}[k];
	      if (sep) return sep;
	      // return undefined for special keys other than enter, tab or space.
	      // no way to use them to cut strings.
	      return KEY[k] ? undefined : k;
	    }
	  };
	
	/**
	 * Add querySelectorAll() to jqLite.
	 *
	 * jqLite find() is limited to lookups by tag name.
	 * TODO This will change with future versions of AngularJS, to be removed when this happens
	 *
	 * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586
	 * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598
	 */
	if (angular.element.prototype.querySelectorAll === undefined) {
	  angular.element.prototype.querySelectorAll = function(selector) {
	    return angular.element(this[0].querySelectorAll(selector));
	  };
	}
	
	/**
	 * Add closest() to jqLite.
	 */
	if (angular.element.prototype.closest === undefined) {
	  angular.element.prototype.closest = function( selector) {
	    var elem = this[0];
	    var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;
	
	    while (elem) {
	      if (matchesSelector.bind(elem)(selector)) {
	        return elem;
	      } else {
	        elem = elem.parentElement;
	      }
	    }
	    return false;
	  };
	}
	
	var latestId = 0;
	
	var uis = angular.module('ui.select', [])
	
	.constant('uiSelectConfig', {
	  theme: 'bootstrap',
	  searchEnabled: true,
	  sortable: false,
	  placeholder: '', // Empty by default, like HTML tag <select>
	  refreshDelay: 1000, // In milliseconds
	  closeOnSelect: true,
	  dropdownPosition: 'auto',
	  generateId: function() {
	    return latestId++;
	  },
	  appendToBody: false
	})
	
	// See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913
	.service('uiSelectMinErr', function() {
	  var minErr = angular.$$minErr('ui.select');
	  return function() {
	    var error = minErr.apply(this, arguments);
	    var message = error.message.replace(new RegExp('\nhttp://errors.angularjs.org/.*'), '');
	    return new Error(message);
	  };
	})
	
	// Recreates old behavior of ng-transclude. Used internally.
	.directive('uisTranscludeAppend', function () {
	  return {
	    link: function (scope, element, attrs, ctrl, transclude) {
	        transclude(scope, function (clone) {
	          element.append(clone);
	        });
	      }
	    };
	})
	
	/**
	 * Highlights text that matches $select.search.
	 *
	 * Taken from AngularUI Bootstrap Typeahead
	 * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340
	 */
	.filter('highlight', function() {
	  function escapeRegexp(queryToEscape) {
	    return ('' + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
	  }
	
	  return function(matchItem, query) {
	    return query && matchItem ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<span class="ui-select-highlight">$&</span>') : matchItem;
	  };
	})
	
	/**
	 * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/
	 *
	 * Taken from AngularUI Bootstrap Position:
	 * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70
	 */
	.factory('uisOffset',
	  ['$document', '$window',
	  function ($document, $window) {
	
	  return function(element) {
	    var boundingClientRect = element[0].getBoundingClientRect();
	    return {
	      width: boundingClientRect.width || element.prop('offsetWidth'),
	      height: boundingClientRect.height || element.prop('offsetHeight'),
	      top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
	      left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
	    };
	  };
	}]);
	
	uis.directive('uiSelectChoices',
	  ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile',
	  function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile) {
	
	  return {
	    restrict: 'EA',
	    require: '^uiSelect',
	    replace: true,
	    transclude: true,
	    templateUrl: function(tElement) {
	      // Needed so the uiSelect can detect the transcluded content
	      tElement.addClass('ui-select-choices');
	
	      // Gets theme attribute from parent (ui-select)
	      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
	      return theme + '/choices.tpl.html';
	    },
	
	    compile: function(tElement, tAttrs) {
	
	      if (!tAttrs.repeat) throw uiSelectMinErr('repeat', "Expected 'repeat' expression.");
	
	      return function link(scope, element, attrs, $select, transcludeFn) {
	
	        // var repeat = RepeatParser.parse(attrs.repeat);
	        var groupByExp = attrs.groupBy;
	        var groupFilterExp = attrs.groupFilter;
	
	        $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp); //Result ready at $select.parserResult
	
	        $select.disableChoiceExpression = attrs.uiDisableChoice;
	        $select.onHighlightCallback = attrs.onHighlight;
	
	        $select.dropdownPosition = attrs.position ? attrs.position.toLowerCase() : uiSelectConfig.dropdownPosition;
	
	        if(groupByExp) {
	          var groups = element.querySelectorAll('.ui-select-choices-group');
	          if (groups.length !== 1) throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-group but got '{0}'.", groups.length);
	          groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());
	        }
	
	        var choices = element.querySelectorAll('.ui-select-choices-row');
	        if (choices.length !== 1) {
	          throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row but got '{0}'.", choices.length);
	        }
	
	        choices.attr('ng-repeat', $select.parserResult.repeatExpression(groupByExp))
	            .attr('ng-if', '$select.open') //Prevent unnecessary watches when dropdown is closed
	            .attr('ng-click', '$select.select(' + $select.parserResult.itemName + ',false,$event)');
	
	        var rowsInner = element.querySelectorAll('.ui-select-choices-row-inner');
	        if (rowsInner.length !== 1) throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row-inner but got '{0}'.", rowsInner.length);
	        rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat
	
	        $compile(element, transcludeFn)(scope); //Passing current transcludeFn to be able to append elements correctly from uisTranscludeAppend
	
	        scope.$watch('$select.search', function(newValue) {
	          if(newValue && !$select.open && $select.multiple) $select.activate(false, true);
	          $select.activeIndex = $select.tagging.isActivated ? -1 : 0;
	          if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
	            $select.refresh(attrs.refresh);
	          } else {
	            $select.items = [];
	          }
	        });
	
	        attrs.$observe('refreshDelay', function() {
	          // $eval() is needed otherwise we get a string instead of a number
	          var refreshDelay = scope.$eval(attrs.refreshDelay);
	          $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;
	        });
	      };
	    }
	  };
	}]);
	
	/**
	 * Contains ui-select "intelligence".
	 *
	 * The goal is to limit dependency on the DOM whenever possible and
	 * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.
	 */
	uis.controller('uiSelectCtrl',
	  ['$scope', '$element', '$timeout', '$filter', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig', '$parse', '$injector',
	  function($scope, $element, $timeout, $filter, RepeatParser, uiSelectMinErr, uiSelectConfig, $parse, $injector) {
	
	  var ctrl = this;
	
	  var EMPTY_SEARCH = '';
	
	  ctrl.placeholder = uiSelectConfig.placeholder;
	  ctrl.searchEnabled = uiSelectConfig.searchEnabled;
	  ctrl.sortable = uiSelectConfig.sortable;
	  ctrl.refreshDelay = uiSelectConfig.refreshDelay;
	  ctrl.paste = uiSelectConfig.paste;
	
	  ctrl.removeSelected = false; //If selected item(s) should be removed from dropdown list
	  ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function
	  ctrl.search = EMPTY_SEARCH;
	
	  ctrl.activeIndex = 0; //Dropdown of choices
	  ctrl.items = []; //All available choices
	
	  ctrl.open = false;
	  ctrl.focus = false;
	  ctrl.disabled = false;
	  ctrl.selected = undefined;
	
	  ctrl.dropdownPosition = 'auto';
	
	  ctrl.focusser = undefined; //Reference to input element used to handle focus events
	  ctrl.resetSearchInput = true;
	  ctrl.multiple = undefined; // Initialized inside uiSelect directive link function
	  ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function
	  ctrl.tagging = {isActivated: false, fct: undefined};
	  ctrl.taggingTokens = {isActivated: false, tokens: undefined};
	  ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function
	  ctrl.clickTriggeredSelect = false;
	  ctrl.$filter = $filter;
	
	  // Use $injector to check for $animate and store a reference to it
	  ctrl.$animate = (function () {
	    try {
	      return $injector.get('$animate');
	    } catch (err) {
	      // $animate does not exist
	      return null;
	    }
	  })();
	
	  ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');
	  if (ctrl.searchInput.length !== 1) {
	    throw uiSelectMinErr('searchInput', "Expected 1 input.ui-select-search but got '{0}'.", ctrl.searchInput.length);
	  }
	
	  ctrl.isEmpty = function() {
	    return angular.isUndefined(ctrl.selected) || ctrl.selected === null || ctrl.selected === '' || (ctrl.multiple && ctrl.selected.length === 0);
	  };
	
	  function _findIndex(collection, predicate, thisArg){
	    if (collection.findIndex){
	      return collection.findIndex(predicate, thisArg);
	    } else {
	      var list = Object(collection);
	      var length = list.length >>> 0;
	      var value;
	
	      for (var i = 0; i < length; i++) {
	        value = list[i];
	        if (predicate.call(thisArg, value, i, list)) {
	          return i;
	        }
	      }
	      return -1;
	    }
	  }
	
	  // Most of the time the user does not want to empty the search input when in typeahead mode
	  function _resetSearchInput() {
	    if (ctrl.resetSearchInput || (ctrl.resetSearchInput === undefined && uiSelectConfig.resetSearchInput)) {
	      ctrl.search = EMPTY_SEARCH;
	      //reset activeIndex
	      if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
	        ctrl.activeIndex = _findIndex(ctrl.items, function(item){
	          return angular.equals(this, item);
	        }, ctrl.selected);
	      }
	    }
	  }
	
	    function _groupsFilter(groups, groupNames) {
	      var i, j, result = [];
	      for(i = 0; i < groupNames.length ;i++){
	        for(j = 0; j < groups.length ;j++){
	          if(groups[j].name == [groupNames[i]]){
	            result.push(groups[j]);
	          }
	        }
	      }
	      return result;
	    }
	
	  // When the user clicks on ui-select, displays the dropdown list
	  ctrl.activate = function(initSearchValue, avoidReset) {
	    if (!ctrl.disabled  && !ctrl.open) {
	      if(!avoidReset) _resetSearchInput();
	
	      $scope.$broadcast('uis:activate');
	
	      ctrl.open = true;
	
	      ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;
	
	      // ensure that the index is set to zero for tagging variants
	      // that where first option is auto-selected
	      if ( ctrl.activeIndex === -1 && ctrl.taggingLabel !== false ) {
	        ctrl.activeIndex = 0;
	      }
	
	      var container = $element.querySelectorAll('.ui-select-choices-content');
	      if (ctrl.$animate && ctrl.$animate.enabled(container[0])) {
	        ctrl.$animate.on('enter', container[0], function (elem, phase) {
	          if (phase === 'close') {
	            // Only focus input after the animation has finished
	            $timeout(function () {
	              ctrl.focusSearchInput(initSearchValue);
	            });
	          }
	        });
	      } else {
	        $timeout(function () {
	          ctrl.focusSearchInput(initSearchValue);
	        });
	      }
	    }
	  };
	
	  ctrl.focusSearchInput = function (initSearchValue) {
	    ctrl.search = initSearchValue || ctrl.search;
	    ctrl.searchInput[0].focus();
	    if(!ctrl.tagging.isActivated && ctrl.items.length > 1) {
	     _ensureHighlightVisible();
	    }
	  };
	
	  ctrl.findGroupByName = function(name) {
	    return ctrl.groups && ctrl.groups.filter(function(group) {
	      return group.name === name;
	    })[0];
	  };
	
	  ctrl.parseRepeatAttr = function(repeatAttr, groupByExp, groupFilterExp) {
	    function updateGroups(items) {
	      var groupFn = $scope.$eval(groupByExp);
	      ctrl.groups = [];
	      angular.forEach(items, function(item) {
	        var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];
	        var group = ctrl.findGroupByName(groupName);
	        if(group) {
	          group.items.push(item);
	        }
	        else {
	          ctrl.groups.push({name: groupName, items: [item]});
	        }
	      });
	      if(groupFilterExp){
	        var groupFilterFn = $scope.$eval(groupFilterExp);
	        if( angular.isFunction(groupFilterFn)){
	          ctrl.groups = groupFilterFn(ctrl.groups);
	        } else if(angular.isArray(groupFilterFn)){
	          ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);
	        }
	      }
	      ctrl.items = [];
	      ctrl.groups.forEach(function(group) {
	        ctrl.items = ctrl.items.concat(group.items);
	      });
	    }
	
	    function setPlainItems(items) {
	      ctrl.items = items;
	    }
	
	    ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;
	
	    ctrl.parserResult = RepeatParser.parse(repeatAttr);
	
	    ctrl.isGrouped = !!groupByExp;
	    ctrl.itemProperty = ctrl.parserResult.itemName;
	
	    //If collection is an Object, convert it to Array
	
	    var originalSource = ctrl.parserResult.source;
	
	    //When an object is used as source, we better create an array and use it as 'source'
	    var createArrayFromObject = function(){
	      var origSrc = originalSource($scope);
	      $scope.$uisSource = Object.keys(origSrc).map(function(v){
	        var result = {};
	        result[ctrl.parserResult.keyName] = v;
	        result.value = origSrc[v];
	        return result;
	      });
	    };
	
	    if (ctrl.parserResult.keyName){ // Check for (key,value) syntax
	      createArrayFromObject();
	      ctrl.parserResult.source = $parse('$uisSource' + ctrl.parserResult.filters);
	      $scope.$watch(originalSource, function(newVal, oldVal){
	        if (newVal !== oldVal) createArrayFromObject();
	      }, true);
	    }
	
	    ctrl.refreshItems = function (data){
	      data = data || ctrl.parserResult.source($scope);
	      var selectedItems = ctrl.selected;
	      //TODO should implement for single mode removeSelected
	      if (ctrl.isEmpty() || (angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.removeSelected) {
	        ctrl.setItemsFn(data);
	      }else{
	        if ( data !== undefined ) {
	          var filteredItems = data.filter(function(i) {return selectedItems && selectedItems.indexOf(i) < 0;});
	          ctrl.setItemsFn(filteredItems);
	        }
	      }
	      if (ctrl.dropdownPosition === 'auto' || ctrl.dropdownPosition === 'up'){
	        $scope.calculateDropdownPos();
	      }
	    };
	
	    // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259
	    $scope.$watchCollection(ctrl.parserResult.source, function(items) {
	      if (items === undefined || items === null) {
	        // If the user specifies undefined or null => reset the collection
	        // Special case: items can be undefined if the user did not initialized the collection on the scope
	        // i.e $scope.addresses = [] is missing
	        ctrl.items = [];
	      } else {
	        if (!angular.isArray(items)) {
	          throw uiSelectMinErr('items', "Expected an array but got '{0}'.", items);
	        } else {
	          //Remove already selected items (ex: while searching)
	          //TODO Should add a test
	          ctrl.refreshItems(items);
	          ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
	        }
	      }
	    });
	
	  };
	
	  var _refreshDelayPromise;
	
	  /**
	   * Typeahead mode: lets the user refresh the collection using his own function.
	   *
	   * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31
	   */
	  ctrl.refresh = function(refreshAttr) {
	    if (refreshAttr !== undefined) {
	
	      // Debounce
	      // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155
	      // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177
	      if (_refreshDelayPromise) {
	        $timeout.cancel(_refreshDelayPromise);
	      }
	      _refreshDelayPromise = $timeout(function() {
	        $scope.$eval(refreshAttr);
	      }, ctrl.refreshDelay);
	    }
	  };
	
	  ctrl.isActive = function(itemScope) {
	    if ( !ctrl.open ) {
	      return false;
	    }
	    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
	    var isActive =  itemIndex == ctrl.activeIndex;
	
	    if ( !isActive || ( itemIndex < 0 && ctrl.taggingLabel !== false ) ||( itemIndex < 0 && ctrl.taggingLabel === false) ) {
	      return false;
	    }
	
	    if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
	      itemScope.$eval(ctrl.onHighlightCallback);
	    }
	
	    return isActive;
	  };
	
	  ctrl.isDisabled = function(itemScope) {
	
	    if (!ctrl.open) return;
	
	    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
	    var isDisabled = false;
	    var item;
	
	    if (itemIndex >= 0 && !angular.isUndefined(ctrl.disableChoiceExpression)) {
	      item = ctrl.items[itemIndex];
	      isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression)); // force the boolean value
	      item._uiSelectChoiceDisabled = isDisabled; // store this for later reference
	    }
	
	    return isDisabled;
	  };
	
	
	  // When the user selects an item with ENTER or clicks the dropdown
	  ctrl.select = function(item, skipFocusser, $event) {
	    if (item === undefined || !item._uiSelectChoiceDisabled) {
	
	      if ( ! ctrl.items && ! ctrl.search && ! ctrl.tagging.isActivated) return;
	
	      if (!item || !item._uiSelectChoiceDisabled) {
	        if(ctrl.tagging.isActivated) {
	          // if taggingLabel is disabled, we pull from ctrl.search val
	          if ( ctrl.taggingLabel === false ) {
	            if ( ctrl.activeIndex < 0 ) {
	              item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;
	              if (!item || angular.equals( ctrl.items[0], item ) ) {
	                return;
	              }
	            } else {
	              // keyboard nav happened first, user selected from dropdown
	              item = ctrl.items[ctrl.activeIndex];
	            }
	          } else {
	            // tagging always operates at index zero, taggingLabel === false pushes
	            // the ctrl.search value without having it injected
	            if ( ctrl.activeIndex === 0 ) {
	              // ctrl.tagging pushes items to ctrl.items, so we only have empty val
	              // for `item` if it is a detected duplicate
	              if ( item === undefined ) return;
	
	              // create new item on the fly if we don't already have one;
	              // use tagging function if we have one
	              if ( ctrl.tagging.fct !== undefined && typeof item === 'string' ) {
	                item = ctrl.tagging.fct(item);
	                if (!item) return;
	              // if item type is 'string', apply the tagging label
	              } else if ( typeof item === 'string' ) {
	                // trim the trailing space
	                item = item.replace(ctrl.taggingLabel,'').trim();
	              }
	            }
	          }
	          // search ctrl.selected for dupes potentially caused by tagging and return early if found
	          if ( ctrl.selected && angular.isArray(ctrl.selected) && ctrl.selected.filter( function (selection) { return angular.equals(selection, item); }).length > 0 ) {
	            ctrl.close(skipFocusser);
	            return;
	          }
	        }
	
	        $scope.$broadcast('uis:select', item);
	
	        var locals = {};
	        locals[ctrl.parserResult.itemName] = item;
	
	        $timeout(function(){
	          ctrl.onSelectCallback($scope, {
	            $item: item,
	            $model: ctrl.parserResult.modelMapper($scope, locals)
	          });
	        });
	
	        if (ctrl.closeOnSelect) {
	          ctrl.close(skipFocusser);
	        }
	        if ($event && $event.type === 'click') {
	          ctrl.clickTriggeredSelect = true;
	        }
	      }
	    }
	  };
	
	  // Closes the dropdown
	  ctrl.close = function(skipFocusser) {
	    if (!ctrl.open) return;
	    if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();
	    _resetSearchInput();
	    ctrl.open = false;
	
	    $scope.$broadcast('uis:close', skipFocusser);
	
	  };
	
	  ctrl.setFocus = function(){
	    if (!ctrl.focus) ctrl.focusInput[0].focus();
	  };
	
	  ctrl.clear = function($event) {
	    ctrl.select(undefined);
	    $event.stopPropagation();
	    $timeout(function() {
	      ctrl.focusser[0].focus();
	    }, 0, false);
	  };
	
	  // Toggle dropdown
	  ctrl.toggle = function(e) {
	    if (ctrl.open) {
	      ctrl.close();
	      e.preventDefault();
	      e.stopPropagation();
	    } else {
	      ctrl.activate();
	    }
	  };
	
	  ctrl.isLocked = function(itemScope, itemIndex) {
	      var isLocked, item = ctrl.selected[itemIndex];
	
	      if (item && !angular.isUndefined(ctrl.lockChoiceExpression)) {
	          isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression)); // force the boolean value
	          item._uiSelectChoiceLocked = isLocked; // store this for later reference
	      }
	
	      return isLocked;
	  };
	
	  var sizeWatch = null;
	  ctrl.sizeSearchInput = function() {
	
	    var input = ctrl.searchInput[0],
	        container = ctrl.searchInput.parent().parent()[0],
	        calculateContainerWidth = function() {
	          // Return the container width only if the search input is visible
	          return container.clientWidth * !!input.offsetParent;
	        },
	        updateIfVisible = function(containerWidth) {
	          if (containerWidth === 0) {
	            return false;
	          }
	          var inputWidth = containerWidth - input.offsetLeft - 10;
	          if (inputWidth < 50) inputWidth = containerWidth;
	          ctrl.searchInput.css('width', inputWidth+'px');
	          return true;
	        };
	
	    ctrl.searchInput.css('width', '10px');
	    $timeout(function() { //Give tags time to render correctly
	      if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
	        sizeWatch = $scope.$watch(calculateContainerWidth, function(containerWidth) {
	          if (updateIfVisible(containerWidth)) {
	            sizeWatch();
	            sizeWatch = null;
	          }
	        });
	      }
	    });
	  };
	
	  function _handleDropDownSelection(key) {
	    var processed = true;
	    switch (key) {
	      case KEY.DOWN:
	        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        else if (ctrl.activeIndex < ctrl.items.length - 1) { ctrl.activeIndex++; }
	        break;
	      case KEY.UP:
	        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        else if (ctrl.activeIndex > 0 || (ctrl.search.length === 0 && ctrl.tagging.isActivated && ctrl.activeIndex > -1)) { ctrl.activeIndex--; }
	        break;
	      case KEY.TAB:
	        if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);
	        break;
	      case KEY.ENTER:
	        if(ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)){
	          ctrl.select(ctrl.items[ctrl.activeIndex]); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
	        } else {
	          ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        }
	        break;
	      case KEY.ESC:
	        ctrl.close();
	        break;
	      default:
	        processed = false;
	    }
	    return processed;
	  }
	
	  // Bind to keyboard shortcuts
	  ctrl.searchInput.on('keydown', function(e) {
	
	    var key = e.which;
	
	    // if(~[KEY.ESC,KEY.TAB].indexOf(key)){
	    //   //TODO: SEGURO?
	    //   ctrl.close();
	    // }
	
	    $scope.$apply(function() {
	
	      var tagged = false;
	
	      if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
	        _handleDropDownSelection(key);
	        if ( ctrl.taggingTokens.isActivated ) {
	          for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
	            if ( ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode] ) {
	              // make sure there is a new value to push via tagging
	              if ( ctrl.search.length > 0 ) {
	                tagged = true;
	              }
	            }
	          }
	          if ( tagged ) {
	            $timeout(function() {
	              ctrl.searchInput.triggerHandler('tagged');
	              var newItem = ctrl.search.replace(KEY.MAP[e.keyCode],'').trim();
	              if ( ctrl.tagging.fct ) {
	                newItem = ctrl.tagging.fct( newItem );
	              }
	              if (newItem) ctrl.select(newItem, true);
	            });
	          }
	        }
	      }
	
	    });
	
	    if(KEY.isVerticalMovement(key) && ctrl.items.length > 0){
	      _ensureHighlightVisible();
	    }
	
	    if (key === KEY.ENTER || key === KEY.ESC) {
	      e.preventDefault();
	      e.stopPropagation();
	    }
	
	  });
	
	  ctrl.searchInput.on('paste', function (e) {
	    var data;
	
	    if (window.clipboardData && window.clipboardData.getData) { // IE
	      data = window.clipboardData.getData('Text');
	    } else {
	      data = (e.originalEvent || e).clipboardData.getData('text/plain');
	    }
	
	    // Prepend the current input field text to the paste buffer.
	    data = ctrl.search + data;
	
	    if (data && data.length > 0) {
	      // If tagging try to split by tokens and add items
	      if (ctrl.taggingTokens.isActivated) {
	        var separator = KEY.toSeparator(ctrl.taggingTokens.tokens[0]);
	        var items = data.split(separator || ctrl.taggingTokens.tokens[0]); // split by first token only
	        if (items && items.length > 0) {
	        var oldsearch = ctrl.search;
	          angular.forEach(items, function (item) {
	            var newItem = ctrl.tagging.fct ? ctrl.tagging.fct(item) : item;
	            if (newItem) {
	              ctrl.select(newItem, true);
	            }
	          });
	          ctrl.search = oldsearch || EMPTY_SEARCH;
	          e.preventDefault();
	          e.stopPropagation();
	        }
	      } else if (ctrl.paste) {
	        ctrl.paste(data);
	        ctrl.search = EMPTY_SEARCH;
	        e.preventDefault();
	        e.stopPropagation();
	      }
	    }
	  });
	
	  ctrl.searchInput.on('tagged', function() {
	    $timeout(function() {
	      _resetSearchInput();
	    });
	  });
	
	  // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431
	  function _ensureHighlightVisible() {
	    var container = $element.querySelectorAll('.ui-select-choices-content');
	    var choices = container.querySelectorAll('.ui-select-choices-row');
	    if (choices.length < 1) {
	      throw uiSelectMinErr('choices', "Expected multiple .ui-select-choices-row but got '{0}'.", choices.length);
	    }
	
	    if (ctrl.activeIndex < 0) {
	      return;
	    }
	
	    var highlighted = choices[ctrl.activeIndex];
	    var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;
	    var height = container[0].offsetHeight;
	
	    if (posY > height) {
	      container[0].scrollTop += posY - height;
	    } else if (posY < highlighted.clientHeight) {
	      if (ctrl.isGrouped && ctrl.activeIndex === 0)
	        container[0].scrollTop = 0; //To make group header visible when going all the way up
	      else
	        container[0].scrollTop -= highlighted.clientHeight - posY;
	    }
	  }
	
	  $scope.$on('$destroy', function() {
	    ctrl.searchInput.off('keyup keydown tagged blur paste');
	  });
	
	}]);
	
	uis.directive('uiSelect',
	  ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',
	  function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {
	
	  return {
	    restrict: 'EA',
	    templateUrl: function(tElement, tAttrs) {
	      var theme = tAttrs.theme || uiSelectConfig.theme;
	      return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');
	    },
	    replace: true,
	    transclude: true,
	    require: ['uiSelect', '^ngModel'],
	    scope: true,
	
	    controller: 'uiSelectCtrl',
	    controllerAs: '$select',
	    compile: function(tElement, tAttrs) {
	
	      // Allow setting ngClass on uiSelect
	      var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass);
	      if(match) {
	        var combined = '{'+ match[1] +', '+ match[2] +'}';
	        tAttrs.ngClass = combined;
	        tElement.attr('ng-class', combined);
	      }
	
	      //Multiple or Single depending if multiple attribute presence
	      if (angular.isDefined(tAttrs.multiple))
	        tElement.append('<ui-select-multiple/>').removeAttr('multiple');
	      else
	        tElement.append('<ui-select-single/>');
	
	      if (tAttrs.inputId)
	        tElement.querySelectorAll('input.ui-select-search')[0].id = tAttrs.inputId;
	
	      return function(scope, element, attrs, ctrls, transcludeFn) {
	
	        var $select = ctrls[0];
	        var ngModel = ctrls[1];
	
	        $select.generatedId = uiSelectConfig.generateId();
	        $select.baseTitle = attrs.title || 'Select box';
	        $select.focusserTitle = $select.baseTitle + ' focus';
	        $select.focusserId = 'focusser-' + $select.generatedId;
	
	        $select.closeOnSelect = function() {
	          if (angular.isDefined(attrs.closeOnSelect)) {
	            return $parse(attrs.closeOnSelect)();
	          } else {
	            return uiSelectConfig.closeOnSelect;
	          }
	        }();
	
	        $select.onSelectCallback = $parse(attrs.onSelect);
	        $select.onRemoveCallback = $parse(attrs.onRemove);
	
	        //Limit the number of selections allowed
	        $select.limit = (angular.isDefined(attrs.limit)) ? parseInt(attrs.limit, 10) : undefined;
	
	        //Set reference to ngModel from uiSelectCtrl
	        $select.ngModel = ngModel;
	
	        $select.choiceGrouped = function(group){
	          return $select.isGrouped && group && group.name;
	        };
	
	        if(attrs.tabindex){
	          attrs.$observe('tabindex', function(value) {
	            $select.focusInput.attr('tabindex', value);
	            element.removeAttr('tabindex');
	          });
	        }
	
	        scope.$watch('searchEnabled', function() {
	            var searchEnabled = scope.$eval(attrs.searchEnabled);
	            $select.searchEnabled = searchEnabled !== undefined ? searchEnabled : uiSelectConfig.searchEnabled;
	        });
	
	        scope.$watch('sortable', function() {
	            var sortable = scope.$eval(attrs.sortable);
	            $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;
	        });
	
	        attrs.$observe('disabled', function() {
	          // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string
	          $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;
	        });
	
	        attrs.$observe('resetSearchInput', function() {
	          // $eval() is needed otherwise we get a string instead of a boolean
	          var resetSearchInput = scope.$eval(attrs.resetSearchInput);
	          $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;
	        });
	
	        attrs.$observe('paste', function() {
	          $select.paste = scope.$eval(attrs.paste);
	        });
	
	        attrs.$observe('tagging', function() {
	          if(attrs.tagging !== undefined)
	          {
	            // $eval() is needed otherwise we get a string instead of a boolean
	            var taggingEval = scope.$eval(attrs.tagging);
	            $select.tagging = {isActivated: true, fct: taggingEval !== true ? taggingEval : undefined};
	          }
	          else
	          {
	            $select.tagging = {isActivated: false, fct: undefined};
	          }
	        });
	
	        attrs.$observe('taggingLabel', function() {
	          if(attrs.tagging !== undefined )
	          {
	            // check eval for FALSE, in this case, we disable the labels
	            // associated with tagging
	            if ( attrs.taggingLabel === 'false' ) {
	              $select.taggingLabel = false;
	            }
	            else
	            {
	              $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';
	            }
	          }
	        });
	
	        attrs.$observe('taggingTokens', function() {
	          if (attrs.tagging !== undefined) {
	            var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',','ENTER'];
	            $select.taggingTokens = {isActivated: true, tokens: tokens };
	          }
	        });
	
	        //Automatically gets focus when loaded
	        if (angular.isDefined(attrs.autofocus)){
	          $timeout(function(){
	            $select.setFocus();
	          });
	        }
	
	        //Gets focus based on scope event name (e.g. focus-on='SomeEventName')
	        if (angular.isDefined(attrs.focusOn)){
	          scope.$on(attrs.focusOn, function() {
	              $timeout(function(){
	                $select.setFocus();
	              });
	          });
	        }
	
	        function onDocumentClick(e) {
	          if (!$select.open) return; //Skip it if dropdown is close
	
	          var contains = false;
	
	          if (window.jQuery) {
	            // Firefox 3.6 does not support element.contains()
	            // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
	            contains = window.jQuery.contains(element[0], e.target);
	          } else {
	            contains = element[0].contains(e.target);
	          }
	
	          if (!contains && !$select.clickTriggeredSelect) {
	            //Will lose focus only with certain targets
	            var focusableControls = ['input','button','textarea','select'];
	            var targetController = angular.element(e.target).controller('uiSelect'); //To check if target is other ui-select
	            var skipFocusser = targetController && targetController !== $select; //To check if target is other ui-select
	            if (!skipFocusser) skipFocusser =  ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea
	            $select.close(skipFocusser);
	            scope.$digest();
	          }
	          $select.clickTriggeredSelect = false;
	        }
	
	        // See Click everywhere but here event http://stackoverflow.com/questions/12931369
	        $document.on('click', onDocumentClick);
	
	        scope.$on('$destroy', function() {
	          $document.off('click', onDocumentClick);
	        });
	
	        // Move transcluded elements to their correct position in main template
	        transcludeFn(scope, function(clone) {
	          // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html
	
	          // One day jqLite will be replaced by jQuery and we will be able to write:
	          // var transcludedElement = clone.filter('.my-class')
	          // instead of creating a hackish DOM element:
	          var transcluded = angular.element('<div>').append(clone);
	
	          var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');
	          transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr
	          transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes
	          if (transcludedMatch.length !== 1) {
	            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-match but got '{0}'.", transcludedMatch.length);
	          }
	          element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);
	
	          var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');
	          transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr
	          transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes
	          if (transcludedChoices.length !== 1) {
	            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-choices but got '{0}'.", transcludedChoices.length);
	          }
	          element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);
	        });
	
	        // Support for appending the select field to the body when its open
	        var appendToBody = scope.$eval(attrs.appendToBody);
	        if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
	          scope.$watch('$select.open', function(isOpen) {
	            if (isOpen) {
	              positionDropdown();
	            } else {
	              resetDropdown();
	            }
	          });
	
	          // Move the dropdown back to its original location when the scope is destroyed. Otherwise
	          // it might stick around when the user routes away or the select field is otherwise removed
	          scope.$on('$destroy', function() {
	            resetDropdown();
	          });
	        }
	
	        // Hold on to a reference to the .ui-select-container element for appendToBody support
	        var placeholder = null,
	            originalWidth = '';
	
	        function positionDropdown() {
	          // Remember the absolute position of the element
	          var offset = uisOffset(element);
	
	          // Clone the element into a placeholder element to take its original place in the DOM
	          placeholder = angular.element('<div class="ui-select-placeholder"></div>');
	          placeholder[0].style.width = offset.width + 'px';
	          placeholder[0].style.height = offset.height + 'px';
	          element.after(placeholder);
	
	          // Remember the original value of the element width inline style, so it can be restored
	          // when the dropdown is closed
	          originalWidth = element[0].style.width;
	
	          // Now move the actual dropdown element to the end of the body
	          $document.find('body').append(element);
	
	          element[0].style.position = 'absolute';
	          element[0].style.left = offset.left + 'px';
	          element[0].style.top = offset.top + 'px';
	          element[0].style.width = offset.width + 'px';
	        }
	
	        function resetDropdown() {
	          if (placeholder === null) {
	            // The dropdown has not actually been display yet, so there's nothing to reset
	            return;
	          }
	
	          // Move the dropdown element back to its original location in the DOM
	          placeholder.replaceWith(element);
	          placeholder = null;
	
	          element[0].style.position = '';
	          element[0].style.left = '';
	          element[0].style.top = '';
	          element[0].style.width = originalWidth;
	        }
	
	        // Hold on to a reference to the .ui-select-dropdown element for direction support.
	        var dropdown = null,
	            directionUpClassName = 'direction-up';
	
	        // Support changing the direction of the dropdown if there isn't enough space to render it.
	        scope.$watch('$select.open', function() {
	
	          if ($select.dropdownPosition === 'auto' || $select.dropdownPosition === 'up'){
	            scope.calculateDropdownPos();
	          }
	
	        });
	
	        var setDropdownPosUp = function(offset, offsetDropdown){
	
	          offset = offset || uisOffset(element);
	          offsetDropdown = offsetDropdown || uisOffset(dropdown);
	
	          dropdown[0].style.position = 'absolute';
	          dropdown[0].style.top = (offsetDropdown.height * -1) + 'px';
	          element.addClass(directionUpClassName);
	
	        };
	
	        var setDropdownPosDown = function(offset, offsetDropdown){
	
	          element.removeClass(directionUpClassName);
	
	          offset = offset || uisOffset(element);
	          offsetDropdown = offsetDropdown || uisOffset(dropdown);
	
	          dropdown[0].style.position = '';
	          dropdown[0].style.top = '';
	
	        };
	
	        scope.calculateDropdownPos = function(){
	
	          if ($select.open) {
	            dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown');
	            if (dropdown.length === 0) {
	              return;
	            }
	
	            // Hide the dropdown so there is no flicker until $timeout is done executing.
	            dropdown[0].style.opacity = 0;
	
	            // Delay positioning the dropdown until all choices have been added so its height is correct.
	            $timeout(function(){
	
	              if ($select.dropdownPosition === 'up'){
	                  //Go UP
	                  setDropdownPosUp();
	
	              }else{ //AUTO
	
	                element.removeClass(directionUpClassName);
	
	                var offset = uisOffset(element);
	                var offsetDropdown = uisOffset(dropdown);
	
	                //https://code.google.com/p/chromium/issues/detail?id=342307#c4
	                var scrollTop = $document[0].documentElement.scrollTop || $document[0].body.scrollTop; //To make it cross browser (blink, webkit, IE, Firefox).
	
	                // Determine if the direction of the dropdown needs to be changed.
	                if (offset.top + offset.height + offsetDropdown.height > scrollTop + $document[0].documentElement.clientHeight) {
	                  //Go UP
	                  setDropdownPosUp(offset, offsetDropdown);
	                }else{
	                  //Go DOWN
	                  setDropdownPosDown(offset, offsetDropdown);
	                }
	
	              }
	
	              // Display the dropdown once it has been positioned.
	              dropdown[0].style.opacity = 1;
	            });
	          } else {
	              if (dropdown === null || dropdown.length === 0) {
	                return;
	              }
	
	              // Reset the position of the dropdown.
	              dropdown[0].style.position = '';
	              dropdown[0].style.top = '';
	              element.removeClass(directionUpClassName);
	          }
	        };
	      };
	    }
	  };
	}]);
	
	uis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {
	  return {
	    restrict: 'EA',
	    require: '^uiSelect',
	    replace: true,
	    transclude: true,
	    templateUrl: function(tElement) {
	      // Needed so the uiSelect can detect the transcluded content
	      tElement.addClass('ui-select-match');
	
	      // Gets theme attribute from parent (ui-select)
	      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
	      var multi = tElement.parent().attr('multiple');
	      return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');
	    },
	    link: function(scope, element, attrs, $select) {
	      $select.lockChoiceExpression = attrs.uiLockChoice;
	      attrs.$observe('placeholder', function(placeholder) {
	        $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;
	      });
	
	      function setAllowClear(allow) {
	        $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;
	      }
	
	      attrs.$observe('allowClear', setAllowClear);
	      setAllowClear(attrs.allowClear);
	
	      if($select.multiple){
	        $select.sizeSearchInput();
	      }
	
	    }
	  };
	}]);
	
	uis.directive('uiSelectMultiple', ['uiSelectMinErr','$timeout', function(uiSelectMinErr, $timeout) {
	  return {
	    restrict: 'EA',
	    require: ['^uiSelect', '^ngModel'],
	
	    controller: ['$scope','$timeout', function($scope, $timeout){
	
	      var ctrl = this,
	          $select = $scope.$select,
	          ngModel;
	
	      //Wait for link fn to inject it 
	      $scope.$evalAsync(function(){ ngModel = $scope.ngModel; });
	
	      ctrl.activeMatchIndex = -1;
	
	      ctrl.updateModel = function(){
	        ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes
	        ctrl.refreshComponent();
	      };
	
	      ctrl.refreshComponent = function(){
	        //Remove already selected items
	        //e.g. When user clicks on a selection, the selected array changes and 
	        //the dropdown should remove that item
	        $select.refreshItems();
	        $select.sizeSearchInput();
	      };
	
	      // Remove item from multiple select
	      ctrl.removeChoice = function(index){
	
	        var removedChoice = $select.selected[index];
	
	        // if the choice is locked, can't remove it
	        if(removedChoice._uiSelectChoiceLocked) return;
	
	        var locals = {};
	        locals[$select.parserResult.itemName] = removedChoice;
	
	        $select.selected.splice(index, 1);
	        ctrl.activeMatchIndex = -1;
	        $select.sizeSearchInput();
	
	        // Give some time for scope propagation.
	        $timeout(function(){
	          $select.onRemoveCallback($scope, {
	            $item: removedChoice,
	            $model: $select.parserResult.modelMapper($scope, locals)
	          });
	        });
	
	        ctrl.updateModel();
	
	      };
	
	      ctrl.getPlaceholder = function(){
	        //Refactor single?
	        if($select.selected && $select.selected.length) return;
	        return $select.placeholder;
	      };
	
	
	    }],
	    controllerAs: '$selectMultiple',
	
	    link: function(scope, element, attrs, ctrls) {
	
	      var $select = ctrls[0];
	      var ngModel = scope.ngModel = ctrls[1];
	      var $selectMultiple = scope.$selectMultiple;
	
	      //$select.selected = raw selected objects (ignoring any property binding)
	
	      $select.multiple = true;
	      $select.removeSelected = true;
	
	      //Input that will handle focus
	      $select.focusInput = $select.searchInput;
	
	      //From view --> model
	      ngModel.$parsers.unshift(function () {
	        var locals = {},
	            result,
	            resultMultiple = [];
	        for (var j = $select.selected.length - 1; j >= 0; j--) {
	          locals = {};
	          locals[$select.parserResult.itemName] = $select.selected[j];
	          result = $select.parserResult.modelMapper(scope, locals);
	          resultMultiple.unshift(result);
	        }
	        return resultMultiple;
	      });
	
	      // From model --> view
	      ngModel.$formatters.unshift(function (inputValue) {
	        var data = $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
	            locals = {},
	            result;
	        if (!data) return inputValue;
	        var resultMultiple = [];
	        var checkFnMultiple = function(list, value){
	          if (!list || !list.length) return;
	          for (var p = list.length - 1; p >= 0; p--) {
	            locals[$select.parserResult.itemName] = list[p];
	            result = $select.parserResult.modelMapper(scope, locals);
	            if($select.parserResult.trackByExp){
	                var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp);
	                var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp);
	                if(propsItemNameMatches && propsItemNameMatches.length > 0 && propsItemNameMatches[1] == $select.parserResult.itemName){
	                  if(matches && matches.length>0 && result[matches[1]] == value[matches[1]]){
	                      resultMultiple.unshift(list[p]);
	                      return true;
	                  }
	                }
	            }
	            if (angular.equals(result,value)){
	              resultMultiple.unshift(list[p]);
	              return true;
	            }
	          }
	          return false;
	        };
	        if (!inputValue) return resultMultiple; //If ngModel was undefined
	        for (var k = inputValue.length - 1; k >= 0; k--) {
	          //Check model array of currently selected items 
	          if (!checkFnMultiple($select.selected, inputValue[k])){
	            //Check model array of all items available
	            if (!checkFnMultiple(data, inputValue[k])){
	              //If not found on previous lists, just add it directly to resultMultiple
	              resultMultiple.unshift(inputValue[k]);
	            }
	          }
	        }
	        return resultMultiple;
	      });
	      
	      //Watch for external model changes 
	      scope.$watchCollection(function(){ return ngModel.$modelValue; }, function(newValue, oldValue) {
	        if (oldValue != newValue){
	          ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
	          $selectMultiple.refreshComponent();
	        }
	      });
	
	      ngModel.$render = function() {
	        // Make sure that model value is array
	        if(!angular.isArray(ngModel.$viewValue)){
	          // Have tolerance for null or undefined values
	          if(angular.isUndefined(ngModel.$viewValue) || ngModel.$viewValue === null){
	            $select.selected = [];
	          } else {
	            throw uiSelectMinErr('multiarr', "Expected model value to be array but got '{0}'", ngModel.$viewValue);
	          }
	        }
	        $select.selected = ngModel.$viewValue;
	        scope.$evalAsync(); //To force $digest
	      };
	
	      scope.$on('uis:select', function (event, item) {
	        if($select.selected.length >= $select.limit) {
	          return;
	        }
	        $select.selected.push(item);
	        $selectMultiple.updateModel();
	      });
	
	      scope.$on('uis:activate', function () {
	        $selectMultiple.activeMatchIndex = -1;
	      });
	
	      scope.$watch('$select.disabled', function(newValue, oldValue) {
	        // As the search input field may now become visible, it may be necessary to recompute its size
	        if (oldValue && !newValue) $select.sizeSearchInput();
	      });
	
	      $select.searchInput.on('keydown', function(e) {
	        var key = e.which;
	        scope.$apply(function() {
	          var processed = false;
	          // var tagged = false; //Checkme
	          if(KEY.isHorizontalMovement(key)){
	            processed = _handleMatchSelection(key);
	          }
	          if (processed  && key != KEY.TAB) {
	            //TODO Check si el tab selecciona aun correctamente
	            //Crear test
	            e.preventDefault();
	            e.stopPropagation();
	          }
	        });
	      });
	      function _getCaretPosition(el) {
	        if(angular.isNumber(el.selectionStart)) return el.selectionStart;
	        // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise
	        else return el.value.length;
	      }
	      // Handles selected options in "multiple" mode
	      function _handleMatchSelection(key){
	        var caretPosition = _getCaretPosition($select.searchInput[0]),
	            length = $select.selected.length,
	            // none  = -1,
	            first = 0,
	            last  = length-1,
	            curr  = $selectMultiple.activeMatchIndex,
	            next  = $selectMultiple.activeMatchIndex+1,
	            prev  = $selectMultiple.activeMatchIndex-1,
	            newIndex = curr;
	
	        if(caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;
	
	        $select.close();
	
	        function getNewActiveMatchIndex(){
	          switch(key){
	            case KEY.LEFT:
	              // Select previous/first item
	              if(~$selectMultiple.activeMatchIndex) return prev;
	              // Select last item
	              else return last;
	              break;
	            case KEY.RIGHT:
	              // Open drop-down
	              if(!~$selectMultiple.activeMatchIndex || curr === last){
	                $select.activate();
	                return false;
	              }
	              // Select next/last item
	              else return next;
	              break;
	            case KEY.BACKSPACE:
	              // Remove selected item and select previous/first
	              if(~$selectMultiple.activeMatchIndex){
	                $selectMultiple.removeChoice(curr);
	                return prev;
	              }
	              // Select last item
	              else return last;
	              break;
	            case KEY.DELETE:
	              // Remove selected item and select next item
	              if(~$selectMultiple.activeMatchIndex){
	                $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);
	                return curr;
	              }
	              else return false;
	          }
	        }
	
	        newIndex = getNewActiveMatchIndex();
	
	        if(!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;
	        else $selectMultiple.activeMatchIndex = Math.min(last,Math.max(first,newIndex));
	
	        return true;
	      }
	
	      $select.searchInput.on('keyup', function(e) {
	
	        if ( ! KEY.isVerticalMovement(e.which) ) {
	          scope.$evalAsync( function () {
	            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
	          });
	        }
	        // Push a "create new" item into array if there is a search string
	        if ( $select.tagging.isActivated && $select.search.length > 0 ) {
	
	          // return early with these keys
	          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {
	            return;
	          }
	          // always reset the activeIndex to the first item when tagging
	          $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
	          // taggingLabel === false bypasses all of this
	          if ($select.taggingLabel === false) return;
	
	          var items = angular.copy( $select.items );
	          var stashArr = angular.copy( $select.items );
	          var newItem;
	          var item;
	          var hasTag = false;
	          var dupeIndex = -1;
	          var tagItems;
	          var tagItem;
	
	          // case for object tagging via transform `$select.tagging.fct` function
	          if ( $select.tagging.fct !== undefined) {
	            tagItems = $select.$filter('filter')(items,{'isTag': true});
	            if ( tagItems.length > 0 ) {
	              tagItem = tagItems[0];
	            }
	            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
	            if ( items.length > 0 && tagItem ) {
	              hasTag = true;
	              items = items.slice(1,items.length);
	              stashArr = stashArr.slice(1,stashArr.length);
	            }
	            newItem = $select.tagging.fct($select.search);
	            newItem.isTag = true;
	            // verify the the tag doesn't match the value of an existing item
	            if ( stashArr.filter( function (origItem) { return angular.equals( origItem, $select.tagging.fct($select.search) ); } ).length > 0 ) {
	              return;
	            }
	            newItem.isTag = true;
	          // handle newItem string and stripping dupes in tagging string context
	          } else {
	            // find any tagging items already in the $select.items array and store them
	            tagItems = $select.$filter('filter')(items,function (item) {
	              return item.match($select.taggingLabel);
	            });
	            if ( tagItems.length > 0 ) {
	              tagItem = tagItems[0];
	            }
	            item = items[0];
	            // remove existing tag item if found (should only ever be one tag item)
	            if ( item !== undefined && items.length > 0 && tagItem ) {
	              hasTag = true;
	              items = items.slice(1,items.length);
	              stashArr = stashArr.slice(1,stashArr.length);
	            }
	            newItem = $select.search+' '+$select.taggingLabel;
	            if ( _findApproxDupe($select.selected, $select.search) > -1 ) {
	              return;
	            }
	            // verify the the tag doesn't match the value of an existing item from
	            // the searched data set or the items already selected
	            if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {
	              // if there is a tag from prev iteration, strip it / queue the change
	              // and return early
	              if ( hasTag ) {
	                items = stashArr;
	                scope.$evalAsync( function () {
	                  $select.activeIndex = 0;
	                  $select.items = items;
	                });
	              }
	              return;
	            }
	            if ( _findCaseInsensitiveDupe(stashArr) ) {
	              // if there is a tag from prev iteration, strip it
	              if ( hasTag ) {
	                $select.items = stashArr.slice(1,stashArr.length);
	              }
	              return;
	            }
	          }
	          if ( hasTag ) dupeIndex = _findApproxDupe($select.selected, newItem);
	          // dupe found, shave the first item
	          if ( dupeIndex > -1 ) {
	            items = items.slice(dupeIndex+1,items.length-1);
	          } else {
	            items = [];
	            items.push(newItem);
	            items = items.concat(stashArr);
	          }
	          scope.$evalAsync( function () {
	            $select.activeIndex = 0;
	            $select.items = items;
	          });
	        }
	      });
	      function _findCaseInsensitiveDupe(arr) {
	        if ( arr === undefined || $select.search === undefined ) {
	          return false;
	        }
	        var hasDupe = arr.filter( function (origItem) {
	          if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {
	            return false;
	          }
	          return origItem.toUpperCase() === $select.search.toUpperCase();
	        }).length > 0;
	
	        return hasDupe;
	      }
	      function _findApproxDupe(haystack, needle) {
	        var dupeIndex = -1;
	        if(angular.isArray(haystack)) {
	          var tempArr = angular.copy(haystack);
	          for (var i = 0; i <tempArr.length; i++) {
	            // handle the simple string version of tagging
	            if ( $select.tagging.fct === undefined ) {
	              // search the array for the match
	              if ( tempArr[i]+' '+$select.taggingLabel === needle ) {
	              dupeIndex = i;
	              }
	            // handle the object tagging implementation
	            } else {
	              var mockObj = tempArr[i];
	              if (angular.isObject(mockObj)) {
	                mockObj.isTag = true;
	              }
	              if ( angular.equals(mockObj, needle) ) {
	                dupeIndex = i;
	              }
	            }
	          }
	        }
	        return dupeIndex;
	      }
	
	      $select.searchInput.on('blur', function() {
	        $timeout(function() {
	          $selectMultiple.activeMatchIndex = -1;
	        });
	      });
	
	    }
	  };
	}]);
	
	uis.directive('uiSelectSingle', ['$timeout','$compile', function($timeout, $compile) {
	  return {
	    restrict: 'EA',
	    require: ['^uiSelect', '^ngModel'],
	    link: function(scope, element, attrs, ctrls) {
	
	      var $select = ctrls[0];
	      var ngModel = ctrls[1];
	
	      //From view --> model
	      ngModel.$parsers.unshift(function (inputValue) {
	        var locals = {},
	            result;
	        locals[$select.parserResult.itemName] = inputValue;
	        result = $select.parserResult.modelMapper(scope, locals);
	        return result;
	      });
	
	      //From model --> view
	      ngModel.$formatters.unshift(function (inputValue) {
	        var data = $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
	            locals = {},
	            result;
	        if (data){
	          var checkFnSingle = function(d){
	            locals[$select.parserResult.itemName] = d;
	            result = $select.parserResult.modelMapper(scope, locals);
	            return result == inputValue;
	          };
	          //If possible pass same object stored in $select.selected
	          if ($select.selected && checkFnSingle($select.selected)) {
	            return $select.selected;
	          }
	          for (var i = data.length - 1; i >= 0; i--) {
	            if (checkFnSingle(data[i])) return data[i];
	          }
	        }
	        return inputValue;
	      });
	
	      //Update viewValue if model change
	      scope.$watch('$select.selected', function(newValue) {
	        if (ngModel.$viewValue !== newValue) {
	          ngModel.$setViewValue(newValue);
	        }
	      });
	
	      ngModel.$render = function() {
	        $select.selected = ngModel.$viewValue;
	      };
	
	      scope.$on('uis:select', function (event, item) {
	        $select.selected = item;
	      });
	
	      scope.$on('uis:close', function (event, skipFocusser) {
	        $timeout(function(){
	          $select.focusser.prop('disabled', false);
	          if (!skipFocusser) $select.focusser[0].focus();
	        },0,false);
	      });
	
	      scope.$on('uis:activate', function () {
	        focusser.prop('disabled', true); //Will reactivate it on .close()
	      });
	
	      //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954
	      var focusser = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");
	      $compile(focusser)(scope);
	      $select.focusser = focusser;
	
	      //Input that will handle focus
	      $select.focusInput = focusser;
	
	      element.parent().append(focusser);
	      focusser.bind("focus", function(){
	        scope.$evalAsync(function(){
	          $select.focus = true;
	        });
	      });
	      focusser.bind("blur", function(){
	        scope.$evalAsync(function(){
	          $select.focus = false;
	        });
	      });
	      focusser.bind("keydown", function(e){
	
	        if (e.which === KEY.BACKSPACE) {
	          e.preventDefault();
	          e.stopPropagation();
	          $select.select(undefined);
	          scope.$apply();
	          return;
	        }
	
	        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
	          return;
	        }
	
	        if (e.which == KEY.DOWN  || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE){
	          e.preventDefault();
	          e.stopPropagation();
	          $select.activate();
	        }
	
	        scope.$digest();
	      });
	
	      focusser.bind("keyup input", function(e){
	
	        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {
	          return;
	        }
	
	        $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input
	        focusser.val('');
	        scope.$digest();
	
	      });
	
	
	    }
	  };
	}]);
	// Make multiple matches sortable
	uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {
	  return {
	    require: '^^uiSelect',
	    link: function(scope, element, attrs, $select) {
	      if (scope[attrs.uiSelectSort] === null) {
	        throw uiSelectMinErr('sort', 'Expected a list to sort');
	      }
	
	      var options = angular.extend({
	          axis: 'horizontal'
	        },
	        scope.$eval(attrs.uiSelectSortOptions));
	
	      var axis = options.axis;
	      var draggingClassName = 'dragging';
	      var droppingClassName = 'dropping';
	      var droppingBeforeClassName = 'dropping-before';
	      var droppingAfterClassName = 'dropping-after';
	
	      scope.$watch(function(){
	        return $select.sortable;
	      }, function(newValue){
	        if (newValue) {
	          element.attr('draggable', true);
	        } else {
	          element.removeAttr('draggable');
	        }
	      });
	
	      element.on('dragstart', function(event) {
	        element.addClass(draggingClassName);
	
	        (event.dataTransfer || event.originalEvent.dataTransfer).setData('text/plain', scope.$index);
	      });
	
	      element.on('dragend', function() {
	        element.removeClass(draggingClassName);
	      });
	
	      var move = function(from, to) {
	        /*jshint validthis: true */
	        this.splice(to, 0, this.splice(from, 1)[0]);
	      };
	
	      var dragOverHandler = function(event) {
	        event.preventDefault();
	
	        var offset = axis === 'vertical' ? event.offsetY || event.layerY || (event.originalEvent ? event.originalEvent.offsetY : 0) : event.offsetX || event.layerX || (event.originalEvent ? event.originalEvent.offsetX : 0);
	
	        if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {
	          element.removeClass(droppingAfterClassName);
	          element.addClass(droppingBeforeClassName);
	
	        } else {
	          element.removeClass(droppingBeforeClassName);
	          element.addClass(droppingAfterClassName);
	        }
	      };
	
	      var dropTimeout;
	
	      var dropHandler = function(event) {
	        event.preventDefault();
	
	        var droppedItemIndex = parseInt((event.dataTransfer || event.originalEvent.dataTransfer).getData('text/plain'), 10);
	
	        // prevent event firing multiple times in firefox
	        $timeout.cancel(dropTimeout);
	        dropTimeout = $timeout(function() {
	          _dropHandler(droppedItemIndex);
	        }, 20);
	      };
	
	      var _dropHandler = function(droppedItemIndex) {
	        var theList = scope.$eval(attrs.uiSelectSort);
	        var itemToMove = theList[droppedItemIndex];
	        var newIndex = null;
	
	        if (element.hasClass(droppingBeforeClassName)) {
	          if (droppedItemIndex < scope.$index) {
	            newIndex = scope.$index - 1;
	          } else {
	            newIndex = scope.$index;
	          }
	        } else {
	          if (droppedItemIndex < scope.$index) {
	            newIndex = scope.$index;
	          } else {
	            newIndex = scope.$index + 1;
	          }
	        }
	
	        move.apply(theList, [droppedItemIndex, newIndex]);
	
	        scope.$apply(function() {
	          scope.$emit('uiSelectSort:change', {
	            array: theList,
	            item: itemToMove,
	            from: droppedItemIndex,
	            to: newIndex
	          });
	        });
	
	        element.removeClass(droppingClassName);
	        element.removeClass(droppingBeforeClassName);
	        element.removeClass(droppingAfterClassName);
	
	        element.off('drop', dropHandler);
	      };
	
	      element.on('dragenter', function() {
	        if (element.hasClass(draggingClassName)) {
	          return;
	        }
	
	        element.addClass(droppingClassName);
	
	        element.on('dragover', dragOverHandler);
	        element.on('drop', dropHandler);
	      });
	
	      element.on('dragleave', function(event) {
	        if (event.target != element) {
	          return;
	        }
	        element.removeClass(droppingClassName);
	        element.removeClass(droppingBeforeClassName);
	        element.removeClass(droppingAfterClassName);
	
	        element.off('dragover', dragOverHandler);
	        element.off('drop', dropHandler);
	      });
	    }
	  };
	}]);
	
	/**
	 * Parses "repeat" attribute.
	 *
	 * Taken from AngularJS ngRepeat source code
	 * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211
	 *
	 * Original discussion about parsing "repeat" attribute instead of fully relying on ng-repeat:
	 * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697
	 */
	
	uis.service('uisRepeatParser', ['uiSelectMinErr','$parse', function(uiSelectMinErr, $parse) {
	  var self = this;
	
	  /**
	   * Example:
	   * expression = "address in addresses | filter: {street: $select.search} track by $index"
	   * itemName = "address",
	   * source = "addresses | filter: {street: $select.search}",
	   * trackByExp = "$index",
	   */
	  self.parse = function(expression) {
	
	
	    var match;
	    var isObjectCollection = /\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)/.test(expression);
	    // If an array is used as collection
	
	    // if (isObjectCollection){
	      //00000000000000000000000000000111111111000000000000000222222222222220033333333333333333333330000444444444444444444000000000000000556666660000077777777777755000000000000000000000088888880000000
	    match = expression.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(([\w\.]+)?\s*(|\s*[\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);      
	
	    // 1 Alias
	    // 2 Item
	    // 3 Key on (key,value)
	    // 4 Value on (key,value)
	    // 5 Collection expresion (only used when using an array collection)
	    // 6 Object that will be converted to Array when using (key,value) syntax
	    // 7 Filters that will be applied to #6 when using (key,value) syntax
	    // 8 Track by
	
	    if (!match) {
	      throw uiSelectMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	              expression);
	    }
	    if (!match[6] && isObjectCollection) {
	      throw uiSelectMinErr('iexp', "Expected expression in form of '_item_ as (_key_, _item_) in _ObjCollection_ [ track by _id_]' but got '{0}'.",
	              expression);
	    }
	
	    return {
	      itemName: match[4] || match[2], // (lhs) Left-hand side,
	      keyName: match[3], //for (key, value) syntax
	      source: $parse(!match[3] ? match[5] : match[6]),
	      sourceName: match[6],
	      filters: match[7],
	      trackByExp: match[8],
	      modelMapper: $parse(match[1] || match[4] || match[2]),
	      repeatExpression: function (grouped) {
	        var expression = this.itemName + ' in ' + (grouped ? '$group.items' : '$select.items');
	        if (this.trackByExp) {
	          expression += ' track by ' + this.trackByExp;
	        }
	        return expression;
	      } 
	    };
	
	  };
	
	  self.getGroupNgRepeatExpression = function() {
	    return '$group in $select.groups';
	  };
	
	}]);
	
	}());
	angular.module("ui.select").run(["$templateCache", function($templateCache) {$templateCache.put("bootstrap/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu\" role=\"listbox\" ng-show=\"$select.items.length > 0\"><li class=\"ui-select-choices-group\" id=\"ui-select-choices-{{ $select.generatedId }}\"><div class=\"divider\" ng-show=\"$select.isGrouped && $index > 0\"></div><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label dropdown-header\" ng-bind=\"$group.name\"></div><div id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\" role=\"option\"><a href=\"\" class=\"ui-select-choices-row-inner\"></a></div></li></ul>");
	$templateCache.put("bootstrap/match-multiple.tpl.html","<span class=\"ui-select-match\"><span ng-repeat=\"$item in $select.selected\"><span class=\"ui-select-match-item btn btn-default btn-xs\" tabindex=\"-1\" type=\"button\" ng-disabled=\"$select.disabled\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span class=\"close ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&nbsp;&times;</span> <span uis-transclude-append=\"\"></span></span></span></span>");
	$templateCache.put("bootstrap/match.tpl.html","<div class=\"ui-select-match\" ng-hide=\"$select.open\" ng-disabled=\"$select.disabled\" ng-class=\"{\'btn-default-focus\':$select.focus}\"><span tabindex=\"-1\" class=\"btn btn-default form-control ui-select-toggle\" aria-label=\"{{ $select.baseTitle }} activate\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" style=\"outline: 0;\"><span ng-show=\"$select.isEmpty()\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"ui-select-match-text pull-left\" ng-class=\"{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}\" ng-transclude=\"\"></span> <i class=\"caret pull-right\" ng-click=\"$select.toggle($event)\"></i> <a ng-show=\"$select.allowClear && !$select.isEmpty()\" aria-label=\"{{ $select.baseTitle }} clear\" style=\"margin-right: 10px\" ng-click=\"$select.clear($event)\" class=\"btn btn-xs btn-link pull-right\"><i class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></i></a></span></div>");
	$templateCache.put("bootstrap/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\" ng-class=\"{open: $select.open}\"><div><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"false\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" class=\"ui-select-search input-xs\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-click=\"$select.activate()\" ng-model=\"$select.search\" role=\"combobox\" aria-label=\"{{ $select.baseTitle }}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div></div>");
	$templateCache.put("bootstrap/select.tpl.html","<div class=\"ui-select-container ui-select-bootstrap dropdown\" ng-class=\"{open: $select.open}\"><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"false\" tabindex=\"-1\" aria-expanded=\"true\" aria-label=\"{{ $select.baseTitle }}\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"form-control ui-select-search\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-show=\"$select.searchEnabled && $select.open\"><div class=\"ui-select-choices\"></div></div>");
	$templateCache.put("select2/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content select2-results\"><li class=\"ui-select-choices-group\" ng-class=\"{\'select2-result-with-children\': $select.choiceGrouped($group) }\"><div ng-show=\"$select.choiceGrouped($group)\" class=\"ui-select-choices-group-label select2-result-label\" ng-bind=\"$group.name\"></div><ul role=\"listbox\" id=\"ui-select-choices-{{ $select.generatedId }}\" ng-class=\"{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }\"><li role=\"option\" id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}\"><div class=\"select2-result-label ui-select-choices-row-inner\"></div></li></ul></li></ul>");
	$templateCache.put("select2/match-multiple.tpl.html","<span class=\"ui-select-match\"><li class=\"ui-select-match-item select2-search-choice\" ng-repeat=\"$item in $select.selected\" ng-class=\"{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span uis-transclude-append=\"\"></span> <a href=\"javascript:;\" class=\"ui-select-match-close select2-search-choice-close\" ng-click=\"$selectMultiple.removeChoice($index)\" tabindex=\"-1\"></a></li></span>");
	$templateCache.put("select2/match.tpl.html","<a class=\"select2-choice ui-select-match\" ng-class=\"{\'select2-default\': $select.isEmpty()}\" ng-click=\"$select.toggle($event)\" aria-label=\"{{ $select.baseTitle }} select\"><span ng-show=\"$select.isEmpty()\" class=\"select2-chosen\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"select2-chosen\" ng-transclude=\"\"></span> <abbr ng-if=\"$select.allowClear && !$select.isEmpty()\" class=\"select2-search-choice-close\" ng-click=\"$select.clear($event)\"></abbr> <span class=\"select2-arrow ui-select-toggle\"><b></b></span></a>");
	$templateCache.put("select2/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}\"><ul class=\"select2-choices\"><span class=\"ui-select-match\"></span><li class=\"select2-search-field\"><input type=\"text\" autocomplete=\"false\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"select2-input ui-select-search\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-model=\"$select.search\" ng-click=\"$select.activate()\" style=\"width: 34px;\" ondrop=\"return false;\"></li></ul><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\"><div class=\"ui-select-choices\"></div></div></div>");
	$templateCache.put("select2/select.tpl.html","<div class=\"ui-select-container select2 select2-container\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}\"><div class=\"ui-select-match\"></div><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\"><div class=\"select2-search\" ng-show=\"$select.searchEnabled\"><input type=\"text\" autocomplete=\"false\" autocorrect=\"false\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"ui-select-search select2-input\" ng-model=\"$select.search\"></div><div class=\"ui-select-choices\"></div></div></div>");
	$templateCache.put("selectize/choices.tpl.html","<div ng-show=\"$select.open\" class=\"ui-select-choices ui-select-dropdown selectize-dropdown single\"><div class=\"ui-select-choices-content selectize-dropdown-content\"><div class=\"ui-select-choices-group optgroup\" role=\"listbox\"><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label optgroup-header\" ng-bind=\"$group.name\"></div><div role=\"option\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\"><div class=\"option ui-select-choices-row-inner\" data-selectable=\"\"></div></div></div></div></div>");
	$templateCache.put("selectize/match.tpl.html","<div ng-hide=\"($select.open || $select.isEmpty())\" class=\"ui-select-match\" ng-transclude=\"\"></div>");
	$templateCache.put("selectize/select.tpl.html","<div class=\"ui-select-container selectize-control single\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"false\" tabindex=\"-1\" class=\"ui-select-search ui-select-toggle\" ng-click=\"$select.toggle($event)\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-hide=\"!$select.searchEnabled || ($select.selected && !$select.open)\" ng-disabled=\"$select.disabled\" aria-label=\"{{ $select.baseTitle }}\"></div><div class=\"ui-select-choices\"></div></div>");}]);

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(145);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./select.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./select.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	
	
	// module
	exports.push([module.id, "/*!\n * ui-select\n * http://github.com/angular-ui/ui-select\n * Version: 0.14.6 - 2016-02-18T21:01:36.972Z\n * License: MIT\n */\n\n\n/* Style when highlighting a search. */\n.ui-select-highlight {\n  font-weight: bold;\n}\n\n.ui-select-offscreen {\n  clip: rect(0 0 0 0) !important;\n  width: 1px !important;\n  height: 1px !important;\n  border: 0 !important;\n  margin: 0 !important;\n  padding: 0 !important;\n  overflow: hidden !important;\n  position: absolute !important;\n  outline: 0 !important;\n  left: 0px !important;\n  top: 0px !important;\n}\n\n\n.ui-select-choices-row:hover {\n  background-color: #f5f5f5;\n}\n\n/* Select2 theme */\n\n/* Mark invalid Select2 */\n.ng-dirty.ng-invalid > a.select2-choice {\n    border-color: #D44950;\n}\n\n.select2-result-single {\n  padding-left: 0;\n}\n\n.select2-locked > .select2-search-choice-close{\n  display:none;\n}\n\n.select-locked > .ui-select-match-close{\n    display:none;\n}\n\nbody > .select2-container.open {\n  z-index: 9999; /* The z-index Select2 applies to the select2-drop */\n}\n\n/* Handle up direction Select2 */\n.ui-select-container[theme=\"select2\"].direction-up .ui-select-match {\n    border-radius: 4px; /* FIXME hardcoded value :-/ */\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n}\n.ui-select-container[theme=\"select2\"].direction-up .ui-select-dropdown {\n    border-radius: 4px; /* FIXME hardcoded value :-/ */\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n\n    border-top-width: 1px;  /* FIXME hardcoded value :-/ */\n    border-top-style: solid;\n\n    box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.25);\n\n    margin-top: -4px; /* FIXME hardcoded value :-/ */\n}\n.ui-select-container[theme=\"select2\"].direction-up .ui-select-dropdown .select2-search {\n    margin-top: 4px; /* FIXME hardcoded value :-/ */\n}\n.ui-select-container[theme=\"select2\"].direction-up.select2-dropdown-open .ui-select-match {\n    border-bottom-color: #5897fb;\n}\n\n/* Selectize theme */\n\n/* Helper class to show styles when focus */\n.selectize-input.selectize-focus{\n  border-color: #007FBB !important;\n}\n\n/* Fix input width for Selectize theme */\n.selectize-control > .selectize-input > input {\n  width: 100%;\n}\n\n/* Fix dropdown width for Selectize theme */\n.selectize-control > .selectize-dropdown {\n  width: 100%;\n}\n\n/* Mark invalid Selectize */\n.ng-dirty.ng-invalid > div.selectize-input {\n    border-color: #D44950;\n}\n\n/* Handle up direction Selectize */\n.ui-select-container[theme=\"selectize\"].direction-up .ui-select-dropdown {\n    box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.25);\n\n    margin-top: -2px; /* FIXME hardcoded value :-/ */\n}\n\n/* Bootstrap theme */\n\n/* Helper class to show styles when focus */\n.btn-default-focus {\n  color: #333;\n  background-color: #EBEBEB;\n  border-color: #ADADAD;\n  text-decoration: none;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n\n.ui-select-bootstrap .ui-select-toggle {\n  position: relative;\n}\n\n.ui-select-bootstrap .ui-select-toggle > .caret {\n  position: absolute;\n  height: 10px;\n  top: 50%;\n  right: 10px;\n  margin-top: -2px;\n}\n\n/* Fix Bootstrap dropdown position when inside a input-group */\n.input-group > .ui-select-bootstrap.dropdown {\n  /* Instead of relative */\n  position: static;\n}\n\n.input-group > .ui-select-bootstrap > input.ui-select-search.form-control {\n  border-radius: 4px; /* FIXME hardcoded value :-/ */\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.input-group > .ui-select-bootstrap > input.ui-select-search.form-control.direction-up {\n  border-radius: 4px !important; /* FIXME hardcoded value :-/ */\n  border-top-right-radius: 0 !important;\n  border-bottom-right-radius: 0 !important;\n}\n\n.ui-select-bootstrap > .ui-select-match > .btn{\n  /* Instead of center because of .btn */\n  text-align: left !important;\n}\n\n.ui-select-bootstrap > .ui-select-match > .caret {\n  position: absolute;\n  top: 45%;\n  right: 15px;\n}\n\n/* See Scrollable Menu with Bootstrap 3 http://stackoverflow.com/questions/19227496 */\n.ui-select-bootstrap > .ui-select-choices {\n  width: 100%;\n  height: auto;\n  max-height: 200px;\n  overflow-x: hidden;\n  margin-top: -1px;\n}\n\nbody > .ui-select-bootstrap.open {\n  z-index: 1000; /* Standard Bootstrap dropdown z-index */\n}\n\n.ui-select-multiple.ui-select-bootstrap {\n  height: auto;\n  padding: 3px 3px 0 3px;\n}\n\n.ui-select-multiple.ui-select-bootstrap input.ui-select-search {\n  background-color: transparent !important; /* To prevent double background when disabled */\n  border: none;\n  outline: none;\n  height: 1.666666em;\n  margin-bottom: 3px;\n}\n\n.ui-select-multiple.ui-select-bootstrap .ui-select-match .close {\n  font-size: 1.6em;\n  line-height: 0.75;\n}\n\n.ui-select-multiple.ui-select-bootstrap .ui-select-match-item {\n  outline: 0;\n  margin: 0 3px 3px 0;\n}\n\n.ui-select-multiple .ui-select-match-item {\n  position: relative;\n}\n\n.ui-select-multiple .ui-select-match-item.dropping-before:before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  margin-right: 2px;\n  border-left: 1px solid #428bca;\n}\n\n.ui-select-multiple .ui-select-match-item.dropping-after:after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 100%;\n  height: 100%;\n  margin-left: 2px;\n  border-right: 1px solid #428bca;\n}\n\n.ui-select-bootstrap .ui-select-choices-row>a {\n    display: block;\n    padding: 3px 20px;\n    clear: both;\n    font-weight: 400;\n    line-height: 1.42857143;\n    color: #333;\n    white-space: nowrap;\n}\n\n.ui-select-bootstrap .ui-select-choices-row>a:hover, .ui-select-bootstrap .ui-select-choices-row>a:focus {\n    text-decoration: none;\n    color: #262626;\n    background-color: #f5f5f5;\n}\n\n.ui-select-bootstrap .ui-select-choices-row.active>a {\n    color: #fff;\n    text-decoration: none;\n    outline: 0;\n    background-color: #428bca;\n}\n\n.ui-select-bootstrap .ui-select-choices-row.disabled>a,\n.ui-select-bootstrap .ui-select-choices-row.active.disabled>a {\n    color: #777;\n    cursor: not-allowed;\n    background-color: #fff;\n}\n\n/* fix hide/show angular animation */\n.ui-select-match.ng-hide-add,\n.ui-select-search.ng-hide-add {\n    display: none !important;\n}\n\n/* Mark invalid Bootstrap */\n.ui-select-bootstrap.ng-dirty.ng-invalid > button.btn.ui-select-match {\n    border-color: #D44950;\n}\n\n/* Handle up direction Bootstrap */\n.ui-select-container[theme=\"bootstrap\"].direction-up .ui-select-dropdown {\n    box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.25);\n}\n", ""]);
	
	// exports


/***/ },
/* 146 */
/***/ function(module, exports) {

	module.exports = "<div class=\"validation-input-group\">\r\n\t<div class=\"field validation-input\" ng-class=\"{ 'has-error': select.ngModel.$invalid, 'required-error': select.ngModel.$error.required }\">\r\n\t\t<label ng-show=\"select.selection\" class=\"show-hide angular-animate\">\r\n\t\t\t{{select.label}}\r\n\t\t</label>\r\n\t\t<ui-select ng-model=\"select.selection\" search-enabled=\"false\" theme=\"bootstrap\" ng-disabled=\"select.ngDisabled\">\r\n\t\t\t<ui-select-match placeholder=\"{{select.label}}\">{{select.getDisplayName($select.selected)}}</ui-select-match>\r\n\t\t\t<ui-select-choices repeat=\"option in select.options\">\r\n\t\t\t\t{{select.getDisplayName(option)}}\r\n\t\t\t</ui-select-choices>\r\n\t\t</ui-select>\r\n        <span class=\"error-string\" ng-show=\"select.selectValidator.error\">{{select.selectValidator.error}}</span>\r\n\t\t<rl-busy loading=\"select.loading\"></rl-busy>\r\n\t</div>\r\n</div>"

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var SignaturePad = __webpack_require__(13);
	exports.moduleName = 'rl.ui.components.signaturePad';
	exports.directiveName = 'rlSignaturePad';
	function signaturePad() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: 'ngModel',
	        template: "\n\t\t\t<canvas class=\"signature-pad\" ng-if=\"!ngDisabled\"></canvas>\n\t\t\t<img ng-src=\"{{ngModel.$viewValue}}\" ng-style=\"style\" ng-if=\"ngDisabled\" />\n\t\t",
	        scope: {
	            pad: '=',
	            height: '=',
	            width: '=',
	            ngDisabled: '=',
	        },
	        link: function (scope, element, attrs, ngModel) {
	            scope.$watch('ngDisabled', function (disabled) {
	                scope.ngModel = ngModel;
	                if (disabled) {
	                    scope.style = {
	                        height: scope.height != null ? scope.height : 100,
	                        width: scope.width != null ? scope.width : 200,
	                    };
	                }
	                else {
	                    var canvas = element.find('.signature-pad').get(0);
	                    var options = {
	                        backgroundColor: 'rgb(255, 255, 255)',
	                    };
	                    scope.pad = new SignaturePad(canvas, options);
	                    canvas.height = scope.height != null ? scope.height : 100;
	                    canvas.width = scope.width != null ? scope.width : 200;
	                    scope.$watch(function () { return ngModel.$viewValue; }, function (value) {
	                        if (value != null) {
	                            scope.pad.fromDataURL(value);
	                        }
	                    });
	                    scope.$watch(function () { return scope.pad.toDataURL(); }, function (value) {
	                        if (value != null) {
	                            ngModel.$setViewValue(value);
	                        }
	                    });
	                }
	            });
	        },
	    };
	}
	exports.signaturePad = signaturePad;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, signaturePad);
	//# sourceMappingURL=signaturePad.js.map

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __observable = typescript_angular_utilities_1.services.observable;
	var __parentChild = typescript_angular_utilities_1.services.parentChildBehavior;
	var card = __webpack_require__(149);
	exports.simpleCard = card;
	var list = __webpack_require__(151);
	exports.simpleCardList = list;
	exports.moduleName = 'rl.ui.components.simpleCardList';
	angular.module(exports.moduleName, [__observable.moduleName, __parentChild.moduleName])
	    .directive(list.directiveName, list.simpleCardList)
	    .controller(list.controllerName, list.SimpleCardListController)
	    .directive(card.directiveName, card.simpleCard)
	    .controller(card.controllerName, card.SimpleCardController);
	//# sourceMappingURL=simpleCardList.module.js.map

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	// /// <reference path='../../../typings/jquery/jquery.d.ts' />
	'use strict';
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __parentChild = typescript_angular_utilities_1.services.parentChildBehavior;
	exports.directiveName = 'rlSimpleCard';
	exports.controllerName = 'SimpleCardController';
	var SimpleCardController = (function () {
	    function SimpleCardController($scope, $element, parentChild) {
	        var _this = this;
	        this.$scope = $scope;
	        this.parentChild = parentChild;
	        this.showContent = false;
	        this.autosaveLink = {};
	        this.close = function () {
	            if (_this.showContent === false || _this.alwaysOpen) {
	                return true;
	            }
	            return _this.autosave();
	        };
	        if (this.canOpen == null) {
	            this.canOpen = true;
	        }
	        this.listController = $element.controller('rlSimpleCardList');
	        if (this.listController == null) {
	            this.listController = this.noList();
	        }
	        var behavior = {
	            autosave: this.autosave.bind(this),
	            close: this.close,
	            setAlwaysOpen: function (value) {
	                _this.alwaysOpen = value;
	            },
	        };
	        this.listController.registerCard(behavior);
	        parentChild.registerChildBehavior(this.childLink, behavior);
	        $scope.$watch(function () { return _this.alwaysOpen; }, function (value) {
	            if (value) {
	                _this.showContent = true;
	            }
	            else {
	                _this.close();
	            }
	        });
	    }
	    SimpleCardController.prototype.toggleContent = function () {
	        if (this.showContent) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    SimpleCardController.prototype.open = function () {
	        if (this.canOpen && this.listController.openCard()) {
	            this.showContent = true;
	            this.onOpen();
	        }
	    };
	    SimpleCardController.prototype.autosave = function () {
	        var _this = this;
	        return this.parentChild.triggerChildBehavior(this.autosaveLink, function (behavior) {
	            var canClose = behavior.autosave();
	            if (canClose) {
	                _this.showContent = false;
	            }
	            return canClose;
	        });
	    };
	    SimpleCardController.prototype.noList = function () {
	        return {
	            openCard: function () {
	                return true;
	            },
	            registerCard: function (behavior) {
	                return null;
	            },
	        };
	    };
	    SimpleCardController.$inject = ['$scope', '$element', __parentChild.serviceName];
	    return SimpleCardController;
	}());
	exports.SimpleCardController = SimpleCardController;
	function simpleCard() {
	    'use strict';
	    return {
	        restrict: 'E',
	        transclude: true,
	        require: '?^^rlSimpleCardList',
	        template: __webpack_require__(150),
	        controller: exports.controllerName,
	        controllerAs: 'card',
	        scope: {},
	        bindToController: {
	            onOpen: '&',
	            canOpen: '=?',
	            alwaysOpen: '=?',
	            childLink: '=?',
	            validate: '&',
	            save: '&',
	        },
	        link: function (scope, element, attrs, controller, transclude) {
	            transclude(function (clone) {
	                var header = clone.filter('rl-card-header');
	                var content = clone.filter('rl-card-content');
	                var footer = clone.filter('rl-card-footer');
	                var headerArea = element.find('.header-template');
	                headerArea.append(header);
	                var contentArea = element.find('.content-template');
	                contentArea.append(content);
	                scope.hasFooter = (footer.length > 0);
	                if (scope.hasFooter) {
	                    var footerArea = element.find('.footer-template');
	                    footerArea.append(footer);
	                }
	            });
	        },
	    };
	}
	exports.simpleCard = simpleCard;
	//# sourceMappingURL=simpleCard.js.map

/***/ },
/* 150 */
/***/ function(module, exports) {

	module.exports = "<div class=\"card col-xs-12\">\r\n\t<div class=\"header row\" ng-class=\"{ 'active': card.canOpen && !card.alwaysOpen, 'error': cardForm.$invalid }\" ng-click=\"card.toggleContent()\">\r\n\t\t<div class=\"header-template\"></div>\r\n\t\t<div class=\"clearfix\"></div>\r\n\t</div>\r\n\r\n\t<ng-form name=\"cardForm\" rl-autosave=\"card.autosaveLink\" validate=\"card.validate()\" save=\"card.save()\">\r\n\t\t<div ng-show=\"card.showContent || card.alwaysOpen\">\r\n\t\t\t<div class=\"body row\">\r\n\t\t\t\t<div class=\"content-template\"></div>\r\n\t\t\t\t<div class=\"clearfix\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</ng-form>\r\n\t<div ng-show=\"hasFooter && card.showContent\">\r\n\t\t<div class=\"footer row\">\r\n\t\t\t<div class=\"footer-template\"></div>\r\n\t\t\t<div class=\"clearfix\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __observable = typescript_angular_utilities_1.services.observable;
	exports.directiveName = 'rlSimpleCardList';
	exports.controllerName = 'SimpleCardListController';
	var SimpleCardListController = (function () {
	    function SimpleCardListController($scope, $attrs, $parse, observableFactory) {
	        var _this = this;
	        this.observable = observableFactory.getInstance();
	        $scope.$watch(function () { return $parse($attrs.alwaysOpen)($scope); }, function (value) {
	            _this.alwaysOpen = value;
	            _this.observable.fire('alwaysOpen', value);
	        });
	    }
	    SimpleCardListController.prototype.registerCard = function (behavior) {
	        behavior.setAlwaysOpen(this.alwaysOpen);
	        var unregisterFunctions = [];
	        unregisterFunctions.push(this.observable.register(behavior.close, 'close'));
	        unregisterFunctions.push(this.observable.register(behavior.setAlwaysOpen, 'alwaysOpen'));
	        return function () {
	            _.each(unregisterFunctions, function (unregister) {
	                unregister();
	            });
	        };
	    };
	    SimpleCardListController.prototype.openCard = function () {
	        return _.every(this.observable.fire('close'));
	    };
	    SimpleCardListController.$inject = ['$scope', '$attrs', '$parse', __observable.factoryName];
	    return SimpleCardListController;
	}());
	exports.SimpleCardListController = SimpleCardListController;
	function simpleCardList() {
	    'use strict';
	    return {
	        restrict: 'AE',
	        controller: exports.controllerName,
	    };
	}
	exports.simpleCardList = simpleCardList;
	//# sourceMappingURL=simpleCardList.js.map

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/bootstrap-touchspin/bootstrap-touchspin.d.ts' />
	// /// <reference path='../../../typings/jquery/jquery.d.ts' />
	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	__webpack_require__(153);
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __string = typescript_angular_utilities_1.services.string;
	var __number = typescript_angular_utilities_1.services.number;
	var componentValidator_service_1 = __webpack_require__(105);
	exports.moduleName = 'rl.ui.components.spinner';
	exports.directiveName = 'rlSpinner';
	exports.controllerName = 'SpinnerController';
	exports.defaultMaxValue = 100000000000000000000;
	var SpinnerController = (function () {
	    function SpinnerController($scope, componentValidatorFactory) {
	        var _this = this;
	        var unregister = $scope.$watch(function () { return _this.ngModel; }, function (value) {
	            if (!_.isUndefined(_this.validator)) {
	                _this.spinnerValidator = componentValidatorFactory.getInstance({
	                    ngModel: _this.ngModel,
	                    $scope: $scope,
	                    validators: [_this.validator],
	                });
	            }
	            unregister();
	        });
	    }
	    SpinnerController.$inject = ['$scope', componentValidator_service_1.factoryName];
	    return SpinnerController;
	}());
	exports.SpinnerController = SpinnerController;
	spinner.$inject = ['$timeout', __string.serviceName, __number.serviceName];
	function spinner($timeout, stringUtility, numberUtility) {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(157),
	        require: '?^ngModel',
	        controller: exports.controllerName,
	        controllerAs: 'spinner',
	        scope: {},
	        bindToController: {
	            min: '=',
	            max: '=',
	            step: '=',
	            decimals: '=',
	            prefix: '@',
	            postfix: '@',
	            roundToStep: '=',
	            ngDisabled: '=',
	            spinnerId: '@',
	            name: '@',
	            validator: '=',
	        },
	        link: function (scope, element, attrs, ngModel) {
	            var spinner = scope.spinner;
	            spinner.ngModel = ngModel;
	            var unbindWatches;
	            scope.$watch('spinner.ngDisabled', function (disabled) {
	                if (disabled) {
	                    if (_.isFunction(unbindWatches)) {
	                        unbindWatches();
	                    }
	                }
	                else {
	                    // Initialize the spinner after $timeout to give angular a chance initialize ngModel
	                    $timeout(function () {
	                        var touchspin = element.find('input.spinner').TouchSpin({
	                            min: (spinner.min != null ? spinner.min : 0),
	                            max: (spinner.max != null ? spinner.max : exports.defaultMaxValue),
	                            step: spinner.step,
	                            prefix: spinner.prefix,
	                            postfix: spinner.postfix,
	                            decimals: spinner.decimals,
	                            initval: ngModel.$viewValue,
	                            forcestepdivisibility: spinner.roundToStep ? 'round' : 'none',
	                        });
	                        touchspin.on('change', function () {
	                            scope.$apply(function () {
	                                var spinValue = touchspin.val();
	                                ngModel.$setViewValue(stringUtility.toNumber(spinValue));
	                            });
	                        });
	                        var unbindViewWatch = scope.$watch(function () {
	                            return ngModel.$viewValue;
	                        }, function (newValue) {
	                            touchspin.val(newValue != null ? newValue.toString() : '');
	                        });
	                        var unbindModelWatch = scope.$watch(function () {
	                            return ngModel.$modelValue;
	                        }, function (newModel) {
	                            ngModel.$modelValue = round(newModel);
	                        });
	                        unbindWatches = function () {
	                            unbindViewWatch();
	                            unbindModelWatch();
	                        };
	                    });
	                }
	            });
	            function round(num) {
	                if (num != null && spinner.roundToStep) {
	                    num = numberUtility.roundToStep(num, spinner.step);
	                    num = numberUtility.preciseRound(num, spinner.decimals);
	                }
	                return num;
	            }
	        }
	    };
	}
	angular.module(exports.moduleName, [__string.moduleName, componentValidator_service_1.moduleName, __number.moduleName])
	    .directive(exports.directiveName, spinner)
	    .controller(exports.controllerName, SpinnerController);
	//# sourceMappingURL=spinner.js.map

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	jQuery = __webpack_require__(12);
	
	__webpack_require__(154);
	__webpack_require__(156);

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(155);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./jquery.bootstrap-touchspin.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./jquery.bootstrap-touchspin.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	
	
	// module
	exports.push([module.id, "/*\r\n *  Bootstrap TouchSpin - v3.0.1\r\n *  A mobile and touch friendly input spinner component for Bootstrap 3.\r\n *  http://www.virtuosoft.eu/code/bootstrap-touchspin/\r\n *\r\n *  Made by István Ujj-Mészáros\r\n *  Under Apache License v2.0 License\r\n */\r\n\r\n.bootstrap-touchspin .input-group-btn-vertical {\r\n  position: relative;\r\n  white-space: nowrap;\r\n  width: 1%;\r\n  vertical-align: middle;\r\n  display: table-cell;\r\n}\r\n\r\n.bootstrap-touchspin .input-group-btn-vertical > .btn {\r\n  display: block;\r\n  float: none;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 8px 10px;\r\n  margin-left: -1px;\r\n  position: relative;\r\n}\r\n\r\n.bootstrap-touchspin .input-group-btn-vertical .bootstrap-touchspin-up {\r\n  border-radius: 0;\r\n  border-top-right-radius: 4px;\r\n}\r\n\r\n.bootstrap-touchspin .input-group-btn-vertical .bootstrap-touchspin-down {\r\n  margin-top: -2px;\r\n  border-radius: 0;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n\r\n.bootstrap-touchspin .input-group-btn-vertical i {\r\n  position: absolute;\r\n  top: 3px;\r\n  left: 5px;\r\n  font-size: 9px;\r\n  font-weight: normal;\r\n}\r\n", ""]);
	
	// exports


/***/ },
/* 156 */
/***/ function(module, exports) {

	/*
	 *  Bootstrap TouchSpin - v3.0.1
	 *  A mobile and touch friendly input spinner component for Bootstrap 3.
	 *  http://www.virtuosoft.eu/code/bootstrap-touchspin/
	 *
	 *  Made by István Ujj-Mészáros
	 *  Under Apache License v2.0 License
	 */
	(function($) {
	  'use strict';
	
	  var _currentSpinnerId = 0;
	
	  function _scopedEventName(name, id) {
	    return name + '.touchspin_' + id;
	  }
	
	  function _scopeEventNames(names, id) {
	    return $.map(names, function(name) {
	      return _scopedEventName(name, id);
	    });
	  }
	
	  $.fn.TouchSpin = function(options) {
	
	    if (options === 'destroy') {
	      this.each(function() {
	        var originalinput = $(this),
	            originalinput_data = originalinput.data();
	        $(document).off(_scopeEventNames([
	          'mouseup',
	          'touchend',
	          'touchcancel',
	          'mousemove',
	          'touchmove',
	          'scroll',
	          'scrollstart'], originalinput_data.spinnerid).join(' '));
	      });
	      return;
	    }
	
	    var defaults = {
	      min: 0,
	      max: 100,
	      initval: '',
	      step: 1,
	      decimals: 0,
	      stepinterval: 100,
	      forcestepdivisibility: 'round', // none | floor | round | ceil
	      stepintervaldelay: 500,
	      verticalbuttons: false,
	      verticalupclass: 'glyphicon glyphicon-chevron-up',
	      verticaldownclass: 'glyphicon glyphicon-chevron-down',
	      prefix: '',
	      postfix: '',
	      prefix_extraclass: '',
	      postfix_extraclass: '',
	      booster: true,
	      boostat: 10,
	      maxboostedstep: false,
	      mousewheel: true,
	      buttondown_class: 'btn btn-default',
	      buttonup_class: 'btn btn-default',
		  buttondown_txt: '-',
		  buttonup_txt: '+'
	    };
	
	    var attributeMap = {
	      min: 'min',
	      max: 'max',
	      initval: 'init-val',
	      step: 'step',
	      decimals: 'decimals',
	      stepinterval: 'step-interval',
	      verticalbuttons: 'vertical-buttons',
	      verticalupclass: 'vertical-up-class',
	      verticaldownclass: 'vertical-down-class',
	      forcestepdivisibility: 'force-step-divisibility',
	      stepintervaldelay: 'step-interval-delay',
	      prefix: 'prefix',
	      postfix: 'postfix',
	      prefix_extraclass: 'prefix-extra-class',
	      postfix_extraclass: 'postfix-extra-class',
	      booster: 'booster',
	      boostat: 'boostat',
	      maxboostedstep: 'max-boosted-step',
	      mousewheel: 'mouse-wheel',
	      buttondown_class: 'button-down-class',
	      buttonup_class: 'button-up-class',
		  buttondown_txt: 'button-down-txt',
		  buttonup_txt: 'button-up-txt'
	    };
	
	    return this.each(function() {
	
	      var settings,
	          originalinput = $(this),
	          originalinput_data = originalinput.data(),
	          container,
	          elements,
	          value,
	          downSpinTimer,
	          upSpinTimer,
	          downDelayTimeout,
	          upDelayTimeout,
	          spincount = 0,
	          spinning = false;
	
	      init();
	
	
	      function init() {
	        if (originalinput.data('alreadyinitialized')) {
	          return;
	        }
	
	        originalinput.data('alreadyinitialized', true);
	        _currentSpinnerId += 1;
	        originalinput.data('spinnerid', _currentSpinnerId);
	
	
	        if (!originalinput.is('input')) {
	          console.log('Must be an input.');
	          return;
	        }
	
	        _initSettings();
	        _setInitval();
	        _checkValue();
	        _buildHtml();
	        _initElements();
	        _hideEmptyPrefixPostfix();
	        _bindEvents();
	        _bindEventsInterface();
	        elements.input.css('display', 'block');
	      }
	
	      function _setInitval() {
	        if (settings.initval !== '' && originalinput.val() === '') {
	          originalinput.val(settings.initval);
	        }
	      }
	
	      function changeSettings(newsettings) {
	        _updateSettings(newsettings);
	        _checkValue();
	
	        var value = elements.input.val();
	
	        if (value !== '') {
	          value = Number(elements.input.val());
	          elements.input.val(value.toFixed(settings.decimals));
	        }
	      }
	
	      function _initSettings() {
	        settings = $.extend({}, defaults, originalinput_data, _parseAttributes(), options);
	      }
	
	      function _parseAttributes() {
	        var data = {};
	        $.each(attributeMap, function(key, value) {
	          var attrName = 'bts-' + value + '';
	          if (originalinput.is('[data-' + attrName + ']')) {
	            data[key] = originalinput.data(attrName);
	          }
	        });
	        return data;
	      }
	
	      function _updateSettings(newsettings) {
	        settings = $.extend({}, settings, newsettings);
	      }
	
	      function _buildHtml() {
	        var initval = originalinput.val(),
	            parentelement = originalinput.parent();
	
	        if (initval !== '') {
	          initval = Number(initval).toFixed(settings.decimals);
	        }
	
	        originalinput.data('initvalue', initval).val(initval);
	        originalinput.addClass('form-control');
	
	        if (parentelement.hasClass('input-group')) {
	          _advanceInputGroup(parentelement);
	        }
	        else {
	          _buildInputGroup();
	        }
	      }
	
	      function _advanceInputGroup(parentelement) {
	        parentelement.addClass('bootstrap-touchspin');
	
	        var prev = originalinput.prev(),
	            next = originalinput.next();
	
	        var downhtml,
	            uphtml,
	            prefixhtml = '<span class="input-group-addon bootstrap-touchspin-prefix">' + settings.prefix + '</span>',
	            postfixhtml = '<span class="input-group-addon bootstrap-touchspin-postfix">' + settings.postfix + '</span>';
	
	        if (prev.hasClass('input-group-btn')) {
	          downhtml = '<button class="' + settings.buttondown_class + ' bootstrap-touchspin-down" type="button">' + settings.buttondown_txt + '</button>';
	          prev.append(downhtml);
	        }
	        else {
	          downhtml = '<span class="input-group-btn"><button class="' + settings.buttondown_class + ' bootstrap-touchspin-down" type="button">' + settings.buttondown_txt + '</button></span>';
	          $(downhtml).insertBefore(originalinput);
	        }
	
	        if (next.hasClass('input-group-btn')) {
	          uphtml = '<button class="' + settings.buttonup_class + ' bootstrap-touchspin-up" type="button">' + settings.buttonup_txt + '</button>';
	          next.prepend(uphtml);
	        }
	        else {
	          uphtml = '<span class="input-group-btn"><button class="' + settings.buttonup_class + ' bootstrap-touchspin-up" type="button">' + settings.buttonup_txt + '</button></span>';
	          $(uphtml).insertAfter(originalinput);
	        }
	
	        $(prefixhtml).insertBefore(originalinput);
	        $(postfixhtml).insertAfter(originalinput);
	
	        container = parentelement;
	      }
	
	      function _buildInputGroup() {
	        var html;
	
	        if (settings.verticalbuttons) {
	          html = '<div class="input-group bootstrap-touchspin"><span class="input-group-addon bootstrap-touchspin-prefix">' + settings.prefix + '</span><span class="input-group-addon bootstrap-touchspin-postfix">' + settings.postfix + '</span><span class="input-group-btn-vertical"><button class="' + settings.buttondown_class + ' bootstrap-touchspin-up" type="button"><i class="' + settings.verticalupclass + '"></i></button><button class="' + settings.buttonup_class + ' bootstrap-touchspin-down" type="button"><i class="' + settings.verticaldownclass + '"></i></button></span></div>';
	        }
	        else {
	          html = '<div class="input-group bootstrap-touchspin"><span class="input-group-btn"><button class="' + settings.buttondown_class + ' bootstrap-touchspin-down" type="button">' + settings.buttondown_txt + '</button></span><span class="input-group-addon bootstrap-touchspin-prefix">' + settings.prefix + '</span><span class="input-group-addon bootstrap-touchspin-postfix">' + settings.postfix + '</span><span class="input-group-btn"><button class="' + settings.buttonup_class + ' bootstrap-touchspin-up" type="button">' + settings.buttonup_txt + '</button></span></div>';
	        }
	
	        container = $(html).insertBefore(originalinput);
	
	        $('.bootstrap-touchspin-prefix', container).after(originalinput);
	
	        if (originalinput.hasClass('input-sm')) {
	          container.addClass('input-group-sm');
	        }
	        else if (originalinput.hasClass('input-lg')) {
	          container.addClass('input-group-lg');
	        }
	      }
	
	      function _initElements() {
	        elements = {
	          down: $('.bootstrap-touchspin-down', container),
	          up: $('.bootstrap-touchspin-up', container),
	          input: $('input', container),
	          prefix: $('.bootstrap-touchspin-prefix', container).addClass(settings.prefix_extraclass),
	          postfix: $('.bootstrap-touchspin-postfix', container).addClass(settings.postfix_extraclass)
	        };
	      }
	
	      function _hideEmptyPrefixPostfix() {
	        if (settings.prefix === '') {
	          elements.prefix.hide();
	        }
	
	        if (settings.postfix === '') {
	          elements.postfix.hide();
	        }
	      }
	
	      function _bindEvents() {
	        originalinput.on('keydown', function(ev) {
	          var code = ev.keyCode || ev.which;
	
	          if (code === 38) {
	            if (spinning !== 'up') {
	              upOnce();
	              startUpSpin();
	            }
	            ev.preventDefault();
	          }
	          else if (code === 40) {
	            if (spinning !== 'down') {
	              downOnce();
	              startDownSpin();
	            }
	            ev.preventDefault();
	          }
	        });
	
	        originalinput.on('keyup', function(ev) {
	          var code = ev.keyCode || ev.which;
	
	          if (code === 38) {
	            stopSpin();
	          }
	          else if (code === 40) {
	            stopSpin();
	          }
	        });
	
	        originalinput.on('blur', function() {
	          _checkValue();
	        });
	
	        elements.down.on('keydown', function(ev) {
	          var code = ev.keyCode || ev.which;
	
	          if (code === 32 || code === 13) {
	            if (spinning !== 'down') {
	              downOnce();
	              startDownSpin();
	            }
	            ev.preventDefault();
	          }
	        });
	
	        elements.down.on('keyup', function(ev) {
	          var code = ev.keyCode || ev.which;
	
	          if (code === 32 || code === 13) {
	            stopSpin();
	          }
	        });
	
	        elements.up.on('keydown', function(ev) {
	          var code = ev.keyCode || ev.which;
	
	          if (code === 32 || code === 13) {
	            if (spinning !== 'up') {
	              upOnce();
	              startUpSpin();
	            }
	            ev.preventDefault();
	          }
	        });
	
	        elements.up.on('keyup', function(ev) {
	          var code = ev.keyCode || ev.which;
	
	          if (code === 32 || code === 13) {
	            stopSpin();
	          }
	        });
	
	        elements.down.on('mousedown.touchspin', function(ev) {
	          elements.down.off('touchstart.touchspin');  // android 4 workaround
	
	          if (originalinput.is(':disabled')) {
	            return;
	          }
	
	          downOnce();
	          startDownSpin();
	
	          ev.preventDefault();
	          ev.stopPropagation();
	        });
	
	        elements.down.on('touchstart.touchspin', function(ev) {
	          elements.down.off('mousedown.touchspin');  // android 4 workaround
	
	          if (originalinput.is(':disabled')) {
	            return;
	          }
	
	          downOnce();
	          startDownSpin();
	
	          ev.preventDefault();
	          ev.stopPropagation();
	        });
	
	        elements.up.on('mousedown.touchspin', function(ev) {
	          elements.up.off('touchstart.touchspin');  // android 4 workaround
	
	          if (originalinput.is(':disabled')) {
	            return;
	          }
	
	          upOnce();
	          startUpSpin();
	
	          ev.preventDefault();
	          ev.stopPropagation();
	        });
	
	        elements.up.on('touchstart.touchspin', function(ev) {
	          elements.up.off('mousedown.touchspin');  // android 4 workaround
	
	          if (originalinput.is(':disabled')) {
	            return;
	          }
	
	          upOnce();
	          startUpSpin();
	
	          ev.preventDefault();
	          ev.stopPropagation();
	        });
	
	        elements.up.on('mouseout touchleave touchend touchcancel', function(ev) {
	          if (!spinning) {
	            return;
	          }
	
	          ev.stopPropagation();
	          stopSpin();
	        });
	
	        elements.down.on('mouseout touchleave touchend touchcancel', function(ev) {
	          if (!spinning) {
	            return;
	          }
	
	          ev.stopPropagation();
	          stopSpin();
	        });
	
	        elements.down.on('mousemove touchmove', function(ev) {
	          if (!spinning) {
	            return;
	          }
	
	          ev.stopPropagation();
	          ev.preventDefault();
	        });
	
	        elements.up.on('mousemove touchmove', function(ev) {
	          if (!spinning) {
	            return;
	          }
	
	          ev.stopPropagation();
	          ev.preventDefault();
	        });
	
	        $(document).on(_scopeEventNames(['mouseup', 'touchend', 'touchcancel'], _currentSpinnerId).join(' '), function(ev) {
	          if (!spinning) {
	            return;
	          }
	
	          ev.preventDefault();
	          stopSpin();
	        });
	
	        $(document).on(_scopeEventNames(['mousemove', 'touchmove', 'scroll', 'scrollstart'], _currentSpinnerId).join(' '), function(ev) {
	          if (!spinning) {
	            return;
	          }
	
	          ev.preventDefault();
	          stopSpin();
	        });
	
	        originalinput.on('mousewheel DOMMouseScroll', function(ev) {
	          if (!settings.mousewheel || !originalinput.is(':focus')) {
	            return;
	          }
	
	          var delta = ev.originalEvent.wheelDelta || -ev.originalEvent.deltaY || -ev.originalEvent.detail;
	
	          ev.stopPropagation();
	          ev.preventDefault();
	
	          if (delta < 0) {
	            downOnce();
	          }
	          else {
	            upOnce();
	          }
	        });
	      }
	
	      function _bindEventsInterface() {
	        originalinput.on('touchspin.uponce', function() {
	          stopSpin();
	          upOnce();
	        });
	
	        originalinput.on('touchspin.downonce', function() {
	          stopSpin();
	          downOnce();
	        });
	
	        originalinput.on('touchspin.startupspin', function() {
	          startUpSpin();
	        });
	
	        originalinput.on('touchspin.startdownspin', function() {
	          startDownSpin();
	        });
	
	        originalinput.on('touchspin.stopspin', function() {
	          stopSpin();
	        });
	
	        originalinput.on('touchspin.updatesettings', function(e, newsettings) {
	          changeSettings(newsettings);
	        });
	      }
	
	      function _forcestepdivisibility(value) {
	        switch (settings.forcestepdivisibility) {
	          case 'round':
	            return (Math.round(value / settings.step) * settings.step).toFixed(settings.decimals);
	          case 'floor':
	            return (Math.floor(value / settings.step) * settings.step).toFixed(settings.decimals);
	          case 'ceil':
	            return (Math.ceil(value / settings.step) * settings.step).toFixed(settings.decimals);
	          default:
	            return value;
	        }
	      }
	
	      function _checkValue() {
	        var val, parsedval, returnval;
	
	        val = originalinput.val();
	
	        if (val === '') {
	          return;
	        }
	
	        if (settings.decimals > 0 && val === '.') {
	          return;
	        }
	
	        parsedval = parseFloat(val);
	
	        if (isNaN(parsedval)) {
	          parsedval = 0;
	        }
	
	        returnval = parsedval;
	
	        if (parsedval.toString() !== val) {
	          returnval = parsedval;
	        }
	
	        if (parsedval < settings.min) {
	          returnval = settings.min;
	        }
	
	        if (parsedval > settings.max) {
	          returnval = settings.max;
	        }
	
	        returnval = _forcestepdivisibility(returnval);
	
	        if (Number(val).toString() !== returnval.toString()) {
	          originalinput.val(returnval);
	          originalinput.trigger('change');
	        }
	      }
	
	      function _getBoostedStep() {
	        if (!settings.booster) {
	          return settings.step;
	        }
	        else {
	          var boosted = Math.pow(2, Math.floor(spincount / settings.boostat)) * settings.step;
	
	          if (settings.maxboostedstep) {
	            if (boosted > settings.maxboostedstep) {
	              boosted = settings.maxboostedstep;
	              value = Math.round((value / boosted)) * boosted;
	            }
	          }
	
	          return Math.max(settings.step, boosted);
	        }
	      }
	
	      function upOnce() {
	        _checkValue();
	
	        value = parseFloat(elements.input.val());
	        if (isNaN(value)) {
	          value = 0;
	        }
	
	        var initvalue = value,
	            boostedstep = _getBoostedStep();
	
	        value = value + boostedstep;
	
	        if (value > settings.max) {
	          value = settings.max;
	          originalinput.trigger('touchspin.on.max');
	          stopSpin();
	        }
	
	        elements.input.val(Number(value).toFixed(settings.decimals));
	
	        if (initvalue !== value) {
	          originalinput.trigger('change');
	        }
	      }
	
	      function downOnce() {
	        _checkValue();
	
	        value = parseFloat(elements.input.val());
	        if (isNaN(value)) {
	          value = 0;
	        }
	
	        var initvalue = value,
	            boostedstep = _getBoostedStep();
	
	        value = value - boostedstep;
	
	        if (value < settings.min) {
	          value = settings.min;
	          originalinput.trigger('touchspin.on.min');
	          stopSpin();
	        }
	
	        elements.input.val(value.toFixed(settings.decimals));
	
	        if (initvalue !== value) {
	          originalinput.trigger('change');
	        }
	      }
	
	      function startDownSpin() {
	        stopSpin();
	
	        spincount = 0;
	        spinning = 'down';
	
	        originalinput.trigger('touchspin.on.startspin');
	        originalinput.trigger('touchspin.on.startdownspin');
	
	        downDelayTimeout = setTimeout(function() {
	          downSpinTimer = setInterval(function() {
	            spincount++;
	            downOnce();
	          }, settings.stepinterval);
	        }, settings.stepintervaldelay);
	      }
	
	      function startUpSpin() {
	        stopSpin();
	
	        spincount = 0;
	        spinning = 'up';
	
	        originalinput.trigger('touchspin.on.startspin');
	        originalinput.trigger('touchspin.on.startupspin');
	
	        upDelayTimeout = setTimeout(function() {
	          upSpinTimer = setInterval(function() {
	            spincount++;
	            upOnce();
	          }, settings.stepinterval);
	        }, settings.stepintervaldelay);
	      }
	
	      function stopSpin() {
	        clearTimeout(downDelayTimeout);
	        clearTimeout(upDelayTimeout);
	        clearInterval(downSpinTimer);
	        clearInterval(upSpinTimer);
	
	        switch (spinning) {
	          case 'up':
	            originalinput.trigger('touchspin.on.stopupspin');
	            originalinput.trigger('touchspin.on.stopspin');
	            break;
	          case 'down':
	            originalinput.trigger('touchspin.on.stopdownspin');
	            originalinput.trigger('touchspin.on.stopspin');
	            break;
	        }
	
	        spincount = 0;
	        spinning = false;
	      }
	
	    });
	
	  };
	
	})(jQuery);


/***/ },
/* 157 */
/***/ function(module, exports) {

	module.exports = "<rl-generic-container selector=\"spinner.ngDisabled\">\r\n\t<template default>\r\n\t\t<div class=\"validation-input-group\">\r\n\t\t\t<div class=\"validation-input\" ng-class=\"{ 'error': spinner.ngModel.$invalid, 'required-error': spinner.ngModel.$error.required }\">\r\n\t\t\t\t<input name=\"{{spinner.name}}\" class=\"spinner\" id=\"{{spinner.spinnerId}}\" type=\"text\" />\r\n                <span class=\"error-string\" ng-hide=\"spinner.spinnerValidator.error | isEmpty\">{{spinner.spinnerValidator.error}}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</template>\r\n\t<template when-selector=\"true\">\r\n\t\t<div class=\"input-group\" ng-show=\"spinner.prefix != null && spinner.postfix != null\">\r\n\t\t\t<span class=\"input-group-addon\">{{spinner.prefix}}</span>\r\n\t\t\t<input disabled=\"true\" type=\"text\" ng-model=\"spinner.ngModel.$viewValue\" class=\"form-control\" />\r\n\t\t\t<span class=\"input-group-addon\">{{spinner.postfix}}</span>\r\n\t\t</div>\r\n\t\t<div class=\"input-group\" ng-show=\"spinner.prefix != null && spinner.postfix == null\">\r\n\t\t\t<span class=\"input-group-addon\">{{spinner.prefix}}</span>\r\n\t\t\t<input disabled=\"true\" type=\"text\" ng-model=\"spinner.ngModel.$viewValue\" class=\"form-control\" />\r\n\t\t</div>\r\n\t\t<div class=\"input-group\" ng-show=\"spinner.prefix == null && spinner.postfix != null\">\r\n\t\t\t<input disabled=\"true\" type=\"text\" ng-model=\"spinner.ngModel.$viewValue\" class=\"form-control\" />\r\n\t\t\t<span class=\"input-group-addon\">{{spinner.postfix}}</span>\r\n\t\t</div>\r\n\t\t<div class=\"input-group\" ng-show=\"spinner.prefix == null && spinner.postfix == null\">\r\n\t\t\t<input disabled=\"true\" type=\"text\" ng-model=\"spinner.ngModel.$viewValue\" class=\"form-control\" />\r\n\t\t</div>\r\n\t</template>\r\n</rl-generic-container>"

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __object = typescript_angular_utilities_1.services.object;
	exports.moduleName = 'rl.ui.components.stringWithWatermark';
	exports.directiveName = 'rlStringWithWatermark';
	exports.controllerName = 'StringWithWatermarkController';
	var StringWithWatermarkController = (function () {
	    function StringWithWatermarkController($scope, objectUtility) {
	        var _this = this;
	        $scope.$watch(function () { return _this.string; }, function (value) {
	            _this.hasString = objectUtility.isNullOrEmpty(value) === false;
	        });
	    }
	    StringWithWatermarkController.$inject = ['$scope', __object.serviceName];
	    return StringWithWatermarkController;
	}());
	exports.StringWithWatermarkController = StringWithWatermarkController;
	function stringWithWatermark() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: "\n\t\t\t<span>\n\t\t\t\t<span ng-show=\"controller.hasString\">{{controller.string}}</span>\n\t\t\t\t<span ng-hide=\"controller.hasString\" class=\"watermark\">{{controller.watermark}}</span>\n\t\t\t</span>\n\t\t",
	        controller: exports.controllerName,
	        controllerAs: 'controller',
	        scope: {},
	        bindToController: {
	            string: '@',
	            watermark: '@',
	        }
	    };
	}
	exports.stringWithWatermark = stringWithWatermark;
	angular.module(exports.moduleName, [__object.moduleName])
	    .directive(exports.directiveName, stringWithWatermark)
	    .controller(exports.controllerName, StringWithWatermarkController);
	//# sourceMappingURL=stringWithWatermark.js.map

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var tab_1 = __webpack_require__(160);
	exports.tabDirectiveName = tab_1.directiveName;
	exports.tab = tab_1.tab;
	exports.tabControllerName = tab_1.controllerName;
	exports.TabController = tab_1.TabController;
	var tabset_1 = __webpack_require__(162);
	exports.tabsetDirectiveName = tabset_1.directiveName;
	exports.tabset = tabset_1.tabset;
	exports.tabsetControllerName = tabset_1.controllerName;
	exports.TabsetController = tabset_1.TabsetController;
	exports.moduleName = 'rl.ui.components.tabs';
	angular.module(exports.moduleName, [])
	    .directive(tab_1.directiveName, tab_1.tab)
	    .controller(tab_1.controllerName, tab_1.TabController)
	    .directive(tabset_1.directiveName, tabset_1.tabset)
	    .controller(tabset_1.controllerName, tabset_1.TabsetController);
	//# sourceMappingURL=tabs.module.js.map

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	exports.directiveName = 'rlTab';
	exports.controllerName = 'rlTabController';
	var TabController = (function () {
	    function TabController($scope) {
	        var _this = this;
	        $scope.$watch('tabForm.$valid', function (isValid) {
	            _this.header.isValid = isValid != null ? isValid : true;
	        });
	    }
	    TabController.$inject = ['$scope'];
	    return TabController;
	}());
	exports.TabController = TabController;
	function tab() {
	    return {
	        restrict: 'E',
	        transclude: true,
	        require: ['^^rlTabset', 'rlTab'],
	        template: __webpack_require__(161),
	        controller: exports.controllerName,
	        controllerAs: 'tab',
	        scope: {},
	        bindToController: {},
	        link: function (scope, element, attrs, controllers, transclude) {
	            transclude(function (clone) {
	                var header = clone.filter('rl-tab-header');
	                var content = clone.filter('rl-tab-content');
	                var footer = clone.filter('rl-tab-footer');
	                var tabset = controllers[0];
	                var tab = controllers[1];
	                tab.header = {
	                    template: header.html(),
	                    isValid: true,
	                };
	                tabset.registerTab(element, tab.header);
	                var contentArea = element.find('.content-template');
	                contentArea.append(content);
	                scope.hasFooter = (footer.length > 0);
	                if (scope.hasFooter) {
	                    var footerArea = element.find('.footer-template');
	                    footerArea.append(footer);
	                }
	            });
	        },
	    };
	}
	exports.tab = tab;
	//# sourceMappingURL=tab.js.map

/***/ },
/* 161 */
/***/ function(module, exports) {

	module.exports = "<div class=\"tab-pane\" ng-class=\"{ 'active': tab.header.isVisible }\">\r\n\t<div class=\"tab-body\">\r\n\t\t<div class=\"content-template\" ng-form=\"tabForm\"></div>\r\n\t\t<div class=\"clearfix\"></div>\r\n\t</div>\r\n\t<div class=\"tab-footer\" ng-show=\"hasFooter\">\r\n\t\t<div class=\"footer-template\"></div>\r\n\t\t<div class=\"clearfix\"></div>\r\n\t</div>\r\n</div>"

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var _ = __webpack_require__(18);
	exports.directiveName = 'rlTabset';
	exports.controllerName = 'rlTabsetController';
	var TabsetController = (function () {
	    function TabsetController() {
	        this.tabHeaders = [];
	    }
	    TabsetController.prototype.registerTab = function (element, header) {
	        var index = this.findPosition(element);
	        this.tabHeaders[index] = header;
	        header.isVisible = (index === 0);
	    };
	    TabsetController.prototype.select = function (tab) {
	        _.each(this.tabHeaders, function (otherTab) {
	            otherTab.isVisible = false;
	        });
	        tab.isVisible = true;
	    };
	    return TabsetController;
	}());
	exports.TabsetController = TabsetController;
	function tabset() {
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: __webpack_require__(163),
	        controller: exports.controllerName,
	        controllerAs: 'tabset',
	        scope: {},
	        link: {
	            pre: function (scope, element, attrs, tabset) {
	                tabset.findPosition = function (tabElement) {
	                    // find the position of the specified element by iterating over the tabs and finding a matching element
	                    var tabs = element.find('rl-tab');
	                    var num;
	                    _.each(tabs, function (elem, index) {
	                        if (tabElement[0] === elem) {
	                            num = index;
	                            return false;
	                        }
	                    });
	                    return num;
	                };
	            },
	        },
	    };
	}
	exports.tabset = tabset;
	//# sourceMappingURL=tabset.js.map

/***/ },
/* 163 */
/***/ function(module, exports) {

	module.exports = "<div class=\"nav-tabs-dropshadow\">\r\n\t<ul class=\"nav nav-tabs\">\r\n\t\t<li ng-repeat=\"tabHeader in tabset.tabHeaders\" ng-click=\"tabset.select(tabHeader)\"\r\n\t\t\tng-class=\"{ 'active': tabHeader.isVisible, 'error': !tabHeader.isValid }\">\r\n\t\t\t<a><span ng-bind-html=\"tabHeader.template\"></span></a>\r\n\t\t</li>\r\n\t</ul>\r\n\t<div class=\"tab-content\">\r\n\t\t<div ng-transclude></div>\r\n\t</div>\r\n</div>"

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var componentValidator_service_1 = __webpack_require__(105);
	exports.moduleName = 'rl.ui.components.textarea';
	exports.directiveName = 'rlTextarea';
	exports.controllerName = 'TextareaController';
	var TextareaController = (function () {
	    function TextareaController($element, $scope, componentValidatorFactory) {
	        this.ngModel = $element.controller('ngModel');
	        if (!_.isUndefined(this.validator)) {
	            this.textareaValidator = componentValidatorFactory.getInstance({
	                ngModel: this.ngModel,
	                $scope: $scope,
	                validators: [this.validator],
	            });
	        }
	    }
	    Object.defineProperty(TextareaController.prototype, "text", {
	        get: function () {
	            return this.ngModel.$viewValue;
	        },
	        set: function (value) {
	            this.ngModel.$setViewValue(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TextareaController.$inject = ['$element', '$scope', componentValidator_service_1.factoryName];
	    return TextareaController;
	}());
	exports.TextareaController = TextareaController;
	function textarea() {
	    return {
	        restrict: 'E',
	        require: 'ngModel',
	        template: __webpack_require__(165),
	        controller: exports.controllerName,
	        controllerAs: 'textarea',
	        scope: {},
	        bindToController: {
	            name: '@',
	            rows: '=',
	            ngDisabled: '=',
	            label: '@',
	            validator: '=',
	            maxlength: '=',
	        },
	    };
	}
	exports.textarea = textarea;
	angular.module(exports.moduleName, [componentValidator_service_1.moduleName])
	    .directive(exports.directiveName, textarea)
	    .controller(exports.controllerName, TextareaController);
	//# sourceMappingURL=textarea.js.map

/***/ },
/* 165 */
/***/ function(module, exports) {

	module.exports = "<div class=\"validation-input-group\">\r\n\t<div class=\"field validation-input\" ng-class=\"{ 'error': textarea.ngModel.$invalid, 'required-error': textarea.ngModel.$error.required }\">\r\n\t\t<label ng-show=\"textarea.text && textarea.label\" class=\"show-hide angular-animate\">{{textarea.label}}</label>\r\n\t\t<textarea class=\"form-control\" ng-model=\"textarea.text\" name=\"{{textarea.name}}\" rows=\"{{textarea.rows}}\" maxlength=\"{{textarea.maxlength}}\" ng-disabled=\"textarea.ngDisabled\" placeholder=\"{{textarea.label}}\"></textarea>\r\n        <span class=\"error-string\" ng-hide=\"textarea.textareaValidator.error | isEmpty\">{{textarea.textareaValidator.error}}</span>\r\n\t</div>\r\n</div>"

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var componentValidator_service_1 = __webpack_require__(105);
	exports.moduleName = 'rl.ui.components.textbox';
	exports.directiveName = 'rlTextbox';
	exports.controllerName = 'TextboxController';
	var TextboxController = (function () {
	    function TextboxController($element, $scope, componentValidatorFactory) {
	        this.ngModel = $element.controller('ngModel');
	        if (!_.isUndefined(this.validator)) {
	            this.textboxValidator = componentValidatorFactory.getInstance({
	                ngModel: this.ngModel,
	                $scope: $scope,
	                validators: [this.validator],
	            });
	        }
	    }
	    Object.defineProperty(TextboxController.prototype, "text", {
	        get: function () {
	            return this.ngModel.$viewValue;
	        },
	        set: function (value) {
	            this.ngModel.$setViewValue(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TextboxController.$inject = ['$element', '$scope', componentValidator_service_1.factoryName];
	    return TextboxController;
	}());
	exports.TextboxController = TextboxController;
	function textbox() {
	    return {
	        restrict: 'E',
	        require: 'ngModel',
	        template: __webpack_require__(167),
	        controller: exports.controllerName,
	        controllerAs: 'textbox',
	        scope: {},
	        bindToController: {
	            validator: '=',
	            label: '@',
	            maxlength: '=',
	        },
	    };
	}
	exports.textbox = textbox;
	angular.module(exports.moduleName, [componentValidator_service_1.moduleName])
	    .directive(exports.directiveName, textbox)
	    .controller(exports.controllerName, TextboxController);
	//# sourceMappingURL=textbox.js.map

/***/ },
/* 167 */
/***/ function(module, exports) {

	module.exports = "<div class=\"validation-input-group\">\r\n\t<div class=\"field validation-input\" ng-class=\"{ 'error': textbox.ngModel.$invalid, 'required-error': textbox.ngModel.$error.required }\">\r\n\t\t<label ng-show=\"textbox.text && textbox.label\" class=\"show-hide angular-animate\">{{textbox.label}}</label>\r\n\t\t<input  type=\"text\" class=\"form-control angular-animate\" ng-model=\"textbox.text\" placeholder=\"{{textbox.label}}\" maxlength=\"{{textbox.maxlength}}\" />\r\n        <span class=\"error-string\" ng-hide=\"textbox.textboxValidator.error | isEmpty\">{{textbox.textboxValidator.error}}</span>\r\n\t</div>\r\n</div>"

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __parentChild = typescript_angular_utilities_1.services.parentChildBehavior;
	var __genericSearch = typescript_angular_utilities_1.services.genericSearchFilter;
	var __objectUtility = typescript_angular_utilities_1.services.object;
	var __arrayUtility = typescript_angular_utilities_1.services.array;
	var __promiseUtility = typescript_angular_utilities_1.services.promise;
	exports.moduleName = 'rl.ui.components.typeahead';
	exports.directiveName = 'rlTypeahead';
	exports.controllerName = 'TypeaheadController';
	var TypeaheadController = (function () {
	    function TypeaheadController($scope, $attrs, $q, parentChild, genericSearchFactory, object, array, promise) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.parentChild = parentChild;
	        this.array = array;
	        this.promise = promise;
	        this.loading = false;
	        this.addItem = function (item) {
	            if (_this.cachedItems != null) {
	                _this.cachedItems.push(item);
	            }
	        };
	        this.removeItem = function (item) {
	            if (_this.cachedItems != null) {
	                _this.array.remove(_this.cachedItems, item);
	            }
	        };
	        this.searchFilter = genericSearchFactory.getInstance();
	        this.loadDelay = this.useClientSearching ? 100 : 500;
	        this.selection = this.selectionBinding;
	        if (this.hasSelection == null) {
	            this.hasSelection = false;
	        }
	        if (this.placeholder == null) {
	            this.placeholder = 'Search';
	        }
	        if (this.showSearch == null) {
	            this.showSearch = true;
	        }
	        this.useScopeSelection = object.isNullOrEmpty($attrs.selection) === false;
	        this.hasTransform = object.isNullOrEmpty($attrs.transform) === false;
	        this.useApply = object.isNullOrEmpty($attrs.apply) === false;
	        this.parentChild.registerChildBehavior(this.childLink, {
	            add: this.addItem,
	            remove: this.removeItem,
	        });
	        $scope.$watch(function () { return _this.selection; }, function (value) {
	            _this.hasSelection = _.isObject(value);
	            _this.setSelection(value);
	        });
	        $scope.$watch(function () { return _this.selectionBinding; }, function (value) {
	            if (value == null) {
	                _this.selection = null;
	            }
	        });
	    }
	    TypeaheadController.prototype.setSelection = function (object) {
	        if (this.useScopeSelection) {
	            this.selection = object;
	        }
	        if (_.isFunction(this.select)) {
	            this.select({ value: object, hasSelection: this.hasSelection });
	        }
	    };
	    TypeaheadController.prototype.transform = function (object) {
	        if (this.hasTransform && object != null) {
	            return this.transformInParent({
	                value: object,
	            });
	        }
	        return object;
	    };
	    TypeaheadController.prototype.getItems = function (search) {
	        var _this = this;
	        if (!this.useClientSearching) {
	            return this.getItemsInParent({
	                search: search,
	            });
	        }
	        else {
	            this.searchFilter.searchText = search;
	            if (this.cachedItems != null) {
	                return this.$q.when(this.filter(this.cachedItems));
	            }
	            else {
	                return this.$q.when(this.getItemsInParent()).then(function (data) {
	                    _this.cachedItems = data;
	                    return _this.filter(data);
	                });
	            }
	        }
	    };
	    TypeaheadController.prototype.applyItem = function () {
	        var _this = this;
	        if (this.useApply && this.hasSelection) {
	            var request = this.apply({ value: this.selection });
	            if (this.promise.isPromise(request)) {
	                return request.then(function () {
	                    _this.removeItem(_this.selection);
	                    _this.selection = null;
	                });
	            }
	            else if (!_.isUndefined(request)) {
	                this.removeItem(this.selection);
	                this.selection = null;
	            }
	        }
	        return this.$q.when();
	    };
	    TypeaheadController.prototype.filter = function (list) {
	        var _this = this;
	        return _.filter(list, function (item) { return _this.searchFilter.filter(item); });
	    };
	    TypeaheadController.$inject = ['$scope',
	        '$attrs',
	        '$q',
	        __parentChild.serviceName,
	        __genericSearch.factoryName,
	        __objectUtility.serviceName,
	        __arrayUtility.serviceName,
	        __promiseUtility.serviceName];
	    return TypeaheadController;
	}());
	exports.TypeaheadController = TypeaheadController;
	function typeahead() {
	    'use strict';
	    return {
	        restrict: 'E',
	        template: __webpack_require__(169),
	        controller: exports.controllerName,
	        controllerAs: 'typeahead',
	        scope: {},
	        bindToController: {
	            childLink: '=?',
	            selectionBinding: '=?selection',
	            hasSelection: '=?',
	            select: '&',
	            transformInParent: '&transform',
	            getItemsInParent: '&getItems',
	            placeholder: '@',
	            useClientSearching: '=?',
	            hasError: '=?',
	            showSearch: '=?',
	            apply: '&',
	        },
	    };
	}
	exports.typeahead = typeahead;
	angular.module(exports.moduleName, [
	    __parentChild.moduleName,
	    __genericSearch.moduleName,
	    __objectUtility.moduleName,
	    __arrayUtility.moduleName,
	    __promiseUtility.moduleName])
	    .directive(exports.directiveName, typeahead)
	    .controller(exports.controllerName, TypeaheadController);
	//# sourceMappingURL=typeahead.js.map

/***/ },
/* 169 */
/***/ function(module, exports) {

	module.exports = "<div class=\"input-group\" ng-class=\"{ 'has-error': typeahead.hasError }\">\r\n\t<input type=\"text\" ng-model=\"typeahead.selection\" class=\"form-control\"\r\n\t\tplaceholder=\"{{typeahead.placeholder}}\" typeahead=\"object as typeahead.transform(object) for object in typeahead.getItems($viewValue)\"\r\n\t\ttypeahead-loading=\"typeahead.loading\" typeahead-wait-ms=\"typeahead.loadDelay\" />\r\n\t<div class=\"input-group-addon\" ng-if=\"typeahead.showSearch\">\r\n\t\t<rl-busy loading=\"typeahead.loading\"></rl-busy>\r\n\t\t<span ng-hide=\"typeahead.loading\">\r\n\t\t\t<i class=\"fa fa-search\" ng-hide=\"typeahead.hasSelection\"></i>\r\n\t\t\t<i class=\"fa fa-check\" ng-show=\"typeahead.hasSelection\"></i>\r\n\t\t</span>\r\n\t</div>\r\n\t<div class=\"input-group-btn\" ng-if=\"typeahead.useApply\">\r\n\t\t<rl-button-async type=\"default\" action=\"typeahead.applyItem()\" right-aligned=\"true\" ng-disabled=\"!typeahead.hasSelection\">\r\n\t\t\t<i class=\"fa fa-plus new\"></i>\r\n\t\t</rl-button-async>\r\n\t</div>\r\n</div>"

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	exports.moduleName = 'rl.components.userRating';
	exports.directiveName = 'rlUserRating';
	exports.controllerName = 'UserRatingController';
	var UserRatingController = (function () {
	    function UserRatingController($scope) {
	        var _this = this;
	        this.$scope = $scope;
	        this.stars = [];
	        var rangeSize = this.$scope.range != null ? this.$scope.range : 5;
	        // css style requires the stars to show right to left. Reverse the list so the highest value is first
	        var range = _.range(1, rangeSize + 1).reverse();
	        _.each(range, function (rating) {
	            _this.stars.push({
	                value: rating,
	                filled: false,
	            });
	        });
	        var unbind = this.$scope.$watch('ngModel', function (value) {
	            _this.updateStarView(_this.$scope.ngModel.$viewValue);
	            unbind();
	        });
	    }
	    UserRatingController.prototype.setRating = function (rating) {
	        this.$scope.ngModel.$setViewValue(rating);
	        this.updateStarView(rating);
	    };
	    UserRatingController.prototype.updateStarView = function (rating) {
	        _.each(this.stars, function (star) {
	            if (star.value <= rating) {
	                star.filled = true;
	            }
	            else {
	                star.filled = false;
	            }
	        });
	    };
	    UserRatingController.$inject = ['$scope'];
	    return UserRatingController;
	}());
	exports.UserRatingController = UserRatingController;
	function userRating() {
	    'use strict';
	    return {
	        restrict: 'E',
	        require: 'ngModel',
	        template: "\n\t\t\t<span class=\"rating\">\n\t\t\t\t<span class=\"star\" ng-repeat=\"star in userRating.stars\" ng-class=\"{ 'filled': star.filled }\" ng-click=\"userRating.setRating(star.value)\"></span>\n\t\t\t</span>\n\t\t",
	        controller: exports.controllerName,
	        controllerAs: 'userRating',
	        scope: {
	            range: '=',
	        },
	        link: function (scope, element, attrs, ngModel) {
	            scope.ngModel = ngModel;
	        },
	    };
	}
	exports.userRating = userRating;
	angular.module(exports.moduleName, [])
	    .directive(exports.directiveName, userRating)
	    .controller(exports.controllerName, UserRatingController);
	//# sourceMappingURL=userRating.js.map

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path='../../../typings/commonjs.d.ts' />
	'use strict';
	var angular = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var componentValidator_service_1 = __webpack_require__(105);
	exports.moduleName = 'rl.ui.components.validationGroup';
	exports.directiveName = 'rlValidationGroup';
	exports.controllerName = 'ValidationGroupController';
	var ValidationGroupController = (function () {
	    function ValidationGroupController($scope, componentValidatorFactory) {
	        var _this = this;
	        var unbind = $scope.$watch('validationGroupForm', function (form) {
	            if (!_.isUndefined(_this.validator)) {
	                _this.groupValidator = componentValidatorFactory.getInstance({
	                    form: $scope.validationGroupForm,
	                    $scope: $scope,
	                    validators: [_this.validator],
	                });
	            }
	            unbind();
	        });
	    }
	    ValidationGroupController.$inject = ['$scope', componentValidator_service_1.factoryName];
	    return ValidationGroupController;
	}());
	exports.ValidationGroupController = ValidationGroupController;
	function validationGroup() {
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: __webpack_require__(172),
	        controller: exports.controllerName,
	        controllerAs: 'group',
	        scope: {},
	        bindToController: {
	            validator: '=',
	        },
	    };
	}
	exports.validationGroup = validationGroup;
	angular.module(exports.moduleName, [componentValidator_service_1.moduleName])
	    .directive(exports.directiveName, validationGroup)
	    .controller(exports.controllerName, ValidationGroupController);
	//# sourceMappingURL=validationGroup.js.map

/***/ },
/* 172 */
/***/ function(module, exports) {

	module.exports = "<div class=\"content-group\" ng-form=\"validationGroupForm\">\r\n\t<div class=\"error\" ng-show=\"validationGroupForm.$error.customValidation\">\r\n\t\t<label>{{group.groupValidator.error}}</label>\r\n\t</div>\r\n\t<div ng-transclude></div>\r\n</div>"

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var autosave = __webpack_require__(17);
	exports.autosave = autosave;
	var autosaveAction = __webpack_require__(19);
	exports.autosaveAction = autosaveAction;
	var autosaveDialog = __webpack_require__(174);
	exports.autosaveDialog = autosaveDialog;
	var breakpoints = __webpack_require__(181);
	exports.breakpoints = breakpoints;
	var componentValidator = __webpack_require__(105);
	exports.componentValidator = componentValidator;
	var contentProvider = __webpack_require__(185);
	exports.contentProvider = contentProvider;
	var dialog = __webpack_require__(176);
	exports.dialog = dialog;
	var documentWrapper = __webpack_require__(186);
	exports.documentWrapper = documentWrapper;
	var jquery = __webpack_require__(113);
	exports.jquery = jquery;
	var templateLoader = __webpack_require__(114);
	exports.templateLoader = templateLoader;
	var windowWrapper = __webpack_require__(182);
	exports.windowWrapper = windowWrapper;
	exports.moduleName = 'rl.ui.services';
	angular.module(exports.moduleName, [
	    autosave.moduleName,
	    autosaveAction.moduleName,
	    autosaveDialog.moduleName,
	    breakpoints.moduleName,
	    componentValidator.moduleName,
	    contentProvider.moduleName,
	    dialog.moduleName,
	    documentWrapper.moduleName,
	    jquery.moduleName,
	    templateLoader.moduleName,
	    windowWrapper.moduleName,
	]);
	//# sourceMappingURL=services.module.js.map

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __promise = typescript_angular_utilities_1.services.promise;
	var autosave_service_1 = __webpack_require__(17);
	var autosaveDialog_service_1 = __webpack_require__(175);
	var autosaveDialog_controller_1 = __webpack_require__(180);
	__export(__webpack_require__(175));
	__export(__webpack_require__(180));
	exports.moduleName = 'rl.ui.services.autosaveDialog';
	angular.module(exports.moduleName, [__promise.moduleName, autosave_service_1.moduleName])
	    .service(autosaveDialog_service_1.serviceName, autosaveDialog_service_1.AutosaveDialogService)
	    .controller(autosaveDialog_controller_1.controllerName, autosaveDialog_controller_1.AutosaveDialogController);
	//# sourceMappingURL=autosaveDialog.module.js.map

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __promise = typescript_angular_utilities_1.services.promise;
	var dialog_service_1 = __webpack_require__(176);
	var autosave_service_1 = __webpack_require__(17);
	var autosaveDialog_controller_1 = __webpack_require__(180);
	exports.serviceName = 'autosaveDialog';
	var AutosaveDialogService = (function () {
	    function AutosaveDialogService($rootScope, dialog, autosaveFactory, promise) {
	        var _this = this;
	        this.$rootScope = $rootScope;
	        this.dialog = dialog;
	        this.autosaveFactory = autosaveFactory;
	        this.promise = promise;
	        this.autosaveCloseHandler = function (explicit) {
	            if (explicit) {
	                return true;
	            }
	            return _this.autosave.autosave(_this.data);
	        };
	        this.setForm = function (form) {
	            _this.autosave.contentForm = form;
	        };
	    }
	    AutosaveDialogService.prototype.open = function (options) {
	        var _this = this;
	        this.promise.resolvePromises(options.resolve).then(function (resolveData) {
	            var scope = options.scope;
	            if (scope == null) {
	                scope = _this.$rootScope.$new();
	                options.scope = scope;
	            }
	            if (options.data == null) {
	                options.data = {};
	            }
	            if (options.triggers == null) {
	                options.triggers = 'none';
	            }
	            _this.autosave = _this.autosaveFactory.getInstance({
	                save: options.save,
	                validate: options.validate,
	                triggers: options.triggers,
	            });
	            scope.form = options.form;
	            scope.formGetter = options.formGetter;
	            scope.setForm = _this.setForm;
	            _this.data = _.extend(options.data, resolveData);
	            scope.dialog = _this.data;
	            var dialogOptions = options;
	            dialogOptions.controller = autosaveDialog_controller_1.controllerName;
	            dialogOptions.controllerAs = 'controller';
	            _this.dialog.open(options, _this.autosaveCloseHandler);
	        });
	    };
	    AutosaveDialogService.$inject = ['$rootScope', dialog_service_1.serviceName, autosave_service_1.factoryName, __promise.serviceName];
	    return AutosaveDialogService;
	}());
	exports.AutosaveDialogService = AutosaveDialogService;
	//# sourceMappingURL=autosaveDialog.service.js.map

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ng = __webpack_require__(1);
	var bootstrapModalDialog = __webpack_require__(177);
	exports.bootstrapModalDialog = bootstrapModalDialog;
	exports.moduleName = 'rl.ui.services.dialog';
	exports.serviceName = 'dialog';
	var DialogService = (function () {
	    function DialogService(dialog) {
	        this.dialog = dialog;
	    }
	    DialogService.prototype.open = function (options, closeHandler) {
	        return this.dialog.open(options, closeHandler);
	    };
	    return DialogService;
	}());
	exports.DialogService = DialogService;
	function dialogServiceProvider() {
	    'use strict';
	    var _this = this;
	    var provider = {
	        setImplementation: function (dialogImplementation) {
	            _this.dialogImplementation = dialogImplementation;
	        },
	        $get: function (bootstrapModalDialog) {
	            var dialogImplementation = _this.dialogImplementation != null
	                ? _this.dialogImplementation
	                : bootstrapModalDialog;
	            return new DialogService(dialogImplementation);
	        },
	    };
	    provider.$get.$inject = [bootstrapModalDialog.serviceName];
	    return provider;
	}
	exports.dialogServiceProvider = dialogServiceProvider;
	ng.module(exports.moduleName, [bootstrapModalDialog.moduleName])
	    .provider(exports.serviceName, dialogServiceProvider);
	//# sourceMappingURL=dialog.service.js.map

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __promise = typescript_angular_utilities_1.services.promise;
	var bootstrapModalDialog_controller_1 = __webpack_require__(178);
	var bootstrapModalDialog_service_1 = __webpack_require__(179);
	__export(__webpack_require__(178));
	__export(__webpack_require__(179));
	exports.moduleName = 'rl.ui.services.dialog.bootstrapModalDialog';
	angular.module(exports.moduleName, [__promise.moduleName])
	    .controller(bootstrapModalDialog_controller_1.controllerName, bootstrapModalDialog_controller_1.BootstrapModalDialogController)
	    .service(bootstrapModalDialog_service_1.serviceName, bootstrapModalDialog_service_1.BootstrapModalDialogService);
	//# sourceMappingURL=bootstrapModalDialog.module.js.map

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var bootstrapModalDialog_service_1 = __webpack_require__(179);
	exports.controllerName = 'BootstrapModalDialogController';
	var BootstrapModalDialogController = (function () {
	    function BootstrapModalDialogController($scope, $controller, baseDialog) {
	        var controller;
	        if ($scope.modalController != null) {
	            var locals = $scope.resolveData || {};
	            $scope.resolveData = null;
	            locals.$scope = $scope;
	            controller = $controller($scope.modalController, locals);
	        }
	        $scope.$on('modal.closing', baseDialog.modalClosing);
	        return controller;
	    }
	    BootstrapModalDialogController.$inject = ['$scope', '$controller', bootstrapModalDialog_service_1.serviceName];
	    return BootstrapModalDialogController;
	}());
	exports.BootstrapModalDialogController = BootstrapModalDialogController;
	//# sourceMappingURL=bootstrapModalDialog.controller.js.map

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __promise = typescript_angular_utilities_1.services.promise;
	var bootstrapModalDialog_controller_1 = __webpack_require__(178);
	exports.serviceName = 'uiBootstrapModelDialog';
	var BootstrapModalDialogService = (function () {
	    function BootstrapModalDialogService($modal, $rootScope, promise) {
	        var _this = this;
	        this.$modal = $modal;
	        this.$rootScope = $rootScope;
	        this.promise = promise;
	        this.modalClosing = function (event, reason, explicitlyClosed) {
	            var canClose = true;
	            if (_.isFunction(_this.closeHandler)) {
	                canClose = _this.closeHandler(explicitlyClosed);
	            }
	            if (!canClose) {
	                event.preventDefault();
	            }
	        };
	    }
	    BootstrapModalDialogService.prototype.open = function (options, closeHandler) {
	        var _this = this;
	        if (options == null) {
	            options = {};
	        }
	        var dialogInstance = {
	            close: function () { },
	            dismiss: function () { },
	        };
	        this.promise.resolvePromises(options.resolve).then(function (results) {
	            _this.closeHandler = closeHandler;
	            options = _this.configureModalSettings(options, results);
	            var modalInstance = _this.$modal.open(options);
	            dialogInstance.close = modalInstance.close;
	            dialogInstance.dismiss = modalInstance.dismiss;
	        });
	        return dialogInstance;
	    };
	    BootstrapModalDialogService.prototype.configureModalSettings = function (options, resolveData) {
	        var modalScope = options.scope;
	        if (modalScope == null) {
	            modalScope = this.$rootScope.$new();
	        }
	        if (options.resolveToDialog) {
	            if (options.dialogAs != null) {
	                modalScope[options.dialogAs] = resolveData;
	            }
	            else {
	                modalScope = _.extend(modalScope, resolveData);
	            }
	        }
	        else {
	            modalScope.resolveData = resolveData;
	        }
	        modalScope.modalController = options.controller;
	        options.resolve = null;
	        options.controller = bootstrapModalDialog_controller_1.controllerName;
	        options.scope = modalScope;
	        return options;
	    };
	    BootstrapModalDialogService.$inject = ['$uibModal', '$rootScope', __promise.serviceName];
	    return BootstrapModalDialogService;
	}());
	exports.BootstrapModalDialogService = BootstrapModalDialogService;
	//# sourceMappingURL=bootstrapModalDialog.service.js.map

/***/ },
/* 180 */
/***/ function(module, exports) {

	'use strict';
	exports.controllerName = 'AutosaveDialogController';
	var AutosaveDialogController = (function () {
	    function AutosaveDialogController($scope) {
	        this.$scope = $scope;
	        if ($scope.form != null) {
	            var unbind = $scope.$watch($scope.form, function (form) {
	                if (form != null) {
	                    $scope.setForm(form);
	                    unbind();
	                }
	            });
	        }
	        else if ($scope.formGetter != null) {
	            var unbind = $scope.$watch(function () { return $scope.formGetter($scope); }, function (form) {
	                if (form != null) {
	                    $scope.setForm(form);
	                    unbind();
	                }
	            });
	        }
	    }
	    AutosaveDialogController.$inject = ['$scope'];
	    return AutosaveDialogController;
	}());
	exports.AutosaveDialogController = AutosaveDialogController;
	//# sourceMappingURL=autosaveDialog.controller.js.map

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var angular = __webpack_require__(1);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var windowWrapper_service_1 = __webpack_require__(182);
	var visibleBreakpoint_service_1 = __webpack_require__(183);
	var breakpoints_service_1 = __webpack_require__(184);
	__export(__webpack_require__(44));
	__export(__webpack_require__(183));
	__export(__webpack_require__(184));
	exports.moduleName = 'rl.ui.services.breakpoints';
	angular.module(exports.moduleName, [
	    typescript_angular_utilities_1.services.observable.moduleName,
	    windowWrapper_service_1.moduleName,
	])
	    .constant('resizeDebounceMilliseconds', 500)
	    .service(visibleBreakpoint_service_1.visibleBreakpointServiceName, visibleBreakpoint_service_1.VisibleBreakpointService)
	    .service(breakpoints_service_1.breakpointServiceName, breakpoints_service_1.BreakpointService);
	//# sourceMappingURL=breakpoints.module.js.map

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var $ = __webpack_require__(12);
	exports.moduleName = 'rl.ui.services.windowWrapper';
	exports.serviceName = 'windowWrapper';
	var WindowService = (function () {
	    function WindowService() {
	        this.windowControl = $(window);
	    }
	    WindowService.prototype.resize = function (callback) {
	        this.windowControl.resize(callback);
	    };
	    WindowService.prototype.scrollTop = function () {
	        return this.windowControl.scrollTop();
	    };
	    WindowService.prototype.scroll = function (handler) {
	        this.windowControl.scroll(handler);
	    };
	    WindowService.prototype.height = function () {
	        return this.windowControl.height();
	    };
	    return WindowService;
	}());
	angular.module(exports.moduleName, [])
	    .service(exports.serviceName, WindowService);
	//# sourceMappingURL=windowWrapper.service.js.map

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(12);
	/*
	 * Implementation also requires the following elements to be inserted on the page:
	 *   <div class="device-xs visible-xs"></div>
	 *   <div class="device-sm visible-sm"></div>
	 *   <div class="device-md visible-md"></div>
	 *   <div class="device-lg visible-lg"></div>
	 * They have been inserted into index.html for your convenience.
	 */
	exports.visibleBreakpointServiceName = 'visibleBreakpoint';
	var VisibleBreakpointService = (function () {
	    function VisibleBreakpointService() {
	    }
	    VisibleBreakpointService.prototype.isVisible = function (breakpoint) {
	        // jquery gets the breakpoint trigger directives listed above on line 3
	        return $('.device-' + breakpoint).is(':visible');
	    };
	    return VisibleBreakpointService;
	}());
	exports.VisibleBreakpointService = VisibleBreakpointService;
	//# sourceMappingURL=visibleBreakpoint.service.js.map

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var windowWrapper_service_1 = __webpack_require__(182);
	var visibleBreakpoint_service_1 = __webpack_require__(183);
	var breakpoint_1 = __webpack_require__(44);
	exports.breakpointServiceName = 'breakpoints';
	var __observable = typescript_angular_utilities_1.services.observable;
	var BreakpointService = (function () {
	    function BreakpointService($rootScope, visibleBreakpoints, resizeDebounceMilliseconds, windowService, observableFactory) {
	        var _this = this;
	        this.$rootScope = $rootScope;
	        this.visibleBreakpoints = visibleBreakpoints;
	        this.updateBreakpoint = function () {
	            var newBreakPoint = _this.getBreakpoint();
	            if (newBreakPoint !== _this.currentBreakpoint) {
	                _this.$rootScope.$apply(function () {
	                    _this.currentBreakpoint = newBreakPoint;
	                    _this.observable.fire('window.breakpointChanged', _this.currentBreakpoint);
	                });
	            }
	        };
	        this.currentBreakpoint = this.getBreakpoint();
	        this.observable = observableFactory.getInstance();
	        var efficientResize = _.debounce(this.updateBreakpoint, resizeDebounceMilliseconds, {
	            leading: true,
	            trailing: true,
	            maxWait: resizeDebounceMilliseconds,
	        });
	        windowService.resize(efficientResize);
	    }
	    BreakpointService.prototype.getBreakpoint = function () {
	        if (this.visibleBreakpoints.isVisible(breakpoint_1.lg)) {
	            return breakpoint_1.lg;
	        }
	        else if (this.visibleBreakpoints.isVisible(breakpoint_1.md)) {
	            return breakpoint_1.md;
	        }
	        else if (this.visibleBreakpoints.isVisible(breakpoint_1.sm)) {
	            return breakpoint_1.sm;
	        }
	        else {
	            return breakpoint_1.xs;
	        }
	    };
	    BreakpointService.prototype.isBreakpoint = function (breakpoint) {
	        return this.currentBreakpoint === breakpoint;
	    };
	    BreakpointService.prototype.register = function (action) {
	        return this.observable.register(action, 'window.breakpointChanged');
	    };
	    BreakpointService.$inject = ['$rootScope', visibleBreakpoint_service_1.visibleBreakpointServiceName, 'resizeDebounceMilliseconds', windowWrapper_service_1.serviceName, __observable.factoryName];
	    return BreakpointService;
	}());
	exports.BreakpointService = BreakpointService;
	//# sourceMappingURL=breakpoints.service.js.map

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// /// <reference path="../../../typings/jquery/jquery.d.ts" />
	'use strict';
	var ng = __webpack_require__(1);
	var _ = __webpack_require__(18);
	var typescript_angular_utilities_1 = __webpack_require__(5);
	var __observable = typescript_angular_utilities_1.services.observable;
	exports.moduleName = 'rl.utilities.services.contentProvider';
	exports.serviceName = 'contentProviderFactory';
	var ContentProviderService = (function () {
	    function ContentProviderService(observableFactory) {
	        var _this = this;
	        this.setTranscludeContent = function (transcludeFunction) {
	            if (_.isFunction(transcludeFunction)) {
	                transcludeFunction(function (clone) {
	                    _this.setContent(clone);
	                });
	            }
	            else {
	                _this.setContent(null);
	            }
	        };
	        this.observable = observableFactory.getInstance();
	    }
	    ContentProviderService.prototype.setContent = function (content) {
	        this.content = content;
	        this.observable.fire('contentChanged');
	    };
	    ContentProviderService.prototype.register = function (action, selector) {
	        var _this = this;
	        if (this.content != null) {
	            action(this.getContent(selector));
	        }
	        return this.observable.register(function () {
	            action(_this.getContent(selector));
	        }, 'contentChanged');
	    };
	    ContentProviderService.prototype.getContent = function (selector) {
	        if (selector != null) {
	            return this.content.filter(selector);
	        }
	        return this.content;
	    };
	    return ContentProviderService;
	}());
	contentProviderServiceFactory.$inject = [__observable.factoryName];
	function contentProviderServiceFactory(observableFactory) {
	    'use strict';
	    return {
	        getInstance: function () {
	            return new ContentProviderService(observableFactory);
	        }
	    };
	}
	ng.module(exports.moduleName, [__observable.moduleName])
	    .factory(exports.serviceName, contentProviderServiceFactory);
	//# sourceMappingURL=contentProvider.service.js.map

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var angular = __webpack_require__(1);
	var $ = __webpack_require__(12);
	exports.moduleName = 'rl.ui.services.documentWrapper';
	exports.serviceName = 'documentWrapper';
	var DocumentService = (function () {
	    function DocumentService() {
	        this.documentControl = $(document);
	    }
	    DocumentService.prototype.height = function () {
	        return this.documentControl.height();
	    };
	    return DocumentService;
	}());
	angular.module(exports.moduleName, [])
	    .service(exports.serviceName, DocumentService);
	//# sourceMappingURL=documentWrapper.service.js.map

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var viewData = __webpack_require__(188);
	exports.viewData = viewData;
	//# sourceMappingURL=types.module.js.map

/***/ },
/* 188 */
/***/ function(module, exports) {

	'use strict';
	//# sourceMappingURL=viewData.js.map

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYzJjZTViNDdkMDEzNzA5NTBlMmEiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3VpLm1vZHVsZS50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhbmd1bGFyXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYW5ndWxhci11aVwiIiwid2VicGFjazovLy8uL34vYW5ndWxhci1zYW5pdGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2FuZ3VsYXItc2FuaXRpemUvYW5ndWxhci1zYW5pdGl6ZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJybF91dGlsaXRpZXNcIiIsIndlYnBhY2s6Ly8vLi9saWJyYXJpZXMvYW5ndWxhci1ib290c3RyYXAtc2xpZGVyL3NsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9saWJyYXJpZXMvYW5ndWxhci1ib290c3RyYXAtc2xpZGVyL2Jvb3RzdHJhcC1zbGlkZXIubWluLmNzcz8wYzNlIiwid2VicGFjazovLy8uL2xpYnJhcmllcy9hbmd1bGFyLWJvb3RzdHJhcC1zbGlkZXIvYm9vdHN0cmFwLXNsaWRlci5taW4uY3NzIiwid2VicGFjazovLy8uL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL2xpYnJhcmllcy9hbmd1bGFyLWJvb3RzdHJhcC1zbGlkZXIvYm9vdHN0cmFwLXNsaWRlci5taW4uanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiJFwiIiwid2VicGFjazovLy8uL34vc2lnbmF0dXJlX3BhZC9zaWduYXR1cmVfcGFkLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9iZWhhdmlvcnMvYmVoYXZpb3JzLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYmVoYXZpb3JzL2FsaWFzL2FsaWFzLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9iZWhhdmlvcnMvYXV0b3NhdmUvYXV0b3NhdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NlcnZpY2VzL2F1dG9zYXZlL2F1dG9zYXZlLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiX1wiIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9hdXRvc2F2ZUFjdGlvbi9hdXRvc2F2ZUFjdGlvbi5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9hdXRvc2F2ZS90cmlnZ2Vycy90cmlnZ2Vycy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9hdXRvc2F2ZS90cmlnZ2Vycy9vbkNoYW5nZVRyaWdnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NlcnZpY2VzL2F1dG9zYXZlL3RyaWdnZXJzL3RyaWdnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2JlaGF2aW9ycy9wb3BvdmVyL3BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY29tcG9uZW50cy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvYXV0b3NhdmVEaWFsb2dGb290ZXIvYXV0b3NhdmVEaWFsb2dGb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvYXV0b3NhdmVEaWFsb2dGb290ZXIvYXV0b3NhdmVEaWFsb2dGb290ZXIuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9idXN5L2J1c3kuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvYnVzeS9idXN5LmNzcz85M2UwIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2J1c3kvYnVzeS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY29tcG9uZW50c0RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9idXR0b24vYnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2J1dHRvbi9idXR0b24uaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9idXR0b25Bc3luYy9idXR0b25Bc3luYy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9idXR0b25Bc3luYy9idXR0b25Bc3luYy5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2J1dHRvbkxpbmsvYnV0dG9uTGluay5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9idXR0b25MaW5rL2J1dHRvbkxpbmsuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9idXR0b25Ub2dnbGUvYnV0dG9uVG9nZ2xlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2J1dHRvblRvZ2dsZS9idXR0b25Ub2dnbGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2NhcmRDb250YWluZXIubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZC9jYXJkLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZC9oZWFkZXJDb2x1bW4vaGVhZGVyQ29sdW1uLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2NhcmQvaGVhZGVyQ29sdW1uL2hlYWRlckNvbHVtbi5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2NhcmQvaGVhZGVyQ29sdW1uL3NpemVGb3JCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc2VydmljZXMvYnJlYWtwb2ludHMvYnJlYWtwb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2NhcmQvY2FyZC5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZFNlYXJjaC9jYXJkU2VhcmNoLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZFNlYXJjaC9jYXJkU2VhcmNoLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9jb2x1bW5IZWFkZXIvY29sdW1uSGVhZGVyLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvc29ydHMvc29ydERpcmVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2RhdGFTb3VyY2VzL2RhdGFTb3VyY2VzLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL3NvcnRzL3NvcnRzLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL3NvcnRzL21lcmdlU29ydC9tZXJnZVNvcnQuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL3NvcnRzL3NvcnRlci9zb3J0ZXIuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL3NvcnRzL3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kYXRhU291cmNlcy9jbGllbnRTZXJ2ZXJEYXRhU291cmNlL2NsaWVudFNlcnZlckRhdGFTb3VyY2Uuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2RhdGFTb3VyY2VzL2FzeW5jRGF0YVNvdXJjZS5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGF0YVNvdXJjZXMvZGF0YVNvdXJjZUJhc2Uuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2RhdGFTb3VyY2VzL2RhdGFTb3VyY2VFdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kYXRhU291cmNlcy9kYXRhU291cmNlUHJvY2Vzc29yLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kYXRhU291cmNlcy9kYXRhUGFnZXIvZGF0YVBhZ2VyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kYXRhU291cmNlcy9kYXRhU2VydmljZURhdGFTb3VyY2UvZGF0YVNlcnZpY2VEYXRhU291cmNlLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kYXRhU291cmNlcy9zZXJ2ZXJTaWRlRGF0YVNvdXJjZS9zZXJ2ZXJTaWRlRGF0YVNvdXJjZS5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGF0YVNvdXJjZXMvc2ltcGxlRGF0YVNvdXJjZS9zaW1wbGVEYXRhU291cmNlLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kYXRhU291cmNlcy9zbWFydERhdGFTb3VyY2Uvc21hcnREYXRhU291cmNlLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2ZpbHRlcnMubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9jb2x1bW5TZWFyY2hGaWx0ZXIvY29sdW1uU2VhcmNoRmlsdGVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2RhdGVGaWx0ZXIvZGF0ZUZpbHRlci5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2RhdGVGaWx0ZXIvZGF0ZUZpbHRlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1vbWVudFwiIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9kYXRlRmlsdGVyL2RhdGVGaWx0ZXIuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9kYXRlRmlsdGVyL2RhdGVGaWx0ZXIuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZmlsdGVyR3JvdXAvZmlsdGVyR3JvdXAubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9maWx0ZXJHcm91cC9maWx0ZXJPcHRpb24vZmlsdGVyT3B0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9maWx0ZXJHcm91cC9maWx0ZXJPcHRpb24vZmlsdGVyT3B0aW9uLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2ZpbHRlckdyb3VwL21vZGVGaWx0ZXJHcm91cC9tb2RlRmlsdGVyR3JvdXAuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZmlsdGVyR3JvdXAvZmlsdGVyR3JvdXAuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZmlsdGVyR3JvdXAvcmFuZ2VGaWx0ZXJHcm91cC9yYW5nZUZpbHRlckdyb3VwLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2ZpbHRlckdyb3VwL2ZpbHRlckdyb3VwLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZmlsdGVyR3JvdXAvZmlsdGVyR3JvdXAuZGlyZWN0aXZlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL3NlbGVjdEZpbHRlci9zZWxlY3RGaWx0ZXIubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9zZWxlY3RGaWx0ZXIvc2VsZWN0RmlsdGVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL3NlbGVjdEZpbHRlci9zZWxlY3RGaWx0ZXIuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9zZWxlY3RGaWx0ZXIvc2VsZWN0RmlsdGVyLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9pdGVtQ291bnQvaXRlbUNvdW50LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvaXRlbUNvdW50L2l0ZW1Db3VudC5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvcGFnZXIvcGFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9wYWdlci9wYWdlci5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvcGFnZVNpemUvcGFnZVNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9wYWdlU2l6ZS9wYWdlU2l6ZS5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvc2VsZWN0aW9uQ29udHJvbC9zZWxlY3Rpb25Db250cm9sLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvc2VsZWN0aW9uQ29udHJvbC9zZWxlY3Rpb25Db250cm9sLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9jYXJkQ29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZENvbnRhaW5lci5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGVmYXVsdENhcmRDb250YWluZXJIZWFkZXIuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2RlZmF1bHRDYXJkQ29udGFpbmVyRm9vdGVyLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9jYXJkQ29udGFpbmVyQnVpbGRlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvY29tbWFMaXN0L2NvbW1hTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9kYXRlVGltZS9kYXRlVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9saWJyYXJpZXMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL2xpYnJhcmllcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLmNzcz82MzRlIiwid2VicGFjazovLy8uL2xpYnJhcmllcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLmNzcyIsIndlYnBhY2s6Ly8vLi9saWJyYXJpZXMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc2VydmljZXMvY29tcG9uZW50VmFsaWRhdG9yL2NvbXBvbmVudFZhbGlkYXRvci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2RhdGVUaW1lL2RhdGVUaW1lLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvZGF0ZVRpbWVTdGF0aWMvZGF0ZVRpbWVTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvZGF0ZVRpbWVTdGF0aWMvZGF0ZVRpbWVTdGF0aWMuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9kaWFsb2cvZGlhbG9nLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2RpYWxvZy9kaWFsb2cuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9kaWFsb2cvYXV0b3NhdmVEaWFsb2dGb290ZXIuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9nZW5lcmljQ29udGFpbmVyL2dlbmVyaWNDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NlcnZpY2VzL2pxdWVyeS9qcXVlcnkuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc2VydmljZXMvdGVtcGxhdGVMb2FkZXIvdGVtcGxhdGVMb2FkZXIuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9sYXp5TG9hZC9sYXp5TG9hZC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9sb25nQ2xpY2tCdXR0b24vbG9uZ0NsaWNrQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL2xvbmdDbGlja0J1dHRvbi9sb25nQ2xpY2tCdXR0b24uaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9tZXNzYWdlTG9nL21lc3NhZ2VMb2cubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL21lc3NhZ2VMb2cvbWVzc2FnZUxvZy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL21lc3NhZ2VMb2cvbWVzc2FnZUxvZy5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvbWVzc2FnZUxvZy9tZXNzYWdlTG9nLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvbWVzc2FnZUxvZy9lZGl0YWJsZU1lc3NhZ2VMb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvbXVsdGlTdGVwSW5kaWNhdG9yL211bHRpU3RlcEluZGljYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9tdWx0aVN0ZXBJbmRpY2F0b3IvbXVsdGlTdGVwSW5kaWNhdG9yLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvcmFkaW8vcmFkaW8ubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3JhZGlvL3JhZGlvR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvcmFkaW8vcmFkaW8uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvcmF0aW5nQmFyL3JhdGluZ0Jhci5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9yYXRpbmdCYXIvcmF0aW5nQmFyQmFja2dyb3VuZHMuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9yYXRpbmdCYXIvcmF0aW5nQmFyQ2xhc3Muc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9yaWNoVGV4dEVkaXRvci9yaWNoVGV4dEVkaXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L25nLXdpZy9kaXN0L2Nzcy9uZy13aWcuY3NzP2JmYjQiLCJ3ZWJwYWNrOi8vLy4vfi9uZy13aWcvZGlzdC9jc3Mvbmctd2lnLmNzcyIsIndlYnBhY2s6Ly8vLi9+L25nLXdpZy9kaXN0L25nLXdpZy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9yaWNoVGV4dEVkaXRvci9lZGl0b3JCdXR0b25zLmNzcz8xZWVjIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3JpY2hUZXh0RWRpdG9yL2VkaXRvckJ1dHRvbnMuY3NzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3JpY2hUZXh0RWRpdG9yL3JpY2hUZXh0RWRpdG9yLmNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy9yaWNoVGV4dEVkaXRvci9oZWFkZXJCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvcmljaFRleHRFZGl0b3IvcGFyYWdyYXBoQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3JpY2hUZXh0RWRpdG9yL3JpY2hUZXh0RWRpdG9yLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvc2VsZWN0L3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3VpLXNlbGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3VpLXNlbGVjdC9kaXN0L3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3VpLXNlbGVjdC9kaXN0L3NlbGVjdC5jc3M/ZDI3NCIsIndlYnBhY2s6Ly8vLi9+L3VpLXNlbGVjdC9kaXN0L3NlbGVjdC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvc2VsZWN0L3NlbGVjdC5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3NpZ25hdHVyZVBhZC9zaWduYXR1cmVQYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvc2ltcGxlQ2FyZExpc3Qvc2ltcGxlQ2FyZExpc3QubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3NpbXBsZUNhcmRMaXN0L3NpbXBsZUNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvc2ltcGxlQ2FyZExpc3Qvc2ltcGxlQ2FyZC5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3NpbXBsZUNhcmRMaXN0L3NpbXBsZUNhcmRMaXN0LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3NwaW5uZXIvc3Bpbm5lci5qcyIsIndlYnBhY2s6Ly8vLi9saWJyYXJpZXMvYm9vdHN0cmFwLXRvdWNoc3Bpbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9saWJyYXJpZXMvYm9vdHN0cmFwLXRvdWNoc3Bpbi9qcXVlcnkuYm9vdHN0cmFwLXRvdWNoc3Bpbi5jc3M/NGM3MSIsIndlYnBhY2s6Ly8vLi9saWJyYXJpZXMvYm9vdHN0cmFwLXRvdWNoc3Bpbi9qcXVlcnkuYm9vdHN0cmFwLXRvdWNoc3Bpbi5jc3MiLCJ3ZWJwYWNrOi8vLy4vbGlicmFyaWVzL2Jvb3RzdHJhcC10b3VjaHNwaW4vanF1ZXJ5LmJvb3RzdHJhcC10b3VjaHNwaW4uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvc3Bpbm5lci9zcGlubmVyLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvc3RyaW5nV2l0aFdhdGVybWFyay9zdHJpbmdXaXRoV2F0ZXJtYXJrLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3RhYnMvdGFicy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvdGFicy90YWIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvdGFicy90YWIuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy90YWJzL3RhYnNldC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy90YWJzL3RhYnNldC5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3RleHRhcmVhL3RleHRhcmVhLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3RleHRhcmVhL3RleHRhcmVhLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvdGV4dGJveC90ZXh0Ym94LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3RleHRib3gvdGV4dGJveC5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3R5cGVhaGVhZC90eXBlYWhlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2NvbXBvbmVudHMvdHlwZWFoZWFkL3R5cGVhaGVhZC5odG1sIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3VzZXJSYXRpbmcvdXNlclJhdGluZy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvY29tcG9uZW50cy92YWxpZGF0aW9uR3JvdXAvdmFsaWRhdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9jb21wb25lbnRzL3ZhbGlkYXRpb25Hcm91cC92YWxpZGF0aW9uR3JvdXAuaHRtbCIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc2VydmljZXMvc2VydmljZXMubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9hdXRvc2F2ZURpYWxvZy9hdXRvc2F2ZURpYWxvZy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NlcnZpY2VzL2F1dG9zYXZlRGlhbG9nL2F1dG9zYXZlRGlhbG9nLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NlcnZpY2VzL2RpYWxvZy9kaWFsb2cuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc2VydmljZXMvZGlhbG9nL2Jvb3RzdHJhcE1vZGFsRGlhbG9nL2Jvb3RzdHJhcE1vZGFsRGlhbG9nLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc2VydmljZXMvZGlhbG9nL2Jvb3RzdHJhcE1vZGFsRGlhbG9nL2Jvb3RzdHJhcE1vZGFsRGlhbG9nLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NlcnZpY2VzL2RpYWxvZy9ib290c3RyYXBNb2RhbERpYWxvZy9ib290c3RyYXBNb2RhbERpYWxvZy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9hdXRvc2F2ZURpYWxvZy9hdXRvc2F2ZURpYWxvZy5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9icmVha3BvaW50cy9icmVha3BvaW50cy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NlcnZpY2VzL3dpbmRvd1dyYXBwZXIvd2luZG93V3JhcHBlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9icmVha3BvaW50cy92aXNpYmxlQnJlYWtwb2ludC5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9icmVha3BvaW50cy9icmVha3BvaW50cy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zZXJ2aWNlcy9jb250ZW50UHJvdmlkZXIvY29udGVudFByb3ZpZGVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NlcnZpY2VzL2RvY3VtZW50V3JhcHBlci9kb2N1bWVudFdyYXBwZXIuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvdHlwZXMubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS90eXBlcy92aWV3RGF0YS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUN0Q0EsYUFBWSxDQUFDO0FBRWIsS0FBWSxPQUFPLHVCQUFNLENBQVMsQ0FBQztBQUVuQyxxQkFBTyxDQUFzQixDQUFDO0FBQzlCLHFCQUFPLENBQWtCLENBQUM7QUFFMUIsMERBQXdDLENBQThCLENBQUM7QUFFdkUscUJBQU8sQ0FBOEMsQ0FBQztBQUV0RCxxQkFBTyxFQUFlLENBQUM7QUFFdkIsS0FBWSxTQUFTLHVCQUFNLEVBQThCLENBQUM7QUFLakQsa0JBQVM7QUFKbEIsS0FBWSxVQUFVLHVCQUFNLEVBQWdDLENBQUM7QUFJekMsbUJBQVU7QUFIOUIsS0FBWSxRQUFRLHVCQUFNLEdBQTRCLENBQUM7QUFHdkIsaUJBQVE7QUFGeEMsS0FBWSxLQUFLLHVCQUFNLEdBQXNCLENBQUM7QUFFSixjQUFLO0FBRXBDLG1CQUFVLEdBQVcsT0FBTyxDQUFDO0FBRXhDLFFBQU8sQ0FBQyxNQUFNLENBQUMsa0JBQVUsRUFBRTtLQUMxQixjQUFjO0tBQ2QscUJBQXFCO0tBQ3JCLFlBQVk7S0FDWixtQ0FBZTtLQUVmLFNBQVMsQ0FBQyxVQUFVO0tBQ3BCLFVBQVUsQ0FBQyxVQUFVO0tBQ3JCLFFBQVEsQ0FBQyxVQUFVO0VBQ25CLENBQUMsQ0FBQzs7Ozs7OztBQy9CSCxjQUFhLGtDQUFrQyxFQUFFLEk7Ozs7OztBQ0FqRCxjQUFhLHFDQUFx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QTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQWtCLCtDQUErQztBQUNqRSxtQkFBa0IsK0NBQStDOztBQUVqRTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBa0IsaUNBQWlDOztBQUVuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFtQixlQUFlO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBbUIsWUFBWTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFDOztBQUVEOztBQUVBLEVBQUM7Ozs7Ozs7QUNwWUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDOzs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0M7Ozs7OztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQW9ELCtCQUErQixFQUFFO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBcUQsNEJBQTRCLEVBQUU7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUM7Ozs7OztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkM7Ozs7OztBQy9FQSxjQUFhLDRCQUE0QixFQUFFLEk7Ozs7OztBQ0EzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBLG1EOzs7Ozs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkM7Ozs7OztBQzFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakI7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0EsNEM7Ozs7OztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFhO0FBQ2IsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQSxvQzs7Ozs7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0M7Ozs7OztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEM7Ozs7OztB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEOzs7Ozs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBK0QsaUJBQWlCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDOzs7Ozs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBLDBDOzs7Ozs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQzs7Ozs7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUM7Ozs7OztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOEM7Ozs7OztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsMkM7Ozs7OztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUM7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBLG9CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQWtFLGFBQWE7QUFDL0UsaUVBQWdFLGFBQWE7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRDs7Ozs7O0FDaEZBO0FBQ0E7QUFDQTtBQUNBLG9CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBLG9EOzs7Ozs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0EsbUQ7Ozs7OztBQy9HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Qzs7Ozs7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQWtELGdEQUFnRCxFQUFFO0FB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwrQzs7Ozs7O0FDckRBLGNBQWEsaUNBQWlDLEVBQUUsSTs7Ozs7O0FDQWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxrQ0FBa0M7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxpRDs7Ozs7O0FDckpBLG1HQUFrRyxnQkFBZ0IsNGhCQUE0aEIsK0xBQStMLG9IQUFvSCxlQUFlLGFBQWEsd0pBQXdKLGtIOzs7Ozs7QUNBcm5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQzs7Ozs7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDOzs7Ozs7QUNwQkEsZ0VBQStELHFCQUFxQixxUEFBcVAsNENBQTRDLGFBQWEsY0FBYyxpR0FBaUcsY0FBYyx3Qjs7Ozs7O0FDQS9mO0FBQ0E7QUFDQTtBQUNBLG9CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRDs7Ozs7O0FDdERBO0FBQ0E7QUFDQTtBQUNBLG9CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGdEOzs7Ozs7QUM3RkE7QUFDQTtBQUNBO0FBQ0Esb0JBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQzs7Ozs7O0FDMVNBLHk0QkFBdzRCLDRrRTs7Ozs7O0FDQXg0QiwyTzs7Ozs7O0FDQUEsd2dCOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUQ7Ozs7OztBQ25MQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakI7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQzs7Ozs7O0FDMUNBLDJLOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBd0MsYUFBYTtBQUNyRCxjQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkhBQTBILE1BQU0sd0hBQXdILDBCQUEwQjtBQUNsUjtBQUNBO0FBQ0Esa0JBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQzs7Ozs7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQW9ELHNCQUFzQixFQUFFO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakI7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXNDLDJCQUEyQixFQUFFO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsY0FBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUM7Ozs7OztBQ3hHQTtBQUNBLDBCOzs7Ozs7QUNEQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFtRjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFHO0FBQ0g7QUFDQTtBQUNBLGlDQUFnQyxVQUFVLEVBQUU7QUFDNUMsRTs7Ozs7O0FDcEJBO0FBQ0E7OztBQUdBO0FBQ0Esb01BQW1NLGFBQWEsY0FBYyxtQkFBbUIsbUJBQW1CLHNCQUFzQixnQ0FBZ0MseUJBQXlCLEtBQUsscURBQXFELG1CQUFtQixLQUFLLG9EQUFvRCxrQkFBa0IsNEJBQTRCLHlDQUF5QywwQ0FBMEMsb0NBQW9DLDhDQUE4Qyx5QkFBeUIsZ0JBQWdCLGdCQUFnQixLQUFLLG1EQUFtRCxrQkFBa0IsNEJBQTRCLHlDQUF5QywwQ0FBMEMscUNBQXFDLHlCQUF5QixnQkFBZ0IsZ0JBQWdCLEtBQUssaURBQWlELGtCQUFrQiw0QkFBNEIseUNBQXlDLDBDQUEwQyxpQ0FBaUMsMkNBQTJDLHlCQUF5QixtQkFBbUIsZ0JBQWdCLEtBQUssZ0RBQWdELGtCQUFrQiw0QkFBNEIseUNBQXlDLDBDQUEwQyxrQ0FBa0MseUJBQXlCLG1CQUFtQixnQkFBZ0IsS0FBSywyQ0FBMkMsc0JBQXNCLEtBQUssd0RBQXdELGlCQUFpQixpQkFBaUIsS0FBSyx1REFBdUQsaUJBQWlCLGlCQUFpQixLQUFLLDJDQUEyQyw0QkFBNEIsZ0JBQWdCLEtBQUsscURBQXFELGlCQUFpQixLQUFLLDREQUE0RCx1QkFBdUIsS0FBSyxrREFBa0QsNEJBQTRCLEtBQUssdUtBQXVLLGtCQUFrQix3QkFBd0IsdUJBQXVCLHNCQUFzQixLQUFLLDBEQUEwRCxtQkFBbUIsS0FBSyxnRkFBZ0YsaUJBQWlCLGlCQUFpQixnQkFBZ0IsS0FBSyx3REFBd0Qsb0JBQW9CLEtBQUsscURBQXFELHlCQUF5QixLQUFLLDRDQUE0QyxrQkFBa0IsZ0JBQWdCLEtBQUssaUZBQWlGLHlCQUF5Qix5QkFBeUIsS0FBSyx5Q0FBeUMsbUJBQW1CLHdCQUF3QixrQkFBa0IsS0FBSyw0Q0FBNEMsc0JBQXNCLG1CQUFtQix3QkFBd0IscUJBQXFCLEtBQUssNkNBQTZDLG1CQUFtQix3QkFBd0Isa0JBQWtCLEtBQUssZ05BQWdOLDBCQUEwQixzQkFBc0IsS0FBSyx5RkFBeUYscUJBQXFCLEtBQUssK0NBQStDLHlCQUF5QixLQUFLLHNEQUFzRCxrQkFBa0IsNEJBQTRCLHlDQUF5Qyx1Q0FBdUMsMkNBQTJDLHlCQUF5QixrQkFBa0IsaUJBQWlCLEtBQUsscUdBQXFHLGdDQUFnQyxxQkFBcUIsZ0RBQWdELEtBQUssNkRBQTZELGdDQUFnQyxLQUFLLHlHQUF5Ryx1QkFBdUIscUJBQXFCLDBCQUEwQixLQUFLLDhDQUE4Qyw0QkFBNEIsa0JBQWtCLG1CQUFtQix3QkFBd0Isd0JBQXdCLHNCQUFzQix5QkFBeUIsS0FBSyxvREFBb0QsMEJBQTBCLEtBQUsscURBQXFELGdDQUFnQyxxQkFBcUIsZ0RBQWdELEtBQUssa0RBQWtELHFCQUFxQixLQUFLLG1IQUFtSCx1QkFBdUIscUJBQXFCLDBCQUEwQixLQUFLLHlDQUF5QyxtQkFBbUIsd0JBQXdCLGtCQUFrQixLQUFLLHVEQUF1RCxtQkFBbUIsS0FBSywyRkFBMkYsc0JBQXNCLEtBQUsseUdBQXlHLHVCQUF1QixxQkFBcUIsMEJBQTBCLEtBQUssOERBQThELHNCQUFzQixLQUFLLG9FQUFvRSwwQkFBMEIsS0FBSywrQ0FBK0MscUJBQXFCLHNCQUFzQixrQkFBa0IsbUJBQW1CLEtBQUssMkRBQTJELGlCQUFpQixpQkFBaUIsS0FBSywwREFBMEQsaUJBQWlCLGlCQUFpQixLQUFLLHFJQUFxSSw4QkFBOEIsS0FBSywwQ0FBMEMsdURBQXVELHFCQUFxQixPQUFPLEtBQUs7O0FBRS9nTjs7Ozs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQ0FBcUM7QUFDckMsNENBQTJDOztBQUUzQzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUVBQXNFO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWlCO0FBQ2pCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVU7QUFDVjtBQUNBLFdBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGlCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxXQUFVOztBQUVWO0FBQ0E7QUFDQSxXQUFVOztBQUVWO0FBQ0E7QUFDQSxXQUFVOztBQUVWO0FBQ0E7QUFDQSxXQUFVOztBQUVWO0FBQ0E7QUFDQSxXQUFVOztBQUVWO0FBQ0E7QUFDQSxXQUFVOztBQUVWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVU7O0FBRVY7QUFDQTtBQUNBO0FBQ0EsV0FBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQSxXQUFVOztBQUVWO0FBQ0E7QUFDQTtBQUNBLFdBQVU7O0FBRVY7QUFDQTtBQUNBO0FBQ0EsV0FBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVU7O0FBRVY7QUFDQTtBQUNBO0FBQ0EsV0FBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWdDLFVBQVU7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBLGlDQUFnQztBQUNoQztBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0E7QUFDQSwyRUFBMEU7QUFDMUUsOEVBQTZFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXO0FBQ1gsV0FBVTtBQUNWO0FBQ0E7QUFDQSxZQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsWUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxXQUFVO0FBQ1Y7QUFDQTtBQUNBLFdBQVU7QUFDVixVQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVc7QUFDWCxXQUFVO0FBQ1Y7QUFDQTtBQUNBLFlBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxZQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxzQkFBcUIsb0JBQW9CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW1DO0FBQ25DLHFCQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBLFlBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMEQsMEhBQTBIO0FBQ3BMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNOQUFxTjtBQUNyTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsNkVBQTRFLGtCQUFrQjtBQUM5RiwrQkFBOEIsb0JBQW9CO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWlCLHFCQUFxQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBaUMsZ0RBQWdEO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFtQixVQUFVO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQzs7Ozs7OztBQ3Q0Q0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFVLG1kQUFtZCxxcUJBQXFxQjtBQUNsb0MsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBLGtCQUFpQiw4QkFBOEI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDtBQUNBLEVBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxFQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMEQ7QUFDMUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMOztB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0EscURBQW9EOztBQUVwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBLG9EQUFtRDs7QUFFbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQSxtREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0Esa0RBQWlEOztBQUVqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0EsVUFBUzs7QUFFVDtBQUNBO0FBQ0EsVUFBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0EsbUQ7Ozs7OztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQzs7Ozs7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEOzs7Ozs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0EsNEQ7Ozs7OztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFnQyxFQUFFO0FBQ2xDLG1DQUFrQyxFQUFFO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQSx5RDs7Ozs7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFhO0FBQ2I7QUFDQTtBQUNBLHFEQUFvRCxrQ0FBa0MsRUFBRTtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBLHNEOzs7Ozs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDOzs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBLGtEOzs7Ozs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQSxzRDs7Ozs7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0EsZ0Q7Ozs7OztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EOzs7Ozs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBLG9EOzs7Ozs7QUNoQkE7QUFDQTtBQUNBO0FBQ0EseUM7Ozs7OztBQ0hBO0FBQ0EscUMiLCJmaWxlIjoiY29tcG9uZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIm91dHB1dFwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgYzJjZTViNDdkMDEzNzA5NTBlMmFcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgKiBhcyBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xyXG5cclxuaW1wb3J0ICdhbmd1bGFyLXVpLWJvb3RzdHJhcCc7XHJcbmltcG9ydCAnYW5ndWxhci1zYW5pdGl6ZSc7XHJcblxyXG5pbXBvcnQgeyBuYW1lIGFzIHV0aWxpdGllc01vZHVsZSB9IGZyb20gJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnO1xyXG5cclxuaW1wb3J0ICcuLi9saWJyYXJpZXMvYW5ndWxhci1ib290c3RyYXAtc2xpZGVyL3NsaWRlcic7XHJcblxyXG5pbXBvcnQgJ3NpZ25hdHVyZV9wYWQnO1xyXG5cclxuaW1wb3J0ICogYXMgYmVoYXZpb3JzIGZyb20gJy4vYmVoYXZpb3JzL2JlaGF2aW9ycy5tb2R1bGUnO1xyXG5pbXBvcnQgKiBhcyBjb21wb25lbnRzIGZyb20gJy4vY29tcG9uZW50cy9jb21wb25lbnRzLm1vZHVsZSc7XHJcbmltcG9ydCAqIGFzIHNlcnZpY2VzIGZyb20gJy4vc2VydmljZXMvc2VydmljZXMubW9kdWxlJztcclxuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi90eXBlcy90eXBlcy5tb2R1bGUnO1xyXG5cclxuZXhwb3J0IHsgYmVoYXZpb3JzLCBjb21wb25lbnRzLCBzZXJ2aWNlcywgdHlwZXMgfTtcclxuXHJcbmV4cG9ydCB2YXIgbW9kdWxlTmFtZTogc3RyaW5nID0gJ3JsLnVpJztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUsIFtcclxuXHQndWkuYm9vdHN0cmFwJyxcclxuXHQndWkuYm9vdHN0cmFwLXNsaWRlcicsXHJcblx0J25nU2FuaXRpemUnLFxyXG5cdHV0aWxpdGllc01vZHVsZSxcclxuXHJcblx0YmVoYXZpb3JzLm1vZHVsZU5hbWUsXHJcblx0Y29tcG9uZW50cy5tb2R1bGVOYW1lLFxyXG5cdHNlcnZpY2VzLm1vZHVsZU5hbWUsXHJcbl0pO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS91aS5tb2R1bGUudHNcbiAqKi8iLCIoZnVuY3Rpb24oKSB7IG1vZHVsZS5leHBvcnRzID0gdGhpc1tcImFuZ3VsYXJcIl07IH0oKSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCBcImFuZ3VsYXJcIlxuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB0aGlzW1wiYW5ndWxhci11aVwiXTsgfSgpKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwiYW5ndWxhci11aVwiXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi9hbmd1bGFyLXNhbml0aXplJyk7XG5tb2R1bGUuZXhwb3J0cyA9ICduZ1Nhbml0aXplJztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2FuZ3VsYXItc2FuaXRpemUvaW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS41LjBcbiAqIChjKSAyMDEwLTIwMTYgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgYW5ndWxhciwgdW5kZWZpbmVkKSB7J3VzZSBzdHJpY3QnO1xuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG52YXIgJHNhbml0aXplTWluRXJyID0gYW5ndWxhci4kJG1pbkVycignJHNhbml0aXplJyk7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdTYW5pdGl6ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogIyBuZ1Nhbml0aXplXG4gKlxuICogVGhlIGBuZ1Nhbml0aXplYCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSB0byBzYW5pdGl6ZSBIVE1MLlxuICpcbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nU2FuaXRpemVcIj48L2Rpdj5cbiAqXG4gKiBTZWUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplIGAkc2FuaXRpemVgfSBmb3IgdXNhZ2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNhbml0aXplXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogICBTYW5pdGl6ZXMgYW4gaHRtbCBzdHJpbmcgYnkgc3RyaXBwaW5nIGFsbCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgdG9rZW5zLlxuICpcbiAqICAgVGhlIGlucHV0IGlzIHNhbml0aXplZCBieSBwYXJzaW5nIHRoZSBIVE1MIGludG8gdG9rZW5zLiBBbGwgc2FmZSB0b2tlbnMgKGZyb20gYSB3aGl0ZWxpc3QpIGFyZVxuICogICB0aGVuIHNlcmlhbGl6ZWQgYmFjayB0byBwcm9wZXJseSBlc2NhcGVkIGh0bWwgc3RyaW5nLiBUaGlzIG1lYW5zIHRoYXQgbm8gdW5zYWZlIGlucHV0IGNhbiBtYWtlXG4gKiAgIGl0IGludG8gdGhlIHJldHVybmVkIHN0cmluZy5cbiAqXG4gKiAgIFRoZSB3aGl0ZWxpc3QgZm9yIFVSTCBzYW5pdGl6YXRpb24gb2YgYXR0cmlidXRlIHZhbHVlcyBpcyBjb25maWd1cmVkIHVzaW5nIHRoZSBmdW5jdGlvbnNcbiAqICAgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YCBhbmQgYGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdGAgb2Yge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXJcbiAqICAgYCRjb21waWxlUHJvdmlkZXJgfS5cbiAqXG4gKiAgIFRoZSBpbnB1dCBtYXkgYWxzbyBjb250YWluIFNWRyBtYXJrdXAgaWYgdGhpcyBpcyBlbmFibGVkIHZpYSB7QGxpbmsgJHNhbml0aXplUHJvdmlkZXJ9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sIEhUTUwgaW5wdXQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBTYW5pdGl6ZWQgSFRNTC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic2FuaXRpemVFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2FuaXRpemVFeGFtcGxlJywgWyduZ1Nhbml0aXplJ10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzY2UnLCBmdW5jdGlvbigkc2NvcGUsICRzY2UpIHtcbiAgICAgICAgICAgICAkc2NvcGUuc25pcHBldCA9XG4gICAgICAgICAgICAgICAnPHAgc3R5bGU9XCJjb2xvcjpibHVlXCI+YW4gaHRtbFxcbicgK1xuICAgICAgICAgICAgICAgJzxlbSBvbm1vdXNlb3Zlcj1cInRoaXMudGV4dENvbnRlbnQ9XFwnUFdOM0QhXFwnXCI+Y2xpY2sgaGVyZTwvZW0+XFxuJyArXG4gICAgICAgICAgICAgICAnc25pcHBldDwvcD4nO1xuICAgICAgICAgICAgICRzY29wZS5kZWxpYmVyYXRlbHlUcnVzdERhbmdlcm91c1NuaXBwZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgIHJldHVybiAkc2NlLnRydXN0QXNIdG1sKCRzY29wZS5zbmlwcGV0KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgIDwvc2NyaXB0PlxuICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICBTbmlwcGV0OiA8dGV4dGFyZWEgbmctbW9kZWw9XCJzbmlwcGV0XCIgY29scz1cIjYwXCIgcm93cz1cIjNcIj48L3RleHRhcmVhPlxuICAgICAgIDx0YWJsZT5cbiAgICAgICAgIDx0cj5cbiAgICAgICAgICAgPHRkPkRpcmVjdGl2ZTwvdGQ+XG4gICAgICAgICAgIDx0ZD5Ib3c8L3RkPlxuICAgICAgICAgICA8dGQ+U291cmNlPC90ZD5cbiAgICAgICAgICAgPHRkPlJlbmRlcmVkPC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgICA8dHIgaWQ9XCJiaW5kLWh0bWwtd2l0aC1zYW5pdGl6ZVwiPlxuICAgICAgICAgICA8dGQ+bmctYmluZC1odG1sPC90ZD5cbiAgICAgICAgICAgPHRkPkF1dG9tYXRpY2FsbHkgdXNlcyAkc2FuaXRpemU8L3RkPlxuICAgICAgICAgICA8dGQ+PHByZT4mbHQ7ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXRcIiZndDs8YnIvPiZsdDsvZGl2Jmd0OzwvcHJlPjwvdGQ+XG4gICAgICAgICAgIDx0ZD48ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXRcIj48L2Rpdj48L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICAgIDx0ciBpZD1cImJpbmQtaHRtbC13aXRoLXRydXN0XCI+XG4gICAgICAgICAgIDx0ZD5uZy1iaW5kLWh0bWw8L3RkPlxuICAgICAgICAgICA8dGQ+QnlwYXNzICRzYW5pdGl6ZSBieSBleHBsaWNpdGx5IHRydXN0aW5nIHRoZSBkYW5nZXJvdXMgdmFsdWU8L3RkPlxuICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgIDxwcmU+Jmx0O2RpdiBuZy1iaW5kLWh0bWw9XCJkZWxpYmVyYXRlbHlUcnVzdERhbmdlcm91c1NuaXBwZXQoKVwiJmd0O1xuJmx0Oy9kaXYmZ3Q7PC9wcmU+XG4gICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgIDx0ZD48ZGl2IG5nLWJpbmQtaHRtbD1cImRlbGliZXJhdGVseVRydXN0RGFuZ2Vyb3VzU25pcHBldCgpXCI+PC9kaXY+PC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgICA8dHIgaWQ9XCJiaW5kLWRlZmF1bHRcIj5cbiAgICAgICAgICAgPHRkPm5nLWJpbmQ8L3RkPlxuICAgICAgICAgICA8dGQ+QXV0b21hdGljYWxseSBlc2NhcGVzPC90ZD5cbiAgICAgICAgICAgPHRkPjxwcmU+Jmx0O2RpdiBuZy1iaW5kPVwic25pcHBldFwiJmd0Ozxici8+Jmx0Oy9kaXYmZ3Q7PC9wcmU+PC90ZD5cbiAgICAgICAgICAgPHRkPjxkaXYgbmctYmluZD1cInNuaXBwZXRcIj48L2Rpdj48L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICAgIDwvZGl2PlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICBpdCgnc2hvdWxkIHNhbml0aXplIHRoZSBodG1sIHNuaXBwZXQgYnkgZGVmYXVsdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI2JpbmQtaHRtbC13aXRoLXNhbml0aXplIGRpdicpKS5nZXRJbm5lckh0bWwoKSkuXG4gICAgICAgICB0b0JlKCc8cD5hbiBodG1sXFxuPGVtPmNsaWNrIGhlcmU8L2VtPlxcbnNuaXBwZXQ8L3A+Jyk7XG4gICAgIH0pO1xuXG4gICAgIGl0KCdzaG91bGQgaW5saW5lIHJhdyBzbmlwcGV0IGlmIGJvdW5kIHRvIGEgdHJ1c3RlZCB2YWx1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI2JpbmQtaHRtbC13aXRoLXRydXN0IGRpdicpKS5nZXRJbm5lckh0bWwoKSkuXG4gICAgICAgICB0b0JlKFwiPHAgc3R5bGU9XFxcImNvbG9yOmJsdWVcXFwiPmFuIGh0bWxcXG5cIiArXG4gICAgICAgICAgICAgIFwiPGVtIG9ubW91c2VvdmVyPVxcXCJ0aGlzLnRleHRDb250ZW50PSdQV04zRCEnXFxcIj5jbGljayBoZXJlPC9lbT5cXG5cIiArXG4gICAgICAgICAgICAgIFwic25pcHBldDwvcD5cIik7XG4gICAgIH0pO1xuXG4gICAgIGl0KCdzaG91bGQgZXNjYXBlIHNuaXBwZXQgd2l0aG91dCBhbnkgZmlsdGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjYmluZC1kZWZhdWx0IGRpdicpKS5nZXRJbm5lckh0bWwoKSkuXG4gICAgICAgICB0b0JlKFwiJmx0O3Agc3R5bGU9XFxcImNvbG9yOmJsdWVcXFwiJmd0O2FuIGh0bWxcXG5cIiArXG4gICAgICAgICAgICAgIFwiJmx0O2VtIG9ubW91c2VvdmVyPVxcXCJ0aGlzLnRleHRDb250ZW50PSdQV04zRCEnXFxcIiZndDtjbGljayBoZXJlJmx0Oy9lbSZndDtcXG5cIiArXG4gICAgICAgICAgICAgIFwic25pcHBldCZsdDsvcCZndDtcIik7XG4gICAgIH0pO1xuXG4gICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgZWxlbWVudChieS5tb2RlbCgnc25pcHBldCcpKS5jbGVhcigpO1xuICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3NuaXBwZXQnKSkuc2VuZEtleXMoJ25ldyA8YiBvbmNsaWNrPVwiYWxlcnQoMSlcIj50ZXh0PC9iPicpO1xuICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI2JpbmQtaHRtbC13aXRoLXNhbml0aXplIGRpdicpKS5nZXRJbm5lckh0bWwoKSkuXG4gICAgICAgICB0b0JlKCduZXcgPGI+dGV4dDwvYj4nKTtcbiAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJyNiaW5kLWh0bWwtd2l0aC10cnVzdCBkaXYnKSkuZ2V0SW5uZXJIdG1sKCkpLnRvQmUoXG4gICAgICAgICAnbmV3IDxiIG9uY2xpY2s9XCJhbGVydCgxKVwiPnRleHQ8L2I+Jyk7XG4gICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjYmluZC1kZWZhdWx0IGRpdicpKS5nZXRJbm5lckh0bWwoKSkudG9CZShcbiAgICAgICAgIFwibmV3ICZsdDtiIG9uY2xpY2s9XFxcImFsZXJ0KDEpXFxcIiZndDt0ZXh0Jmx0Oy9iJmd0O1wiKTtcbiAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNhbml0aXplUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYW5kIGNvbmZpZ3VyZXMge0BsaW5rICRzYW5pdGl6ZX0gaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uICRTYW5pdGl6ZVByb3ZpZGVyKCkge1xuICB2YXIgc3ZnRW5hYmxlZCA9IGZhbHNlO1xuXG4gIHRoaXMuJGdldCA9IFsnJCRzYW5pdGl6ZVVyaScsIGZ1bmN0aW9uKCQkc2FuaXRpemVVcmkpIHtcbiAgICBpZiAoc3ZnRW5hYmxlZCkge1xuICAgICAgYW5ndWxhci5leHRlbmQodmFsaWRFbGVtZW50cywgc3ZnRWxlbWVudHMpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oaHRtbCkge1xuICAgICAgdmFyIGJ1ZiA9IFtdO1xuICAgICAgaHRtbFBhcnNlcihodG1sLCBodG1sU2FuaXRpemVXcml0ZXIoYnVmLCBmdW5jdGlvbih1cmksIGlzSW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuICEvXnVuc2FmZTovLnRlc3QoJCRzYW5pdGl6ZVVyaSh1cmksIGlzSW1hZ2UpKTtcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBidWYuam9pbignJyk7XG4gICAgfTtcbiAgfV07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2FuaXRpemVQcm92aWRlciNlbmFibGVTdmdcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMgYSBzdWJzZXQgb2Ygc3ZnIHRvIGJlIHN1cHBvcnRlZCBieSB0aGUgc2FuaXRpemVyLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAgIDxwPkJ5IGVuYWJsaW5nIHRoaXMgc2V0dGluZyB3aXRob3V0IHRha2luZyBvdGhlciBwcmVjYXV0aW9ucywgeW91IG1pZ2h0IGV4cG9zZSB5b3VyXG4gICAqICAgYXBwbGljYXRpb24gdG8gY2xpY2staGlqYWNraW5nIGF0dGFja3MuIEluIHRoZXNlIGF0dGFja3MsIHNhbml0aXplZCBzdmcgZWxlbWVudHMgY291bGQgYmUgcG9zaXRpb25lZFxuICAgKiAgIG91dHNpZGUgb2YgdGhlIGNvbnRhaW5pbmcgZWxlbWVudCBhbmQgYmUgcmVuZGVyZWQgb3ZlciBvdGhlciBlbGVtZW50cyBvbiB0aGUgcGFnZSAoZS5nLiBhIGxvZ2luXG4gICAqICAgbGluaykuIFN1Y2ggYmVoYXZpb3IgY2FuIHRoZW4gcmVzdWx0IGluIHBoaXNoaW5nIGluY2lkZW50cy48L3A+XG4gICAqXG4gICAqICAgPHA+VG8gcHJvdGVjdCBhZ2FpbnN0IHRoZXNlLCBleHBsaWNpdGx5IHNldHVwIGBvdmVyZmxvdzogaGlkZGVuYCBjc3MgcnVsZSBmb3IgYWxsIHBvdGVudGlhbCBzdmdcbiAgICogICB0YWdzIHdpdGhpbiB0aGUgc2FuaXRpemVkIGNvbnRlbnQ6PC9wPlxuICAgKlxuICAgKiAgIDxicj5cbiAgICpcbiAgICogICA8cHJlPjxjb2RlPlxuICAgKiAgIC5yb290T2ZUaGVJbmNsdWRlZENvbnRlbnQgc3ZnIHtcbiAgICogICAgIG92ZXJmbG93OiBoaWRkZW4gIWltcG9ydGFudDtcbiAgICogICB9XG4gICAqICAgPC9jb2RlPjwvcHJlPlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge2Jvb2xlYW58bmcuJHNhbml0aXplUHJvdmlkZXJ9IFJldHVybnMgdGhlIGN1cnJlbnRseSBjb25maWd1cmVkIHZhbHVlIGlmIGNhbGxlZFxuICAgKiAgICB3aXRob3V0IGFuIGFyZ3VtZW50IG9yIHNlbGYgZm9yIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuZW5hYmxlU3ZnID0gZnVuY3Rpb24oZW5hYmxlU3ZnKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGVuYWJsZVN2ZykpIHtcbiAgICAgIHN2Z0VuYWJsZWQgPSBlbmFibGVTdmc7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN2Z0VuYWJsZWQ7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzYW5pdGl6ZVRleHQoY2hhcnMpIHtcbiAgdmFyIGJ1ZiA9IFtdO1xuICB2YXIgd3JpdGVyID0gaHRtbFNhbml0aXplV3JpdGVyKGJ1ZiwgYW5ndWxhci5ub29wKTtcbiAgd3JpdGVyLmNoYXJzKGNoYXJzKTtcbiAgcmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn1cblxuXG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbnZhciBTVVJST0dBVEVfUEFJUl9SRUdFWFAgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nLFxuICAvLyBNYXRjaCBldmVyeXRoaW5nIG91dHNpZGUgb2Ygbm9ybWFsIGNoYXJzIGFuZCBcIiAocXVvdGUgY2hhcmFjdGVyKVxuICBOT05fQUxQSEFOVU1FUklDX1JFR0VYUCA9IC8oW15cXCMtfiB8IV0pL2c7XG5cblxuLy8gR29vZCBzb3VyY2Ugb2YgaW5mbyBhYm91dCBlbGVtZW50cyBhbmQgYXR0cmlidXRlc1xuLy8gaHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy9PdmVydmlldy5odG1sI3NlbWFudGljc1xuLy8gaHR0cDovL3NpbW9uLmh0bWw1Lm9yZy9odG1sLWVsZW1lbnRzXG5cbi8vIFNhZmUgVm9pZCBFbGVtZW50cyAtIEhUTUw1XG4vLyBodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL092ZXJ2aWV3Lmh0bWwjdm9pZC1lbGVtZW50c1xudmFyIHZvaWRFbGVtZW50cyA9IHRvTWFwKFwiYXJlYSxicixjb2wsaHIsaW1nLHdiclwiKTtcblxuLy8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcbi8vIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3NwZWMvT3ZlcnZpZXcuaHRtbCNvcHRpb25hbC10YWdzXG52YXIgb3B0aW9uYWxFbmRUYWdCbG9ja0VsZW1lbnRzID0gdG9NYXAoXCJjb2xncm91cCxkZCxkdCxsaSxwLHRib2R5LHRkLHRmb290LHRoLHRoZWFkLHRyXCIpLFxuICAgIG9wdGlvbmFsRW5kVGFnSW5saW5lRWxlbWVudHMgPSB0b01hcChcInJwLHJ0XCIpLFxuICAgIG9wdGlvbmFsRW5kVGFnRWxlbWVudHMgPSBhbmd1bGFyLmV4dGVuZCh7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxFbmRUYWdJbmxpbmVFbGVtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxFbmRUYWdCbG9ja0VsZW1lbnRzKTtcblxuLy8gU2FmZSBCbG9jayBFbGVtZW50cyAtIEhUTUw1XG52YXIgYmxvY2tFbGVtZW50cyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBvcHRpb25hbEVuZFRhZ0Jsb2NrRWxlbWVudHMsIHRvTWFwKFwiYWRkcmVzcyxhcnRpY2xlLFwiICtcbiAgICAgICAgXCJhc2lkZSxibG9ja3F1b3RlLGNhcHRpb24sY2VudGVyLGRlbCxkaXIsZGl2LGRsLGZpZ3VyZSxmaWdjYXB0aW9uLGZvb3RlcixoMSxoMixoMyxoNCxoNSxcIiArXG4gICAgICAgIFwiaDYsaGVhZGVyLGhncm91cCxocixpbnMsbWFwLG1lbnUsbmF2LG9sLHByZSxzZWN0aW9uLHRhYmxlLHVsXCIpKTtcblxuLy8gSW5saW5lIEVsZW1lbnRzIC0gSFRNTDVcbnZhciBpbmxpbmVFbGVtZW50cyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBvcHRpb25hbEVuZFRhZ0lubGluZUVsZW1lbnRzLCB0b01hcChcImEsYWJicixhY3JvbnltLGIsXCIgK1xuICAgICAgICBcImJkaSxiZG8sYmlnLGJyLGNpdGUsY29kZSxkZWwsZGZuLGVtLGZvbnQsaSxpbWcsaW5zLGtiZCxsYWJlbCxtYXAsbWFyayxxLHJ1YnkscnAscnQscyxcIiArXG4gICAgICAgIFwic2FtcCxzbWFsbCxzcGFuLHN0cmlrZSxzdHJvbmcsc3ViLHN1cCx0aW1lLHR0LHUsdmFyXCIpKTtcblxuLy8gU1ZHIEVsZW1lbnRzXG4vLyBodHRwczovL3dpa2kud2hhdHdnLm9yZy93aWtpL1Nhbml0aXphdGlvbl9ydWxlcyNzdmdfRWxlbWVudHNcbi8vIE5vdGU6IHRoZSBlbGVtZW50cyBhbmltYXRlLGFuaW1hdGVDb2xvcixhbmltYXRlTW90aW9uLGFuaW1hdGVUcmFuc2Zvcm0sc2V0IGFyZSBpbnRlbnRpb25hbGx5IG9taXR0ZWQuXG4vLyBUaGV5IGNhbiBwb3RlbnRpYWxseSBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQuIFNlZSAjMTEyOTBcbnZhciBzdmdFbGVtZW50cyA9IHRvTWFwKFwiY2lyY2xlLGRlZnMsZGVzYyxlbGxpcHNlLGZvbnQtZmFjZSxmb250LWZhY2UtbmFtZSxmb250LWZhY2Utc3JjLGcsZ2x5cGgsXCIgK1xuICAgICAgICBcImhrZXJuLGltYWdlLGxpbmVhckdyYWRpZW50LGxpbmUsbWFya2VyLG1ldGFkYXRhLG1pc3NpbmctZ2x5cGgsbXBhdGgscGF0aCxwb2x5Z29uLHBvbHlsaW5lLFwiICtcbiAgICAgICAgXCJyYWRpYWxHcmFkaWVudCxyZWN0LHN0b3Asc3ZnLHN3aXRjaCx0ZXh0LHRpdGxlLHRzcGFuXCIpO1xuXG4vLyBCbG9ja2VkIEVsZW1lbnRzICh3aWxsIGJlIHN0cmlwcGVkKVxudmFyIGJsb2NrZWRFbGVtZW50cyA9IHRvTWFwKFwic2NyaXB0LHN0eWxlXCIpO1xuXG52YXIgdmFsaWRFbGVtZW50cyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkRWxlbWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrRWxlbWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZUVsZW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbEVuZFRhZ0VsZW1lbnRzKTtcblxuLy9BdHRyaWJ1dGVzIHRoYXQgaGF2ZSBocmVmIGFuZCBoZW5jZSBuZWVkIHRvIGJlIHNhbml0aXplZFxudmFyIHVyaUF0dHJzID0gdG9NYXAoXCJiYWNrZ3JvdW5kLGNpdGUsaHJlZixsb25nZGVzYyxzcmMseGxpbms6aHJlZlwiKTtcblxudmFyIGh0bWxBdHRycyA9IHRvTWFwKCdhYmJyLGFsaWduLGFsdCxheGlzLGJnY29sb3IsYm9yZGVyLGNlbGxwYWRkaW5nLGNlbGxzcGFjaW5nLGNsYXNzLGNsZWFyLCcgK1xuICAgICdjb2xvcixjb2xzLGNvbHNwYW4sY29tcGFjdCxjb29yZHMsZGlyLGZhY2UsaGVhZGVycyxoZWlnaHQsaHJlZmxhbmcsaHNwYWNlLCcgK1xuICAgICdpc21hcCxsYW5nLGxhbmd1YWdlLG5vaHJlZixub3dyYXAscmVsLHJldixyb3dzLHJvd3NwYW4scnVsZXMsJyArXG4gICAgJ3Njb3BlLHNjcm9sbGluZyxzaGFwZSxzaXplLHNwYW4sc3RhcnQsc3VtbWFyeSx0YWJpbmRleCx0YXJnZXQsdGl0bGUsdHlwZSwnICtcbiAgICAndmFsaWduLHZhbHVlLHZzcGFjZSx3aWR0aCcpO1xuXG4vLyBTVkcgYXR0cmlidXRlcyAod2l0aG91dCBcImlkXCIgYW5kIFwibmFtZVwiIGF0dHJpYnV0ZXMpXG4vLyBodHRwczovL3dpa2kud2hhdHdnLm9yZy93aWtpL1Nhbml0aXphdGlvbl9ydWxlcyNzdmdfQXR0cmlidXRlc1xudmFyIHN2Z0F0dHJzID0gdG9NYXAoJ2FjY2VudC1oZWlnaHQsYWNjdW11bGF0ZSxhZGRpdGl2ZSxhbHBoYWJldGljLGFyYWJpYy1mb3JtLGFzY2VudCwnICtcbiAgICAnYmFzZVByb2ZpbGUsYmJveCxiZWdpbixieSxjYWxjTW9kZSxjYXAtaGVpZ2h0LGNsYXNzLGNvbG9yLGNvbG9yLXJlbmRlcmluZyxjb250ZW50LCcgK1xuICAgICdjeCxjeSxkLGR4LGR5LGRlc2NlbnQsZGlzcGxheSxkdXIsZW5kLGZpbGwsZmlsbC1ydWxlLGZvbnQtZmFtaWx5LGZvbnQtc2l6ZSxmb250LXN0cmV0Y2gsJyArXG4gICAgJ2ZvbnQtc3R5bGUsZm9udC12YXJpYW50LGZvbnQtd2VpZ2h0LGZyb20sZngsZnksZzEsZzIsZ2x5cGgtbmFtZSxncmFkaWVudFVuaXRzLGhhbmdpbmcsJyArXG4gICAgJ2hlaWdodCxob3Jpei1hZHYteCxob3Jpei1vcmlnaW4teCxpZGVvZ3JhcGhpYyxrLGtleVBvaW50cyxrZXlTcGxpbmVzLGtleVRpbWVzLGxhbmcsJyArXG4gICAgJ21hcmtlci1lbmQsbWFya2VyLW1pZCxtYXJrZXItc3RhcnQsbWFya2VySGVpZ2h0LG1hcmtlclVuaXRzLG1hcmtlcldpZHRoLG1hdGhlbWF0aWNhbCwnICtcbiAgICAnbWF4LG1pbixvZmZzZXQsb3BhY2l0eSxvcmllbnQsb3JpZ2luLG92ZXJsaW5lLXBvc2l0aW9uLG92ZXJsaW5lLXRoaWNrbmVzcyxwYW5vc2UtMSwnICtcbiAgICAncGF0aCxwYXRoTGVuZ3RoLHBvaW50cyxwcmVzZXJ2ZUFzcGVjdFJhdGlvLHIscmVmWCxyZWZZLHJlcGVhdENvdW50LHJlcGVhdER1ciwnICtcbiAgICAncmVxdWlyZWRFeHRlbnNpb25zLHJlcXVpcmVkRmVhdHVyZXMscmVzdGFydCxyb3RhdGUscngscnksc2xvcGUsc3RlbWgsc3RlbXYsc3RvcC1jb2xvciwnICtcbiAgICAnc3RvcC1vcGFjaXR5LHN0cmlrZXRocm91Z2gtcG9zaXRpb24sc3RyaWtldGhyb3VnaC10aGlja25lc3Msc3Ryb2tlLHN0cm9rZS1kYXNoYXJyYXksJyArXG4gICAgJ3N0cm9rZS1kYXNob2Zmc2V0LHN0cm9rZS1saW5lY2FwLHN0cm9rZS1saW5lam9pbixzdHJva2UtbWl0ZXJsaW1pdCxzdHJva2Utb3BhY2l0eSwnICtcbiAgICAnc3Ryb2tlLXdpZHRoLHN5c3RlbUxhbmd1YWdlLHRhcmdldCx0ZXh0LWFuY2hvcix0byx0cmFuc2Zvcm0sdHlwZSx1MSx1Mix1bmRlcmxpbmUtcG9zaXRpb24sJyArXG4gICAgJ3VuZGVybGluZS10aGlja25lc3MsdW5pY29kZSx1bmljb2RlLXJhbmdlLHVuaXRzLXBlci1lbSx2YWx1ZXMsdmVyc2lvbix2aWV3Qm94LHZpc2liaWxpdHksJyArXG4gICAgJ3dpZHRoLHdpZHRocyx4LHgtaGVpZ2h0LHgxLHgyLHhsaW5rOmFjdHVhdGUseGxpbms6YXJjcm9sZSx4bGluazpyb2xlLHhsaW5rOnNob3cseGxpbms6dGl0bGUsJyArXG4gICAgJ3hsaW5rOnR5cGUseG1sOmJhc2UseG1sOmxhbmcseG1sOnNwYWNlLHhtbG5zLHhtbG5zOnhsaW5rLHkseTEseTIsem9vbUFuZFBhbicsIHRydWUpO1xuXG52YXIgdmFsaWRBdHRycyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmlBdHRycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ZnQXR0cnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxBdHRycyk7XG5cbmZ1bmN0aW9uIHRvTWFwKHN0ciwgbG93ZXJjYXNlS2V5cykge1xuICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KCcsJyksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIG9ialtsb3dlcmNhc2VLZXlzID8gYW5ndWxhci5sb3dlcmNhc2UoaXRlbXNbaV0pIDogaXRlbXNbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG52YXIgaW5lcnRCb2R5RWxlbWVudDtcbihmdW5jdGlvbih3aW5kb3cpIHtcbiAgdmFyIGRvYztcbiAgaWYgKHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuaW1wbGVtZW50YXRpb24pIHtcbiAgICBkb2MgPSB3aW5kb3cuZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiaW5lcnRcIik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJHNhbml0aXplTWluRXJyKCdub2luZXJ0JywgXCJDYW4ndCBjcmVhdGUgYW4gaW5lcnQgaHRtbCBkb2N1bWVudFwiKTtcbiAgfVxuICB2YXIgZG9jRWxlbWVudCA9IGRvYy5kb2N1bWVudEVsZW1lbnQgfHwgZG9jLmdldERvY3VtZW50RWxlbWVudCgpO1xuICB2YXIgYm9keUVsZW1lbnRzID0gZG9jRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpO1xuXG4gIC8vIHVzdWFsbHkgdGhlcmUgc2hvdWxkIGJlIG9ubHkgb25lIGJvZHkgZWxlbWVudCBpbiB0aGUgZG9jdW1lbnQsIGJ1dCBJRSBkb2Vzbid0IGhhdmUgYW55LCBzbyB3ZSBuZWVkIHRvIGNyZWF0ZSBvbmVcbiAgaWYgKGJvZHlFbGVtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpbmVydEJvZHlFbGVtZW50ID0gYm9keUVsZW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIHZhciBodG1sID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2h0bWwnKTtcbiAgICBpbmVydEJvZHlFbGVtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICBodG1sLmFwcGVuZENoaWxkKGluZXJ0Qm9keUVsZW1lbnQpO1xuICAgIGRvYy5hcHBlbmRDaGlsZChodG1sKTtcbiAgfVxufSkod2luZG93KTtcblxuLyoqXG4gKiBAZXhhbXBsZVxuICogaHRtbFBhcnNlcihodG1sU3RyaW5nLCB7XG4gKiAgICAgc3RhcnQ6IGZ1bmN0aW9uKHRhZywgYXR0cnMpIHt9LFxuICogICAgIGVuZDogZnVuY3Rpb24odGFnKSB7fSxcbiAqICAgICBjaGFyczogZnVuY3Rpb24odGV4dCkge30sXG4gKiAgICAgY29tbWVudDogZnVuY3Rpb24odGV4dCkge31cbiAqIH0pO1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sIHN0cmluZ1xuICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gaHRtbFBhcnNlcihodG1sLCBoYW5kbGVyKSB7XG4gIGlmIChodG1sID09PSBudWxsIHx8IGh0bWwgPT09IHVuZGVmaW5lZCkge1xuICAgIGh0bWwgPSAnJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgaHRtbCAhPT0gJ3N0cmluZycpIHtcbiAgICBodG1sID0gJycgKyBodG1sO1xuICB9XG4gIGluZXJ0Qm9keUVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcblxuICAvL21YU1MgcHJvdGVjdGlvblxuICB2YXIgbVhTU0F0dGVtcHRzID0gNTtcbiAgZG8ge1xuICAgIGlmIChtWFNTQXR0ZW1wdHMgPT09IDApIHtcbiAgICAgIHRocm93ICRzYW5pdGl6ZU1pbkVycigndWlucHV0JywgXCJGYWlsZWQgdG8gc2FuaXRpemUgaHRtbCBiZWNhdXNlIHRoZSBpbnB1dCBpcyB1bnN0YWJsZVwiKTtcbiAgICB9XG4gICAgbVhTU0F0dGVtcHRzLS07XG5cbiAgICAvLyBzdHJpcCBjdXN0b20tbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIG9uIElFPD0xMVxuICAgIGlmIChkb2N1bWVudC5kb2N1bWVudE1vZGUgPD0gMTEpIHtcbiAgICAgIHN0cmlwQ3VzdG9tTnNBdHRycyhpbmVydEJvZHlFbGVtZW50KTtcbiAgICB9XG4gICAgaHRtbCA9IGluZXJ0Qm9keUVsZW1lbnQuaW5uZXJIVE1MOyAvL3RyaWdnZXIgbVhTU1xuICAgIGluZXJ0Qm9keUVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgfSB3aGlsZSAoaHRtbCAhPT0gaW5lcnRCb2R5RWxlbWVudC5pbm5lckhUTUwpO1xuXG4gIHZhciBub2RlID0gaW5lcnRCb2R5RWxlbWVudC5maXJzdENoaWxkO1xuICB3aGlsZSAobm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgY2FzZSAxOiAvLyBFTEVNRU5UX05PREVcbiAgICAgICAgaGFuZGxlci5zdGFydChub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJUb01hcChub2RlLmF0dHJpYnV0ZXMpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6IC8vIFRFWFQgTk9ERVxuICAgICAgICBoYW5kbGVyLmNoYXJzKG5vZGUudGV4dENvbnRlbnQpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgbmV4dE5vZGU7XG4gICAgaWYgKCEobmV4dE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQpKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgIGhhbmRsZXIuZW5kKG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG4gICAgICBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICBpZiAoIW5leHROb2RlKSB7XG4gICAgICAgIHdoaWxlIChuZXh0Tm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICBpZiAobm9kZSA9PT0gaW5lcnRCb2R5RWxlbWVudCkgYnJlYWs7XG4gICAgICAgICAgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuZW5kKG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgfVxuXG4gIHdoaWxlIChub2RlID0gaW5lcnRCb2R5RWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgaW5lcnRCb2R5RWxlbWVudC5yZW1vdmVDaGlsZChub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhdHRyVG9NYXAoYXR0cnMpIHtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgaWkgPSBhdHRycy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBhdHRyc1tpXTtcbiAgICBtYXBbYXR0ci5uYW1lXSA9IGF0dHIudmFsdWU7XG4gIH1cbiAgcmV0dXJuIG1hcDtcbn1cblxuXG4vKipcbiAqIEVzY2FwZXMgYWxsIHBvdGVudGlhbGx5IGRhbmdlcm91cyBjaGFyYWN0ZXJzLCBzbyB0aGF0IHRoZVxuICogcmVzdWx0aW5nIHN0cmluZyBjYW4gYmUgc2FmZWx5IGluc2VydGVkIGludG8gYXR0cmlidXRlIG9yXG4gKiBlbGVtZW50IHRleHQuXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGVzY2FwZWQgdGV4dFxuICovXG5mdW5jdGlvbiBlbmNvZGVFbnRpdGllcyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuXG4gICAgcmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5cbiAgICByZXBsYWNlKFNVUlJPR0FURV9QQUlSX1JFR0VYUCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBoaSA9IHZhbHVlLmNoYXJDb2RlQXQoMCk7XG4gICAgICB2YXIgbG93ID0gdmFsdWUuY2hhckNvZGVBdCgxKTtcbiAgICAgIHJldHVybiAnJiMnICsgKCgoaGkgLSAweEQ4MDApICogMHg0MDApICsgKGxvdyAtIDB4REMwMCkgKyAweDEwMDAwKSArICc7JztcbiAgICB9KS5cbiAgICByZXBsYWNlKE5PTl9BTFBIQU5VTUVSSUNfUkVHRVhQLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuICcmIycgKyB2YWx1ZS5jaGFyQ29kZUF0KDApICsgJzsnO1xuICAgIH0pLlxuICAgIHJlcGxhY2UoLzwvZywgJyZsdDsnKS5cbiAgICByZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG59XG5cbi8qKlxuICogY3JlYXRlIGFuIEhUTUwvWE1MIHdyaXRlciB3aGljaCB3cml0ZXMgdG8gYnVmZmVyXG4gKiBAcGFyYW0ge0FycmF5fSBidWYgdXNlIGJ1Zi5qb2luKCcnKSB0byBnZXQgb3V0IHNhbml0aXplZCBodG1sIHN0cmluZ1xuICogQHJldHVybnMge29iamVjdH0gaW4gdGhlIGZvcm0gb2Yge1xuICogICAgIHN0YXJ0OiBmdW5jdGlvbih0YWcsIGF0dHJzKSB7fSxcbiAqICAgICBlbmQ6IGZ1bmN0aW9uKHRhZykge30sXG4gKiAgICAgY2hhcnM6IGZ1bmN0aW9uKHRleHQpIHt9LFxuICogICAgIGNvbW1lbnQ6IGZ1bmN0aW9uKHRleHQpIHt9XG4gKiB9XG4gKi9cbmZ1bmN0aW9uIGh0bWxTYW5pdGl6ZVdyaXRlcihidWYsIHVyaVZhbGlkYXRvcikge1xuICB2YXIgaWdub3JlQ3VycmVudEVsZW1lbnQgPSBmYWxzZTtcbiAgdmFyIG91dCA9IGFuZ3VsYXIuYmluZChidWYsIGJ1Zi5wdXNoKTtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogZnVuY3Rpb24odGFnLCBhdHRycykge1xuICAgICAgdGFnID0gYW5ndWxhci5sb3dlcmNhc2UodGFnKTtcbiAgICAgIGlmICghaWdub3JlQ3VycmVudEVsZW1lbnQgJiYgYmxvY2tlZEVsZW1lbnRzW3RhZ10pIHtcbiAgICAgICAgaWdub3JlQ3VycmVudEVsZW1lbnQgPSB0YWc7XG4gICAgICB9XG4gICAgICBpZiAoIWlnbm9yZUN1cnJlbnRFbGVtZW50ICYmIHZhbGlkRWxlbWVudHNbdGFnXSA9PT0gdHJ1ZSkge1xuICAgICAgICBvdXQoJzwnKTtcbiAgICAgICAgb3V0KHRhZyk7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhdHRycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgIHZhciBsa2V5PWFuZ3VsYXIubG93ZXJjYXNlKGtleSk7XG4gICAgICAgICAgdmFyIGlzSW1hZ2UgPSAodGFnID09PSAnaW1nJyAmJiBsa2V5ID09PSAnc3JjJykgfHwgKGxrZXkgPT09ICdiYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgaWYgKHZhbGlkQXR0cnNbbGtleV0gPT09IHRydWUgJiZcbiAgICAgICAgICAgICh1cmlBdHRyc1tsa2V5XSAhPT0gdHJ1ZSB8fCB1cmlWYWxpZGF0b3IodmFsdWUsIGlzSW1hZ2UpKSkge1xuICAgICAgICAgICAgb3V0KCcgJyk7XG4gICAgICAgICAgICBvdXQoa2V5KTtcbiAgICAgICAgICAgIG91dCgnPVwiJyk7XG4gICAgICAgICAgICBvdXQoZW5jb2RlRW50aXRpZXModmFsdWUpKTtcbiAgICAgICAgICAgIG91dCgnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvdXQoJz4nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24odGFnKSB7XG4gICAgICB0YWcgPSBhbmd1bGFyLmxvd2VyY2FzZSh0YWcpO1xuICAgICAgaWYgKCFpZ25vcmVDdXJyZW50RWxlbWVudCAmJiB2YWxpZEVsZW1lbnRzW3RhZ10gPT09IHRydWUgJiYgdm9pZEVsZW1lbnRzW3RhZ10gIT09IHRydWUpIHtcbiAgICAgICAgb3V0KCc8LycpO1xuICAgICAgICBvdXQodGFnKTtcbiAgICAgICAgb3V0KCc+Jyk7XG4gICAgICB9XG4gICAgICBpZiAodGFnID09IGlnbm9yZUN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgIGlnbm9yZUN1cnJlbnRFbGVtZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGFyczogZnVuY3Rpb24oY2hhcnMpIHtcbiAgICAgIGlmICghaWdub3JlQ3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgb3V0KGVuY29kZUVudGl0aWVzKGNoYXJzKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5cbi8qKlxuICogV2hlbiBJRTktMTEgY29tZXMgYWNyb3NzIGFuIHVua25vd24gbmFtZXNwYWNlZCBhdHRyaWJ1dGUgZS5nLiAneGxpbms6Zm9vJyBpdCBhZGRzICd4bWxuczpuczEnIGF0dHJpYnV0ZSB0byBkZWNsYXJlXG4gKiBuczEgbmFtZXNwYWNlIGFuZCBwcmVmaXhlcyB0aGUgYXR0cmlidXRlIHdpdGggJ25zMScgKGUuZy4gJ25zMTp4bGluazpmb28nKS4gVGhpcyBpcyB1bmRlc2lyYWJsZSBzaW5jZSB3ZSBkb24ndCB3YW50XG4gKiB0byBhbGxvdyBhbnkgb2YgdGhlc2UgY3VzdG9tIGF0dHJpYnV0ZXMuIFRoaXMgbWV0aG9kIHN0cmlwcyB0aGVtIGFsbC5cbiAqXG4gKiBAcGFyYW0gbm9kZSBSb290IGVsZW1lbnQgdG8gcHJvY2Vzc1xuICovXG5mdW5jdGlvbiBzdHJpcEN1c3RvbU5zQXR0cnMobm9kZSkge1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICB2YXIgYXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhdHRyTm9kZSA9IGF0dHJzW2ldO1xuICAgICAgdmFyIGF0dHJOYW1lID0gYXR0ck5vZGUubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGF0dHJOYW1lID09PSAneG1sbnM6bnMxJyB8fCBhdHRyTmFtZS5pbmRleE9mKCduczE6JykgPT09IDApIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJOb2RlKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBsLS07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG5leHROb2RlID0gbm9kZS5maXJzdENoaWxkO1xuICBpZiAobmV4dE5vZGUpIHtcbiAgICBzdHJpcEN1c3RvbU5zQXR0cnMobmV4dE5vZGUpO1xuICB9XG5cbiAgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICBpZiAobmV4dE5vZGUpIHtcbiAgICBzdHJpcEN1c3RvbU5zQXR0cnMobmV4dE5vZGUpO1xuICB9XG59XG5cblxuXG4vLyBkZWZpbmUgbmdTYW5pdGl6ZSBtb2R1bGUgYW5kIHJlZ2lzdGVyICRzYW5pdGl6ZSBzZXJ2aWNlXG5hbmd1bGFyLm1vZHVsZSgnbmdTYW5pdGl6ZScsIFtdKS5wcm92aWRlcignJHNhbml0aXplJywgJFNhbml0aXplUHJvdmlkZXIpO1xuXG4vKiBnbG9iYWwgc2FuaXRpemVUZXh0OiBmYWxzZSAqL1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGxpbmt5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmluZHMgbGlua3MgaW4gdGV4dCBpbnB1dCBhbmQgdHVybnMgdGhlbSBpbnRvIGh0bWwgbGlua3MuIFN1cHBvcnRzIGBodHRwL2h0dHBzL2Z0cC9tYWlsdG9gIGFuZFxuICogcGxhaW4gZW1haWwgYWRkcmVzcyBsaW5rcy5cbiAqXG4gKiBSZXF1aXJlcyB0aGUge0BsaW5rIG5nU2FuaXRpemUgYG5nU2FuaXRpemVgfSBtb2R1bGUgdG8gYmUgaW5zdGFsbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IElucHV0IHRleHQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IFdpbmRvdyAoYF9ibGFua3xfc2VsZnxfcGFyZW50fF90b3BgKSBvciBuYW1lZCBmcmFtZSB0byBvcGVuIGxpbmtzIGluLlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb24odXJsKX0gW2F0dHJpYnV0ZXNdIEFkZCBjdXN0b20gYXR0cmlidXRlcyB0byB0aGUgbGluayBlbGVtZW50LlxuICpcbiAqICAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAgLSBgb2JqZWN0YDogQSBtYXAgb2YgYXR0cmlidXRlc1xuICogICAgLSBgZnVuY3Rpb25gOiBUYWtlcyB0aGUgdXJsIGFzIGEgcGFyYW1ldGVyIGFuZCByZXR1cm5zIGEgbWFwIG9mIGF0dHJpYnV0ZXNcbiAqXG4gKiAgICBJZiB0aGUgbWFwIG9mIGF0dHJpYnV0ZXMgY29udGFpbnMgYSB2YWx1ZSBmb3IgYHRhcmdldGAsIGl0IG92ZXJyaWRlcyB0aGUgdmFsdWUgb2ZcbiAqICAgIHRoZSB0YXJnZXQgcGFyYW1ldGVyLlxuICpcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIdG1sLWxpbmtpZmllZCBhbmQge0BsaW5rICRzYW5pdGl6ZSBzYW5pdGl6ZWR9IHRleHQuXG4gKlxuICogQHVzYWdlXG4gICA8c3BhbiBuZy1iaW5kLWh0bWw9XCJsaW5reV9leHByZXNzaW9uIHwgbGlua3lcIj48L3NwYW4+XG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImxpbmt5RXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICBTbmlwcGV0OiA8dGV4dGFyZWEgbmctbW9kZWw9XCJzbmlwcGV0XCIgY29scz1cIjYwXCIgcm93cz1cIjNcIj48L3RleHRhcmVhPlxuICAgICAgIDx0YWJsZT5cbiAgICAgICAgIDx0cj5cbiAgICAgICAgICAgPHRoPkZpbHRlcjwvdGg+XG4gICAgICAgICAgIDx0aD5Tb3VyY2U8L3RoPlxuICAgICAgICAgICA8dGg+UmVuZGVyZWQ8L3RoPlxuICAgICAgICAgPC90cj5cbiAgICAgICAgIDx0ciBpZD1cImxpbmt5LWZpbHRlclwiPlxuICAgICAgICAgICA8dGQ+bGlua3kgZmlsdGVyPC90ZD5cbiAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgIDxwcmU+Jmx0O2RpdiBuZy1iaW5kLWh0bWw9XCJzbmlwcGV0IHwgbGlua3lcIiZndDs8YnI+Jmx0Oy9kaXYmZ3Q7PC9wcmU+XG4gICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICA8ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXQgfCBsaW5reVwiPjwvZGl2PlxuICAgICAgICAgICA8L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICAgIDx0ciBpZD1cImxpbmt5LXRhcmdldFwiPlxuICAgICAgICAgIDx0ZD5saW5reSB0YXJnZXQ8L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxwcmU+Jmx0O2RpdiBuZy1iaW5kLWh0bWw9XCJzbmlwcGV0V2l0aFNpbmdsZVVSTCB8IGxpbmt5OidfYmxhbmsnXCImZ3Q7PGJyPiZsdDsvZGl2Jmd0OzwvcHJlPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGRpdiBuZy1iaW5kLWh0bWw9XCJzbmlwcGV0V2l0aFNpbmdsZVVSTCB8IGxpbmt5OidfYmxhbmsnXCI+PC9kaXY+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgICA8dHIgaWQ9XCJsaW5reS1jdXN0b20tYXR0cmlidXRlc1wiPlxuICAgICAgICAgIDx0ZD5saW5reSBjdXN0b20gYXR0cmlidXRlczwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPHByZT4mbHQ7ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXRXaXRoU2luZ2xlVVJMIHwgbGlua3k6J19zZWxmJzp7cmVsOiAnbm9mb2xsb3cnfVwiJmd0Ozxicj4mbHQ7L2RpdiZndDs8L3ByZT5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxkaXYgbmctYmluZC1odG1sPVwic25pcHBldFdpdGhTaW5nbGVVUkwgfCBsaW5reTonX3NlbGYnOntyZWw6ICdub2ZvbGxvdyd9XCI+PC9kaXY+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgICA8dHIgaWQ9XCJlc2NhcGVkLWh0bWxcIj5cbiAgICAgICAgICAgPHRkPm5vIGZpbHRlcjwvdGQ+XG4gICAgICAgICAgIDx0ZD48cHJlPiZsdDtkaXYgbmctYmluZD1cInNuaXBwZXRcIiZndDs8YnI+Jmx0Oy9kaXYmZ3Q7PC9wcmU+PC90ZD5cbiAgICAgICAgICAgPHRkPjxkaXYgbmctYmluZD1cInNuaXBwZXRcIj48L2Rpdj48L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbGlua3lFeGFtcGxlJywgWyduZ1Nhbml0aXplJ10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAkc2NvcGUuc25pcHBldCA9XG4gICAgICAgICAgICAgJ1ByZXR0eSB0ZXh0IHdpdGggc29tZSBsaW5rczpcXG4nK1xuICAgICAgICAgICAgICdodHRwOi8vYW5ndWxhcmpzLm9yZy8sXFxuJytcbiAgICAgICAgICAgICAnbWFpbHRvOnVzQHNvbWV3aGVyZS5vcmcsXFxuJytcbiAgICAgICAgICAgICAnYW5vdGhlckBzb21ld2hlcmUub3JnLFxcbicrXG4gICAgICAgICAgICAgJ2FuZCBvbmUgbW9yZTogZnRwOi8vMTI3LjAuMC4xLy4nO1xuICAgICAgICAgICAkc2NvcGUuc25pcHBldFdpdGhTaW5nbGVVUkwgPSAnaHR0cDovL2FuZ3VsYXJqcy5vcmcvJztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBsaW5raWZ5IHRoZSBzbmlwcGV0IHdpdGggdXJscycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmt5LWZpbHRlcicpKS5lbGVtZW50KGJ5LmJpbmRpbmcoJ3NuaXBwZXQgfCBsaW5reScpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgIHRvQmUoJ1ByZXR0eSB0ZXh0IHdpdGggc29tZSBsaW5rczogaHR0cDovL2FuZ3VsYXJqcy5vcmcvLCB1c0Bzb21ld2hlcmUub3JnLCAnICtcbiAgICAgICAgICAgICAgICAgICdhbm90aGVyQHNvbWV3aGVyZS5vcmcsIGFuZCBvbmUgbW9yZTogZnRwOi8vMTI3LjAuMC4xLy4nKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJyNsaW5reS1maWx0ZXIgYScpKS5jb3VudCgpKS50b0VxdWFsKDQpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBub3QgbGlua2lmeSBzbmlwcGV0IHdpdGhvdXQgdGhlIGxpbmt5IGZpbHRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2VzY2FwZWQtaHRtbCcpKS5lbGVtZW50KGJ5LmJpbmRpbmcoJ3NuaXBwZXQnKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgICB0b0JlKCdQcmV0dHkgdGV4dCB3aXRoIHNvbWUgbGlua3M6IGh0dHA6Ly9hbmd1bGFyanMub3JnLywgbWFpbHRvOnVzQHNvbWV3aGVyZS5vcmcsICcgK1xuICAgICAgICAgICAgICAgICAgJ2Fub3RoZXJAc29tZXdoZXJlLm9yZywgYW5kIG9uZSBtb3JlOiBmdHA6Ly8xMjcuMC4wLjEvLicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnI2VzY2FwZWQtaHRtbCBhJykpLmNvdW50KCkpLnRvRXF1YWwoMCk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc25pcHBldCcpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc25pcHBldCcpKS5zZW5kS2V5cygnbmV3IGh0dHA6Ly9saW5rLicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmt5LWZpbHRlcicpKS5lbGVtZW50KGJ5LmJpbmRpbmcoJ3NuaXBwZXQgfCBsaW5reScpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgIHRvQmUoJ25ldyBodHRwOi8vbGluay4nKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJyNsaW5reS1maWx0ZXIgYScpKS5jb3VudCgpKS50b0VxdWFsKDEpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2VzY2FwZWQtaHRtbCcpKS5lbGVtZW50KGJ5LmJpbmRpbmcoJ3NuaXBwZXQnKSkuZ2V0VGV4dCgpKVxuICAgICAgICAgICAgIC50b0JlKCduZXcgaHR0cDovL2xpbmsuJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHdvcmsgd2l0aCB0aGUgdGFyZ2V0IHByb3BlcnR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5reS10YXJnZXQnKSkuXG4gICAgICAgICAgICBlbGVtZW50KGJ5LmJpbmRpbmcoXCJzbmlwcGV0V2l0aFNpbmdsZVVSTCB8IGxpbmt5OidfYmxhbmsnXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9CZSgnaHR0cDovL2FuZ3VsYXJqcy5vcmcvJyk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI2xpbmt5LXRhcmdldCBhJykpLmdldEF0dHJpYnV0ZSgndGFyZ2V0JykpLnRvRXF1YWwoJ19ibGFuaycpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBvcHRpb25hbGx5IGFkZCBjdXN0b20gYXR0cmlidXRlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGlua3ktY3VzdG9tLWF0dHJpYnV0ZXMnKSkuXG4gICAgICAgICAgICBlbGVtZW50KGJ5LmJpbmRpbmcoXCJzbmlwcGV0V2l0aFNpbmdsZVVSTCB8IGxpbmt5Oidfc2VsZic6e3JlbDogJ25vZm9sbG93J31cIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b0JlKCdodHRwOi8vYW5ndWxhcmpzLm9yZy8nKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjbGlua3ktY3VzdG9tLWF0dHJpYnV0ZXMgYScpKS5nZXRBdHRyaWJ1dGUoJ3JlbCcpKS50b0VxdWFsKCdub2ZvbGxvdycpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmFuZ3VsYXIubW9kdWxlKCduZ1Nhbml0aXplJykuZmlsdGVyKCdsaW5reScsIFsnJHNhbml0aXplJywgZnVuY3Rpb24oJHNhbml0aXplKSB7XG4gIHZhciBMSU5LWV9VUkxfUkVHRVhQID1cbiAgICAgICAgLygoZnRwfGh0dHBzPyk6XFwvXFwvfCh3d3dcXC4pfChtYWlsdG86KT9bQS1aYS16MC05Ll8lKy1dK0ApXFxTKlteXFxzLjssKCl7fTw+XCJcXHUyMDFkXFx1MjAxOV0vaSxcbiAgICAgIE1BSUxUT19SRUdFWFAgPSAvXm1haWx0bzovaTtcblxuICB2YXIgbGlua3lNaW5FcnIgPSBhbmd1bGFyLiQkbWluRXJyKCdsaW5reScpO1xuICB2YXIgaXNTdHJpbmcgPSBhbmd1bGFyLmlzU3RyaW5nO1xuXG4gIHJldHVybiBmdW5jdGlvbih0ZXh0LCB0YXJnZXQsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodGV4dCA9PSBudWxsIHx8IHRleHQgPT09ICcnKSByZXR1cm4gdGV4dDtcbiAgICBpZiAoIWlzU3RyaW5nKHRleHQpKSB0aHJvdyBsaW5reU1pbkVycignbm90c3RyaW5nJywgJ0V4cGVjdGVkIHN0cmluZyBidXQgcmVjZWl2ZWQ6IHswfScsIHRleHQpO1xuXG4gICAgdmFyIG1hdGNoO1xuICAgIHZhciByYXcgPSB0ZXh0O1xuICAgIHZhciBodG1sID0gW107XG4gICAgdmFyIHVybDtcbiAgICB2YXIgaTtcbiAgICB3aGlsZSAoKG1hdGNoID0gcmF3Lm1hdGNoKExJTktZX1VSTF9SRUdFWFApKSkge1xuICAgICAgLy8gV2UgY2FuIG5vdCBlbmQgaW4gdGhlc2UgYXMgdGhleSBhcmUgc29tZXRpbWVzIGZvdW5kIGF0IHRoZSBlbmQgb2YgdGhlIHNlbnRlbmNlXG4gICAgICB1cmwgPSBtYXRjaFswXTtcbiAgICAgIC8vIGlmIHdlIGRpZCBub3QgbWF0Y2ggZnRwL2h0dHAvd3d3L21haWx0byB0aGVuIGFzc3VtZSBtYWlsdG9cbiAgICAgIGlmICghbWF0Y2hbMl0gJiYgIW1hdGNoWzRdKSB7XG4gICAgICAgIHVybCA9IChtYXRjaFszXSA/ICdodHRwOi8vJyA6ICdtYWlsdG86JykgKyB1cmw7XG4gICAgICB9XG4gICAgICBpID0gbWF0Y2guaW5kZXg7XG4gICAgICBhZGRUZXh0KHJhdy5zdWJzdHIoMCwgaSkpO1xuICAgICAgYWRkTGluayh1cmwsIG1hdGNoWzBdLnJlcGxhY2UoTUFJTFRPX1JFR0VYUCwgJycpKTtcbiAgICAgIHJhdyA9IHJhdy5zdWJzdHJpbmcoaSArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgfVxuICAgIGFkZFRleHQocmF3KTtcbiAgICByZXR1cm4gJHNhbml0aXplKGh0bWwuam9pbignJykpO1xuXG4gICAgZnVuY3Rpb24gYWRkVGV4dCh0ZXh0KSB7XG4gICAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaHRtbC5wdXNoKHNhbml0aXplVGV4dCh0ZXh0KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkTGluayh1cmwsIHRleHQpIHtcbiAgICAgIHZhciBrZXk7XG4gICAgICBodG1sLnB1c2goJzxhICcpO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihhdHRyaWJ1dGVzKSkge1xuICAgICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcyh1cmwpO1xuICAgICAgfVxuICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QoYXR0cmlidXRlcykpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgIGh0bWwucHVzaChrZXkgKyAnPVwiJyArIGF0dHJpYnV0ZXNba2V5XSArICdcIiAnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXR0cmlidXRlcyA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHRhcmdldCkgJiYgISgndGFyZ2V0JyBpbiBhdHRyaWJ1dGVzKSkge1xuICAgICAgICBodG1sLnB1c2goJ3RhcmdldD1cIicsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAnXCIgJyk7XG4gICAgICB9XG4gICAgICBodG1sLnB1c2goJ2hyZWY9XCInLFxuICAgICAgICAgICAgICAgIHVybC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JyksXG4gICAgICAgICAgICAgICAgJ1wiPicpO1xuICAgICAgYWRkVGV4dCh0ZXh0KTtcbiAgICAgIGh0bWwucHVzaCgnPC9hPicpO1xuICAgIH1cbiAgfTtcbn1dKTtcblxuXG59KSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2FuZ3VsYXItc2FuaXRpemUvYW5ndWxhci1zYW5pdGl6ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB0aGlzW1wicmxfdXRpbGl0aWVzXCJdOyB9KCkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJybF91dGlsaXRpZXNcIlxuICoqIG1vZHVsZSBpZCA9IDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4vYm9vdHN0cmFwLXNsaWRlci5taW4uY3NzJyk7XHJcbnZhciBTbGlkZXIgPSByZXF1aXJlKCcuL2Jvb3RzdHJhcC1zbGlkZXIubWluJyk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLXNsaWRlcicsIFtdKVxyXG4gICAgLmRpcmVjdGl2ZSgnc2xpZGVyJywgWyckcGFyc2UnLCAnJHRpbWVvdXQnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkcGFyc2UsICR0aW1lb3V0LCAkcm9vdFNjb3BlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBRScsXHJcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdj48aW5wdXQgY2xhc3M9XCJzbGlkZXItaW5wdXRcIiB0eXBlPVwidGV4dFwiIHN0eWxlPVwid2lkdGg6MTAwJVwiIC8+PC9kaXY+JyxcclxuICAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gICAgICAgICAgICBzY29wZToge1xyXG4gICAgICAgICAgICAgICAgbWF4OiBcIj1cIixcclxuICAgICAgICAgICAgICAgIG1pbjogXCI9XCIsXHJcbiAgICAgICAgICAgICAgICBzdGVwOiBcIj1cIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBcIj1cIixcclxuICAgICAgICAgICAgICAgIG5nTW9kZWw6ICc9JyxcclxuICAgICAgICAgICAgICAgIG5nRGlzYWJsZWQ6ICc9JyxcclxuICAgICAgICAgICAgICAgIHJhbmdlOiAnPScsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXJpZDogJz0nLFxyXG4gICAgICAgICAgICAgICAgdGlja3M6ICc9JyxcclxuICAgICAgICAgICAgICAgIHRpY2tzTGFiZWxzOiAnPScsXHJcbiAgICAgICAgICAgICAgICB0aWNrc1NuYXBCb3VuZHM6ICc9JyxcclxuICAgICAgICAgICAgICAgIHRpY2tzUG9zaXRpb25zOiAnPScsXHJcbiAgICAgICAgICAgICAgICBzY2FsZTogJz0nLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvblN0YXJ0U2xpZGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uU3RvcFNsaWRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvblNsaWRlOiAnJidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWxDdHJsLCAkY29tcGlsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5nTW9kZWxEZXJlZ2lzdGVyRm4sIG5nRGlzYWJsZWREZXJlZ2lzdGVyRm47XHJcblxyXG4gICAgICAgICAgICAgICAgaW5pdFNsaWRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluaXRTbGlkZXIoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0T3B0aW9uKGtleSwgdmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW2tleV0gPSB2YWx1ZSB8fCBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRGbG9hdE9wdGlvbihrZXksIHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gdmFsdWUgfHwgdmFsdWUgPT09IDAgPyBwYXJzZUZsb2F0KHZhbHVlKSA6IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldEJvb2xlYW5PcHRpb24oa2V5LCB2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHZhbHVlID8gdmFsdWUgKyAnJyA9PT0gJ3RydWUnIDogZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXJyYXlPclZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYW5ndWxhci5pc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZihcIltcIikgPT09IDApID8gYW5ndWxhci5mcm9tSnNvbih2YWx1ZSkgOiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbignaWQnLCAkc2NvcGUuc2xpZGVyaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbignb3JpZW50YXRpb24nLCBhdHRycy5vcmllbnRhdGlvbiwgJ2hvcml6b250YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRPcHRpb24oJ3NlbGVjdGlvbicsIGF0dHJzLnNlbGVjdGlvbiwgJ2JlZm9yZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbignaGFuZGxlJywgYXR0cnMuaGFuZGxlLCAncm91bmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRPcHRpb24oJ3Rvb2x0aXAnLCBhdHRycy5zbGlkZXJUb29sdGlwIHx8IGF0dHJzLnRvb2x0aXAsICdzaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0T3B0aW9uKCd0b29sdGlwX3Bvc2l0aW9uJywgYXR0cnMuc2xpZGVyVG9vbHRpcFBvc2l0aW9uLCAndG9wJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0T3B0aW9uKCd0b29sdGlwc2VwYXJhdG9yJywgYXR0cnMudG9vbHRpcHNlcGFyYXRvciwgJzonKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRPcHRpb24oJ3RpY2tzJywgJHNjb3BlLnRpY2tzKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRPcHRpb24oJ3RpY2tzX2xhYmVscycsICRzY29wZS50aWNrc0xhYmVscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0T3B0aW9uKCd0aWNrc19zbmFwX2JvdW5kcycsICRzY29wZS50aWNrc1NuYXBCb3VuZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbigndGlja3NfcG9zaXRpb25zJywgJHNjb3BlLnRpY2tzUG9zaXRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRPcHRpb24oJ3NjYWxlJywgJHNjb3BlLnNjYWxlLCAnbGluZWFyJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldEZsb2F0T3B0aW9uKCdtaW4nLCAkc2NvcGUubWluLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRGbG9hdE9wdGlvbignbWF4JywgJHNjb3BlLm1heCwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEZsb2F0T3B0aW9uKCdzdGVwJywgJHNjb3BlLnN0ZXAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJOYnIgPSBvcHRpb25zLnN0ZXAgKyAnJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVjaW1hbHMgPSBzdHJOYnIuc3Vic3RyaW5nKHN0ck5ici5sYXN0SW5kZXhPZignLicpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RmxvYXRPcHRpb24oJ3ByZWNpc2lvbicsIGF0dHJzLnByZWNpc2lvbiwgZGVjaW1hbHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRCb29sZWFuT3B0aW9uKCd0b29sdGlwX3NwbGl0JywgYXR0cnMudG9vbHRpcHNwbGl0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Qm9vbGVhbk9wdGlvbignZW5hYmxlZCcsIGF0dHJzLmVuYWJsZWQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEJvb2xlYW5PcHRpb24oJ25hdHVyYWxhcnJvd2tleXMnLCBhdHRycy5uYXR1cmFsYXJyb3drZXlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Qm9vbGVhbk9wdGlvbigncmV2ZXJzZWQnLCBhdHRycy5yZXZlcnNlZCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRCb29sZWFuT3B0aW9uKCdyYW5nZScsICRzY29wZS5yYW5nZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoJHNjb3BlLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy52YWx1ZSA9ICRzY29wZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhbmd1bGFyLmlzU3RyaW5nKCRzY29wZS52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudmFsdWUgPSBnZXRBcnJheU9yVmFsdWUoJHNjb3BlLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KG9wdGlvbnMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VGbG9hdCgkc2NvcGUudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHZhbHVlID0gNTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgJHNjb3BlLm1pbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICRzY29wZS5taW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudmFsdWUgPSBbdmFsdWUsIG9wdGlvbnMubWF4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPiAkc2NvcGUubWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJHNjb3BlLm1heDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy52YWx1ZSA9IFtvcHRpb25zLm1pbiwgdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy52YWx1ZSA9IFtvcHRpb25zLm1pbiwgb3B0aW9ucy5tYXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudmFsdWUgPSBbb3B0aW9ucy5taW4sIG9wdGlvbnMubWF4XTsgLy8gVGhpcyBpcyBuZWVkZWQsIGJlY2F1c2Ugb2YgdmFsdWUgZGVmaW5lZCBhdCAkLmZuLnNsaWRlci5kZWZhdWx0cyAtIGRlZmF1bHQgdmFsdWUgNSBwcmV2ZW50cyBjcmVhdGluZyByYW5nZSBzbGlkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmdNb2RlbCA9IG9wdGlvbnMudmFsdWU7IC8vIG5lZWRlZCwgb3RoZXJ3aXNlIHR1cm5zIHZhbHVlIGludG8gW251bGwsICMjXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RmxvYXRPcHRpb24oJ3ZhbHVlJywgJHNjb3BlLnZhbHVlLCA1KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZm9ybWF0dGVyKSBvcHRpb25zLmZvcm1hdHRlciA9ICRzY29wZS4kZXZhbCgkc2NvcGUuZm9ybWF0dGVyKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHNsaWRlciBqUXVlcnkgcGx1Z2luIGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgnJCcgaW4gd2luZG93ICYmICQuZm4uc2xpZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZGluZyBtZXRob2RzIHRvIGpRdWVyeSBzbGlkZXIgcGx1Z2luIHByb3RvdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmZuLnNsaWRlci5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLm9mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmZuLnNsaWRlci5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIub24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlc3Ryb3kgcHJldmlvdXMgc2xpZGVyIHRvIHJlc2V0IGFsbCBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRbMF0uX19zbGlkZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uX19zbGlkZXIuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVyID0gbmV3IFNsaWRlcihlbGVtZW50WzBdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NsaWRlci1pbnB1dCcpWzBdLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50WzBdLl9fc2xpZGVyID0gc2xpZGVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBldmVyeXRoaW5nIHRoYXQgbmVlZHMgc2xpZGVyIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlRXZlbnQgPSBnZXRBcnJheU9yVmFsdWUoYXR0cnMudXBkYXRlZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHVwZGF0ZUV2ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBvbmx5IHNpbmdsZSBldmVudCBuYW1lIGluIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVFdmVudCA9IFt1cGRhdGVFdmVudF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIHNsaWRlIGV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUV2ZW50ID0gWydzbGlkZSddO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godXBkYXRlRXZlbnQsIGZ1bmN0aW9uIChzbGlkZXJFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIub24oc2xpZGVyRXZlbnQsIGZ1bmN0aW9uIChldikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlci5vbignY2hhbmdlJywgZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoZXYubmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBFdmVudCBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVyRXZlbnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZVN0YXJ0OiAnb25TdGFydFNsaWRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGU6ICdvblNsaWRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVTdG9wOiAnb25TdG9wU2xpZGUnXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2xpZGVyRXZlbnRzLCBmdW5jdGlvbiAoc2xpZGVyRXZlbnRBdHRyLCBzbGlkZXJFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cnNbc2xpZGVyRXZlbnRBdHRyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vbihzbGlkZXJFdmVudCwgZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlW3NsaWRlckV2ZW50QXR0cl0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbigkc2NvcGUuJHBhcmVudCwgeyAkZXZlbnQ6IGV2LCB2YWx1ZTogZXYgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBkZXJlZ2lzdGVyIG5nRGlzYWJsZWQgd2F0Y2hlciB0byBwcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24obmdEaXNhYmxlZERlcmVnaXN0ZXJGbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmdEaXNhYmxlZERlcmVnaXN0ZXJGbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZ0Rpc2FibGVkRGVyZWdpc3RlckZuID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5nRGlzYWJsZWREZXJlZ2lzdGVyRm4gPSAkc2NvcGUuJHdhdGNoKCduZ0Rpc2FibGVkJywgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLmRpc2FibGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5lbmFibGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBkZXJlZ2lzdGVyIG5nTW9kZWwgd2F0Y2hlciB0byBwcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24obmdNb2RlbERlcmVnaXN0ZXJGbikpIG5nTW9kZWxEZXJlZ2lzdGVyRm4oKTtcclxuICAgICAgICAgICAgICAgICAgICBuZ01vZGVsRGVyZWdpc3RlckZuID0gJHNjb3BlLiR3YXRjaCgnbmdNb2RlbCcsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUucmFuZ2Upe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIuc2V0VmFsdWUocGFyc2VGbG9hdCh2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHZhciB3YXRjaGVycyA9IFsnbWluJywgJ21heCcsICdzdGVwJywgJ3JhbmdlJywgJ3NjYWxlJ107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2god2F0Y2hlcnMsIGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaChwcm9wLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRTbGlkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKVxyXG47XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2xpYnJhcmllcy9hbmd1bGFyLWJvb3RzdHJhcC1zbGlkZXIvc2xpZGVyLmpzXG4gKiogbW9kdWxlIGlkID0gNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib290c3RyYXAtc2xpZGVyLm1pbi5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYm9vdHN0cmFwLXNsaWRlci5taW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYm9vdHN0cmFwLXNsaWRlci5taW4uY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vbGlicmFyaWVzL2FuZ3VsYXItYm9vdHN0cmFwLXNsaWRlci9ib290c3RyYXAtc2xpZGVyLm1pbi5jc3NcbiAqKiBtb2R1bGUgaWQgPSA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxyXFxuICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT04gIDUuMS4xXFxyXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxyXFxuLyohID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcclxcbiAqIGJvb3RzdHJhcC1zbGlkZXIuanNcXHJcXG4gKlxcclxcbiAqIE1haW50YWluZXJzOlxcclxcbiAqXFx0XFx0S3lsZSBLZW1wXFxyXFxuICpcXHRcXHRcXHQtIFR3aXR0ZXI6IEBzZWl5cmlhXFxyXFxuICpcXHRcXHRcXHQtIEdpdGh1YjogIHNlaXlyaWFcXHJcXG4gKlxcdFxcdFJvaGl0IEthbGt1clxcclxcbiAqXFx0XFx0XFx0LSBUd2l0dGVyOiBAUm92b2x1dGlvbmFyeVxcclxcbiAqXFx0XFx0XFx0LSBHaXRodWI6ICByb3ZvbHV0aW9uXFxyXFxuICpcXHJcXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cXHJcXG4gKlxcclxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcXFwiTGljZW5zZVxcXCIpO1xcclxcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cXHJcXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcXHJcXG4gKlxcclxcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxcclxcbiAqXFxyXFxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxcclxcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFxcXCJBUyBJU1xcXCIgQkFTSVMsXFxyXFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXFxyXFxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxcclxcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxcclxcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLy5zbGlkZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246bWlkZGxlO3Bvc2l0aW9uOnJlbGF0aXZlfS5zbGlkZXIuc2xpZGVyLWhvcml6b250YWx7d2lkdGg6MjEwcHg7aGVpZ2h0OjIwcHh9LnNsaWRlci5zbGlkZXItaG9yaXpvbnRhbCAuc2xpZGVyLXRyYWNre2hlaWdodDoxMHB4O3dpZHRoOjEwMCU7bWFyZ2luLXRvcDotNXB4O3RvcDo1MCU7bGVmdDowfS5zbGlkZXIuc2xpZGVyLWhvcml6b250YWwgLnNsaWRlci1zZWxlY3Rpb24sLnNsaWRlci5zbGlkZXItaG9yaXpvbnRhbCAuc2xpZGVyLXRyYWNrLWxvdywuc2xpZGVyLnNsaWRlci1ob3Jpem9udGFsIC5zbGlkZXItdHJhY2staGlnaHtoZWlnaHQ6MTAwJTt0b3A6MDtib3R0b206MH0uc2xpZGVyLnNsaWRlci1ob3Jpem9udGFsIC5zbGlkZXItdGljaywuc2xpZGVyLnNsaWRlci1ob3Jpem9udGFsIC5zbGlkZXItaGFuZGxle21hcmdpbi1sZWZ0Oi0xMHB4O21hcmdpbi10b3A6LTVweH0uc2xpZGVyLnNsaWRlci1ob3Jpem9udGFsIC5zbGlkZXItdGljay50cmlhbmdsZSwuc2xpZGVyLnNsaWRlci1ob3Jpem9udGFsIC5zbGlkZXItaGFuZGxlLnRyaWFuZ2xle2JvcmRlci13aWR0aDowIDEwcHggMTBweCAxMHB4O3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyLWJvdHRvbS1jb2xvcjojMDQ4MGJlO21hcmdpbi10b3A6MH0uc2xpZGVyLnNsaWRlci1ob3Jpem9udGFsIC5zbGlkZXItdGljay1sYWJlbC1jb250YWluZXJ7d2hpdGUtc3BhY2U6bm93cmFwO21hcmdpbi10b3A6MjBweH0uc2xpZGVyLnNsaWRlci1ob3Jpem9udGFsIC5zbGlkZXItdGljay1sYWJlbC1jb250YWluZXIgLnNsaWRlci10aWNrLWxhYmVse3BhZGRpbmctdG9wOjRweDtkaXNwbGF5OmlubGluZS1ibG9jazt0ZXh0LWFsaWduOmNlbnRlcn0uc2xpZGVyLnNsaWRlci12ZXJ0aWNhbHtoZWlnaHQ6MjEwcHg7d2lkdGg6MjBweH0uc2xpZGVyLnNsaWRlci12ZXJ0aWNhbCAuc2xpZGVyLXRyYWNre3dpZHRoOjEwcHg7aGVpZ2h0OjEwMCU7bWFyZ2luLWxlZnQ6LTVweDtsZWZ0OjUwJTt0b3A6MH0uc2xpZGVyLnNsaWRlci12ZXJ0aWNhbCAuc2xpZGVyLXNlbGVjdGlvbnt3aWR0aDoxMDAlO2xlZnQ6MDt0b3A6MDtib3R0b206MH0uc2xpZGVyLnNsaWRlci12ZXJ0aWNhbCAuc2xpZGVyLXRyYWNrLWxvdywuc2xpZGVyLnNsaWRlci12ZXJ0aWNhbCAuc2xpZGVyLXRyYWNrLWhpZ2h7d2lkdGg6MTAwJTtsZWZ0OjA7cmlnaHQ6MH0uc2xpZGVyLnNsaWRlci12ZXJ0aWNhbCAuc2xpZGVyLXRpY2ssLnNsaWRlci5zbGlkZXItdmVydGljYWwgLnNsaWRlci1oYW5kbGV7bWFyZ2luLWxlZnQ6LTVweDttYXJnaW4tdG9wOi0xMHB4fS5zbGlkZXIuc2xpZGVyLXZlcnRpY2FsIC5zbGlkZXItdGljay50cmlhbmdsZSwuc2xpZGVyLnNsaWRlci12ZXJ0aWNhbCAuc2xpZGVyLWhhbmRsZS50cmlhbmdsZXtib3JkZXItd2lkdGg6MTBweCAwIDEwcHggMTBweDt3aWR0aDoxcHg7aGVpZ2h0OjFweDtib3JkZXItbGVmdC1jb2xvcjojMDQ4MGJlO21hcmdpbi1sZWZ0OjB9LnNsaWRlci5zbGlkZXItZGlzYWJsZWQgLnNsaWRlci1oYW5kbGV7YmFja2dyb3VuZC1pbWFnZTotd2Via2l0LWxpbmVhci1ncmFkaWVudCh0b3AsI2RmZGZkZiAwLCNiZWJlYmUgMTAwJSk7YmFja2dyb3VuZC1pbWFnZTotby1saW5lYXItZ3JhZGllbnQodG9wLCNkZmRmZGYgMCwjYmViZWJlIDEwMCUpO2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwjZGZkZmRmIDAsI2JlYmViZSAxMDAlKTtiYWNrZ3JvdW5kLXJlcGVhdDpyZXBlYXQteDtmaWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KHN0YXJ0Q29sb3JzdHI9JyNmZmRmZGZkZicsZW5kQ29sb3JzdHI9JyNmZmJlYmViZScsR3JhZGllbnRUeXBlPTApfS5zbGlkZXIuc2xpZGVyLWRpc2FibGVkIC5zbGlkZXItdHJhY2t7YmFja2dyb3VuZC1pbWFnZTotd2Via2l0LWxpbmVhci1ncmFkaWVudCh0b3AsI2U1ZTVlNSAwLCNlOWU5ZTkgMTAwJSk7YmFja2dyb3VuZC1pbWFnZTotby1saW5lYXItZ3JhZGllbnQodG9wLCNlNWU1ZTUgMCwjZTllOWU5IDEwMCUpO2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwjZTVlNWU1IDAsI2U5ZTllOSAxMDAlKTtiYWNrZ3JvdW5kLXJlcGVhdDpyZXBlYXQteDtmaWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KHN0YXJ0Q29sb3JzdHI9JyNmZmU1ZTVlNScsZW5kQ29sb3JzdHI9JyNmZmU5ZTllOScsR3JhZGllbnRUeXBlPTApO2N1cnNvcjpub3QtYWxsb3dlZH0uc2xpZGVyIGlucHV0e2Rpc3BsYXk6bm9uZX0uc2xpZGVyIC50b29sdGlwLnRvcHttYXJnaW4tdG9wOi0zNnB4fS5zbGlkZXIgLnRvb2x0aXAtaW5uZXJ7d2hpdGUtc3BhY2U6bm93cmFwfS5zbGlkZXIgLmhpZGV7ZGlzcGxheTpub25lfS5zbGlkZXItdHJhY2t7cG9zaXRpb246YWJzb2x1dGU7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1pbWFnZTotd2Via2l0LWxpbmVhci1ncmFkaWVudCh0b3AsI2Y1ZjVmNSAwLCNmOWY5ZjkgMTAwJSk7YmFja2dyb3VuZC1pbWFnZTotby1saW5lYXItZ3JhZGllbnQodG9wLCNmNWY1ZjUgMCwjZjlmOWY5IDEwMCUpO2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwjZjVmNWY1IDAsI2Y5ZjlmOSAxMDAlKTtiYWNrZ3JvdW5kLXJlcGVhdDpyZXBlYXQteDtmaWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KHN0YXJ0Q29sb3JzdHI9JyNmZmY1ZjVmNScsZW5kQ29sb3JzdHI9JyNmZmY5ZjlmOScsR3JhZGllbnRUeXBlPTApOy13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDFweCAycHggcmdiYSgwLDAsMCwwLjEpO2JveC1zaGFkb3c6aW5zZXQgMCAxcHggMnB4IHJnYmEoMCwwLDAsMC4xKTtib3JkZXItcmFkaXVzOjRweH0uc2xpZGVyLXNlbGVjdGlvbntwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kLWltYWdlOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwjZjlmOWY5IDAsI2Y1ZjVmNSAxMDAlKTtiYWNrZ3JvdW5kLWltYWdlOi1vLWxpbmVhci1ncmFkaWVudCh0b3AsI2Y5ZjlmOSAwLCNmNWY1ZjUgMTAwJSk7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCNmOWY5ZjkgMCwjZjVmNWY1IDEwMCUpO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdC14O2ZpbHRlcjpwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0nI2ZmZjlmOWY5JyxlbmRDb2xvcnN0cj0nI2ZmZjVmNWY1JyxHcmFkaWVudFR5cGU9MCk7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgLTFweCAwIHJnYmEoMCwwLDAsMC4xNSk7Ym94LXNoYWRvdzppbnNldCAwIC0xcHggMCByZ2JhKDAsMCwwLDAuMTUpOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtib3JkZXItcmFkaXVzOjRweH0uc2xpZGVyLXNlbGVjdGlvbi50aWNrLXNsaWRlci1zZWxlY3Rpb257YmFja2dyb3VuZC1pbWFnZTotd2Via2l0LWxpbmVhci1ncmFkaWVudCh0b3AsIzg5Y2RlZiAwLCM4MWJmZGUgMTAwJSk7YmFja2dyb3VuZC1pbWFnZTotby1saW5lYXItZ3JhZGllbnQodG9wLCM4OWNkZWYgMCwjODFiZmRlIDEwMCUpO2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwjODljZGVmIDAsIzgxYmZkZSAxMDAlKTtiYWNrZ3JvdW5kLXJlcGVhdDpyZXBlYXQteDtmaWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KHN0YXJ0Q29sb3JzdHI9JyNmZjg5Y2RlZicsZW5kQ29sb3JzdHI9JyNmZjgxYmZkZScsR3JhZGllbnRUeXBlPTApfS5zbGlkZXItdHJhY2stbG93LC5zbGlkZXItdHJhY2staGlnaHtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50Oy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtib3JkZXItcmFkaXVzOjRweH0uc2xpZGVyLWhhbmRsZXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2JhY2tncm91bmQtY29sb3I6IzMzN2FiNztiYWNrZ3JvdW5kLWltYWdlOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwjMTQ5YmRmIDAsIzA0ODBiZSAxMDAlKTtiYWNrZ3JvdW5kLWltYWdlOi1vLWxpbmVhci1ncmFkaWVudCh0b3AsIzE0OWJkZiAwLCMwNDgwYmUgMTAwJSk7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCMxNDliZGYgMCwjMDQ4MGJlIDEwMCUpO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdC14O2ZpbHRlcjpwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0nI2ZmMTQ5YmRmJyxlbmRDb2xvcnN0cj0nI2ZmMDQ4MGJlJyxHcmFkaWVudFR5cGU9MCk7ZmlsdGVyOm5vbmU7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMXB4IDAgcmdiYSgyNTUsMjU1LDI1NSwuMiksMCAxcHggMnB4IHJnYmEoMCwwLDAsLjA1KTtib3gtc2hhZG93Omluc2V0IDAgMXB4IDAgcmdiYSgyNTUsMjU1LDI1NSwuMiksMCAxcHggMnB4IHJnYmEoMCwwLDAsLjA1KTtib3JkZXI6MCBzb2xpZCB0cmFuc3BhcmVudH0uc2xpZGVyLWhhbmRsZS5yb3VuZHtib3JkZXItcmFkaXVzOjUwJX0uc2xpZGVyLWhhbmRsZS50cmlhbmdsZXtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50IG5vbmV9LnNsaWRlci1oYW5kbGUuY3VzdG9te2JhY2tncm91bmQ6dHJhbnNwYXJlbnQgbm9uZX0uc2xpZGVyLWhhbmRsZS5jdXN0b206OmJlZm9yZXtsaW5lLWhlaWdodDoyMHB4O2ZvbnQtc2l6ZToyMHB4O2NvbnRlbnQ6J1xcXFwyNjA1Jztjb2xvcjojNzI2MjA0fS5zbGlkZXItdGlja3twb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2JhY2tncm91bmQtaW1hZ2U6LXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCNmOWY5ZjkgMCwjZjVmNWY1IDEwMCUpO2JhY2tncm91bmQtaW1hZ2U6LW8tbGluZWFyLWdyYWRpZW50KHRvcCwjZjlmOWY5IDAsI2Y1ZjVmNSAxMDAlKTtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byBib3R0b20sI2Y5ZjlmOSAwLCNmNWY1ZjUgMTAwJSk7YmFja2dyb3VuZC1yZXBlYXQ6cmVwZWF0LXg7ZmlsdGVyOnByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudChzdGFydENvbG9yc3RyPScjZmZmOWY5ZjknLGVuZENvbG9yc3RyPScjZmZmNWY1ZjUnLEdyYWRpZW50VHlwZT0wKTstd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMCAtMXB4IDAgcmdiYSgwLDAsMCwwLjE1KTtib3gtc2hhZG93Omluc2V0IDAgLTFweCAwIHJnYmEoMCwwLDAsMC4xNSk7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2ZpbHRlcjpub25lO29wYWNpdHk6Ljg7Ym9yZGVyOjAgc29saWQgdHJhbnNwYXJlbnR9LnNsaWRlci10aWNrLnJvdW5ke2JvcmRlci1yYWRpdXM6NTAlfS5zbGlkZXItdGljay50cmlhbmdsZXtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50IG5vbmV9LnNsaWRlci10aWNrLmN1c3RvbXtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50IG5vbmV9LnNsaWRlci10aWNrLmN1c3RvbTo6YmVmb3Jle2xpbmUtaGVpZ2h0OjIwcHg7Zm9udC1zaXplOjIwcHg7Y29udGVudDonXFxcXDI2MDUnO2NvbG9yOiM3MjYyMDR9LnNsaWRlci10aWNrLmluLXNlbGVjdGlvbntiYWNrZ3JvdW5kLWltYWdlOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwjODljZGVmIDAsIzgxYmZkZSAxMDAlKTtiYWNrZ3JvdW5kLWltYWdlOi1vLWxpbmVhci1ncmFkaWVudCh0b3AsIzg5Y2RlZiAwLCM4MWJmZGUgMTAwJSk7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCM4OWNkZWYgMCwjODFiZmRlIDEwMCUpO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdC14O2ZpbHRlcjpwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0nI2ZmODljZGVmJyxlbmRDb2xvcnN0cj0nI2ZmODFiZmRlJyxHcmFkaWVudFR5cGU9MCk7b3BhY2l0eToxfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9saWJyYXJpZXMvYW5ndWxhci1ib290c3RyYXAtc2xpZGVyL2Jvb3RzdHJhcC1zbGlkZXIubWluLmNzc1xuICoqIG1vZHVsZSBpZCA9IDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIGxpc3QgPSBbXTtcclxuXHJcblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcclxuXHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgaXRlbVsxXSArIFwifVwiKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdH07XHJcblxyXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xyXG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXHJcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXHJcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XHJcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcclxuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cclxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcclxuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdHJldHVybiBsaXN0O1xyXG59O1xyXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuICoqIG1vZHVsZSBpZCA9IDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbnZhciBzdHlsZXNJbkRvbSA9IHt9LFxyXG5cdG1lbW9pemUgPSBmdW5jdGlvbihmbikge1xyXG5cdFx0dmFyIG1lbW87XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRyZXR1cm4gbWVtbztcclxuXHRcdH07XHJcblx0fSxcclxuXHRpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiAvbXNpZSBbNi05XVxcYi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcclxuXHR9KSxcclxuXHRnZXRIZWFkRWxlbWVudCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cdH0pLFxyXG5cdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxyXG5cdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxyXG5cdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wID0gW107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRpZih0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcclxuXHRcdGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xyXG5cdH1cclxuXHJcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XHJcblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xyXG5cclxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XHJcblxyXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcclxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xyXG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHR9XHJcblx0XHRpZihuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XHJcblx0XHR9XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcclxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKCk7XHJcblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XHJcblx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XHJcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHR2YXIgc3R5bGVzID0gW107XHJcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XHJcblx0XHR2YXIgaWQgPSBpdGVtWzBdO1xyXG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XHJcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRpZighbmV3U3R5bGVzW2lkXSlcclxuXHRcdFx0c3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcclxuXHRcdGVsc2VcclxuXHRcdFx0bmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xyXG5cdH1cclxuXHRyZXR1cm4gc3R5bGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wW3N0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xyXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRpZighbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcclxuXHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBoZWFkLmZpcnN0Q2hpbGQpO1xyXG5cdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AucHVzaChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XHJcblx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdGlmKGlkeCA+PSAwKSB7XHJcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuXHRzdHlsZUVsZW1lbnQudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRyZXR1cm4gc3R5bGVFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XHJcblx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmtFbGVtZW50KTtcclxuXHRyZXR1cm4gbGlua0VsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xyXG5cdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cclxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcclxuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0c3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XHJcblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSk7XHJcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHR9IGVsc2UgaWYob2JqLnNvdXJjZU1hcCAmJlxyXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHRpZihzdHlsZUVsZW1lbnQuaHJlZilcclxuXHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZShvYmopO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRpZihuZXdPYmopIHtcclxuXHRcdFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcclxuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xyXG5cdH07XHJcbn0pKCk7XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cclxuXHRpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xyXG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGVFbGVtZW50LCBvYmopIHtcclxuXHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XHJcblxyXG5cdGlmKG1lZGlhKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXHJcblx0fVxyXG5cclxuXHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcclxuXHR9IGVsc2Uge1xyXG5cdFx0d2hpbGUoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuXHRcdH1cclxuXHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUxpbmsobGlua0VsZW1lbnQsIG9iaikge1xyXG5cdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcclxuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHJcblx0aWYoc291cmNlTWFwKSB7XHJcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxyXG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xyXG5cdH1cclxuXHJcblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XHJcblxyXG5cdHZhciBvbGRTcmMgPSBsaW5rRWxlbWVudC5ocmVmO1xyXG5cclxuXHRsaW5rRWxlbWVudC5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHJcblx0aWYob2xkU3JjKVxyXG5cdFx0VVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyohID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT04gIDUuMS4xXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4vKiEgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIGJvb3RzdHJhcC1zbGlkZXIuanNcclxuICpcclxuICogTWFpbnRhaW5lcnM6XHJcbiAqXHRcdEt5bGUgS2VtcFxyXG4gKlx0XHRcdC0gVHdpdHRlcjogQHNlaXlyaWFcclxuICpcdFx0XHQtIEdpdGh1YjogIHNlaXlyaWFcclxuICpcdFx0Um9oaXQgS2Fsa3VyXHJcbiAqXHRcdFx0LSBUd2l0dGVyOiBAUm92b2x1dGlvbmFyeVxyXG4gKlx0XHRcdC0gR2l0aHViOiAgcm92b2x1dGlvblxyXG4gKlxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbiFmdW5jdGlvbihhLGIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW1wianF1ZXJ5XCJdLGIpO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMpe3ZhciBjO3RyeXtjPXJlcXVpcmUoXCJqcXVlcnlcIil9Y2F0Y2goZCl7Yz1udWxsfW1vZHVsZS5leHBvcnRzPWIoYyl9ZWxzZSBhLlNsaWRlcj1iKGEualF1ZXJ5KX0odGhpcyxmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKGEpe2Z1bmN0aW9uIGMoYil7Yi5wcm90b3R5cGUub3B0aW9ufHwoYi5wcm90b3R5cGUub3B0aW9uPWZ1bmN0aW9uKGIpe2EuaXNQbGFpbk9iamVjdChiKSYmKHRoaXMub3B0aW9ucz1hLmV4dGVuZCghMCx0aGlzLm9wdGlvbnMsYikpfSl9ZnVuY3Rpb24gZShiLGMpe2EuZm5bYl09ZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2Zvcih2YXIgZz1kLmNhbGwoYXJndW1lbnRzLDEpLGg9MCxpPXRoaXMubGVuZ3RoO2k+aDtoKyspe3ZhciBqPXRoaXNbaF0saz1hLmRhdGEoaixiKTtpZihrKWlmKGEuaXNGdW5jdGlvbihrW2VdKSYmXCJfXCIhPT1lLmNoYXJBdCgwKSl7dmFyIGw9a1tlXS5hcHBseShrLGcpO2lmKHZvaWQgMCE9PWwmJmwhPT1rKXJldHVybiBsfWVsc2UgZihcIm5vIHN1Y2ggbWV0aG9kICdcIitlK1wiJyBmb3IgXCIrYitcIiBpbnN0YW5jZVwiKTtlbHNlIGYoXCJjYW5ub3QgY2FsbCBtZXRob2RzIG9uIFwiK2IrXCIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247IGF0dGVtcHRlZCB0byBjYWxsICdcIitlK1wiJ1wiKX1yZXR1cm4gdGhpc312YXIgbT10aGlzLm1hcChmdW5jdGlvbigpe3ZhciBkPWEuZGF0YSh0aGlzLGIpO3JldHVybiBkPyhkLm9wdGlvbihlKSxkLl9pbml0KCkpOihkPW5ldyBjKHRoaXMsZSksYS5kYXRhKHRoaXMsYixkKSksYSh0aGlzKX0pO3JldHVybiFtfHxtLmxlbmd0aD4xP206bVswXX19aWYoYSl7dmFyIGY9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGU/YjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtyZXR1cm4gYS5icmlkZ2V0PWZ1bmN0aW9uKGEsYil7YyhiKSxlKGEsYil9LGEuYnJpZGdldH19dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlO2MoYSl9KGEpLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGMoYixjKXtmdW5jdGlvbiBkKGEsYil7dmFyIGM9XCJkYXRhLXNsaWRlci1cIitiLnJlcGxhY2UoL18vZyxcIi1cIiksZD1hLmdldEF0dHJpYnV0ZShjKTt0cnl7cmV0dXJuIEpTT04ucGFyc2UoZCl9Y2F0Y2goZSl7cmV0dXJuIGR9fXRoaXMuX3N0YXRlPXt2YWx1ZTpudWxsLGVuYWJsZWQ6bnVsbCxvZmZzZXQ6bnVsbCxzaXplOm51bGwscGVyY2VudGFnZTpudWxsLGluRHJhZzohMSxvdmVyOiExfSxcInN0cmluZ1wiPT10eXBlb2YgYj90aGlzLmVsZW1lbnQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihiKTpiIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJih0aGlzLmVsZW1lbnQ9YiksYz1jP2M6e307Zm9yKHZhciBmPU9iamVjdC5rZXlzKHRoaXMuZGVmYXVsdE9wdGlvbnMpLGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXSxpPWNbaF07aT1cInVuZGVmaW5lZFwiIT10eXBlb2YgaT9pOmQodGhpcy5lbGVtZW50LGgpLGk9bnVsbCE9PWk/aTp0aGlzLmRlZmF1bHRPcHRpb25zW2hdLHRoaXMub3B0aW9uc3x8KHRoaXMub3B0aW9ucz17fSksdGhpcy5vcHRpb25zW2hdPWl9XCJ2ZXJ0aWNhbFwiIT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9ufHxcInRvcFwiIT09dGhpcy5vcHRpb25zLnRvb2x0aXBfcG9zaXRpb24mJlwiYm90dG9tXCIhPT10aGlzLm9wdGlvbnMudG9vbHRpcF9wb3NpdGlvbj9cImhvcml6b250YWxcIiE9PXRoaXMub3B0aW9ucy5vcmllbnRhdGlvbnx8XCJsZWZ0XCIhPT10aGlzLm9wdGlvbnMudG9vbHRpcF9wb3NpdGlvbiYmXCJyaWdodFwiIT09dGhpcy5vcHRpb25zLnRvb2x0aXBfcG9zaXRpb258fCh0aGlzLm9wdGlvbnMudG9vbHRpcF9wb3NpdGlvbj1cInRvcFwiKTp0aGlzLm9wdGlvbnMudG9vbHRpcF9wb3NpdGlvbj1cInJpZ2h0XCI7dmFyIGosayxsLG0sbixvPXRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCxwPSExLHE9dGhpcy5lbGVtZW50LnBhcmVudE5vZGU7aWYodGhpcy5zbGlkZXJFbGVtKXA9ITA7ZWxzZXt0aGlzLnNsaWRlckVsZW09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLnNsaWRlckVsZW0uY2xhc3NOYW1lPVwic2xpZGVyXCI7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZihyLmNsYXNzTmFtZT1cInNsaWRlci10cmFja1wiLGs9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxrLmNsYXNzTmFtZT1cInNsaWRlci10cmFjay1sb3dcIixqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksai5jbGFzc05hbWU9XCJzbGlkZXItc2VsZWN0aW9uXCIsbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGwuY2xhc3NOYW1lPVwic2xpZGVyLXRyYWNrLWhpZ2hcIixtPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbS5jbGFzc05hbWU9XCJzbGlkZXItaGFuZGxlIG1pbi1zbGlkZXItaGFuZGxlXCIsbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG4uY2xhc3NOYW1lPVwic2xpZGVyLWhhbmRsZSBtYXgtc2xpZGVyLWhhbmRsZVwiLHIuYXBwZW5kQ2hpbGQoayksci5hcHBlbmRDaGlsZChqKSxyLmFwcGVuZENoaWxkKGwpLHRoaXMudGlja3M9W10sQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMudGlja3MpJiZ0aGlzLm9wdGlvbnMudGlja3MubGVuZ3RoPjApe2ZvcihnPTA7Zzx0aGlzLm9wdGlvbnMudGlja3MubGVuZ3RoO2crKyl7dmFyIHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtzLmNsYXNzTmFtZT1cInNsaWRlci10aWNrXCIsdGhpcy50aWNrcy5wdXNoKHMpLHIuYXBwZW5kQ2hpbGQocyl9ai5jbGFzc05hbWUrPVwiIHRpY2stc2xpZGVyLXNlbGVjdGlvblwifWlmKHIuYXBwZW5kQ2hpbGQobSksci5hcHBlbmRDaGlsZChuKSx0aGlzLnRpY2tMYWJlbHM9W10sQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMudGlja3NfbGFiZWxzKSYmdGhpcy5vcHRpb25zLnRpY2tzX2xhYmVscy5sZW5ndGg+MClmb3IodGhpcy50aWNrTGFiZWxDb250YWluZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLnRpY2tMYWJlbENvbnRhaW5lci5jbGFzc05hbWU9XCJzbGlkZXItdGljay1sYWJlbC1jb250YWluZXJcIixnPTA7Zzx0aGlzLm9wdGlvbnMudGlja3NfbGFiZWxzLmxlbmd0aDtnKyspe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5jbGFzc05hbWU9XCJzbGlkZXItdGljay1sYWJlbFwiLHQuaW5uZXJIVE1MPXRoaXMub3B0aW9ucy50aWNrc19sYWJlbHNbZ10sdGhpcy50aWNrTGFiZWxzLnB1c2godCksdGhpcy50aWNrTGFiZWxDb250YWluZXIuYXBwZW5kQ2hpbGQodCl9dmFyIHU9ZnVuY3Rpb24oYSl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtiLmNsYXNzTmFtZT1cInRvb2x0aXAtYXJyb3dcIjt2YXIgYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2MuY2xhc3NOYW1lPVwidG9vbHRpcC1pbm5lclwiLGEuYXBwZW5kQ2hpbGQoYiksYS5hcHBlbmRDaGlsZChjKX0sdj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3YuY2xhc3NOYW1lPVwidG9vbHRpcCB0b29sdGlwLW1haW5cIix1KHYpO3ZhciB3PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dy5jbGFzc05hbWU9XCJ0b29sdGlwIHRvb2x0aXAtbWluXCIsdSh3KTt2YXIgeD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3guY2xhc3NOYW1lPVwidG9vbHRpcCB0b29sdGlwLW1heFwiLHUoeCksdGhpcy5zbGlkZXJFbGVtLmFwcGVuZENoaWxkKHIpLHRoaXMuc2xpZGVyRWxlbS5hcHBlbmRDaGlsZCh2KSx0aGlzLnNsaWRlckVsZW0uYXBwZW5kQ2hpbGQodyksdGhpcy5zbGlkZXJFbGVtLmFwcGVuZENoaWxkKHgpLHRoaXMudGlja0xhYmVsQ29udGFpbmVyJiZ0aGlzLnNsaWRlckVsZW0uYXBwZW5kQ2hpbGQodGhpcy50aWNrTGFiZWxDb250YWluZXIpLHEuaW5zZXJ0QmVmb3JlKHRoaXMuc2xpZGVyRWxlbSx0aGlzLmVsZW1lbnQpLHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwibm9uZVwifWlmKGEmJih0aGlzLiRlbGVtZW50PWEodGhpcy5lbGVtZW50KSx0aGlzLiRzbGlkZXJFbGVtPWEodGhpcy5zbGlkZXJFbGVtKSksdGhpcy5ldmVudFRvQ2FsbGJhY2tNYXA9e30sdGhpcy5zbGlkZXJFbGVtLmlkPXRoaXMub3B0aW9ucy5pZCx0aGlzLnRvdWNoQ2FwYWJsZT1cIm9udG91Y2hzdGFydFwiaW4gd2luZG93fHx3aW5kb3cuRG9jdW1lbnRUb3VjaCYmZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCx0aGlzLnRvb2x0aXA9dGhpcy5zbGlkZXJFbGVtLnF1ZXJ5U2VsZWN0b3IoXCIudG9vbHRpcC1tYWluXCIpLHRoaXMudG9vbHRpcElubmVyPXRoaXMudG9vbHRpcC5xdWVyeVNlbGVjdG9yKFwiLnRvb2x0aXAtaW5uZXJcIiksdGhpcy50b29sdGlwX21pbj10aGlzLnNsaWRlckVsZW0ucXVlcnlTZWxlY3RvcihcIi50b29sdGlwLW1pblwiKSx0aGlzLnRvb2x0aXBJbm5lcl9taW49dGhpcy50b29sdGlwX21pbi5xdWVyeVNlbGVjdG9yKFwiLnRvb2x0aXAtaW5uZXJcIiksdGhpcy50b29sdGlwX21heD10aGlzLnNsaWRlckVsZW0ucXVlcnlTZWxlY3RvcihcIi50b29sdGlwLW1heFwiKSx0aGlzLnRvb2x0aXBJbm5lcl9tYXg9dGhpcy50b29sdGlwX21heC5xdWVyeVNlbGVjdG9yKFwiLnRvb2x0aXAtaW5uZXJcIiksZVt0aGlzLm9wdGlvbnMuc2NhbGVdJiYodGhpcy5vcHRpb25zLnNjYWxlPWVbdGhpcy5vcHRpb25zLnNjYWxlXSkscD09PSEwJiYodGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5zbGlkZXJFbGVtLFwic2xpZGVyLWhvcml6b250YWxcIiksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5zbGlkZXJFbGVtLFwic2xpZGVyLXZlcnRpY2FsXCIpLHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMudG9vbHRpcCxcImhpZGVcIiksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy50b29sdGlwX21pbixcImhpZGVcIiksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy50b29sdGlwX21heCxcImhpZGVcIiksW1wibGVmdFwiLFwidG9wXCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dGhpcy5fcmVtb3ZlUHJvcGVydHkodGhpcy50cmFja0xvdyxhKSx0aGlzLl9yZW1vdmVQcm9wZXJ0eSh0aGlzLnRyYWNrU2VsZWN0aW9uLGEpLHRoaXMuX3JlbW92ZVByb3BlcnR5KHRoaXMudHJhY2tIaWdoLGEpfSx0aGlzKSxbdGhpcy5oYW5kbGUxLHRoaXMuaGFuZGxlMl0uZm9yRWFjaChmdW5jdGlvbihhKXt0aGlzLl9yZW1vdmVQcm9wZXJ0eShhLFwibGVmdFwiKSx0aGlzLl9yZW1vdmVQcm9wZXJ0eShhLFwidG9wXCIpfSx0aGlzKSxbdGhpcy50b29sdGlwLHRoaXMudG9vbHRpcF9taW4sdGhpcy50b29sdGlwX21heF0uZm9yRWFjaChmdW5jdGlvbihhKXt0aGlzLl9yZW1vdmVQcm9wZXJ0eShhLFwibGVmdFwiKSx0aGlzLl9yZW1vdmVQcm9wZXJ0eShhLFwidG9wXCIpLHRoaXMuX3JlbW92ZVByb3BlcnR5KGEsXCJtYXJnaW4tbGVmdFwiKSx0aGlzLl9yZW1vdmVQcm9wZXJ0eShhLFwibWFyZ2luLXRvcFwiKSx0aGlzLl9yZW1vdmVDbGFzcyhhLFwicmlnaHRcIiksdGhpcy5fcmVtb3ZlQ2xhc3MoYSxcInRvcFwiKX0sdGhpcykpLFwidmVydGljYWxcIj09PXRoaXMub3B0aW9ucy5vcmllbnRhdGlvbj8odGhpcy5fYWRkQ2xhc3ModGhpcy5zbGlkZXJFbGVtLFwic2xpZGVyLXZlcnRpY2FsXCIpLHRoaXMuc3R5bGVQb3M9XCJ0b3BcIix0aGlzLm1vdXNlUG9zPVwicGFnZVlcIix0aGlzLnNpemVQb3M9XCJvZmZzZXRIZWlnaHRcIik6KHRoaXMuX2FkZENsYXNzKHRoaXMuc2xpZGVyRWxlbSxcInNsaWRlci1ob3Jpem9udGFsXCIpLHRoaXMuc2xpZGVyRWxlbS5zdHlsZS53aWR0aD1vLHRoaXMub3B0aW9ucy5vcmllbnRhdGlvbj1cImhvcml6b250YWxcIix0aGlzLnN0eWxlUG9zPVwibGVmdFwiLHRoaXMubW91c2VQb3M9XCJwYWdlWFwiLHRoaXMuc2l6ZVBvcz1cIm9mZnNldFdpZHRoXCIpLHRoaXMuX3NldFRvb2x0aXBQb3NpdGlvbigpLEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLnRpY2tzKSYmdGhpcy5vcHRpb25zLnRpY2tzLmxlbmd0aD4wJiYodGhpcy5vcHRpb25zLm1heD1NYXRoLm1heC5hcHBseShNYXRoLHRoaXMub3B0aW9ucy50aWNrcyksdGhpcy5vcHRpb25zLm1pbj1NYXRoLm1pbi5hcHBseShNYXRoLHRoaXMub3B0aW9ucy50aWNrcykpLEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLnZhbHVlKT8odGhpcy5vcHRpb25zLnJhbmdlPSEwLHRoaXMuX3N0YXRlLnZhbHVlPXRoaXMub3B0aW9ucy52YWx1ZSk6dGhpcy5fc3RhdGUudmFsdWU9dGhpcy5vcHRpb25zLnJhbmdlP1t0aGlzLm9wdGlvbnMudmFsdWUsdGhpcy5vcHRpb25zLm1heF06dGhpcy5vcHRpb25zLnZhbHVlLHRoaXMudHJhY2tMb3c9a3x8dGhpcy50cmFja0xvdyx0aGlzLnRyYWNrU2VsZWN0aW9uPWp8fHRoaXMudHJhY2tTZWxlY3Rpb24sdGhpcy50cmFja0hpZ2g9bHx8dGhpcy50cmFja0hpZ2gsXCJub25lXCI9PT10aGlzLm9wdGlvbnMuc2VsZWN0aW9uJiYodGhpcy5fYWRkQ2xhc3ModGhpcy50cmFja0xvdyxcImhpZGVcIiksdGhpcy5fYWRkQ2xhc3ModGhpcy50cmFja1NlbGVjdGlvbixcImhpZGVcIiksdGhpcy5fYWRkQ2xhc3ModGhpcy50cmFja0hpZ2gsXCJoaWRlXCIpKSx0aGlzLmhhbmRsZTE9bXx8dGhpcy5oYW5kbGUxLHRoaXMuaGFuZGxlMj1ufHx0aGlzLmhhbmRsZTIscD09PSEwKWZvcih0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmhhbmRsZTEsXCJyb3VuZCB0cmlhbmdsZVwiKSx0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmhhbmRsZTIsXCJyb3VuZCB0cmlhbmdsZSBoaWRlXCIpLGc9MDtnPHRoaXMudGlja3MubGVuZ3RoO2crKyl0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLnRpY2tzW2ddLFwicm91bmQgdHJpYW5nbGUgaGlkZVwiKTt2YXIgeT1bXCJyb3VuZFwiLFwidHJpYW5nbGVcIixcImN1c3RvbVwiXSx6PS0xIT09eS5pbmRleE9mKHRoaXMub3B0aW9ucy5oYW5kbGUpO2lmKHopZm9yKHRoaXMuX2FkZENsYXNzKHRoaXMuaGFuZGxlMSx0aGlzLm9wdGlvbnMuaGFuZGxlKSx0aGlzLl9hZGRDbGFzcyh0aGlzLmhhbmRsZTIsdGhpcy5vcHRpb25zLmhhbmRsZSksZz0wO2c8dGhpcy50aWNrcy5sZW5ndGg7ZysrKXRoaXMuX2FkZENsYXNzKHRoaXMudGlja3NbZ10sdGhpcy5vcHRpb25zLmhhbmRsZSk7dGhpcy5fc3RhdGUub2Zmc2V0PXRoaXMuX29mZnNldCh0aGlzLnNsaWRlckVsZW0pLHRoaXMuX3N0YXRlLnNpemU9dGhpcy5zbGlkZXJFbGVtW3RoaXMuc2l6ZVBvc10sdGhpcy5zZXRWYWx1ZSh0aGlzLl9zdGF0ZS52YWx1ZSksdGhpcy5oYW5kbGUxS2V5ZG93bj10aGlzLl9rZXlkb3duLmJpbmQodGhpcywwKSx0aGlzLmhhbmRsZTEuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzLmhhbmRsZTFLZXlkb3duLCExKSx0aGlzLmhhbmRsZTJLZXlkb3duPXRoaXMuX2tleWRvd24uYmluZCh0aGlzLDEpLHRoaXMuaGFuZGxlMi5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuaGFuZGxlMktleWRvd24sITEpLHRoaXMubW91c2Vkb3duPXRoaXMuX21vdXNlZG93bi5iaW5kKHRoaXMpLHRoaXMudG91Y2hDYXBhYmxlJiZ0aGlzLnNsaWRlckVsZW0uYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIix0aGlzLm1vdXNlZG93biwhMSksdGhpcy5zbGlkZXJFbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIix0aGlzLm1vdXNlZG93biwhMSksXCJoaWRlXCI9PT10aGlzLm9wdGlvbnMudG9vbHRpcD8odGhpcy5fYWRkQ2xhc3ModGhpcy50b29sdGlwLFwiaGlkZVwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnRvb2x0aXBfbWluLFwiaGlkZVwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnRvb2x0aXBfbWF4LFwiaGlkZVwiKSk6XCJhbHdheXNcIj09PXRoaXMub3B0aW9ucy50b29sdGlwPyh0aGlzLl9zaG93VG9vbHRpcCgpLHRoaXMuX2Fsd2F5c1Nob3dUb29sdGlwPSEwKToodGhpcy5zaG93VG9vbHRpcD10aGlzLl9zaG93VG9vbHRpcC5iaW5kKHRoaXMpLHRoaXMuaGlkZVRvb2x0aXA9dGhpcy5faGlkZVRvb2x0aXAuYmluZCh0aGlzKSx0aGlzLnNsaWRlckVsZW0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIix0aGlzLnNob3dUb29sdGlwLCExKSx0aGlzLnNsaWRlckVsZW0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIix0aGlzLmhpZGVUb29sdGlwLCExKSx0aGlzLmhhbmRsZTEuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsdGhpcy5zaG93VG9vbHRpcCwhMSksdGhpcy5oYW5kbGUxLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdGhpcy5oaWRlVG9vbHRpcCwhMSksdGhpcy5oYW5kbGUyLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLHRoaXMuc2hvd1Rvb2x0aXAsITEpLHRoaXMuaGFuZGxlMi5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLHRoaXMuaGlkZVRvb2x0aXAsITEpKSx0aGlzLm9wdGlvbnMuZW5hYmxlZD90aGlzLmVuYWJsZSgpOnRoaXMuZGlzYWJsZSgpfXZhciBkPXtmb3JtYXRJbnZhbGlkSW5wdXRFcnJvck1zZzpmdW5jdGlvbihhKXtyZXR1cm5cIkludmFsaWQgaW5wdXQgdmFsdWUgJ1wiK2ErXCInIHBhc3NlZCBpblwifSxjYWxsaW5nQ29udGV4dE5vdFNsaWRlckluc3RhbmNlOlwiQ2FsbGluZyBjb250ZXh0IGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBpbnN0YW5jZSBvZiBTbGlkZXIgYm91bmQgdG8gaXQuIENoZWNrIHlvdXIgY29kZSB0byBtYWtlIHN1cmUgdGhlIEpRdWVyeSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGUgY2FsbCB0byB0aGUgc2xpZGVyKCkgaW5pdGlhbGl6ZXIgaXMgY2FsbGluZyB0aGUgbWV0aG9kXCJ9LGU9e2xpbmVhcjp7dG9WYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1hLzEwMCoodGhpcy5vcHRpb25zLm1heC10aGlzLm9wdGlvbnMubWluKTtpZih0aGlzLm9wdGlvbnMudGlja3NfcG9zaXRpb25zLmxlbmd0aD4wKXtmb3IodmFyIGMsZCxlLGY9MCxnPTA7Zzx0aGlzLm9wdGlvbnMudGlja3NfcG9zaXRpb25zLmxlbmd0aDtnKyspaWYoYTw9dGhpcy5vcHRpb25zLnRpY2tzX3Bvc2l0aW9uc1tnXSl7Yz1nPjA/dGhpcy5vcHRpb25zLnRpY2tzW2ctMV06MCxlPWc+MD90aGlzLm9wdGlvbnMudGlja3NfcG9zaXRpb25zW2ctMV06MCxkPXRoaXMub3B0aW9ucy50aWNrc1tnXSxmPXRoaXMub3B0aW9ucy50aWNrc19wb3NpdGlvbnNbZ107YnJlYWt9aWYoZz4wKXt2YXIgaD0oYS1lKS8oZi1lKTtiPWMraCooZC1jKX19dmFyIGk9dGhpcy5vcHRpb25zLm1pbitNYXRoLnJvdW5kKGIvdGhpcy5vcHRpb25zLnN0ZXApKnRoaXMub3B0aW9ucy5zdGVwO3JldHVybiBpPHRoaXMub3B0aW9ucy5taW4/dGhpcy5vcHRpb25zLm1pbjppPnRoaXMub3B0aW9ucy5tYXg/dGhpcy5vcHRpb25zLm1heDppfSx0b1BlcmNlbnRhZ2U6ZnVuY3Rpb24oYSl7aWYodGhpcy5vcHRpb25zLm1heD09PXRoaXMub3B0aW9ucy5taW4pcmV0dXJuIDA7aWYodGhpcy5vcHRpb25zLnRpY2tzX3Bvc2l0aW9ucy5sZW5ndGg+MCl7Zm9yKHZhciBiLGMsZCxlPTAsZj0wO2Y8dGhpcy5vcHRpb25zLnRpY2tzLmxlbmd0aDtmKyspaWYoYTw9dGhpcy5vcHRpb25zLnRpY2tzW2ZdKXtiPWY+MD90aGlzLm9wdGlvbnMudGlja3NbZi0xXTowLGQ9Zj4wP3RoaXMub3B0aW9ucy50aWNrc19wb3NpdGlvbnNbZi0xXTowLGM9dGhpcy5vcHRpb25zLnRpY2tzW2ZdLGU9dGhpcy5vcHRpb25zLnRpY2tzX3Bvc2l0aW9uc1tmXTticmVha31pZihmPjApe3ZhciBnPShhLWIpLyhjLWIpO3JldHVybiBkK2cqKGUtZCl9fXJldHVybiAxMDAqKGEtdGhpcy5vcHRpb25zLm1pbikvKHRoaXMub3B0aW9ucy5tYXgtdGhpcy5vcHRpb25zLm1pbil9fSxsb2dhcml0aG1pYzp7dG9WYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj0wPT09dGhpcy5vcHRpb25zLm1pbj8wOk1hdGgubG9nKHRoaXMub3B0aW9ucy5taW4pLGM9TWF0aC5sb2codGhpcy5vcHRpb25zLm1heCksZD1NYXRoLmV4cChiKyhjLWIpKmEvMTAwKTtyZXR1cm4gZD10aGlzLm9wdGlvbnMubWluK01hdGgucm91bmQoKGQtdGhpcy5vcHRpb25zLm1pbikvdGhpcy5vcHRpb25zLnN0ZXApKnRoaXMub3B0aW9ucy5zdGVwLGQ8dGhpcy5vcHRpb25zLm1pbj90aGlzLm9wdGlvbnMubWluOmQ+dGhpcy5vcHRpb25zLm1heD90aGlzLm9wdGlvbnMubWF4OmR9LHRvUGVyY2VudGFnZTpmdW5jdGlvbihhKXtpZih0aGlzLm9wdGlvbnMubWF4PT09dGhpcy5vcHRpb25zLm1pbilyZXR1cm4gMDt2YXIgYj1NYXRoLmxvZyh0aGlzLm9wdGlvbnMubWF4KSxjPTA9PT10aGlzLm9wdGlvbnMubWluPzA6TWF0aC5sb2codGhpcy5vcHRpb25zLm1pbiksZD0wPT09YT8wOk1hdGgubG9nKGEpO3JldHVybiAxMDAqKGQtYykvKGItYyl9fX07aWYoYj1mdW5jdGlvbihhLGIpe3JldHVybiBjLmNhbGwodGhpcyxhLGIpLHRoaXN9LGIucHJvdG90eXBlPXtfaW5pdDpmdW5jdGlvbigpe30sY29uc3RydWN0b3I6YixkZWZhdWx0T3B0aW9uczp7aWQ6XCJcIixtaW46MCxtYXg6MTAsc3RlcDoxLHByZWNpc2lvbjowLG9yaWVudGF0aW9uOlwiaG9yaXpvbnRhbFwiLHZhbHVlOjUscmFuZ2U6ITEsc2VsZWN0aW9uOlwiYmVmb3JlXCIsdG9vbHRpcDpcInNob3dcIix0b29sdGlwX3NwbGl0OiExLGhhbmRsZTpcInJvdW5kXCIscmV2ZXJzZWQ6ITEsZW5hYmxlZDohMCxmb3JtYXR0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoYSk/YVswXStcIiA6IFwiK2FbMV06YX0sbmF0dXJhbF9hcnJvd19rZXlzOiExLHRpY2tzOltdLHRpY2tzX3Bvc2l0aW9uczpbXSx0aWNrc19sYWJlbHM6W10sdGlja3Nfc25hcF9ib3VuZHM6MCxzY2FsZTpcImxpbmVhclwiLGZvY3VzOiExLHRvb2x0aXBfcG9zaXRpb246bnVsbH0sZ2V0RWxlbWVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNsaWRlckVsZW19LGdldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy5yYW5nZT90aGlzLl9zdGF0ZS52YWx1ZTp0aGlzLl9zdGF0ZS52YWx1ZVswXX0sc2V0VmFsdWU6ZnVuY3Rpb24oYSxiLGMpe2F8fChhPTApO3ZhciBkPXRoaXMuZ2V0VmFsdWUoKTt0aGlzLl9zdGF0ZS52YWx1ZT10aGlzLl92YWxpZGF0ZUlucHV0VmFsdWUoYSk7dmFyIGU9dGhpcy5fYXBwbHlQcmVjaXNpb24uYmluZCh0aGlzKTt0aGlzLm9wdGlvbnMucmFuZ2U/KHRoaXMuX3N0YXRlLnZhbHVlWzBdPWUodGhpcy5fc3RhdGUudmFsdWVbMF0pLHRoaXMuX3N0YXRlLnZhbHVlWzFdPWUodGhpcy5fc3RhdGUudmFsdWVbMV0pLHRoaXMuX3N0YXRlLnZhbHVlWzBdPU1hdGgubWF4KHRoaXMub3B0aW9ucy5taW4sTWF0aC5taW4odGhpcy5vcHRpb25zLm1heCx0aGlzLl9zdGF0ZS52YWx1ZVswXSkpLHRoaXMuX3N0YXRlLnZhbHVlWzFdPU1hdGgubWF4KHRoaXMub3B0aW9ucy5taW4sTWF0aC5taW4odGhpcy5vcHRpb25zLm1heCx0aGlzLl9zdGF0ZS52YWx1ZVsxXSkpKToodGhpcy5fc3RhdGUudmFsdWU9ZSh0aGlzLl9zdGF0ZS52YWx1ZSksdGhpcy5fc3RhdGUudmFsdWU9W01hdGgubWF4KHRoaXMub3B0aW9ucy5taW4sTWF0aC5taW4odGhpcy5vcHRpb25zLm1heCx0aGlzLl9zdGF0ZS52YWx1ZSkpXSx0aGlzLl9hZGRDbGFzcyh0aGlzLmhhbmRsZTIsXCJoaWRlXCIpLHRoaXMuX3N0YXRlLnZhbHVlWzFdPVwiYWZ0ZXJcIj09PXRoaXMub3B0aW9ucy5zZWxlY3Rpb24/dGhpcy5vcHRpb25zLm1heDp0aGlzLm9wdGlvbnMubWluKSx0aGlzLl9zdGF0ZS5wZXJjZW50YWdlPXRoaXMub3B0aW9ucy5tYXg+dGhpcy5vcHRpb25zLm1pbj9bdGhpcy5fdG9QZXJjZW50YWdlKHRoaXMuX3N0YXRlLnZhbHVlWzBdKSx0aGlzLl90b1BlcmNlbnRhZ2UodGhpcy5fc3RhdGUudmFsdWVbMV0pLDEwMCp0aGlzLm9wdGlvbnMuc3RlcC8odGhpcy5vcHRpb25zLm1heC10aGlzLm9wdGlvbnMubWluKV06WzAsMCwxMDBdLHRoaXMuX2xheW91dCgpO3ZhciBmPXRoaXMub3B0aW9ucy5yYW5nZT90aGlzLl9zdGF0ZS52YWx1ZTp0aGlzLl9zdGF0ZS52YWx1ZVswXTtyZXR1cm4gYj09PSEwJiZ0aGlzLl90cmlnZ2VyKFwic2xpZGVcIixmKSxkIT09ZiYmYz09PSEwJiZ0aGlzLl90cmlnZ2VyKFwiY2hhbmdlXCIse29sZFZhbHVlOmQsbmV3VmFsdWU6Zn0pLHRoaXMuX3NldERhdGFWYWwoZiksdGhpc30sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX3JlbW92ZVNsaWRlckV2ZW50SGFuZGxlcnMoKSx0aGlzLnNsaWRlckVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNsaWRlckVsZW0pLHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwiXCIsdGhpcy5fY2xlYW5VcEV2ZW50Q2FsbGJhY2tzTWFwKCksdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImRhdGFcIiksYSYmKHRoaXMuX3VuYmluZEpRdWVyeUV2ZW50SGFuZGxlcnMoKSx0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoXCJzbGlkZXJcIikpfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXRlLmVuYWJsZWQ9ITEsdGhpcy5oYW5kbGUxLnJlbW92ZUF0dHJpYnV0ZShcInRhYmluZGV4XCIpLHRoaXMuaGFuZGxlMi5yZW1vdmVBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnNsaWRlckVsZW0sXCJzbGlkZXItZGlzYWJsZWRcIiksdGhpcy5fdHJpZ2dlcihcInNsaWRlRGlzYWJsZWRcIiksdGhpc30sZW5hYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXRlLmVuYWJsZWQ9ITAsdGhpcy5oYW5kbGUxLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsMCksdGhpcy5oYW5kbGUyLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsMCksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5zbGlkZXJFbGVtLFwic2xpZGVyLWRpc2FibGVkXCIpLHRoaXMuX3RyaWdnZXIoXCJzbGlkZUVuYWJsZWRcIiksdGhpc30sdG9nZ2xlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXRlLmVuYWJsZWQ/dGhpcy5kaXNhYmxlKCk6dGhpcy5lbmFibGUoKSx0aGlzfSxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhdGUuZW5hYmxlZH0sb246ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5fYmluZE5vblF1ZXJ5RXZlbnRIYW5kbGVyKGEsYiksdGhpc30sb2ZmOmZ1bmN0aW9uKGIsYyl7YT8odGhpcy4kZWxlbWVudC5vZmYoYixjKSx0aGlzLiRzbGlkZXJFbGVtLm9mZihiLGMpKTp0aGlzLl91bmJpbmROb25RdWVyeUV2ZW50SGFuZGxlcihiLGMpfSxnZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/dGhpcy5vcHRpb25zW2FdOnRoaXMub3B0aW9uc30sc2V0QXR0cmlidXRlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMub3B0aW9uc1thXT1iLHRoaXN9LHJlZnJlc2g6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVtb3ZlU2xpZGVyRXZlbnRIYW5kbGVycygpLGMuY2FsbCh0aGlzLHRoaXMuZWxlbWVudCx0aGlzLm9wdGlvbnMpLGEmJmEuZGF0YSh0aGlzLmVsZW1lbnQsXCJzbGlkZXJcIix0aGlzKSx0aGlzfSxyZWxheW91dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9sYXlvdXQoKSx0aGlzfSxfcmVtb3ZlU2xpZGVyRXZlbnRIYW5kbGVyczpmdW5jdGlvbigpe3RoaXMuaGFuZGxlMS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuaGFuZGxlMUtleWRvd24sITEpLHRoaXMuaGFuZGxlMS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIix0aGlzLnNob3dUb29sdGlwLCExKSx0aGlzLmhhbmRsZTEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJsdXJcIix0aGlzLmhpZGVUb29sdGlwLCExKSx0aGlzLmhhbmRsZTIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzLmhhbmRsZTJLZXlkb3duLCExKSx0aGlzLmhhbmRsZTIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsdGhpcy5oYW5kbGUyS2V5ZG93biwhMSksdGhpcy5oYW5kbGUyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdGhpcy5oYW5kbGUyS2V5ZG93biwhMSksdGhpcy5zbGlkZXJFbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsdGhpcy5zaG93VG9vbHRpcCwhMSksdGhpcy5zbGlkZXJFbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsdGhpcy5oaWRlVG9vbHRpcCwhMSksdGhpcy5zbGlkZXJFbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsdGhpcy5tb3VzZWRvd24sITEpLHRoaXMuc2xpZGVyRWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsdGhpcy5tb3VzZWRvd24sITEpfSxfYmluZE5vblF1ZXJ5RXZlbnRIYW5kbGVyOmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09dGhpcy5ldmVudFRvQ2FsbGJhY2tNYXBbYV0mJih0aGlzLmV2ZW50VG9DYWxsYmFja01hcFthXT1bXSksdGhpcy5ldmVudFRvQ2FsbGJhY2tNYXBbYV0ucHVzaChiKX0sX3VuYmluZE5vblF1ZXJ5RXZlbnRIYW5kbGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5ldmVudFRvQ2FsbGJhY2tNYXBbYV07aWYodm9pZCAwIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKylpZihjW2RdPT09Yil7Yy5zcGxpY2UoZCwxKTticmVha319LF9jbGVhblVwRXZlbnRDYWxsYmFja3NNYXA6ZnVuY3Rpb24oKXtmb3IodmFyIGE9T2JqZWN0LmtleXModGhpcy5ldmVudFRvQ2FsbGJhY2tNYXApLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0aGlzLmV2ZW50VG9DYWxsYmFja01hcFtjXT1udWxsfX0sX3Nob3dUb29sdGlwOmZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLnRvb2x0aXBfc3BsaXQ9PT0hMT8odGhpcy5fYWRkQ2xhc3ModGhpcy50b29sdGlwLFwiaW5cIiksdGhpcy50b29sdGlwX21pbi5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMudG9vbHRpcF9tYXguc3R5bGUuZGlzcGxheT1cIm5vbmVcIik6KHRoaXMuX2FkZENsYXNzKHRoaXMudG9vbHRpcF9taW4sXCJpblwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnRvb2x0aXBfbWF4LFwiaW5cIiksdGhpcy50b29sdGlwLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpLHRoaXMuX3N0YXRlLm92ZXI9ITB9LF9oaWRlVG9vbHRpcDpmdW5jdGlvbigpe3RoaXMuX3N0YXRlLmluRHJhZz09PSExJiZ0aGlzLmFsd2F5c1Nob3dUb29sdGlwIT09ITAmJih0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLnRvb2x0aXAsXCJpblwiKSx0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLnRvb2x0aXBfbWluLFwiaW5cIiksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy50b29sdGlwX21heCxcImluXCIpKSx0aGlzLl9zdGF0ZS5vdmVyPSExfSxfbGF5b3V0OmZ1bmN0aW9uKCl7dmFyIGE7aWYoYT10aGlzLm9wdGlvbnMucmV2ZXJzZWQ/WzEwMC10aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzBdLHRoaXMub3B0aW9ucy5yYW5nZT8xMDAtdGhpcy5fc3RhdGUucGVyY2VudGFnZVsxXTp0aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzFdXTpbdGhpcy5fc3RhdGUucGVyY2VudGFnZVswXSx0aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzFdXSx0aGlzLmhhbmRsZTEuc3R5bGVbdGhpcy5zdHlsZVBvc109YVswXStcIiVcIix0aGlzLmhhbmRsZTIuc3R5bGVbdGhpcy5zdHlsZVBvc109YVsxXStcIiVcIixBcnJheS5pc0FycmF5KHRoaXMub3B0aW9ucy50aWNrcykmJnRoaXMub3B0aW9ucy50aWNrcy5sZW5ndGg+MCl7dmFyIGI9TWF0aC5tYXguYXBwbHkoTWF0aCx0aGlzLm9wdGlvbnMudGlja3MpLGM9TWF0aC5taW4uYXBwbHkoTWF0aCx0aGlzLm9wdGlvbnMudGlja3MpLGQ9XCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiLGU9XCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uP1wibWFyZ2luVG9wXCI6XCJtYXJnaW5MZWZ0XCIsZj10aGlzLl9zdGF0ZS5zaXplLyh0aGlzLm9wdGlvbnMudGlja3MubGVuZ3RoLTEpO2lmKHRoaXMudGlja0xhYmVsQ29udGFpbmVyKXt2YXIgZz0wO2lmKDA9PT10aGlzLm9wdGlvbnMudGlja3NfcG9zaXRpb25zLmxlbmd0aCl0aGlzLnRpY2tMYWJlbENvbnRhaW5lci5zdHlsZVtlXT0tZi8yK1wicHhcIixnPXRoaXMudGlja0xhYmVsQ29udGFpbmVyLm9mZnNldEhlaWdodDtlbHNlIGZvcihoPTA7aDx0aGlzLnRpY2tMYWJlbENvbnRhaW5lci5jaGlsZE5vZGVzLmxlbmd0aDtoKyspdGhpcy50aWNrTGFiZWxDb250YWluZXIuY2hpbGROb2Rlc1toXS5vZmZzZXRIZWlnaHQ+ZyYmKGc9dGhpcy50aWNrTGFiZWxDb250YWluZXIuY2hpbGROb2Rlc1toXS5vZmZzZXRIZWlnaHQpO1wiaG9yaXpvbnRhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uJiYodGhpcy5zbGlkZXJFbGVtLnN0eWxlLm1hcmdpbkJvdHRvbT1nK1wicHhcIil9Zm9yKHZhciBoPTA7aDx0aGlzLm9wdGlvbnMudGlja3MubGVuZ3RoO2grKyl7dmFyIGk9dGhpcy5vcHRpb25zLnRpY2tzX3Bvc2l0aW9uc1toXXx8MTAwKih0aGlzLm9wdGlvbnMudGlja3NbaF0tYykvKGItYyk7dGhpcy50aWNrc1toXS5zdHlsZVt0aGlzLnN0eWxlUG9zXT1pK1wiJVwiLHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMudGlja3NbaF0sXCJpbi1zZWxlY3Rpb25cIiksdGhpcy5vcHRpb25zLnJhbmdlP2k+PWFbMF0mJmk8PWFbMV0mJnRoaXMuX2FkZENsYXNzKHRoaXMudGlja3NbaF0sXCJpbi1zZWxlY3Rpb25cIik6XCJhZnRlclwiPT09dGhpcy5vcHRpb25zLnNlbGVjdGlvbiYmaT49YVswXT90aGlzLl9hZGRDbGFzcyh0aGlzLnRpY2tzW2hdLFwiaW4tc2VsZWN0aW9uXCIpOlwiYmVmb3JlXCI9PT10aGlzLm9wdGlvbnMuc2VsZWN0aW9uJiZpPD1hWzBdJiZ0aGlzLl9hZGRDbGFzcyh0aGlzLnRpY2tzW2hdLFwiaW4tc2VsZWN0aW9uXCIpLHRoaXMudGlja0xhYmVsc1toXSYmKHRoaXMudGlja0xhYmVsc1toXS5zdHlsZVtkXT1mK1wicHhcIix2b2lkIDAhPT10aGlzLm9wdGlvbnMudGlja3NfcG9zaXRpb25zW2hdJiYodGhpcy50aWNrTGFiZWxzW2hdLnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIix0aGlzLnRpY2tMYWJlbHNbaF0uc3R5bGVbdGhpcy5zdHlsZVBvc109dGhpcy5vcHRpb25zLnRpY2tzX3Bvc2l0aW9uc1toXStcIiVcIix0aGlzLnRpY2tMYWJlbHNbaF0uc3R5bGVbZV09LWYvMitcInB4XCIpKX19dmFyIGo7aWYodGhpcy5vcHRpb25zLnJhbmdlKXtqPXRoaXMub3B0aW9ucy5mb3JtYXR0ZXIodGhpcy5fc3RhdGUudmFsdWUpLHRoaXMuX3NldFRleHQodGhpcy50b29sdGlwSW5uZXIsaiksdGhpcy50b29sdGlwLnN0eWxlW3RoaXMuc3R5bGVQb3NdPShhWzFdK2FbMF0pLzIrXCIlXCIsXCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uP3RoaXMuX2Nzcyh0aGlzLnRvb2x0aXAsXCJtYXJnaW4tdG9wXCIsLXRoaXMudG9vbHRpcC5vZmZzZXRIZWlnaHQvMitcInB4XCIpOnRoaXMuX2Nzcyh0aGlzLnRvb2x0aXAsXCJtYXJnaW4tbGVmdFwiLC10aGlzLnRvb2x0aXAub2Zmc2V0V2lkdGgvMitcInB4XCIpLFwidmVydGljYWxcIj09PXRoaXMub3B0aW9ucy5vcmllbnRhdGlvbj90aGlzLl9jc3ModGhpcy50b29sdGlwLFwibWFyZ2luLXRvcFwiLC10aGlzLnRvb2x0aXAub2Zmc2V0SGVpZ2h0LzIrXCJweFwiKTp0aGlzLl9jc3ModGhpcy50b29sdGlwLFwibWFyZ2luLWxlZnRcIiwtdGhpcy50b29sdGlwLm9mZnNldFdpZHRoLzIrXCJweFwiKTt2YXIgaz10aGlzLm9wdGlvbnMuZm9ybWF0dGVyKHRoaXMuX3N0YXRlLnZhbHVlWzBdKTt0aGlzLl9zZXRUZXh0KHRoaXMudG9vbHRpcElubmVyX21pbixrKTt2YXIgbD10aGlzLm9wdGlvbnMuZm9ybWF0dGVyKHRoaXMuX3N0YXRlLnZhbHVlWzFdKTt0aGlzLl9zZXRUZXh0KHRoaXMudG9vbHRpcElubmVyX21heCxsKSx0aGlzLnRvb2x0aXBfbWluLnN0eWxlW3RoaXMuc3R5bGVQb3NdPWFbMF0rXCIlXCIsXCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uP3RoaXMuX2Nzcyh0aGlzLnRvb2x0aXBfbWluLFwibWFyZ2luLXRvcFwiLC10aGlzLnRvb2x0aXBfbWluLm9mZnNldEhlaWdodC8yK1wicHhcIik6dGhpcy5fY3NzKHRoaXMudG9vbHRpcF9taW4sXCJtYXJnaW4tbGVmdFwiLC10aGlzLnRvb2x0aXBfbWluLm9mZnNldFdpZHRoLzIrXCJweFwiKSx0aGlzLnRvb2x0aXBfbWF4LnN0eWxlW3RoaXMuc3R5bGVQb3NdPWFbMV0rXCIlXCIsXCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uP3RoaXMuX2Nzcyh0aGlzLnRvb2x0aXBfbWF4LFwibWFyZ2luLXRvcFwiLC10aGlzLnRvb2x0aXBfbWF4Lm9mZnNldEhlaWdodC8yK1wicHhcIik6dGhpcy5fY3NzKHRoaXMudG9vbHRpcF9tYXgsXCJtYXJnaW4tbGVmdFwiLC10aGlzLnRvb2x0aXBfbWF4Lm9mZnNldFdpZHRoLzIrXCJweFwiKX1lbHNlIGo9dGhpcy5vcHRpb25zLmZvcm1hdHRlcih0aGlzLl9zdGF0ZS52YWx1ZVswXSksdGhpcy5fc2V0VGV4dCh0aGlzLnRvb2x0aXBJbm5lcixqKSx0aGlzLnRvb2x0aXAuc3R5bGVbdGhpcy5zdHlsZVBvc109YVswXStcIiVcIixcInZlcnRpY2FsXCI9PT10aGlzLm9wdGlvbnMub3JpZW50YXRpb24/dGhpcy5fY3NzKHRoaXMudG9vbHRpcCxcIm1hcmdpbi10b3BcIiwtdGhpcy50b29sdGlwLm9mZnNldEhlaWdodC8yK1wicHhcIik6dGhpcy5fY3NzKHRoaXMudG9vbHRpcCxcIm1hcmdpbi1sZWZ0XCIsLXRoaXMudG9vbHRpcC5vZmZzZXRXaWR0aC8yK1wicHhcIik7aWYoXCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uKXRoaXMudHJhY2tMb3cuc3R5bGUudG9wPVwiMFwiLHRoaXMudHJhY2tMb3cuc3R5bGUuaGVpZ2h0PU1hdGgubWluKGFbMF0sYVsxXSkrXCIlXCIsdGhpcy50cmFja1NlbGVjdGlvbi5zdHlsZS50b3A9TWF0aC5taW4oYVswXSxhWzFdKStcIiVcIix0aGlzLnRyYWNrU2VsZWN0aW9uLnN0eWxlLmhlaWdodD1NYXRoLmFicyhhWzBdLWFbMV0pK1wiJVwiLHRoaXMudHJhY2tIaWdoLnN0eWxlLmJvdHRvbT1cIjBcIix0aGlzLnRyYWNrSGlnaC5zdHlsZS5oZWlnaHQ9MTAwLU1hdGgubWluKGFbMF0sYVsxXSktTWF0aC5hYnMoYVswXS1hWzFdKStcIiVcIjtlbHNle3RoaXMudHJhY2tMb3cuc3R5bGUubGVmdD1cIjBcIix0aGlzLnRyYWNrTG93LnN0eWxlLndpZHRoPU1hdGgubWluKGFbMF0sYVsxXSkrXCIlXCIsdGhpcy50cmFja1NlbGVjdGlvbi5zdHlsZS5sZWZ0PU1hdGgubWluKGFbMF0sYVsxXSkrXCIlXCIsdGhpcy50cmFja1NlbGVjdGlvbi5zdHlsZS53aWR0aD1NYXRoLmFicyhhWzBdLWFbMV0pK1wiJVwiLHRoaXMudHJhY2tIaWdoLnN0eWxlLnJpZ2h0PVwiMFwiLHRoaXMudHJhY2tIaWdoLnN0eWxlLndpZHRoPTEwMC1NYXRoLm1pbihhWzBdLGFbMV0pLU1hdGguYWJzKGFbMF0tYVsxXSkrXCIlXCI7dmFyIG09dGhpcy50b29sdGlwX21pbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXRoaXMudG9vbHRpcF9tYXguZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bS5yaWdodD5uLmxlZnQ/KHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMudG9vbHRpcF9tYXgsXCJ0b3BcIiksdGhpcy5fYWRkQ2xhc3ModGhpcy50b29sdGlwX21heCxcImJvdHRvbVwiKSx0aGlzLnRvb2x0aXBfbWF4LnN0eWxlLnRvcD1cIjE4cHhcIik6KHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMudG9vbHRpcF9tYXgsXCJib3R0b21cIiksdGhpcy5fYWRkQ2xhc3ModGhpcy50b29sdGlwX21heCxcInRvcFwiKSx0aGlzLnRvb2x0aXBfbWF4LnN0eWxlLnRvcD10aGlzLnRvb2x0aXBfbWluLnN0eWxlLnRvcCl9fSxfcmVtb3ZlUHJvcGVydHk6ZnVuY3Rpb24oYSxiKXthLnN0eWxlLnJlbW92ZVByb3BlcnR5P2Euc3R5bGUucmVtb3ZlUHJvcGVydHkoYik6YS5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoYil9LF9tb3VzZWRvd246ZnVuY3Rpb24oYSl7aWYoIXRoaXMuX3N0YXRlLmVuYWJsZWQpcmV0dXJuITE7dGhpcy5fc3RhdGUub2Zmc2V0PXRoaXMuX29mZnNldCh0aGlzLnNsaWRlckVsZW0pLHRoaXMuX3N0YXRlLnNpemU9dGhpcy5zbGlkZXJFbGVtW3RoaXMuc2l6ZVBvc107dmFyIGI9dGhpcy5fZ2V0UGVyY2VudGFnZShhKTtpZih0aGlzLm9wdGlvbnMucmFuZ2Upe3ZhciBjPU1hdGguYWJzKHRoaXMuX3N0YXRlLnBlcmNlbnRhZ2VbMF0tYiksZD1NYXRoLmFicyh0aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzFdLWIpO3RoaXMuX3N0YXRlLmRyYWdnZWQ9ZD5jPzA6MX1lbHNlIHRoaXMuX3N0YXRlLmRyYWdnZWQ9MDt0aGlzLl9zdGF0ZS5wZXJjZW50YWdlW3RoaXMuX3N0YXRlLmRyYWdnZWRdPWIsdGhpcy5fbGF5b3V0KCksdGhpcy50b3VjaENhcGFibGUmJihkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5tb3VzZW1vdmUsITEpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLHRoaXMubW91c2V1cCwhMSkpLHRoaXMubW91c2Vtb3ZlJiZkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5tb3VzZW1vdmUsITEpLHRoaXMubW91c2V1cCYmZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLm1vdXNldXAsITEpLHRoaXMubW91c2Vtb3ZlPXRoaXMuX21vdXNlbW92ZS5iaW5kKHRoaXMpLHRoaXMubW91c2V1cD10aGlzLl9tb3VzZXVwLmJpbmQodGhpcyksdGhpcy50b3VjaENhcGFibGUmJihkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5tb3VzZW1vdmUsITEpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLHRoaXMubW91c2V1cCwhMSkpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIix0aGlzLm1vdXNlbW92ZSwhMSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLm1vdXNldXAsITEpLHRoaXMuX3N0YXRlLmluRHJhZz0hMDt2YXIgZT10aGlzLl9jYWxjdWxhdGVWYWx1ZSgpO3JldHVybiB0aGlzLl90cmlnZ2VyKFwic2xpZGVTdGFydFwiLGUpLHRoaXMuX3NldERhdGFWYWwoZSksdGhpcy5zZXRWYWx1ZShlLCExLCEwKSx0aGlzLl9wYXVzZUV2ZW50KGEpLHRoaXMub3B0aW9ucy5mb2N1cyYmdGhpcy5fdHJpZ2dlckZvY3VzT25IYW5kbGUodGhpcy5fc3RhdGUuZHJhZ2dlZCksITB9LF90cmlnZ2VyRm9jdXNPbkhhbmRsZTpmdW5jdGlvbihhKXswPT09YSYmdGhpcy5oYW5kbGUxLmZvY3VzKCksMT09PWEmJnRoaXMuaGFuZGxlMi5mb2N1cygpfSxfa2V5ZG93bjpmdW5jdGlvbihhLGIpe2lmKCF0aGlzLl9zdGF0ZS5lbmFibGVkKXJldHVybiExO3ZhciBjO3N3aXRjaChiLmtleUNvZGUpe2Nhc2UgMzc6Y2FzZSA0MDpjPS0xO2JyZWFrO2Nhc2UgMzk6Y2FzZSAzODpjPTF9aWYoYyl7aWYodGhpcy5vcHRpb25zLm5hdHVyYWxfYXJyb3dfa2V5cyl7dmFyIGQ9XCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uJiYhdGhpcy5vcHRpb25zLnJldmVyc2VkLGU9XCJob3Jpem9udGFsXCI9PT10aGlzLm9wdGlvbnMub3JpZW50YXRpb24mJnRoaXMub3B0aW9ucy5yZXZlcnNlZDsoZHx8ZSkmJihjPS1jKX12YXIgZj10aGlzLl9zdGF0ZS52YWx1ZVthXStjKnRoaXMub3B0aW9ucy5zdGVwO3JldHVybiB0aGlzLm9wdGlvbnMucmFuZ2UmJihmPVthP3RoaXMuX3N0YXRlLnZhbHVlWzBdOmYsYT9mOnRoaXMuX3N0YXRlLnZhbHVlWzFdXSksdGhpcy5fdHJpZ2dlcihcInNsaWRlU3RhcnRcIixmKSx0aGlzLl9zZXREYXRhVmFsKGYpLHRoaXMuc2V0VmFsdWUoZiwhMCwhMCksdGhpcy5fc2V0RGF0YVZhbChmKSx0aGlzLl90cmlnZ2VyKFwic2xpZGVTdG9wXCIsZiksdGhpcy5fbGF5b3V0KCksdGhpcy5fcGF1c2VFdmVudChiKSwhMX19LF9wYXVzZUV2ZW50OmZ1bmN0aW9uKGEpe2Euc3RvcFByb3BhZ2F0aW9uJiZhLnN0b3BQcm9wYWdhdGlvbigpLGEucHJldmVudERlZmF1bHQmJmEucHJldmVudERlZmF1bHQoKSxhLmNhbmNlbEJ1YmJsZT0hMCxhLnJldHVyblZhbHVlPSExfSxfbW91c2Vtb3ZlOmZ1bmN0aW9uKGEpe2lmKCF0aGlzLl9zdGF0ZS5lbmFibGVkKXJldHVybiExO3ZhciBiPXRoaXMuX2dldFBlcmNlbnRhZ2UoYSk7dGhpcy5fYWRqdXN0UGVyY2VudGFnZUZvclJhbmdlU2xpZGVycyhiKSx0aGlzLl9zdGF0ZS5wZXJjZW50YWdlW3RoaXMuX3N0YXRlLmRyYWdnZWRdPWIsdGhpcy5fbGF5b3V0KCk7dmFyIGM9dGhpcy5fY2FsY3VsYXRlVmFsdWUoITApO3JldHVybiB0aGlzLnNldFZhbHVlKGMsITAsITApLCExfSxfYWRqdXN0UGVyY2VudGFnZUZvclJhbmdlU2xpZGVyczpmdW5jdGlvbihhKXtpZih0aGlzLm9wdGlvbnMucmFuZ2Upe3ZhciBiPXRoaXMuX2dldE51bURpZ2l0c0FmdGVyRGVjaW1hbFBsYWNlKGEpO2I9Yj9iLTE6MDt2YXIgYz10aGlzLl9hcHBseVRvRml4ZWRBbmRQYXJzZUZsb2F0KGEsYik7MD09PXRoaXMuX3N0YXRlLmRyYWdnZWQmJnRoaXMuX2FwcGx5VG9GaXhlZEFuZFBhcnNlRmxvYXQodGhpcy5fc3RhdGUucGVyY2VudGFnZVsxXSxiKTxjPyh0aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzBdPXRoaXMuX3N0YXRlLnBlcmNlbnRhZ2VbMV0sdGhpcy5fc3RhdGUuZHJhZ2dlZD0xKToxPT09dGhpcy5fc3RhdGUuZHJhZ2dlZCYmdGhpcy5fYXBwbHlUb0ZpeGVkQW5kUGFyc2VGbG9hdCh0aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzBdLGIpPmMmJih0aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzFdPXRoaXMuX3N0YXRlLnBlcmNlbnRhZ2VbMF0sdGhpcy5fc3RhdGUuZHJhZ2dlZD0wKX19LF9tb3VzZXVwOmZ1bmN0aW9uKCl7aWYoIXRoaXMuX3N0YXRlLmVuYWJsZWQpcmV0dXJuITE7dGhpcy50b3VjaENhcGFibGUmJihkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5tb3VzZW1vdmUsITEpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLHRoaXMubW91c2V1cCwhMSkpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIix0aGlzLm1vdXNlbW92ZSwhMSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLm1vdXNldXAsITEpLHRoaXMuX3N0YXRlLmluRHJhZz0hMSx0aGlzLl9zdGF0ZS5vdmVyPT09ITEmJnRoaXMuX2hpZGVUb29sdGlwKCk7dmFyIGE9dGhpcy5fY2FsY3VsYXRlVmFsdWUoITApO3JldHVybiB0aGlzLl9sYXlvdXQoKSx0aGlzLl9zZXREYXRhVmFsKGEpLHRoaXMuX3RyaWdnZXIoXCJzbGlkZVN0b3BcIixhKSwhMX0sX2NhbGN1bGF0ZVZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKHRoaXMub3B0aW9ucy5yYW5nZT8oYj1bdGhpcy5vcHRpb25zLm1pbix0aGlzLm9wdGlvbnMubWF4XSwwIT09dGhpcy5fc3RhdGUucGVyY2VudGFnZVswXSYmKGJbMF09dGhpcy5fdG9WYWx1ZSh0aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzBdKSxiWzBdPXRoaXMuX2FwcGx5UHJlY2lzaW9uKGJbMF0pKSwxMDAhPT10aGlzLl9zdGF0ZS5wZXJjZW50YWdlWzFdJiYoYlsxXT10aGlzLl90b1ZhbHVlKHRoaXMuX3N0YXRlLnBlcmNlbnRhZ2VbMV0pLGJbMV09dGhpcy5fYXBwbHlQcmVjaXNpb24oYlsxXSkpKTooYj10aGlzLl90b1ZhbHVlKHRoaXMuX3N0YXRlLnBlcmNlbnRhZ2VbMF0pLGI9cGFyc2VGbG9hdChiKSxiPXRoaXMuX2FwcGx5UHJlY2lzaW9uKGIpKSxhKXtmb3IodmFyIGM9W2IsMS8wXSxkPTA7ZDx0aGlzLm9wdGlvbnMudGlja3MubGVuZ3RoO2QrKyl7dmFyIGU9TWF0aC5hYnModGhpcy5vcHRpb25zLnRpY2tzW2RdLWIpO2U8PWNbMV0mJihjPVt0aGlzLm9wdGlvbnMudGlja3NbZF0sZV0pfWlmKGNbMV08PXRoaXMub3B0aW9ucy50aWNrc19zbmFwX2JvdW5kcylyZXR1cm4gY1swXX1yZXR1cm4gYn0sX2FwcGx5UHJlY2lzaW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMub3B0aW9ucy5wcmVjaXNpb258fHRoaXMuX2dldE51bURpZ2l0c0FmdGVyRGVjaW1hbFBsYWNlKHRoaXMub3B0aW9ucy5zdGVwKTtyZXR1cm4gdGhpcy5fYXBwbHlUb0ZpeGVkQW5kUGFyc2VGbG9hdChhLGIpfSxfZ2V0TnVtRGlnaXRzQWZ0ZXJEZWNpbWFsUGxhY2U6ZnVuY3Rpb24oYSl7dmFyIGI9KFwiXCIrYSkubWF0Y2goLyg/OlxcLihcXGQrKSk/KD86W2VFXShbKy1dP1xcZCspKT8kLyk7cmV0dXJuIGI/TWF0aC5tYXgoMCwoYlsxXT9iWzFdLmxlbmd0aDowKS0oYlsyXT8rYlsyXTowKSk6MH0sX2FwcGx5VG9GaXhlZEFuZFBhcnNlRmxvYXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnRvRml4ZWQoYik7cmV0dXJuIHBhcnNlRmxvYXQoYyl9LF9nZXRQZXJjZW50YWdlOmZ1bmN0aW9uKGEpeyF0aGlzLnRvdWNoQ2FwYWJsZXx8XCJ0b3VjaHN0YXJ0XCIhPT1hLnR5cGUmJlwidG91Y2htb3ZlXCIhPT1hLnR5cGV8fChhPWEudG91Y2hlc1swXSk7dmFyIGI9YVt0aGlzLm1vdXNlUG9zXSxjPXRoaXMuX3N0YXRlLm9mZnNldFt0aGlzLnN0eWxlUG9zXSxkPWItYyxlPWQvdGhpcy5fc3RhdGUuc2l6ZSoxMDA7cmV0dXJuIGU9TWF0aC5yb3VuZChlL3RoaXMuX3N0YXRlLnBlcmNlbnRhZ2VbMl0pKnRoaXMuX3N0YXRlLnBlcmNlbnRhZ2VbMl0sdGhpcy5vcHRpb25zLnJldmVyc2VkJiYoZT0xMDAtZSksTWF0aC5tYXgoMCxNYXRoLm1pbigxMDAsZSkpfSxfdmFsaWRhdGVJbnB1dFZhbHVlOmZ1bmN0aW9uKGEpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhKXJldHVybiBhO2lmKEFycmF5LmlzQXJyYXkoYSkpcmV0dXJuIHRoaXMuX3ZhbGlkYXRlQXJyYXkoYSksYTt0aHJvdyBuZXcgRXJyb3IoZC5mb3JtYXRJbnZhbGlkSW5wdXRFcnJvck1zZyhhKSl9LF92YWxpZGF0ZUFycmF5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBjKXRocm93IG5ldyBFcnJvcihkLmZvcm1hdEludmFsaWRJbnB1dEVycm9yTXNnKGMpKX19LF9zZXREYXRhVmFsOmZ1bmN0aW9uKGEpe3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIsYSksdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYSksdGhpcy5lbGVtZW50LnZhbHVlPWF9LF90cmlnZ2VyOmZ1bmN0aW9uKGIsYyl7Yz1jfHwwPT09Yz9jOnZvaWQgMDt2YXIgZD10aGlzLmV2ZW50VG9DYWxsYmFja01hcFtiXTtpZihkJiZkLmxlbmd0aClmb3IodmFyIGU9MDtlPGQubGVuZ3RoO2UrKyl7dmFyIGY9ZFtlXTtmKGMpfWEmJnRoaXMuX3RyaWdnZXJKUXVlcnlFdmVudChiLGMpfSxfdHJpZ2dlckpRdWVyeUV2ZW50OmZ1bmN0aW9uKGEsYil7dmFyIGM9e3R5cGU6YSx2YWx1ZTpifTt0aGlzLiRlbGVtZW50LnRyaWdnZXIoYyksdGhpcy4kc2xpZGVyRWxlbS50cmlnZ2VyKGMpfSxfdW5iaW5kSlF1ZXJ5RXZlbnRIYW5kbGVyczpmdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQub2ZmKCksdGhpcy4kc2xpZGVyRWxlbS5vZmYoKX0sX3NldFRleHQ6ZnVuY3Rpb24oYSxiKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5pbm5lclRleHQ/YS5pbm5lclRleHQ9YjpcInVuZGVmaW5lZFwiIT10eXBlb2YgYS50ZXh0Q29udGVudCYmKGEudGV4dENvbnRlbnQ9Yil9LF9yZW1vdmVDbGFzczpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLnNwbGl0KFwiIFwiKSxkPWEuY2xhc3NOYW1lLGU9MDtlPGMubGVuZ3RoO2UrKyl7dmFyIGY9Y1tlXSxnPW5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiK2YrXCIoPzpcXFxcc3wkKVwiKTtkPWQucmVwbGFjZShnLFwiIFwiKX1hLmNsYXNzTmFtZT1kLnRyaW0oKX0sX2FkZENsYXNzOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuc3BsaXQoXCIgXCIpLGQ9YS5jbGFzc05hbWUsZT0wO2U8Yy5sZW5ndGg7ZSsrKXt2YXIgZj1jW2VdLGc9bmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIrZitcIig/OlxcXFxzfCQpXCIpLGg9Zy50ZXN0KGQpO2h8fChkKz1cIiBcIitmKX1hLmNsYXNzTmFtZT1kLnRyaW0oKX0sX29mZnNldExlZnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdH0sX29mZnNldFRvcDpmdW5jdGlvbihhKXtmb3IodmFyIGI9YS5vZmZzZXRUb3A7KGE9YS5vZmZzZXRQYXJlbnQpJiYhaXNOYU4oYS5vZmZzZXRUb3ApOyliKz1hLm9mZnNldFRvcDtyZXR1cm4gYn0sX29mZnNldDpmdW5jdGlvbihhKXtyZXR1cm57bGVmdDp0aGlzLl9vZmZzZXRMZWZ0KGEpLHRvcDp0aGlzLl9vZmZzZXRUb3AoYSl9fSxfY3NzOmZ1bmN0aW9uKGIsYyxkKXtpZihhKWEuc3R5bGUoYixjLGQpO2Vsc2V7dmFyIGU9Yy5yZXBsYWNlKC9eLW1zLS8sXCJtcy1cIikucmVwbGFjZSgvLShbXFxkYS16XSkvZ2ksZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi50b1VwcGVyQ2FzZSgpfSk7Yi5zdHlsZVtlXT1kfX0sX3RvVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMub3B0aW9ucy5zY2FsZS50b1ZhbHVlLmFwcGx5KHRoaXMsW2FdKX0sX3RvUGVyY2VudGFnZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vcHRpb25zLnNjYWxlLnRvUGVyY2VudGFnZS5hcHBseSh0aGlzLFthXSl9LF9zZXRUb29sdGlwUG9zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1bdGhpcy50b29sdGlwLHRoaXMudG9vbHRpcF9taW4sdGhpcy50b29sdGlwX21heF07aWYoXCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uKXt2YXIgYj10aGlzLm9wdGlvbnMudG9vbHRpcF9wb3NpdGlvbnx8XCJyaWdodFwiLGM9XCJsZWZ0XCI9PT1iP1wicmlnaHRcIjpcImxlZnRcIjthLmZvckVhY2goZnVuY3Rpb24oYSl7dGhpcy5fYWRkQ2xhc3MoYSxiKSxhLnN0eWxlW2NdPVwiMTAwJVwifS5iaW5kKHRoaXMpKX1lbHNlIGEuZm9yRWFjaChcImJvdHRvbVwiPT09dGhpcy5vcHRpb25zLnRvb2x0aXBfcG9zaXRpb24/ZnVuY3Rpb24oYSl7dGhpcy5fYWRkQ2xhc3MoYSxcImJvdHRvbVwiKSxhLnN0eWxlLnRvcD1cIjIycHhcIn0uYmluZCh0aGlzKTpmdW5jdGlvbihhKXt0aGlzLl9hZGRDbGFzcyhhLFwidG9wXCIpLGEuc3R5bGUudG9wPS10aGlzLnRvb2x0aXAub3V0ZXJIZWlnaHQtMTQrXCJweFwifS5iaW5kKHRoaXMpKX19LGEpe3ZhciBmPWEuZm4uc2xpZGVyP1wiYm9vdHN0cmFwU2xpZGVyXCI6XCJzbGlkZXJcIjthLmJyaWRnZXQoZixiKX19KGEpLGJ9KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vbGlicmFyaWVzL2FuZ3VsYXItYm9vdHN0cmFwLXNsaWRlci9ib290c3RyYXAtc2xpZGVyLm1pbi5qc1xuICoqIG1vZHVsZSBpZCA9IDExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIoZnVuY3Rpb24oKSB7IG1vZHVsZS5leHBvcnRzID0gdGhpc1tcIiRcIl07IH0oKSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCBcIiRcIlxuICoqIG1vZHVsZSBpZCA9IDEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSB1bmxlc3MgYW1kTW9kdWxlSWQgaXMgc2V0XG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHJvb3RbJ1NpZ25hdHVyZVBhZCddID0gZmFjdG9yeSgpKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAvLyBsaWtlIE5vZGUuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdFsnU2lnbmF0dXJlUGFkJ10gPSBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG4vKiFcbiAqIFNpZ25hdHVyZSBQYWQgdjEuNS4zXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrL3NpZ25hdHVyZV9wYWRcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNiBTenltb24gTm93YWtcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICpcbiAqIFRoZSBtYWluIGlkZWEgYW5kIHNvbWUgcGFydHMgb2YgdGhlIGNvZGUgKGUuZy4gZHJhd2luZyB2YXJpYWJsZSB3aWR0aCBCw6l6aWVyIGN1cnZlKSBhcmUgdGFrZW4gZnJvbTpcbiAqIGh0dHA6Ly9jb3JuZXIuc3F1YXJldXAuY29tLzIwMTIvMDcvc21vb3RoZXItc2lnbmF0dXJlcy5odG1sXG4gKlxuICogSW1wbGVtZW50YXRpb24gb2YgaW50ZXJwb2xhdGlvbiB1c2luZyBjdWJpYyBCw6l6aWVyIGN1cnZlcyBpcyB0YWtlbiBmcm9tOlxuICogaHR0cDovL2Jlbmtub3dzY29kZS53b3JkcHJlc3MuY29tLzIwMTIvMDkvMTQvcGF0aC1pbnRlcnBvbGF0aW9uLXVzaW5nLWN1YmljLWJlemllci1hbmQtY29udHJvbC1wb2ludC1lc3RpbWF0aW9uLWluLWphdmFzY3JpcHRcbiAqXG4gKiBBbGdvcml0aG0gZm9yIGFwcHJveGltYXRlZCBsZW5ndGggb2YgYSBCw6l6aWVyIGN1cnZlIGlzIHRha2VuIGZyb206XG4gKiBodHRwOi8vd3d3LmxlbW9kYS5uZXQvbWF0aHMvYmV6aWVyLWxlbmd0aC9pbmRleC5odG1sXG4gKlxuICovXG52YXIgU2lnbmF0dXJlUGFkID0gKGZ1bmN0aW9uIChkb2N1bWVudCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIFNpZ25hdHVyZVBhZCA9IGZ1bmN0aW9uIChjYW52YXMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdGhpcy52ZWxvY2l0eUZpbHRlcldlaWdodCA9IG9wdHMudmVsb2NpdHlGaWx0ZXJXZWlnaHQgfHwgMC43O1xuICAgICAgICB0aGlzLm1pbldpZHRoID0gb3B0cy5taW5XaWR0aCB8fCAwLjU7XG4gICAgICAgIHRoaXMubWF4V2lkdGggPSBvcHRzLm1heFdpZHRoIHx8IDIuNTtcbiAgICAgICAgdGhpcy5kb3RTaXplID0gb3B0cy5kb3RTaXplIHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5taW5XaWR0aCArIHRoaXMubWF4V2lkdGgpIC8gMjtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wZW5Db2xvciA9IG9wdHMucGVuQ29sb3IgfHwgXCJibGFja1wiO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IG9wdHMuYmFja2dyb3VuZENvbG9yIHx8IFwicmdiYSgwLDAsMCwwKVwiO1xuICAgICAgICB0aGlzLm9uRW5kID0gb3B0cy5vbkVuZDtcbiAgICAgICAgdGhpcy5vbkJlZ2luID0gb3B0cy5vbkJlZ2luO1xuXG4gICAgICAgIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5fY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuXG4gICAgICAgIC8vIHdlIG5lZWQgYWRkIHRoZXNlIGlubGluZSBzbyB0aGV5IGFyZSBhdmFpbGFibGUgdG8gdW5iaW5kIHdoaWxlIHN0aWxsIGhhdmluZ1xuICAgICAgICAvLyAgYWNjZXNzIHRvICdzZWxmJyB3ZSBjb3VsZCB1c2UgXy5iaW5kIGJ1dCBpdCdzIG5vdCB3b3J0aCBhZGRpbmcgYSBkZXBlbmRlbmN5XG4gICAgICAgIHRoaXMuX2hhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fbW91c2VCdXR0b25Eb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzZWxmLl9zdHJva2VCZWdpbihldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5faGFuZGxlTW91c2VNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5fbW91c2VCdXR0b25Eb3duKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fc3Ryb2tlVXBkYXRlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEgJiYgc2VsZi5fbW91c2VCdXR0b25Eb3duKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fbW91c2VCdXR0b25Eb3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2VsZi5fc3Ryb2tlRW5kKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgICAgICAgICAgIHNlbGYuX3N0cm9rZUJlZ2luKHRvdWNoKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5faGFuZGxlVG91Y2hNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IHNjcm9sbGluZy5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHZhciB0b3VjaCA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF07XG4gICAgICAgICAgICBzZWxmLl9zdHJva2VVcGRhdGUodG91Y2gpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2hhbmRsZVRvdWNoRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgd2FzQ2FudmFzVG91Y2hlZCA9IGV2ZW50LnRhcmdldCA9PT0gc2VsZi5fY2FudmFzO1xuICAgICAgICAgICAgaWYgKHdhc0NhbnZhc1RvdWNoZWQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHNlbGYuX3N0cm9rZUVuZChldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5faGFuZGxlTW91c2VFdmVudHMoKTtcbiAgICAgICAgdGhpcy5faGFuZGxlVG91Y2hFdmVudHMoKTtcbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuX2N0eCxcbiAgICAgICAgICAgIGNhbnZhcyA9IHRoaXMuX2NhbnZhcztcblxuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgfTtcblxuICAgIFNpZ25hdHVyZVBhZC5wcm90b3R5cGUudG9EYXRhVVJMID0gZnVuY3Rpb24gKGltYWdlVHlwZSwgcXVhbGl0eSkge1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5fY2FudmFzO1xuICAgICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTC5hcHBseShjYW52YXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNpZ25hdHVyZVBhZC5wcm90b3R5cGUuZnJvbURhdGFVUkwgPSBmdW5jdGlvbiAoZGF0YVVybCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBpbWFnZSA9IG5ldyBJbWFnZSgpLFxuICAgICAgICAgICAgcmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxLFxuICAgICAgICAgICAgd2lkdGggPSB0aGlzLl9jYW52YXMud2lkdGggLyByYXRpbyxcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuX2NhbnZhcy5oZWlnaHQgLyByYXRpbztcblxuICAgICAgICB0aGlzLl9yZXNldCgpO1xuICAgICAgICBpbWFnZS5zcmMgPSBkYXRhVXJsO1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLl9jdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5faXNFbXB0eSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBTaWduYXR1cmVQYWQucHJvdG90eXBlLl9zdHJva2VVcGRhdGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gdGhpcy5fY3JlYXRlUG9pbnQoZXZlbnQpO1xuICAgICAgICB0aGlzLl9hZGRQb2ludChwb2ludCk7XG4gICAgfTtcblxuICAgIFNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX3N0cm9rZUJlZ2luID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICAgIHRoaXMuX3N0cm9rZVVwZGF0ZShldmVudCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkJlZ2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLm9uQmVnaW4oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX3N0cm9rZURyYXcgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuX2N0eCxcbiAgICAgICAgICAgIGRvdFNpemUgPSB0eXBlb2YodGhpcy5kb3RTaXplKSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuZG90U2l6ZSgpIDogdGhpcy5kb3RTaXplO1xuXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgdGhpcy5fZHJhd1BvaW50KHBvaW50LngsIHBvaW50LnksIGRvdFNpemUpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgfTtcblxuICAgIFNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX3N0cm9rZUVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgY2FuRHJhd0N1cnZlID0gdGhpcy5wb2ludHMubGVuZ3RoID4gMixcbiAgICAgICAgICAgIHBvaW50ID0gdGhpcy5wb2ludHNbMF07XG5cbiAgICAgICAgaWYgKCFjYW5EcmF3Q3VydmUgJiYgcG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZURyYXcocG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkVuZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5vbkVuZChldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5faGFuZGxlTW91c2VFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX21vdXNlQnV0dG9uRG93biA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZU1vdXNlRG93bik7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuX2hhbmRsZU1vdXNlTW92ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuX2hhbmRsZU1vdXNlVXApO1xuICAgIH07XG5cbiAgICBTaWduYXR1cmVQYWQucHJvdG90eXBlLl9oYW5kbGVUb3VjaEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUGFzcyB0b3VjaCBldmVudHMgdG8gY2FudmFzIGVsZW1lbnQgb24gbW9iaWxlIElFMTEgYW5kIEVkZ2UuXG4gICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS5tc1RvdWNoQWN0aW9uID0gJ25vbmUnO1xuICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7XG5cbiAgICAgICAgdGhpcy5fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuX2hhbmRsZVRvdWNoU3RhcnQpO1xuICAgICAgICB0aGlzLl9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLl9oYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgICB0aGlzLl9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMuX2hhbmRsZVRvdWNoRW5kKTtcbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlTW91c2VFdmVudHMoKTtcbiAgICAgICAgdGhpcy5faGFuZGxlVG91Y2hFdmVudHMoKTtcbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZU1vdXNlRG93bik7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuX2hhbmRsZU1vdXNlTW92ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuX2hhbmRsZU1vdXNlVXApO1xuXG4gICAgICAgIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0KTtcbiAgICAgICAgdGhpcy5fY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5faGFuZGxlVG91Y2hNb3ZlKTtcbiAgICAgICAgdGhpcy5fY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLl9oYW5kbGVUb3VjaEVuZCk7XG4gICAgfTtcblxuICAgIFNpZ25hdHVyZVBhZC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRW1wdHk7XG4gICAgfTtcblxuICAgIFNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgICAgICB0aGlzLl9sYXN0VmVsb2NpdHkgPSAwO1xuICAgICAgICB0aGlzLl9sYXN0V2lkdGggPSAodGhpcy5taW5XaWR0aCArIHRoaXMubWF4V2lkdGgpIC8gMjtcbiAgICAgICAgdGhpcy5faXNFbXB0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLnBlbkNvbG9yO1xuICAgIH07XG5cbiAgICBTaWduYXR1cmVQYWQucHJvdG90eXBlLl9jcmVhdGVQb2ludCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgcmVjdCA9IHRoaXMuX2NhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgICAgICAgIGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQsXG4gICAgICAgICAgICBldmVudC5jbGllbnRZIC0gcmVjdC50b3BcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fYWRkUG9pbnQgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgdmFyIHBvaW50cyA9IHRoaXMucG9pbnRzLFxuICAgICAgICAgICAgYzIsIGMzLFxuICAgICAgICAgICAgY3VydmUsIHRtcDtcblxuICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG5cbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAvLyBUbyByZWR1Y2UgdGhlIGluaXRpYWwgbGFnIG1ha2UgaXQgd29yayB3aXRoIDMgcG9pbnRzXG4gICAgICAgICAgICAvLyBieSBjb3B5aW5nIHRoZSBmaXJzdCBwb2ludCB0byB0aGUgYmVnaW5uaW5nLlxuICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDMpIHBvaW50cy51bnNoaWZ0KHBvaW50c1swXSk7XG5cbiAgICAgICAgICAgIHRtcCA9IHRoaXMuX2NhbGN1bGF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHNbMF0sIHBvaW50c1sxXSwgcG9pbnRzWzJdKTtcbiAgICAgICAgICAgIGMyID0gdG1wLmMyO1xuICAgICAgICAgICAgdG1wID0gdGhpcy5fY2FsY3VsYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50c1sxXSwgcG9pbnRzWzJdLCBwb2ludHNbM10pO1xuICAgICAgICAgICAgYzMgPSB0bXAuYzE7XG4gICAgICAgICAgICBjdXJ2ZSA9IG5ldyBCZXppZXIocG9pbnRzWzFdLCBjMiwgYzMsIHBvaW50c1syXSk7XG4gICAgICAgICAgICB0aGlzLl9hZGRDdXJ2ZShjdXJ2ZSk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIHRoZSBsaXN0LFxuICAgICAgICAgICAgLy8gc28gdGhhdCB3ZSBhbHdheXMgaGF2ZSBubyBtb3JlIHRoYW4gNCBwb2ludHMgaW4gcG9pbnRzIGFycmF5LlxuICAgICAgICAgICAgcG9pbnRzLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fY2FsY3VsYXRlQ3VydmVDb250cm9sUG9pbnRzID0gZnVuY3Rpb24gKHMxLCBzMiwgczMpIHtcbiAgICAgICAgdmFyIGR4MSA9IHMxLnggLSBzMi54LCBkeTEgPSBzMS55IC0gczIueSxcbiAgICAgICAgICAgIGR4MiA9IHMyLnggLSBzMy54LCBkeTIgPSBzMi55IC0gczMueSxcblxuICAgICAgICAgICAgbTEgPSB7eDogKHMxLnggKyBzMi54KSAvIDIuMCwgeTogKHMxLnkgKyBzMi55KSAvIDIuMH0sXG4gICAgICAgICAgICBtMiA9IHt4OiAoczIueCArIHMzLngpIC8gMi4wLCB5OiAoczIueSArIHMzLnkpIC8gMi4wfSxcblxuICAgICAgICAgICAgbDEgPSBNYXRoLnNxcnQoZHgxKmR4MSArIGR5MSpkeTEpLFxuICAgICAgICAgICAgbDIgPSBNYXRoLnNxcnQoZHgyKmR4MiArIGR5MipkeTIpLFxuXG4gICAgICAgICAgICBkeG0gPSAobTEueCAtIG0yLngpLFxuICAgICAgICAgICAgZHltID0gKG0xLnkgLSBtMi55KSxcblxuICAgICAgICAgICAgayA9IGwyIC8gKGwxICsgbDIpLFxuICAgICAgICAgICAgY20gPSB7eDogbTIueCArIGR4bSprLCB5OiBtMi55ICsgZHltKmt9LFxuXG4gICAgICAgICAgICB0eCA9IHMyLnggLSBjbS54LFxuICAgICAgICAgICAgdHkgPSBzMi55IC0gY20ueTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYzE6IG5ldyBQb2ludChtMS54ICsgdHgsIG0xLnkgKyB0eSksXG4gICAgICAgICAgICBjMjogbmV3IFBvaW50KG0yLnggKyB0eCwgbTIueSArIHR5KVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBTaWduYXR1cmVQYWQucHJvdG90eXBlLl9hZGRDdXJ2ZSA9IGZ1bmN0aW9uIChjdXJ2ZSkge1xuICAgICAgICB2YXIgc3RhcnRQb2ludCA9IGN1cnZlLnN0YXJ0UG9pbnQsXG4gICAgICAgICAgICBlbmRQb2ludCA9IGN1cnZlLmVuZFBvaW50LFxuICAgICAgICAgICAgdmVsb2NpdHksIG5ld1dpZHRoO1xuXG4gICAgICAgIHZlbG9jaXR5ID0gZW5kUG9pbnQudmVsb2NpdHlGcm9tKHN0YXJ0UG9pbnQpO1xuICAgICAgICB2ZWxvY2l0eSA9IHRoaXMudmVsb2NpdHlGaWx0ZXJXZWlnaHQgKiB2ZWxvY2l0eVxuICAgICAgICAgICAgKyAoMSAtIHRoaXMudmVsb2NpdHlGaWx0ZXJXZWlnaHQpICogdGhpcy5fbGFzdFZlbG9jaXR5O1xuXG4gICAgICAgIG5ld1dpZHRoID0gdGhpcy5fc3Ryb2tlV2lkdGgodmVsb2NpdHkpO1xuICAgICAgICB0aGlzLl9kcmF3Q3VydmUoY3VydmUsIHRoaXMuX2xhc3RXaWR0aCwgbmV3V2lkdGgpO1xuXG4gICAgICAgIHRoaXMuX2xhc3RWZWxvY2l0eSA9IHZlbG9jaXR5O1xuICAgICAgICB0aGlzLl9sYXN0V2lkdGggPSBuZXdXaWR0aDtcbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fZHJhd1BvaW50ID0gZnVuY3Rpb24gKHgsIHksIHNpemUpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuX2N0eDtcblxuICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgICAgICBjdHguYXJjKHgsIHksIHNpemUsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuX2lzRW1wdHkgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fZHJhd0N1cnZlID0gZnVuY3Rpb24gKGN1cnZlLCBzdGFydFdpZHRoLCBlbmRXaWR0aCkge1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5fY3R4LFxuICAgICAgICAgICAgd2lkdGhEZWx0YSA9IGVuZFdpZHRoIC0gc3RhcnRXaWR0aCxcbiAgICAgICAgICAgIGRyYXdTdGVwcywgd2lkdGgsIGksIHQsIHR0LCB0dHQsIHUsIHV1LCB1dXUsIHgsIHk7XG5cbiAgICAgICAgZHJhd1N0ZXBzID0gTWF0aC5mbG9vcihjdXJ2ZS5sZW5ndGgoKSk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRyYXdTdGVwczsgaSsrKSB7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIEJlemllciAoeCwgeSkgY29vcmRpbmF0ZSBmb3IgdGhpcyBzdGVwLlxuICAgICAgICAgICAgdCA9IGkgLyBkcmF3U3RlcHM7XG4gICAgICAgICAgICB0dCA9IHQgKiB0O1xuICAgICAgICAgICAgdHR0ID0gdHQgKiB0O1xuICAgICAgICAgICAgdSA9IDEgLSB0O1xuICAgICAgICAgICAgdXUgPSB1ICogdTtcbiAgICAgICAgICAgIHV1dSA9IHV1ICogdTtcblxuICAgICAgICAgICAgeCA9IHV1dSAqIGN1cnZlLnN0YXJ0UG9pbnQueDtcbiAgICAgICAgICAgIHggKz0gMyAqIHV1ICogdCAqIGN1cnZlLmNvbnRyb2wxLng7XG4gICAgICAgICAgICB4ICs9IDMgKiB1ICogdHQgKiBjdXJ2ZS5jb250cm9sMi54O1xuICAgICAgICAgICAgeCArPSB0dHQgKiBjdXJ2ZS5lbmRQb2ludC54O1xuXG4gICAgICAgICAgICB5ID0gdXV1ICogY3VydmUuc3RhcnRQb2ludC55O1xuICAgICAgICAgICAgeSArPSAzICogdXUgKiB0ICogY3VydmUuY29udHJvbDEueTtcbiAgICAgICAgICAgIHkgKz0gMyAqIHUgKiB0dCAqIGN1cnZlLmNvbnRyb2wyLnk7XG4gICAgICAgICAgICB5ICs9IHR0dCAqIGN1cnZlLmVuZFBvaW50Lnk7XG5cbiAgICAgICAgICAgIHdpZHRoID0gc3RhcnRXaWR0aCArIHR0dCAqIHdpZHRoRGVsdGE7XG4gICAgICAgICAgICB0aGlzLl9kcmF3UG9pbnQoeCwgeSwgd2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICB9O1xuXG4gICAgU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fc3Ryb2tlV2lkdGggPSBmdW5jdGlvbiAodmVsb2NpdHkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHRoaXMubWF4V2lkdGggLyAodmVsb2NpdHkgKyAxKSwgdGhpcy5taW5XaWR0aCk7XG4gICAgfTtcblxuXG4gICAgdmFyIFBvaW50ID0gZnVuY3Rpb24gKHgsIHksIHRpbWUpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy50aW1lID0gdGltZSB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB9O1xuXG4gICAgUG9pbnQucHJvdG90eXBlLnZlbG9jaXR5RnJvbSA9IGZ1bmN0aW9uIChzdGFydCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudGltZSAhPT0gc3RhcnQudGltZSkgPyB0aGlzLmRpc3RhbmNlVG8oc3RhcnQpIC8gKHRoaXMudGltZSAtIHN0YXJ0LnRpbWUpIDogMTtcbiAgICB9O1xuXG4gICAgUG9pbnQucHJvdG90eXBlLmRpc3RhbmNlVG8gPSBmdW5jdGlvbiAoc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh0aGlzLnggLSBzdGFydC54LCAyKSArIE1hdGgucG93KHRoaXMueSAtIHN0YXJ0LnksIDIpKTtcbiAgICB9O1xuXG4gICAgdmFyIEJlemllciA9IGZ1bmN0aW9uIChzdGFydFBvaW50LCBjb250cm9sMSwgY29udHJvbDIsIGVuZFBvaW50KSB7XG4gICAgICAgIHRoaXMuc3RhcnRQb2ludCA9IHN0YXJ0UG9pbnQ7XG4gICAgICAgIHRoaXMuY29udHJvbDEgPSBjb250cm9sMTtcbiAgICAgICAgdGhpcy5jb250cm9sMiA9IGNvbnRyb2wyO1xuICAgICAgICB0aGlzLmVuZFBvaW50ID0gZW5kUG9pbnQ7XG4gICAgfTtcblxuICAgIC8vIFJldHVybnMgYXBwcm94aW1hdGVkIGxlbmd0aC5cbiAgICBCZXppZXIucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0ZXBzID0gMTAsXG4gICAgICAgICAgICBsZW5ndGggPSAwLFxuICAgICAgICAgICAgaSwgdCwgY3gsIGN5LCBweCwgcHksIHhkaWZmLCB5ZGlmZjtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IHN0ZXBzOyBpKyspIHtcbiAgICAgICAgICAgIHQgPSBpIC8gc3RlcHM7XG4gICAgICAgICAgICBjeCA9IHRoaXMuX3BvaW50KHQsIHRoaXMuc3RhcnRQb2ludC54LCB0aGlzLmNvbnRyb2wxLngsIHRoaXMuY29udHJvbDIueCwgdGhpcy5lbmRQb2ludC54KTtcbiAgICAgICAgICAgIGN5ID0gdGhpcy5fcG9pbnQodCwgdGhpcy5zdGFydFBvaW50LnksIHRoaXMuY29udHJvbDEueSwgdGhpcy5jb250cm9sMi55LCB0aGlzLmVuZFBvaW50LnkpO1xuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgeGRpZmYgPSBjeCAtIHB4O1xuICAgICAgICAgICAgICAgIHlkaWZmID0gY3kgLSBweTtcbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gTWF0aC5zcXJ0KHhkaWZmICogeGRpZmYgKyB5ZGlmZiAqIHlkaWZmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHB4ID0gY3g7XG4gICAgICAgICAgICBweSA9IGN5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfTtcblxuICAgIEJlemllci5wcm90b3R5cGUuX3BvaW50ID0gZnVuY3Rpb24gKHQsIHN0YXJ0LCBjMSwgYzIsIGVuZCkge1xuICAgICAgICByZXR1cm4gICAgICAgICAgc3RhcnQgKiAoMS4wIC0gdCkgKiAoMS4wIC0gdCkgICogKDEuMCAtIHQpXG4gICAgICAgICAgICAgICArIDMuMCAqICBjMSAgICAqICgxLjAgLSB0KSAqICgxLjAgLSB0KSAgKiB0XG4gICAgICAgICAgICAgICArIDMuMCAqICBjMiAgICAqICgxLjAgLSB0KSAqIHQgICAgICAgICAgKiB0XG4gICAgICAgICAgICAgICArICAgICAgICBlbmQgICAqIHQgICAgICAgICAqIHQgICAgICAgICAgKiB0O1xuICAgIH07XG5cbiAgICByZXR1cm4gU2lnbmF0dXJlUGFkO1xufSkoZG9jdW1lbnQpO1xuXG5yZXR1cm4gU2lnbmF0dXJlUGFkO1xuXG59KSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9zaWduYXR1cmVfcGFkL3NpZ25hdHVyZV9wYWQuanNcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgYWxpYXMgPSByZXF1aXJlKCcuL2FsaWFzL2FsaWFzJyk7XHJcbmV4cG9ydHMuYWxpYXMgPSBhbGlhcztcclxudmFyIGF1dG9zYXZlID0gcmVxdWlyZSgnLi9hdXRvc2F2ZS9hdXRvc2F2ZScpO1xyXG5leHBvcnRzLmF1dG9zYXZlID0gYXV0b3NhdmU7XHJcbnZhciBwb3BvdmVyID0gcmVxdWlyZSgnLi9wb3BvdmVyL3BvcG92ZXInKTtcclxuZXhwb3J0cy5wb3BvdmVyID0gcG9wb3ZlcjtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmJlaGF2aW9ycyc7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW1xyXG4gICAgYWxpYXMubW9kdWxlTmFtZSxcclxuICAgIGF1dG9zYXZlLm1vZHVsZU5hbWUsXHJcbiAgICBwb3BvdmVyLm1vZHVsZU5hbWUsXHJcbl0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZWhhdmlvcnMubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvYmVoYXZpb3JzL2JlaGF2aW9ycy5tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmJlaGF2aW9ycy5hbGlhcyc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybEFsaWFzJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdBbGlhc0NvbnRyb2xsZXInO1xyXG52YXIgQWxpYXNDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFsaWFzQ29udHJvbGxlcigkc2NvcGUsICRhdHRycywgJHBhcnNlLCAkaW50ZXJwb2xhdGUpIHtcclxuICAgICAgICB2YXIgZXhwcmVzc2lvbjtcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9ICRhdHRycy5ybEFsaWFzLnNwbGl0KCcgYXMgJyk7XHJcbiAgICAgICAgICAgIHJldHVybiAkcGFyc2UoZXhwcmVzc2lvblswXSkoJHNjb3BlKTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgYWxpYXMgPSAkaW50ZXJwb2xhdGUoZXhwcmVzc2lvblsxXSkoJHNjb3BlKTtcclxuICAgICAgICAgICAgaWYgKGFsaWFzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZVthbGlhc10gPSBpdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBBbGlhc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRhdHRycycsICckcGFyc2UnLCAnJGludGVycG9sYXRlJ107XHJcbiAgICByZXR1cm4gQWxpYXNDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkFsaWFzQ29udHJvbGxlciA9IEFsaWFzQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gYWxpYXMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5hbGlhcyA9IGFsaWFzO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGFsaWFzKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgQWxpYXNDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxpYXMuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9iZWhhdmlvcnMvYWxpYXMvYWxpYXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fcGFyZW50Q2hpbGQgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMucGFyZW50Q2hpbGRCZWhhdmlvcjtcclxudmFyIF9fb2JqZWN0VXRpbGl0eSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBhdXRvc2F2ZV9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hdXRvc2F2ZS9hdXRvc2F2ZS5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5iZWhhdmlvcnMuYXV0b3NhdmUnO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxBdXRvc2F2ZSc7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnQXV0b3NhdmVDb250cm9sbGVyJztcclxudmFyIEF1dG9zYXZlQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBdXRvc2F2ZUNvbnRyb2xsZXIoJHNjb3BlLCAkYXR0cnMsICRwYXJzZSwgJGVsZW1lbnQsICR0aW1lb3V0LCBhdXRvc2F2ZUZhY3RvcnksIHBhcmVudENoaWxkQmVoYXZpb3IsIG9iamVjdFV0aWxpdHkpIHtcclxuICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICB0aGlzLiRhdHRycyA9ICRhdHRycztcclxuICAgICAgICB0aGlzLiRwYXJzZSA9ICRwYXJzZTtcclxuICAgICAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xyXG4gICAgICAgIHRoaXMuYXV0b3NhdmVGYWN0b3J5ID0gYXV0b3NhdmVGYWN0b3J5O1xyXG4gICAgICAgIHRoaXMucGFyZW50Q2hpbGRCZWhhdmlvciA9IHBhcmVudENoaWxkQmVoYXZpb3I7XHJcbiAgICAgICAgdGhpcy5vYmplY3RVdGlsaXR5ID0gb2JqZWN0VXRpbGl0eTtcclxuICAgIH1cclxuICAgIEF1dG9zYXZlQ29udHJvbGxlci5wcm90b3R5cGUuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYXV0b3NhdmVDb250cm9sbGVyLmtleXVwTGlzdGVuZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQub24oJ2tleXVwJywgZnVuY3Rpb24gKCkgeyBfdGhpcy4kc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTsgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5vZmYoJ2tleXVwJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgaGFzVmFsaWRhdG9yID0gdGhpcy5vYmplY3RVdGlsaXR5LmlzTnVsbE9yV2hpdGVzcGFjZSh0aGlzLiRhdHRycy52YWxpZGF0ZSkgPT09IGZhbHNlO1xyXG4gICAgICAgIHZhciB2YWxpZGF0ZUV4cHJlc3Npb24gPSB0aGlzLiRwYXJzZSh0aGlzLiRhdHRycy52YWxpZGF0ZSk7XHJcbiAgICAgICAgdmFyIHZhbGlkYXRlO1xyXG4gICAgICAgIGlmIChoYXNWYWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVFeHByZXNzaW9uKF90aGlzLiRzY29wZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzYXZlRXhwcmVzc2lvbiA9IHRoaXMuJHBhcnNlKHRoaXMuJGF0dHJzLnNhdmUpO1xyXG4gICAgICAgIHZhciBzYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2F2ZUV4cHJlc3Npb24oX3RoaXMuJHNjb3BlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBkZWJvdW5jZSA9IHRoaXMuJHBhcnNlKHRoaXMuJGF0dHJzLmRlYm91bmNlRHVyYXRpb24pKHRoaXMuJHNjb3BlKTtcclxuICAgICAgICB2YXIgdW5iaW5kID0gdGhpcy4kc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmtleXVwTGlzdGVuZXI7IH0sIGZ1bmN0aW9uIChrZXl1cExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXl1cExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hdXRvc2F2ZSA9IF90aGlzLmF1dG9zYXZlRmFjdG9yeS5nZXRJbnN0YW5jZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZTogc2F2ZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZTogdmFsaWRhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEZvcm06IF90aGlzLmZvcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVib3VuY2VEdXJhdGlvbjogZGVib3VuY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcnM6IF90aGlzLiRhdHRycy50cmlnZ2VycyxcclxuICAgICAgICAgICAgICAgICAgICBzZXRDaGFuZ2VMaXN0ZW5lcjoga2V5dXBMaXN0ZW5lcixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJlaGF2aW9yID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9zYXZlOiBfdGhpcy5hdXRvc2F2ZS5hdXRvc2F2ZSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhdXRvc2F2ZSBiZWhhdmlvciBhbmQgYXNzaWduIHRoZSB2YWx1ZSBiYWNrIHRvIHRoZSBwYXJlbnRcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZExpbmsgPSBfdGhpcy4kcGFyc2UoX3RoaXMuJGF0dHJzLnJsQXV0b3NhdmUpKF90aGlzLiRzY29wZSk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wYXJlbnRDaGlsZEJlaGF2aW9yLnJlZ2lzdGVyQ2hpbGRCZWhhdmlvcihjaGlsZExpbmssIGJlaGF2aW9yKTtcclxuICAgICAgICAgICAgICAgIHVuYmluZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQXV0b3NhdmVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsXHJcbiAgICAgICAgJyRhdHRycycsXHJcbiAgICAgICAgJyRwYXJzZScsXHJcbiAgICAgICAgJyRlbGVtZW50JyxcclxuICAgICAgICAnJHRpbWVvdXQnLFxyXG4gICAgICAgIGF1dG9zYXZlX3NlcnZpY2VfMS5mYWN0b3J5TmFtZSxcclxuICAgICAgICBfX3BhcmVudENoaWxkLnNlcnZpY2VOYW1lLFxyXG4gICAgICAgIF9fb2JqZWN0VXRpbGl0eS5zZXJ2aWNlTmFtZV07XHJcbiAgICByZXR1cm4gQXV0b3NhdmVDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkF1dG9zYXZlQ29udHJvbGxlciA9IEF1dG9zYXZlQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gYXV0b3NhdmUoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgcmVxdWlyZToge1xyXG4gICAgICAgICAgICBhdXRvc2F2ZUNvbnRyb2xsZXI6ICdybEF1dG9zYXZlJyxcclxuICAgICAgICAgICAgZm9ybTogJz9uZ0Zvcm0nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLmF1dG9zYXZlID0gYXV0b3NhdmU7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW1xyXG4gICAgYXV0b3NhdmVfc2VydmljZV8xLm1vZHVsZU5hbWUsXHJcbiAgICBfX29iamVjdFV0aWxpdHkubW9kdWxlTmFtZSxcclxuICAgIF9fcGFyZW50Q2hpbGQubW9kdWxlTmFtZSxcclxuXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBhdXRvc2F2ZSlcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIEF1dG9zYXZlQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dG9zYXZlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvYmVoYXZpb3JzL2F1dG9zYXZlL2F1dG9zYXZlLmpzXG4gKiogbW9kdWxlIGlkID0gMTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciBhdXRvc2F2ZUFjdGlvbl9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuLi9hdXRvc2F2ZUFjdGlvbi9hdXRvc2F2ZUFjdGlvbi5zZXJ2aWNlJyk7XHJcbnZhciB0cmlnZ2VycyA9IHJlcXVpcmUoJy4vdHJpZ2dlcnMvdHJpZ2dlcnMuc2VydmljZScpO1xyXG5leHBvcnRzLnRyaWdnZXJzID0gdHJpZ2dlcnM7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51dGlsaXRpZXMuc2VydmljZXMuYXV0b3NhdmUnO1xyXG5leHBvcnRzLmZhY3RvcnlOYW1lID0gJ2F1dG9zYXZlRmFjdG9yeSc7XHJcbnZhciBBdXRvc2F2ZVNlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXV0b3NhdmVTZXJ2aWNlKGF1dG9zYXZlU2VydmljZSwgb3B0aW9ucywgdHJpZ2dlclNlcnZpY2VGYWN0b3J5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmF1dG9zYXZlU2VydmljZSA9IGF1dG9zYXZlU2VydmljZTtcclxuICAgICAgICB0aGlzLmF1dG9zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgZGF0YVtfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX3RoaXMuY29udGVudEZvcm0uJHByaXN0aW5lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuaGFzVmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZCA9IF90aGlzLnZhbGlkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gX3RoaXMuc2F2ZS5hcHBseShfdGhpcywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQocHJvbWlzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hdXRvc2F2ZVNlcnZpY2UudHJpZ2dlcihwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29udGVudEZvcm0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGVudEZvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5oYXNWYWxpZGF0b3IgPSBvcHRpb25zLnZhbGlkYXRlICE9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb250ZW50Rm9ybSA9IG9wdGlvbnMuY29udGVudEZvcm0gfHwgdGhpcy5udWxsRm9ybSgpO1xyXG4gICAgICAgIHRoaXMuc2F2ZSA9IG9wdGlvbnMuc2F2ZTtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlID0gb3B0aW9ucy52YWxpZGF0ZTtcclxuICAgICAgICB0aGlzLnRyaWdnZXJTZXJ2aWNlID0gdHJpZ2dlclNlcnZpY2VGYWN0b3J5LmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgdGhpcy5jb25maWd1cmVUcmlnZ2VycyhvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnRyaWdnZXJTZXJ2aWNlLnNldFRyaWdnZXJzKG9wdGlvbnMudHJpZ2dlcnMsIHRoaXMuYXV0b3NhdmUpO1xyXG4gICAgfVxyXG4gICAgQXV0b3NhdmVTZXJ2aWNlLnByb3RvdHlwZS5jb25maWd1cmVUcmlnZ2VycyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyU2VydmljZS50cmlnZ2Vycy5vbkNoYW5nZS5jb25maWd1cmUoe1xyXG4gICAgICAgICAgICBmb3JtOiBvcHRpb25zLmNvbnRlbnRGb3JtLFxyXG4gICAgICAgICAgICBzZXRDaGFuZ2VMaXN0ZW5lcjogb3B0aW9ucy5zZXRDaGFuZ2VMaXN0ZW5lcixcclxuICAgICAgICAgICAgZGVib3VuY2VEdXJhdGlvbjogb3B0aW9ucy5kZWJvdW5jZUR1cmF0aW9uLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEF1dG9zYXZlU2VydmljZS5wcm90b3R5cGUubnVsbEZvcm0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJHByaXN0aW5lOiBmYWxzZSxcclxuICAgICAgICAgICAgJGRpcnR5OiB0cnVlLFxyXG4gICAgICAgICAgICAkc2V0UHJpc3RpbmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBdXRvc2F2ZVNlcnZpY2U7XHJcbn0oKSk7XHJcbmF1dG9zYXZlU2VydmljZUZhY3RvcnkuJGluamVjdCA9IFthdXRvc2F2ZUFjdGlvbl9zZXJ2aWNlXzEuc2VydmljZU5hbWUsIHRyaWdnZXJzLmZhY3RvcnlOYW1lXTtcclxuZnVuY3Rpb24gYXV0b3NhdmVTZXJ2aWNlRmFjdG9yeShhdXRvc2F2ZVNlcnZpY2UsIHRyaWdnZXJTZXJ2aWNlRmFjdG9yeSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdXRvc2F2ZVNlcnZpY2UoYXV0b3NhdmVTZXJ2aWNlLCBvcHRpb25zLCB0cmlnZ2VyU2VydmljZUZhY3RvcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbYXV0b3NhdmVBY3Rpb25fc2VydmljZV8xLm1vZHVsZU5hbWUsIHRyaWdnZXJzLm1vZHVsZU5hbWVdKVxyXG4gICAgLmZhY3RvcnkoZXhwb3J0cy5mYWN0b3J5TmFtZSwgYXV0b3NhdmVTZXJ2aWNlRmFjdG9yeSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dG9zYXZlLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9zZXJ2aWNlcy9hdXRvc2F2ZS9hdXRvc2F2ZS5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB0aGlzW1wiX1wiXTsgfSgpKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwiX1wiXG4gKiogbW9kdWxlIGlkID0gMThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIG5nID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudXRpbGl0aWVzLnNlcnZpY2VzLmF1dG9zYXZlQWN0aW9uJztcclxuZXhwb3J0cy5zZXJ2aWNlTmFtZSA9ICdhdXRvc2F2ZUFjdGlvbic7XHJcbnZhciBBdXRvc2F2ZUFjdGlvblNlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXV0b3NhdmVBY3Rpb25TZXJ2aWNlKCR0aW1lb3V0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XHJcbiAgICAgICAgdGhpcy5jb21wbGV0ZU1lc3NhZ2VEdXJhdGlvbiA9IDEwMDA7XHJcbiAgICAgICAgdGhpcy5hdXRvc2F2ZVN1Y2Nlc3NmdWwgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVzb2x2ZUF1dG9zYXZlKGRhdGEsIHRydWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hdXRvc2F2ZUZhaWxlZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZXNvbHZlQXV0b3NhdmUoZGF0YSwgZmFsc2UpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlQXV0b3NhdmUgPSBmdW5jdGlvbiAoZGF0YSwgc3VjY2Vzcykge1xyXG4gICAgICAgICAgICBfdGhpcy5fc2F2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIF90aGlzLl9zdWNjZXNzZnVsID0gc3VjY2VzcztcclxuICAgICAgICAgICAgX3RoaXMuJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sIF90aGlzLmNvbXBsZXRlTWVzc2FnZUR1cmF0aW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRvc2F2ZUFjdGlvblNlcnZpY2UucHJvdG90eXBlLCBcInNhdmluZ1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zYXZpbmc7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0b3NhdmVBY3Rpb25TZXJ2aWNlLnByb3RvdHlwZSwgXCJjb21wbGV0ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb21wbGV0ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRvc2F2ZUFjdGlvblNlcnZpY2UucHJvdG90eXBlLCBcInN1Y2Nlc3NmdWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3VjY2Vzc2Z1bDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEF1dG9zYXZlQWN0aW9uU2VydmljZS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XHJcbiAgICAgICAgdGhpcy5fc2F2aW5nID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHRoaXMuYXV0b3NhdmVTdWNjZXNzZnVsKVxyXG4gICAgICAgICAgICAuY2F0Y2godGhpcy5hdXRvc2F2ZUZhaWxlZCk7XHJcbiAgICB9O1xyXG4gICAgQXV0b3NhdmVBY3Rpb25TZXJ2aWNlLiRpbmplY3QgPSBbJyR0aW1lb3V0J107XHJcbiAgICByZXR1cm4gQXV0b3NhdmVBY3Rpb25TZXJ2aWNlO1xyXG59KCkpO1xyXG5uZy5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXSlcclxuICAgIC5zZXJ2aWNlKGV4cG9ydHMuc2VydmljZU5hbWUsIEF1dG9zYXZlQWN0aW9uU2VydmljZSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dG9zYXZlQWN0aW9uLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9zZXJ2aWNlcy9hdXRvc2F2ZUFjdGlvbi9hdXRvc2F2ZUFjdGlvbi5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgb25DaGFuZ2VUcmlnZ2VyXzEgPSByZXF1aXJlKCcuL29uQ2hhbmdlVHJpZ2dlcicpO1xyXG52YXIgdHJpZ2dlcl8xID0gcmVxdWlyZSgnLi90cmlnZ2VyJyk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vb25DaGFuZ2VUcmlnZ2VyJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3RyaWdnZXInKSk7XHJcbmV4cG9ydHMuZGVmYXVsdFRyaWdnZXJzID0gJ29uQ2hhbmdlJztcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLnNlcnZpY2VzLmF1dG9zYXZlLnRyaWdnZXJzJztcclxuZXhwb3J0cy5mYWN0b3J5TmFtZSA9ICdhdXRvc2F2ZVRyaWdnZXJzJztcclxudmFyIFRyaWdnZXJTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRyaWdnZXJTZXJ2aWNlKCRyb290U2NvcGUsICR0aW1lb3V0KSB7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VycyA9IHtcclxuICAgICAgICAgICAgb25DaGFuZ2U6IG5ldyBvbkNoYW5nZVRyaWdnZXJfMS5PbkNoYW5nZVRyaWdnZXIoJHJvb3RTY29wZSwgJHRpbWVvdXQpLFxyXG4gICAgICAgICAgICBub25lOiBuZXcgdHJpZ2dlcl8xLlRyaWdnZXIoJ25vbmUnKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgVHJpZ2dlclNlcnZpY2UucHJvdG90eXBlLnNldFRyaWdnZXJzID0gZnVuY3Rpb24gKHRyaWdnZXJTdHJpbmcsIGF1dG9zYXZlKSB7XHJcbiAgICAgICAgaWYgKHRyaWdnZXJTdHJpbmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0cmlnZ2VyU3RyaW5nID0gZXhwb3J0cy5kZWZhdWx0VHJpZ2dlcnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF8uZWFjaCh0aGlzLnRyaWdnZXJzLCBmdW5jdGlvbiAodHJpZ2dlcikge1xyXG4gICAgICAgICAgICBpZiAodHJpZ2dlci5oYXNNYXRjaCh0cmlnZ2VyU3RyaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlci5zZXRUcmlnZ2VyKGF1dG9zYXZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUcmlnZ2VyU2VydmljZTtcclxufSgpKTtcclxudHJpZ2dlclNlcnZpY2VGYWN0b3J5LiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCAnJHRpbWVvdXQnXTtcclxuZnVuY3Rpb24gdHJpZ2dlclNlcnZpY2VGYWN0b3J5KCRyb290U2NvcGUsICR0aW1lb3V0KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEluc3RhbmNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHJpZ2dlclNlcnZpY2UoJHJvb3RTY29wZSwgJHRpbWVvdXQpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZmFjdG9yeShleHBvcnRzLmZhY3RvcnlOYW1lLCB0cmlnZ2VyU2VydmljZUZhY3RvcnkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmlnZ2Vycy5zZXJ2aWNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvYXV0b3NhdmUvdHJpZ2dlcnMvdHJpZ2dlcnMuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDIwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0cmlnZ2VyXzEgPSByZXF1aXJlKCcuL3RyaWdnZXInKTtcclxudmFyIE9uQ2hhbmdlVHJpZ2dlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoT25DaGFuZ2VUcmlnZ2VyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gT25DaGFuZ2VUcmlnZ2VyKCRyb290U2NvcGUsICR0aW1lb3V0KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgJ29uQ2hhbmdlJyk7XHJcbiAgICAgICAgdGhpcy4kcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcclxuICAgICAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XHJcbiAgICAgICAgdGhpcy5kZWJvdW5jZUR1cmF0aW9uID0gMTAwMDtcclxuICAgIH1cclxuICAgIE9uQ2hhbmdlVHJpZ2dlci5wcm90b3R5cGUuc2V0VHJpZ2dlciA9IGZ1bmN0aW9uIChhdXRvc2F2ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQodGhpcy5zZXR0aW5ncykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluaXRDaGFuZ2VMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLiRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldHRpbmdzLmZvcm0gIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgPyBfdGhpcy5zZXR0aW5ncy5mb3JtLiRkaXJ0eVxyXG4gICAgICAgICAgICAgICAgOiBmYWxzZTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRUaW1lcihhdXRvc2F2ZSk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhckNoYW5nZUxpc3RlbmVyID0gX3RoaXMuc2V0Q2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiR0aW1lb3V0LmNhbmNlbChfdGhpcy50aW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0VGltZXIoYXV0b3NhdmUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPbkNoYW5nZVRyaWdnZXIucHJvdG90eXBlLnNldFRpbWVyID0gZnVuY3Rpb24gKGF1dG9zYXZlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnRpbWVyID0gdGhpcy4kdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNsZWFyQ2hhbmdlTGlzdGVuZXIoKTtcclxuICAgICAgICAgICAgYXV0b3NhdmUoKTtcclxuICAgICAgICB9LCB0aGlzLmRlYm91bmNlRHVyYXRpb24pO1xyXG4gICAgfTtcclxuICAgIE9uQ2hhbmdlVHJpZ2dlci5wcm90b3R5cGUuaW5pdENoYW5nZUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNldENoYW5nZUxpc3RlbmVyID0gdGhpcy5zZXR0aW5ncy5zZXRDaGFuZ2VMaXN0ZW5lciB8fCB0aGlzLm51bGxTZXRMaXN0ZW5lcjtcclxuICAgICAgICB0aGlzLmNsZWFyQ2hhbmdlTGlzdGVuZXIgPSB0aGlzLm51bGxDbGVhckxpc3RlbmVyO1xyXG4gICAgfTtcclxuICAgIE9uQ2hhbmdlVHJpZ2dlci5wcm90b3R5cGUubnVsbFNldExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdObyBjaGFuZ2UgbGlzdGVuZXIgYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubnVsbENsZWFyTGlzdGVuZXI7XHJcbiAgICB9O1xyXG4gICAgT25DaGFuZ2VUcmlnZ2VyLnByb3RvdHlwZS5udWxsQ2xlYXJMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnTm8gY2hhbmdlIGxpc3RlbmVyIHJlZ2lzdGVyJyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9uQ2hhbmdlVHJpZ2dlcjtcclxufSh0cmlnZ2VyXzEuVHJpZ2dlcikpO1xyXG5leHBvcnRzLk9uQ2hhbmdlVHJpZ2dlciA9IE9uQ2hhbmdlVHJpZ2dlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25DaGFuZ2VUcmlnZ2VyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvYXV0b3NhdmUvdHJpZ2dlcnMvb25DaGFuZ2VUcmlnZ2VyLmpzXG4gKiogbW9kdWxlIGlkID0gMjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxudmFyIFRyaWdnZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVHJpZ2dlcihhbGlhc2VzLCB0cmlnZ2VyQWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyQWN0aW9uID0gdHJpZ2dlckFjdGlvbjtcclxuICAgICAgICB0aGlzLmFsaWFzZXMgPSBhbGlhc2VzLnNwbGl0KCcgJyk7XHJcbiAgICB9XHJcbiAgICBUcmlnZ2VyLnByb3RvdHlwZS5zZXRUcmlnZ2VyID0gZnVuY3Rpb24gKGF1dG9zYXZlKSB7XHJcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0aGlzLnRyaWdnZXJBY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckFjdGlvbih0aGlzLnNldHRpbmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVHJpZ2dlci5wcm90b3R5cGUuaGFzTWF0Y2ggPSBmdW5jdGlvbiAodHJpZ2dlcnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0cmlnZ2VyTGlzdCA9IHRyaWdnZXJzLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgcmV0dXJuIF8uc29tZSh0cmlnZ2VyTGlzdCwgZnVuY3Rpb24gKHRyaWdnZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF8uc29tZShfdGhpcy5hbGlhc2VzLCBmdW5jdGlvbiAoYWxpYXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyID09PSBhbGlhcztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVHJpZ2dlci5wcm90b3R5cGUuY29uZmlndXJlID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUcmlnZ2VyO1xyXG59KCkpO1xyXG5leHBvcnRzLlRyaWdnZXIgPSBUcmlnZ2VyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmlnZ2VyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvYXV0b3NhdmUvdHJpZ2dlcnMvdHJpZ2dlci5qc1xuICoqIG1vZHVsZSBpZCA9IDIyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19ndWlkID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLmd1aWQ7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5iZWhhdmlvcnMucG9wb3Zlcic7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybFBvcG92ZXInO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ1BvcG92ZXJDb250cm9sbGVyJztcclxudmFyIFBvcG92ZXJDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBvcG92ZXJDb250cm9sbGVyKCRhdHRycywgJGVsZW1lbnQsICRjb21waWxlLCAkc2NvcGUsICRwYXJzZSwgJHRlbXBsYXRlQ2FjaGUsIGd1aWQpIHtcclxuICAgICAgICB0aGlzLiRhdHRycyA9ICRhdHRycztcclxuICAgICAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy4kY29tcGlsZSA9ICRjb21waWxlO1xyXG4gICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICAgIHRoaXMuJHBhcnNlID0gJHBhcnNlO1xyXG4gICAgICAgIHRoaXMuJHRlbXBsYXRlQ2FjaGUgPSAkdGVtcGxhdGVDYWNoZTtcclxuICAgICAgICB0aGlzLmd1aWQgPSBndWlkO1xyXG4gICAgfVxyXG4gICAgUG9wb3ZlckNvbnRyb2xsZXIucHJvdG90eXBlLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuJHBhcnNlKHRoaXMuJGF0dHJzLnRleHRPbmx5KSh0aGlzLiRzY29wZSkpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCd1aWItcG9wb3ZlcicsIHRoaXMuJGF0dHJzLnJsUG9wb3Zlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVQYXRoID0gdGhpcy5ndWlkLnJhbmRvbSgpICsgJy5odG1sJztcclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlQ29udGVudCA9ICc8ZGl2PicgKyB0aGlzLiRwYXJzZSh0aGlzLiRhdHRycy5ybFBvcG92ZXIpKHRoaXMuJHNjb3BlKSArICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICBpZiAodGVtcGxhdGVDb250ZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlUGF0aCwgdGVtcGxhdGVDb250ZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndWliLXBvcG92ZXItdGVtcGxhdGUnLCAnXFwnJyArIHRlbXBsYXRlUGF0aCArICdcXCcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUF0dHIoJ3JsLXBvcG92ZXInKTtcclxuICAgICAgICB0aGlzLiRjb21waWxlKHRoaXMuJGVsZW1lbnQpKHRoaXMuJHNjb3BlKTtcclxuICAgIH07XHJcbiAgICBQb3BvdmVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckYXR0cnMnLFxyXG4gICAgICAgICckZWxlbWVudCcsXHJcbiAgICAgICAgJyRjb21waWxlJyxcclxuICAgICAgICAnJHNjb3BlJyxcclxuICAgICAgICAnJHBhcnNlJyxcclxuICAgICAgICAnJHRlbXBsYXRlQ2FjaGUnLFxyXG4gICAgICAgIF9fZ3VpZC5zZXJ2aWNlTmFtZV07XHJcbiAgICByZXR1cm4gUG9wb3ZlckNvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUG9wb3ZlckNvbnRyb2xsZXIgPSBQb3BvdmVyQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gcG9wb3ZlcigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICBwcmlvcml0eTogMzAwLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMucG9wb3ZlciA9IHBvcG92ZXI7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgcG9wb3ZlcilcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIFBvcG92ZXJDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wb3Zlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2JlaGF2aW9ycy9wb3BvdmVyL3BvcG92ZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAyM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIGF1dG9zYXZlRGlhbG9nRm9vdGVyID0gcmVxdWlyZSgnLi9hdXRvc2F2ZURpYWxvZ0Zvb3Rlci9hdXRvc2F2ZURpYWxvZ0Zvb3RlcicpO1xyXG5leHBvcnRzLmF1dG9zYXZlRGlhbG9nRm9vdGVyID0gYXV0b3NhdmVEaWFsb2dGb290ZXI7XHJcbnZhciBidXN5ID0gcmVxdWlyZSgnLi9idXN5L2J1c3knKTtcclxuZXhwb3J0cy5idXN5ID0gYnVzeTtcclxudmFyIGJ1dHRvbiA9IHJlcXVpcmUoJy4vYnV0dG9uL2J1dHRvbicpO1xyXG5leHBvcnRzLmJ1dHRvbiA9IGJ1dHRvbjtcclxudmFyIGJ1dHRvbkFzeW5jID0gcmVxdWlyZSgnLi9idXR0b25Bc3luYy9idXR0b25Bc3luYycpO1xyXG5leHBvcnRzLmJ1dHRvbkFzeW5jID0gYnV0dG9uQXN5bmM7XHJcbnZhciBidXR0b25MaW5rID0gcmVxdWlyZSgnLi9idXR0b25MaW5rL2J1dHRvbkxpbmsnKTtcclxuZXhwb3J0cy5idXR0b25MaW5rID0gYnV0dG9uTGluaztcclxudmFyIGJ1dHRvblRvZ2dsZSA9IHJlcXVpcmUoJy4vYnV0dG9uVG9nZ2xlL2J1dHRvblRvZ2dsZScpO1xyXG5leHBvcnRzLmJ1dHRvblRvZ2dsZSA9IGJ1dHRvblRvZ2dsZTtcclxudmFyIGNhcmRDb250YWluZXIgPSByZXF1aXJlKCcuL2NhcmRDb250YWluZXIvY2FyZENvbnRhaW5lci5tb2R1bGUnKTtcclxuZXhwb3J0cy5jYXJkQ29udGFpbmVyID0gY2FyZENvbnRhaW5lcjtcclxudmFyIGNoZWNrYm94ID0gcmVxdWlyZSgnLi9jaGVja2JveC9jaGVja2JveCcpO1xyXG5leHBvcnRzLmNoZWNrYm94ID0gY2hlY2tib3g7XHJcbnZhciBjb21tYUxpc3QgPSByZXF1aXJlKCcuL2NvbW1hTGlzdC9jb21tYUxpc3QnKTtcclxuZXhwb3J0cy5jb21tYUxpc3QgPSBjb21tYUxpc3Q7XHJcbnZhciBkYXRlVGltZSA9IHJlcXVpcmUoJy4vZGF0ZVRpbWUvZGF0ZVRpbWUnKTtcclxuZXhwb3J0cy5kYXRlVGltZSA9IGRhdGVUaW1lO1xyXG52YXIgZGF0ZVRpbWVTdGF0aWMgPSByZXF1aXJlKCcuL2RhdGVUaW1lU3RhdGljL2RhdGVUaW1lU3RhdGljJyk7XHJcbmV4cG9ydHMuZGF0ZVRpbWVTdGF0aWMgPSBkYXRlVGltZVN0YXRpYztcclxudmFyIGRpYWxvZyA9IHJlcXVpcmUoJy4vZGlhbG9nL2RpYWxvZycpO1xyXG5leHBvcnRzLmRpYWxvZyA9IGRpYWxvZztcclxudmFyIGdlbmVyaWNDb250YWluZXIgPSByZXF1aXJlKCcuL2dlbmVyaWNDb250YWluZXIvZ2VuZXJpY0NvbnRhaW5lcicpO1xyXG5leHBvcnRzLmdlbmVyaWNDb250YWluZXIgPSBnZW5lcmljQ29udGFpbmVyO1xyXG52YXIgbGF6eUxvYWQgPSByZXF1aXJlKCcuL2xhenlMb2FkL2xhenlMb2FkJyk7XHJcbmV4cG9ydHMubGF6eUxvYWQgPSBsYXp5TG9hZDtcclxudmFyIGxvbmdDbGlja0J1dHRvbiA9IHJlcXVpcmUoJy4vbG9uZ0NsaWNrQnV0dG9uL2xvbmdDbGlja0J1dHRvbicpO1xyXG5leHBvcnRzLmxvbmdDbGlja0J1dHRvbiA9IGxvbmdDbGlja0J1dHRvbjtcclxudmFyIG1lc3NhZ2VMb2cgPSByZXF1aXJlKCcuL21lc3NhZ2VMb2cvbWVzc2FnZUxvZy5tb2R1bGUnKTtcclxuZXhwb3J0cy5tZXNzYWdlTG9nID0gbWVzc2FnZUxvZztcclxudmFyIG11bHRpU3RlcEluZGljYXRvciA9IHJlcXVpcmUoJy4vbXVsdGlTdGVwSW5kaWNhdG9yL211bHRpU3RlcEluZGljYXRvcicpO1xyXG5leHBvcnRzLm11bHRpU3RlcEluZGljYXRvciA9IG11bHRpU3RlcEluZGljYXRvcjtcclxudmFyIHJhZGlvID0gcmVxdWlyZSgnLi9yYWRpby9yYWRpby5tb2R1bGUnKTtcclxuZXhwb3J0cy5yYWRpbyA9IHJhZGlvO1xyXG52YXIgcmF0aW5nQmFyID0gcmVxdWlyZSgnLi9yYXRpbmdCYXIvcmF0aW5nQmFyJyk7XHJcbmV4cG9ydHMucmF0aW5nQmFyID0gcmF0aW5nQmFyO1xyXG52YXIgcmljaFRleHRFZGl0b3IgPSByZXF1aXJlKCcuL3JpY2hUZXh0RWRpdG9yL3JpY2hUZXh0RWRpdG9yJyk7XHJcbmV4cG9ydHMucmljaFRleHRFZGl0b3IgPSByaWNoVGV4dEVkaXRvcjtcclxudmFyIHNlbGVjdCA9IHJlcXVpcmUoJy4vc2VsZWN0L3NlbGVjdCcpO1xyXG5leHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcclxudmFyIHNpZ25hdHVyZVBhZCA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlUGFkL3NpZ25hdHVyZVBhZCcpO1xyXG5leHBvcnRzLnNpZ25hdHVyZVBhZCA9IHNpZ25hdHVyZVBhZDtcclxudmFyIHNpbXBsZUNhcmRMaXN0ID0gcmVxdWlyZSgnLi9zaW1wbGVDYXJkTGlzdC9zaW1wbGVDYXJkTGlzdC5tb2R1bGUnKTtcclxuZXhwb3J0cy5zaW1wbGVDYXJkTGlzdCA9IHNpbXBsZUNhcmRMaXN0O1xyXG52YXIgc3Bpbm5lciA9IHJlcXVpcmUoJy4vc3Bpbm5lci9zcGlubmVyJyk7XHJcbmV4cG9ydHMuc3Bpbm5lciA9IHNwaW5uZXI7XHJcbnZhciBzdHJpbmdXaXRoV2F0ZXJtYXJrID0gcmVxdWlyZSgnLi9zdHJpbmdXaXRoV2F0ZXJtYXJrL3N0cmluZ1dpdGhXYXRlcm1hcmsnKTtcclxuZXhwb3J0cy5zdHJpbmdXaXRoV2F0ZXJtYXJrID0gc3RyaW5nV2l0aFdhdGVybWFyaztcclxudmFyIHRhYnMgPSByZXF1aXJlKCcuL3RhYnMvdGFicy5tb2R1bGUnKTtcclxuZXhwb3J0cy50YWJzID0gdGFicztcclxudmFyIHRleHRhcmVhID0gcmVxdWlyZSgnLi90ZXh0YXJlYS90ZXh0YXJlYScpO1xyXG5leHBvcnRzLnRleHRhcmVhID0gdGV4dGFyZWE7XHJcbnZhciB0ZXh0Ym94ID0gcmVxdWlyZSgnLi90ZXh0Ym94L3RleHRib3gnKTtcclxuZXhwb3J0cy50ZXh0Ym94ID0gdGV4dGJveDtcclxudmFyIHR5cGVhaGVhZCA9IHJlcXVpcmUoJy4vdHlwZWFoZWFkL3R5cGVhaGVhZCcpO1xyXG5leHBvcnRzLnR5cGVhaGVhZCA9IHR5cGVhaGVhZDtcclxudmFyIHVzZXJSYXRpbmcgPSByZXF1aXJlKCcuL3VzZXJSYXRpbmcvdXNlclJhdGluZycpO1xyXG5leHBvcnRzLnVzZXJSYXRpbmcgPSB1c2VyUmF0aW5nO1xyXG52YXIgdmFsaWRhdGlvbkdyb3VwID0gcmVxdWlyZSgnLi92YWxpZGF0aW9uR3JvdXAvdmFsaWRhdGlvbkdyb3VwJyk7XHJcbmV4cG9ydHMudmFsaWRhdGlvbkdyb3VwID0gdmFsaWRhdGlvbkdyb3VwO1xyXG52YXIgY29tcG9uZW50c0RlZmF1bHRUaGVtZV8xID0gcmVxdWlyZSgnLi9jb21wb25lbnRzRGVmYXVsdFRoZW1lJyk7XHJcbmV4cG9ydHMuZGVmYXVsdFRoZW1lVmFsdWVOYW1lID0gY29tcG9uZW50c0RlZmF1bHRUaGVtZV8xLmRlZmF1bHRUaGVtZVZhbHVlTmFtZTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMnO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtcclxuICAgIGF1dG9zYXZlRGlhbG9nRm9vdGVyLm1vZHVsZU5hbWUsXHJcbiAgICBidXN5Lm1vZHVsZU5hbWUsXHJcbiAgICBidXR0b24ubW9kdWxlTmFtZSxcclxuICAgIGJ1dHRvbkFzeW5jLm1vZHVsZU5hbWUsXHJcbiAgICBidXR0b25MaW5rLm1vZHVsZU5hbWUsXHJcbiAgICBidXR0b25Ub2dnbGUubW9kdWxlTmFtZSxcclxuICAgIGNhcmRDb250YWluZXIubW9kdWxlTmFtZSxcclxuICAgIGNoZWNrYm94Lm1vZHVsZU5hbWUsXHJcbiAgICBjb21tYUxpc3QubW9kdWxlTmFtZSxcclxuICAgIGRhdGVUaW1lLm1vZHVsZU5hbWUsXHJcbiAgICBkYXRlVGltZVN0YXRpYy5tb2R1bGVOYW1lLFxyXG4gICAgZGlhbG9nLm1vZHVsZU5hbWUsXHJcbiAgICBnZW5lcmljQ29udGFpbmVyLm1vZHVsZU5hbWUsXHJcbiAgICBsYXp5TG9hZC5tb2R1bGVOYW1lLFxyXG4gICAgbG9uZ0NsaWNrQnV0dG9uLm1vZHVsZU5hbWUsXHJcbiAgICBtZXNzYWdlTG9nLm1vZHVsZU5hbWUsXHJcbiAgICBtdWx0aVN0ZXBJbmRpY2F0b3IubW9kdWxlTmFtZSxcclxuICAgIHJhZGlvLm1vZHVsZU5hbWUsXHJcbiAgICByYXRpbmdCYXIubW9kdWxlTmFtZSxcclxuICAgIHJpY2hUZXh0RWRpdG9yLm1vZHVsZU5hbWUsXHJcbiAgICBzZWxlY3QubW9kdWxlTmFtZSxcclxuICAgIHNpZ25hdHVyZVBhZC5tb2R1bGVOYW1lLFxyXG4gICAgc2ltcGxlQ2FyZExpc3QubW9kdWxlTmFtZSxcclxuICAgIHNwaW5uZXIubW9kdWxlTmFtZSxcclxuICAgIHN0cmluZ1dpdGhXYXRlcm1hcmsubW9kdWxlTmFtZSxcclxuICAgIHRhYnMubW9kdWxlTmFtZSxcclxuICAgIHRleHRhcmVhLm1vZHVsZU5hbWUsXHJcbiAgICB0ZXh0Ym94Lm1vZHVsZU5hbWUsXHJcbiAgICB0eXBlYWhlYWQubW9kdWxlTmFtZSxcclxuICAgIHVzZXJSYXRpbmcubW9kdWxlTmFtZSxcclxuICAgIHZhbGlkYXRpb25Hcm91cC5tb2R1bGVOYW1lLFxyXG5dKVxyXG4gICAgLnZhbHVlKGNvbXBvbmVudHNEZWZhdWx0VGhlbWVfMS5kZWZhdWx0VGhlbWVWYWx1ZU5hbWUsIGNvbXBvbmVudHNEZWZhdWx0VGhlbWVfMS5kZWZhdWx0VGhlbWVWYWx1ZSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudHMubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jb21wb25lbnRzLm1vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5hdXRvc2F2ZURpYWxvZ0Zvb3Rlcic7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybEF1dG9zYXZlRGlhbG9nRm9vdGVyJztcclxuZnVuY3Rpb24gYXV0b3NhdmVEaWFsb2dGb290ZXIoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vYXV0b3NhdmVEaWFsb2dGb290ZXIuaHRtbCcpLFxyXG4gICAgfTtcclxufVxyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGF1dG9zYXZlRGlhbG9nRm9vdGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0b3NhdmVEaWFsb2dGb290ZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2F1dG9zYXZlRGlhbG9nRm9vdGVyL2F1dG9zYXZlRGlhbG9nRm9vdGVyLmpzXG4gKiogbW9kdWxlIGlkID0gMjVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbC1mb290ZXJcXFwiPlxcclxcblxcdDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGFuZ2VyXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIG5nLWNsaWNrPVxcXCIkY2xvc2UoKVxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLXRpbWVzXFxcIj48L2k+IENhbmNlbDwvYnV0dG9uPlxcclxcblxcdDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tc3VjY2Vzc1xcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBuZy1jbGljaz1cXFwiJGRpc21pc3MoKVxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLWNoZWNrXFxcIj48L2k+IFNhdmU8L2J1dHRvbj5cXHJcXG48L2Rpdj5cXHJcXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9hdXRvc2F2ZURpYWxvZ0Zvb3Rlci9hdXRvc2F2ZURpYWxvZ0Zvb3Rlci5odG1sXG4gKiogbW9kdWxlIGlkID0gMjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxucmVxdWlyZSgnLi9idXN5LmNzcycpO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIGNvbXBvbmVudHNEZWZhdWx0VGhlbWVfMSA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHNEZWZhdWx0VGhlbWUnKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuYnVzeSc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybEJ1c3knO1xyXG5idXN5LiRpbmplY3QgPSBbY29tcG9uZW50c0RlZmF1bHRUaGVtZV8xLmRlZmF1bHRUaGVtZVZhbHVlTmFtZV07XHJcbmZ1bmN0aW9uIGJ1c3kodXNlRGVmYXVsdFRoZW1lKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiPGkgY2xhc3M9XFxcImJ1c3kgcmwte3tzaXplfX1cXFwiIG5nLWNsYXNzPVxcXCJ7ICdkZWZhdWx0LXRoZW1lJzogdXNlRGVmYXVsdFRoZW1lIH1cXFwiIG5nLXNob3c9XFxcImxvYWRpbmdcXFwiPjwvaT5cIixcclxuICAgICAgICBzY29wZToge1xyXG4gICAgICAgICAgICBsb2FkaW5nOiAnPScsXHJcbiAgICAgICAgICAgIC8vIFZhbGlkIHZhbHVlcyBhcmU6XHJcbiAgICAgICAgICAgIC8vIGBsZ2AsIGAyeGAsIGAzeGAsIGA0eGAsIGFuZCBgNXhgXHJcbiAgICAgICAgICAgIHNpemU6ICdAJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSkge1xyXG4gICAgICAgICAgICBzY29wZS51c2VEZWZhdWx0VGhlbWUgPSB1c2VEZWZhdWx0VGhlbWU7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBidXN5KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVzeS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvYnVzeS9idXN5LmpzXG4gKiogbW9kdWxlIGlkID0gMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYnVzeS5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYnVzeS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9idXN5LmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2J1c3kvYnVzeS5jc3NcbiAqKiBtb2R1bGUgaWQgPSAyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZGVmYXVsdC10aGVtZS5idXN5IHtcXHJcXG5cXHQtd2Via2l0LWFuaW1hdGlvbjogZmEtc3BpbiAycyBpbmZpbml0ZSBsaW5lYXI7XFxyXFxuXFx0YW5pbWF0aW9uOiBmYS1zcGluIDJzIGluZmluaXRlIGxpbmVhcjtcXHJcXG5cXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuXFx0Zm9udC1zaXplOiBpbmhlcml0O1xcclxcblxcdGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG5cXHRmb250LWZhbWlseTogRm9udEF3ZXNvbWU7XFxyXFxufVxcclxcblxcclxcbi5kZWZhdWx0LXRoZW1lLmJ1c3k6YmVmb3JlIHtcXHJcXG5cXHRjb250ZW50OiBcXFwiXFxcXEYxMTBcXFwiOyAvKiBmYS1zcGlubmVyICovXFxyXFxufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9zb3VyY2UvY29tcG9uZW50cy9idXN5L2J1c3kuY3NzXG4gKiogbW9kdWxlIGlkID0gMjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xyXG5leHBvcnRzLmRlZmF1bHRUaGVtZVZhbHVlTmFtZSA9ICd1c2VEZWZhdWx0VGhlbWUnO1xyXG5leHBvcnRzLmRlZmF1bHRUaGVtZVZhbHVlID0gdHJ1ZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50c0RlZmF1bHRUaGVtZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY29tcG9uZW50c0RlZmF1bHRUaGVtZS5qc1xuICoqIG1vZHVsZSBpZCA9IDMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmJ1dHRvbic7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybEJ1dHRvbic7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnQnV0dG9uQ29udHJvbGxlcic7XHJcbnZhciBCdXR0b25Db250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJ1dHRvbkNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy50eXBlICE9IG51bGwgPyB0aGlzLnR5cGUgOiAnZGVmYXVsdCc7XHJcbiAgICAgICAgdGhpcy5jb25maWd1cmVkU2l6ZSA9IHRoaXMuc2l6ZSAhPSBudWxsID8gJ2J0bi0nICsgdGhpcy5zaXplIDogbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBCdXR0b25Db250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkJ1dHRvbkNvbnRyb2xsZXIgPSBCdXR0b25Db250cm9sbGVyO1xyXG5mdW5jdGlvbiBidXR0b24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9idXR0b24uaHRtbCcpLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIGFjdGlvbjogJyYnLFxyXG4gICAgICAgICAgICB0eXBlOiAnQCcsXHJcbiAgICAgICAgICAgIG5nRGlzYWJsZWQ6ICc9JyxcclxuICAgICAgICAgICAgc2l6ZTogJ0AnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICdidXR0b24nLFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLmJ1dHRvbiA9IGJ1dHRvbjtcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBidXR0b24pXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBCdXR0b25Db250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnV0dG9uLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9idXR0b24vYnV0dG9uLmpzXG4gKiogbW9kdWxlIGlkID0gMzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4te3tidXR0b24udHlwZX19IHt7YnV0dG9uLmNvbmZpZ3VyZWRTaXplfX1cXFwiIG5nLWNsaWNrPVxcXCJidXR0b24uYWN0aW9uKClcXFwiIG5nLWRpc2FibGVkPVxcXCJidXR0b24ubmdEaXNhYmxlZFxcXCI+XFxyXFxuXFx0PHNwYW4gbmctdHJhbnNjbHVkZT48L3NwYW4+XFxyXFxuPC9idXR0b24+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5odG1sXG4gKiogbW9kdWxlIGlkID0gMzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX3Byb21pc2VVdGlsaXR5ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLnByb21pc2U7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmJ1dHRvbkFzeW5jJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsQnV0dG9uQXN5bmMnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ0J1dHRvbkFzeW5jQ29udHJvbGxlcic7XHJcbnZhciBCdXR0b25Bc3luY0NvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQnV0dG9uQXN5bmNDb250cm9sbGVyKHByb21pc2VVdGlsaXR5KSB7XHJcbiAgICAgICAgdGhpcy5wcm9taXNlVXRpbGl0eSA9IHByb21pc2VVdGlsaXR5O1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMudHlwZSAhPSBudWxsID8gdGhpcy50eXBlIDogJ2RlZmF1bHQnO1xyXG4gICAgICAgIHRoaXMuc2l6ZUNsYXNzID0gdGhpcy5zaXplICE9IG51bGwgPyAnYnRuLScgKyB0aGlzLnNpemUgOiBudWxsO1xyXG4gICAgfVxyXG4gICAgQnV0dG9uQXN5bmNDb250cm9sbGVyLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJ1c3kpIHtcclxuICAgICAgICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuYWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb21pc2VVdGlsaXR5LmlzUHJvbWlzZShyZXN1bHQpICYmIF8uaXNGdW5jdGlvbihyZXN1bHQuZmluYWxseSkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5idXN5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJ1dHRvbkFzeW5jQ29udHJvbGxlci4kaW5qZWN0ID0gW19fcHJvbWlzZVV0aWxpdHkuc2VydmljZU5hbWVdO1xyXG4gICAgcmV0dXJuIEJ1dHRvbkFzeW5jQ29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5CdXR0b25Bc3luY0NvbnRyb2xsZXIgPSBCdXR0b25Bc3luY0NvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIGJ1dHRvbkFzeW5jKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vYnV0dG9uQXN5bmMuaHRtbCcpLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIGJ1c3k6ICc9PycsXHJcbiAgICAgICAgICAgIGFjdGlvbjogJyYnLFxyXG4gICAgICAgICAgICB0eXBlOiAnQCcsXHJcbiAgICAgICAgICAgIG5nRGlzYWJsZWQ6ICc9PycsXHJcbiAgICAgICAgICAgIHJpZ2h0QWxpZ25lZDogJz0/JyxcclxuICAgICAgICAgICAgc2l6ZTogJ0AnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICdidXR0b24nLFxyXG4gICAgfTtcclxufVxyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtfX3Byb21pc2VVdGlsaXR5Lm1vZHVsZU5hbWVdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGJ1dHRvbkFzeW5jKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgQnV0dG9uQXN5bmNDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnV0dG9uQXN5bmMuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2J1dHRvbkFzeW5jL2J1dHRvbkFzeW5jLmpzXG4gKiogbW9kdWxlIGlkID0gMzNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4te3tidXR0b24udHlwZX19IHt7YnV0dG9uLnNpemVDbGFzc319XFxcIiBuZy1jbGljaz1cXFwiYnV0dG9uLnRyaWdnZXIoKVxcXCIgbmctZGlzYWJsZWQ9XFxcImJ1dHRvbi5idXN5IHx8IGJ1dHRvbi5uZ0Rpc2FibGVkXFxcIj5cXHJcXG5cXHQ8cmwtYnVzeSBuZy1zaG93PVxcXCJidXR0b24ucmlnaHRBbGlnbmVkXFxcIiBsb2FkaW5nPVxcXCJidXR0b24uYnVzeVxcXCI+PC9ybC1idXN5PlxcclxcblxcdDxzcGFuIG5nLXRyYW5zY2x1ZGU+PC9zcGFuPlxcclxcblxcdDxybC1idXN5IG5nLWhpZGU9XFxcImJ1dHRvbi5yaWdodEFsaWduZWRcXFwiIGxvYWRpbmc9XFxcImJ1dHRvbi5idXN5XFxcIj48L3JsLWJ1c3k+XFxyXFxuPC9idXR0b24+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvYnV0dG9uQXN5bmMvYnV0dG9uQXN5bmMuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmJ1dHRvbkxpbmsnO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxCdXR0b25MaW5rJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdCdXR0b25MaW5rQ29udHJvbGxlcic7XHJcbnZhciBCdXR0b25MaW5rQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCdXR0b25MaW5rQ29udHJvbGxlcigpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLnR5cGUgIT0gbnVsbCA/IHRoaXMudHlwZSA6ICdkZWZhdWx0JztcclxuICAgICAgICB0aGlzLmNvbmZpZ3VyZWRTaXplID0gdGhpcy5zaXplICE9IG51bGwgPyAnYnRuLScgKyB0aGlzLnNpemUgOiBudWxsO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5uZXdUYWIgPyAnX2JsYW5rJyA6ICdfc2VsZic7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQnV0dG9uTGlua0NvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQnV0dG9uTGlua0NvbnRyb2xsZXIgPSBCdXR0b25MaW5rQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gYnV0dG9uTGluaygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL2J1dHRvbkxpbmsuaHRtbCcpLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIGxpbms6ICdAJyxcclxuICAgICAgICAgICAgdHlwZTogJ0AnLFxyXG4gICAgICAgICAgICBuZ0Rpc2FibGVkOiAnPScsXHJcbiAgICAgICAgICAgIHNpemU6ICdAJyxcclxuICAgICAgICAgICAgbmV3VGFiOiAnPScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2J1dHRvbicsXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuYnV0dG9uTGluayA9IGJ1dHRvbkxpbms7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgYnV0dG9uTGluaylcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIEJ1dHRvbkxpbmtDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnV0dG9uTGluay5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvYnV0dG9uTGluay9idXR0b25MaW5rLmpzXG4gKiogbW9kdWxlIGlkID0gMzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8YSBjbGFzcz1cXFwiYnRuIGJ0bi17e2J1dHRvbi50eXBlfX0ge3tidXR0b24uY29uZmlndXJlZFNpemV9fVxcXCIgbmctaHJlZj1cXFwie3tidXR0b24ubGlua319XFxcIiBuZy1kaXNhYmxlZD1cXFwiYnV0dG9uLm5nRGlzYWJsZWRcXFwiIHRhcmdldD1cXFwie3tidXR0b24udGFyZ2V0fX1cXFwiPlxcclxcblxcdDxzcGFuIG5nLXRyYW5zY2x1ZGU+PC9zcGFuPlxcclxcbjwvYT5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9idXR0b25MaW5rL2J1dHRvbkxpbmsuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDM2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19ib29sZWFuID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLmJvb2xlYW47XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmJ1dHRvblRvZ2dsZSc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybEJ1dHRvblRvZ2dsZSc7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnQnV0dG9uVG9nZ2xlQ29udHJvbGxlcic7XHJcbnZhciBCdXR0b25Ub2dnbGVDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJ1dHRvblRvZ2dsZUNvbnRyb2xsZXIoJHNjb3BlLCBib29sKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICB0aGlzLmJ1dHRvbkNsYXNzID0gJHNjb3BlLnR5cGUgIT0gbnVsbCA/ICRzY29wZS50eXBlIDogJ2RlZmF1bHQnO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uU2l6ZSA9ICRzY29wZS5zaXplICE9IG51bGwgPyAnYnRuLScgKyAkc2NvcGUuc2l6ZSA6IG51bGw7XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnbmdNb2RlbC4kbW9kZWxWYWx1ZScsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5pc0FjdGl2ZSA9IGJvb2wudG9Cb29sKHZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgXy5pc0Z1bmN0aW9uKCRzY29wZS5vblRvZ2dsZSkpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5vblRvZ2dsZSh7IHZhbHVlOiB2YWx1ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgQnV0dG9uVG9nZ2xlQ29udHJvbGxlci5wcm90b3R5cGUuY2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLiRzY29wZS5uZ01vZGVsLiRzZXRWaWV3VmFsdWUoIXRoaXMuJHNjb3BlLm5nTW9kZWwuJHZpZXdWYWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgQnV0dG9uVG9nZ2xlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCBfX2Jvb2xlYW4uc2VydmljZU5hbWVdO1xyXG4gICAgcmV0dXJuIEJ1dHRvblRvZ2dsZUNvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIGJ1dHRvblRvZ2dsZSgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICByZXF1aXJlOiAnXm5nTW9kZWwnLFxyXG4gICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vYnV0dG9uVG9nZ2xlLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2J1dHRvblRvZ2dsZScsXHJcbiAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgdHlwZTogJ0AnLFxyXG4gICAgICAgICAgICBzaXplOiAnQCcsXHJcbiAgICAgICAgICAgIG9uVG9nZ2xlOiAnJicsXHJcbiAgICAgICAgICAgIGRpc2FibGVkOiAnPW5nRGlzYWJsZWQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG4gICAgICAgICAgICBzY29wZS5uZ01vZGVsID0gbmdNb2RlbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fYm9vbGVhbi5tb2R1bGVOYW1lXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBidXR0b25Ub2dnbGUpXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBCdXR0b25Ub2dnbGVDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnV0dG9uVG9nZ2xlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9idXR0b25Ub2dnbGUvYnV0dG9uVG9nZ2xlLmpzXG4gKiogbW9kdWxlIGlkID0gMzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4te3tidXR0b25Ub2dnbGUuYnV0dG9uQ2xhc3N9fSB7e2J1dHRvblRvZ2dsZS5idXR0b25TaXplfX1cXFwiIFxcclxcblxcdFxcdG5nLWNsYXNzPVxcXCJ7IGFjdGl2ZSA6IGJ1dHRvblRvZ2dsZS5pc0FjdGl2ZSB9XFxcIiBuZy1jbGljaz1cXFwiYnV0dG9uVG9nZ2xlLmNsaWNrZWQoKVxcXCIgbmctZGlzYWJsZWQ9XFxcImRpc2FibGVkXFxcIj5cXHJcXG5cXHQ8aSBuZy1zaG93PVxcXCJidXR0b25Ub2dnbGUuaXNBY3RpdmVcXFwiIGNsYXNzPVxcXCJmYSBmYS1jaGVjayBjb21wbGV0ZWRcXFwiPjwvaT4gPHNwYW4gbmctdHJhbnNjbHVkZT48L3NwYW4+XFxyXFxuPC9idXR0b24+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvYnV0dG9uVG9nZ2xlL2J1dHRvblRvZ2dsZS5odG1sXG4gKiogbW9kdWxlIGlkID0gMzhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG52YXIgX19hcnJheSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5hcnJheTtcclxudmFyIF9fcGFyZW50Q2hpbGQgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMucGFyZW50Q2hpbGRCZWhhdmlvcjtcclxudmFyIF9fZ2VuZXJpY1NlYXJjaEZpbHRlciA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5nZW5lcmljU2VhcmNoRmlsdGVyO1xyXG52YXIgY2FyZCA9IHJlcXVpcmUoJy4vY2FyZC9jYXJkJyk7XHJcbmV4cG9ydHMuY2FyZCA9IGNhcmQ7XHJcbnZhciBjYXJkU2VhcmNoID0gcmVxdWlyZSgnLi9jYXJkU2VhcmNoL2NhcmRTZWFyY2gnKTtcclxuZXhwb3J0cy5jYXJkU2VhcmNoID0gY2FyZFNlYXJjaDtcclxudmFyIGNvbHVtbkhlYWRlciA9IHJlcXVpcmUoJy4vY29sdW1uSGVhZGVyL2NvbHVtbkhlYWRlcicpO1xyXG5leHBvcnRzLmNvbHVtbkhlYWRlciA9IGNvbHVtbkhlYWRlcjtcclxudmFyIGRhdGFTb3VyY2VzID0gcmVxdWlyZSgnLi9kYXRhU291cmNlcy9kYXRhU291cmNlcy5tb2R1bGUnKTtcclxuZXhwb3J0cy5kYXRhU291cmNlcyA9IGRhdGFTb3VyY2VzO1xyXG52YXIgZmlsdGVycyA9IHJlcXVpcmUoJy4vZmlsdGVycy9maWx0ZXJzLm1vZHVsZScpO1xyXG5leHBvcnRzLmZpbHRlcnMgPSBmaWx0ZXJzO1xyXG52YXIgaXRlbUNvdW50ID0gcmVxdWlyZSgnLi9pdGVtQ291bnQvaXRlbUNvdW50Jyk7XHJcbmV4cG9ydHMuaXRlbUNvdW50ID0gaXRlbUNvdW50O1xyXG52YXIgcGFnZXIgPSByZXF1aXJlKCcuL3BhZ2VyL3BhZ2VyJyk7XHJcbmV4cG9ydHMucGFnZXIgPSBwYWdlcjtcclxudmFyIHBhZ2VTaXplID0gcmVxdWlyZSgnLi9wYWdlU2l6ZS9wYWdlU2l6ZScpO1xyXG5leHBvcnRzLnBhZ2VTaXplID0gcGFnZVNpemU7XHJcbnZhciBzZWxlY3Rpb25Db250cm9sID0gcmVxdWlyZSgnLi9zZWxlY3Rpb25Db250cm9sL3NlbGVjdGlvbkNvbnRyb2wnKTtcclxuZXhwb3J0cy5zZWxlY3Rpb25Db250cm9sID0gc2VsZWN0aW9uQ29udHJvbDtcclxudmFyIHNvcnRzID0gcmVxdWlyZSgnLi9zb3J0cy9zb3J0cy5tb2R1bGUnKTtcclxuZXhwb3J0cy5zb3J0cyA9IHNvcnRzO1xyXG52YXIgY2FyZENvbnRhaW5lcl8xID0gcmVxdWlyZSgnLi9jYXJkQ29udGFpbmVyJyk7XHJcbnZhciBidWlsZGVyID0gcmVxdWlyZSgnLi9jYXJkQ29udGFpbmVyQnVpbGRlci5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMuYnVpbGRlciA9IGJ1aWxkZXI7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vY2FyZENvbnRhaW5lcicpKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lcic7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW1xyXG4gICAgLy8gZGVwZW5kZW5jaWVzXHJcbiAgICBkYXRhU291cmNlcy5kYXRhUGFnZXIubW9kdWxlTmFtZSxcclxuICAgIF9fb2JqZWN0Lm1vZHVsZU5hbWUsXHJcbiAgICBfX2FycmF5Lm1vZHVsZU5hbWUsXHJcbiAgICBfX3BhcmVudENoaWxkLm1vZHVsZU5hbWUsXHJcbiAgICBfX2dlbmVyaWNTZWFyY2hGaWx0ZXIubW9kdWxlTmFtZSxcclxuICAgIC8vIGNvbXBvbmVudHNcclxuICAgIGNhcmQubW9kdWxlTmFtZSxcclxuICAgIGNhcmRTZWFyY2gubW9kdWxlTmFtZSxcclxuICAgIGNvbHVtbkhlYWRlci5tb2R1bGVOYW1lLFxyXG4gICAgaXRlbUNvdW50Lm1vZHVsZU5hbWUsXHJcbiAgICBwYWdlci5tb2R1bGVOYW1lLFxyXG4gICAgcGFnZVNpemUubW9kdWxlTmFtZSxcclxuICAgIHNlbGVjdGlvbkNvbnRyb2wubW9kdWxlTmFtZSxcclxuICAgIC8vIHN1Ym1vZHVsZXNcclxuICAgIGRhdGFTb3VyY2VzLm1vZHVsZU5hbWUsXHJcbiAgICBmaWx0ZXJzLm1vZHVsZU5hbWUsXHJcbiAgICBzb3J0cy5tb2R1bGVOYW1lLFxyXG5dKVxyXG4gICAgLmRpcmVjdGl2ZShjYXJkQ29udGFpbmVyXzEuZGlyZWN0aXZlTmFtZSwgY2FyZENvbnRhaW5lcl8xLmNhcmRDb250YWluZXIpXHJcbiAgICAuY29udHJvbGxlcihjYXJkQ29udGFpbmVyXzEuY29udHJvbGxlck5hbWUsIGNhcmRDb250YWluZXJfMS5DYXJkQ29udGFpbmVyQ29udHJvbGxlcilcclxuICAgIC5mYWN0b3J5KGJ1aWxkZXIuZmFjdG9yeU5hbWUsIGJ1aWxkZXIuY2FyZENvbnRhaW5lckJ1aWxkZXJGYWN0b3J5KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FyZENvbnRhaW5lci5tb2R1bGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZENvbnRhaW5lci5tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSAzOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vLi4vdHlwaW5ncy9qcXVlcnkvanF1ZXJ5LmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX3BhcmVudENoaWxkID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLnBhcmVudENoaWxkQmVoYXZpb3I7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBoZWFkZXJDb2x1bW5fbW9kdWxlXzEgPSByZXF1aXJlKCcuL2hlYWRlckNvbHVtbi9oZWFkZXJDb2x1bW4ubW9kdWxlJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuY2FyZCc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybENhcmQnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ0NhcmRDb250cm9sbGVyJztcclxudmFyIENhcmRDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENhcmRDb250cm9sbGVyKCRzY29wZSwgJGNvbnRyb2xsZXIsICRxLCBwYXJlbnRDaGlsZCwgb2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICB0aGlzLiRxID0gJHE7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDaGlsZCA9IHBhcmVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuc2hvd0NvbnRlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5hdXRvc2F2ZUxpbmsgPSB7fTtcclxuICAgICAgICB0aGlzLmF1dG9zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuc2hvd0NvbnRlbnQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucGFyZW50Q2hpbGQudHJpZ2dlckNoaWxkQmVoYXZpb3IoX3RoaXMuYXV0b3NhdmVMaW5rLCBmdW5jdGlvbiAoYmVoYXZpb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChiZWhhdmlvci5hdXRvc2F2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2hvd0NvbnRlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodGhpcy5jYXJkQXMpIHtcclxuICAgICAgICAgICAgJHNjb3BlW3RoaXMuY2FyZEFzXSA9IHRoaXMuaXRlbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmNvbGxhcHNlID0gdGhpcy5hdXRvc2F2ZTtcclxuICAgICAgICAkc2NvcGUuc2V0U2VsZWN0ZWQgPSB0aGlzLnNldFNlbGVjdGVkLmJpbmQodGhpcyk7XHJcbiAgICAgICAgJHNjb3BlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNvdXJjZS5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdjYXJkLnJlZnJlc2gnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNvdXJjZS5yZW1vdmUoX3RoaXMuaXRlbSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY29udGFpbmVyRGF0YSA9IHRoaXMuY29udGFpbmVyRGF0YTtcclxuICAgICAgICBpZiAob2JqZWN0LmlzTnVsbE9yV2hpdGVzcGFjZSh0aGlzLmNhcmRDb250cm9sbGVyKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSAkY29udHJvbGxlcih0aGlzLmNhcmRDb250cm9sbGVyLCB7ICRzY29wZTogJHNjb3BlIH0pO1xyXG4gICAgICAgICAgICBpZiAob2JqZWN0LmlzTnVsbE9yV2hpdGVzcGFjZSh0aGlzLmNhcmRDb250cm9sbGVyQXMpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlW3RoaXMuY2FyZENvbnRyb2xsZXJBc10gPSBjb250cm9sbGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhcmVudENoaWxkLnJlZ2lzdGVyQ2hpbGRCZWhhdmlvcih0aGlzLml0ZW0sIHtcclxuICAgICAgICAgICAgY2xvc2U6IHRoaXMuYXV0b3NhdmUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHNjb3BlLl9faW5pdENvbnRlbnRzID0gZnVuY3Rpb24gKGhhc0JvZHksIGhhc0Zvb3Rlcikge1xyXG4gICAgICAgICAgICBfdGhpcy5oYXNCb2R5ID0gaGFzQm9keTtcclxuICAgICAgICAgICAgX3RoaXMuaGFzRm9vdGVyID0gaGFzRm9vdGVyO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBDYXJkQ29udHJvbGxlci5wcm90b3R5cGUudG9nZ2xlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2hvd0NvbnRlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9zYXZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENhcmRDb250cm9sbGVyLnByb3RvdHlwZS52YWxpZGF0ZUNhcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGJlaGF2aW9yID0gdGhpcy5wYXJlbnRDaGlsZC5nZXRDaGlsZEJlaGF2aW9yKHRoaXMuaXRlbSk7XHJcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihiZWhhdmlvci52YWxpZGF0ZUNhcmQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiZWhhdmlvci52YWxpZGF0ZUNhcmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDYXJkQ29udHJvbGxlci5wcm90b3R5cGUuc2F2ZUNhcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGJlaGF2aW9yID0gdGhpcy5wYXJlbnRDaGlsZC5nZXRDaGlsZEJlaGF2aW9yKHRoaXMuaXRlbSk7XHJcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihiZWhhdmlvci5zYXZlQ2FyZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJlaGF2aW9yLnNhdmVDYXJkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcS53aGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENhcmRDb250cm9sbGVyLnByb3RvdHlwZS5jbGlja0NhcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDaGlsZC50cmlnZ2VyQ2hpbGRCZWhhdmlvcih0aGlzLml0ZW0sIGZ1bmN0aW9uIChiZWhhdmlvcikge1xyXG4gICAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGJlaGF2aW9yLmNsaWNrQ2FyZCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBiZWhhdmlvci5jbGlja0NhcmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIENhcmRDb250cm9sbGVyLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGFyZW50Q2hpbGQudHJpZ2dlckNoaWxkQmVoYXZpb3IodGhpcy5pdGVtLCBmdW5jdGlvbiAoYmVoYXZpb3IpIHtcclxuICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihiZWhhdmlvci5pbml0Q2FyZCkpIHtcclxuICAgICAgICAgICAgICAgIGJlaGF2aW9yLmluaXRDYXJkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy4kc2NvcGUuX19ybENhcmRDb250YWluZXIub3BlbkNhcmQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dDb250ZW50ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRyb2xsZXIucHJvdG90eXBlLnNldFNlbGVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQodGhpcy5pdGVtLnZpZXdEYXRhKSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW0udmlld0RhdGEgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pdGVtLnZpZXdEYXRhLnNlbGVjdGVkID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2VkKCk7XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRjb250cm9sbGVyJywgJyRxJywgX19wYXJlbnRDaGlsZC5zZXJ2aWNlTmFtZSwgX19vYmplY3Quc2VydmljZU5hbWVdO1xyXG4gICAgcmV0dXJuIENhcmRDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkNhcmRDb250cm9sbGVyID0gQ2FyZENvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIGNhcmQoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vY2FyZC5odG1sJyksXHJcbiAgICAgICAgcmVxdWlyZTogJ15ecmxDYXJkQ29udGFpbmVyJyxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ19fY2FyZCcsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgY29sdW1uczogJz0nLFxyXG4gICAgICAgICAgICBpdGVtOiAnPScsXHJcbiAgICAgICAgICAgIGNsaWNrYWJsZTogJz0nLFxyXG4gICAgICAgICAgICBzb3VyY2U6ICc9JyxcclxuICAgICAgICAgICAgY29udGFpbmVyRGF0YTogJz0nLFxyXG4gICAgICAgICAgICBjYXJkQ29udHJvbGxlcjogJz0nLFxyXG4gICAgICAgICAgICBjYXJkQ29udHJvbGxlckFzOiAnPScsXHJcbiAgICAgICAgICAgIGNhcmRBczogJz0nLFxyXG4gICAgICAgICAgICBwZXJtYW5lbnRGb290ZXI6ICc9JyxcclxuICAgICAgICAgICAgc2VsZWN0YWJsZTogJz0nLFxyXG4gICAgICAgICAgICBzZWxlY3Rpb25DaGFuZ2VkOiAnJicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBybENhcmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgc2NvcGUuX19ybENhcmRDb250YWluZXIgPSBybENhcmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIHJsQ2FyZENvbnRhaW5lci5tYWtlQ2FyZChzY29wZSwgZnVuY3Rpb24gKGNsb25lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IGNsb25lLmZpbHRlcigncmwtY2FyZC1jb250ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm9vdGVyID0gY2xvbmUuZmlsdGVyKCdybC1jYXJkLWZvb3RlcicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRBcmVhID0gZWxlbWVudC5maW5kKCcuY29udGVudC10ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgY29udGVudEFyZWEuYXBwZW5kKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhc0JvZHkgPSBjb250ZW50Lmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGFzRm9vdGVyID0gKGZvb3Rlci5sZW5ndGggPiAwKTtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNGb290ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9vdGVyQXJlYSA9IGVsZW1lbnQuZmluZCgnLmZvb3Rlci10ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlckFyZWEuYXBwZW5kKGZvb3Rlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzY29wZS5fX2luaXRDb250ZW50cyhoYXNCb2R5LCBoYXNGb290ZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLmNhcmQgPSBjYXJkO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtcclxuICAgIF9fcGFyZW50Q2hpbGQubW9kdWxlTmFtZSxcclxuICAgIF9fb2JqZWN0Lm1vZHVsZU5hbWUsXHJcbiAgICBoZWFkZXJDb2x1bW5fbW9kdWxlXzEubW9kdWxlTmFtZSxcclxuXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBjYXJkKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgQ2FyZENvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXJkLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2NhcmQvY2FyZC5qc1xuICoqIG1vZHVsZSBpZCA9IDQwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgaGVhZGVyQ29sdW1uXzEgPSByZXF1aXJlKCcuL2hlYWRlckNvbHVtbicpO1xyXG52YXIgc2l6ZUZvckJyZWFrcG9pbnRzXzEgPSByZXF1aXJlKCcuL3NpemVGb3JCcmVha3BvaW50cycpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5jYXJkQ29udGFpbmVyLmNhcmQuaGVhZGVyQ29sdW1uJztcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXHJcbiAgICB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuc3RyaW5nLm1vZHVsZU5hbWUsXHJcbl0pXHJcbiAgICAuZGlyZWN0aXZlKHNpemVGb3JCcmVha3BvaW50c18xLnNpemVGb3JCcmVha3BvaW50c05hbWUsIHNpemVGb3JCcmVha3BvaW50c18xLnNpemVGb3JCcmVha3BvaW50cylcclxuICAgIC5kaXJlY3RpdmUoaGVhZGVyQ29sdW1uXzEuZGlyZWN0aXZlTmFtZSwgaGVhZGVyQ29sdW1uXzEuaGVhZGVyQ29sdW1uKVxyXG4gICAgLmNvbnRyb2xsZXIoaGVhZGVyQ29sdW1uXzEuY29udHJvbGxlck5hbWUsIGhlYWRlckNvbHVtbl8xLkhlYWRlckNvbHVtbkNvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFkZXJDb2x1bW4ubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2NhcmQvaGVhZGVyQ29sdW1uL2hlYWRlckNvbHVtbi5tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSA0MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vLi4vLi4vdHlwaW5ncy9qcXVlcnkvanF1ZXJ5LmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsQ2FyZEhlYWRlckNvbHVtbic7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnQ2FyZEhlYWRlckNvbHVtbkNvbnRyb2xsZXInO1xyXG52YXIgSGVhZGVyQ29sdW1uQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIZWFkZXJDb2x1bW5Db250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnZhbHVlID0gX3RoaXMuY29sdW1uLmdldFZhbHVlKF90aGlzLml0ZW0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAkc2NvcGUuJG9uKCdjYXJkLnJlZnJlc2gnLCB0aGlzLnVwZGF0ZSk7IC8vKmV2ZW50P1xyXG4gICAgfVxyXG4gICAgSGVhZGVyQ29sdW1uQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuICAgIHJldHVybiBIZWFkZXJDb2x1bW5Db250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkhlYWRlckNvbHVtbkNvbnRyb2xsZXIgPSBIZWFkZXJDb2x1bW5Db250cm9sbGVyO1xyXG5oZWFkZXJDb2x1bW4uJGluamVjdCA9IFsnJGNvbXBpbGUnXTtcclxuZnVuY3Rpb24gaGVhZGVyQ29sdW1uKCRjb21waWxlKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiXFxuXFx0XFx0XFx0PGRpdiBybC1zaXplLWZvci1icmVha3BvaW50cz1cXFwiaGVhZGVyLmNvbHVtbi5zaXplXFxcIiB0aXRsZT1cXFwie3s6OmhlYWRlci5jb2x1bW4uZGVzY3JpcHRpb259fVxcXCI+XFxuXFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwidGVtcGxhdGUtY29udGFpbmVyXFxcIj48L2Rpdj5cXG5cXHRcXHRcXHQ8L2Rpdj5cXG5cXHRcXHRcIixcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2hlYWRlcicsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgY29sdW1uOiAnPScsXHJcbiAgICAgICAgICAgIGl0ZW06ICc9JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHByZTogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbiA9IGhlYWRlci5jb2x1bW47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbi50ZW1wbGF0ZVVybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5yZW5kZXJlZFRlbXBsYXRlID0gJGNvbXBpbGUoJzxkaXYgbmctaW5jbHVkZT1cIlxcJycgKyBjb2x1bW4udGVtcGxhdGVVcmwgKyAnXFwnXCI+PC9kaXY+Jykoc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjb2x1bW4udGVtcGxhdGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIucmVuZGVyZWRUZW1wbGF0ZSA9ICRjb21waWxlKGNvbHVtbi50ZW1wbGF0ZSkoc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLnJlbmRlcmVkVGVtcGxhdGUgPSAkY29tcGlsZSgnPHNwYW4+e3toZWFkZXIudmFsdWV9fTwvc3Bhbj4nKShzY29wZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBvc3Q6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50LmZpbmQoJy50ZW1wbGF0ZS1jb250YWluZXInKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKGhlYWRlci5yZW5kZXJlZFRlbXBsYXRlKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5oZWFkZXJDb2x1bW4gPSBoZWFkZXJDb2x1bW47XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYWRlckNvbHVtbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9jYXJkL2hlYWRlckNvbHVtbi9oZWFkZXJDb2x1bW4uanNcbiAqKiBtb2R1bGUgaWQgPSA0MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19zdHJpbmcgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuc3RyaW5nO1xyXG52YXIgYnJlYWtwb2ludF8xID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vc2VydmljZXMvYnJlYWtwb2ludHMvYnJlYWtwb2ludCcpO1xyXG5leHBvcnRzLnNpemVGb3JCcmVha3BvaW50c05hbWUgPSAncmxTaXplRm9yQnJlYWtwb2ludHMnO1xyXG5zaXplRm9yQnJlYWtwb2ludHMuJGluamVjdCA9IFsnJHBhcnNlJywgX19zdHJpbmcuc2VydmljZU5hbWVdO1xyXG5mdW5jdGlvbiBzaXplRm9yQnJlYWtwb2ludHMoJHBhcnNlLCBzdHJpbmdVdGlsaXR5KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgbGluazogbGlua0RpcmVjdGl2ZSxcclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBsaW5rRGlyZWN0aXZlKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgdmFyIHNpemVzID0gJHBhcnNlKGF0dHJpYnV0ZXMucmxTaXplRm9yQnJlYWtwb2ludHMpKHNjb3BlKTtcclxuICAgICAgICB2YXIgY2xhc3NlcyA9IFtdO1xyXG4gICAgICAgIGNsYXNzZXMucHVzaChnZXRDb2x1bW5DbGFzcyhzaXplcywgYnJlYWtwb2ludF8xLnhzKSk7XHJcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGdldENvbHVtbkNsYXNzKHNpemVzLCBicmVha3BvaW50XzEuc20pKTtcclxuICAgICAgICBjbGFzc2VzLnB1c2goZ2V0Q29sdW1uQ2xhc3Moc2l6ZXMsIGJyZWFrcG9pbnRfMS5tZCkpO1xyXG4gICAgICAgIGNsYXNzZXMucHVzaChnZXRDb2x1bW5DbGFzcyhzaXplcywgYnJlYWtwb2ludF8xLmxnKSk7XHJcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhjbGFzc2VzLmpvaW4oJyAnKSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZXRDb2x1bW5DbGFzcyhjb2x1bW5TaXplcywgYnJlYWtwb2ludCkge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGNvbHVtblNpemVzW2JyZWFrcG9pbnRdO1xyXG4gICAgICAgIGlmICh2YWx1ZSA+IDAgJiYgdmFsdWUgIT09ICdoaWRkZW4nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdVdGlsaXR5LnN1YnN0aXR1dGUoJ2NvbC17MH0tezF9JywgYnJlYWtwb2ludCwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICdoaWRkZW4tJyArIGJyZWFrcG9pbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc2l6ZUZvckJyZWFrcG9pbnRzID0gc2l6ZUZvckJyZWFrcG9pbnRzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaXplRm9yQnJlYWtwb2ludHMuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZC9oZWFkZXJDb2x1bW4vc2l6ZUZvckJyZWFrcG9pbnRzLmpzXG4gKiogbW9kdWxlIGlkID0gNDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxuZXhwb3J0cy5sZyA9ICdsZyc7XHJcbmV4cG9ydHMubWQgPSAnbWQnO1xyXG5leHBvcnRzLnNtID0gJ3NtJztcclxuZXhwb3J0cy54cyA9ICd4cyc7XHJcbmV4cG9ydHMuYWxsID0gW2V4cG9ydHMueHMsIGV4cG9ydHMuc20sIGV4cG9ydHMubWQsIGV4cG9ydHMubGddO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmVha3BvaW50LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvYnJlYWtwb2ludHMvYnJlYWtwb2ludC5qc1xuICoqIG1vZHVsZSBpZCA9IDQ0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHJsLWdlbmVyaWMtY29udGFpbmVyIHNlbGVjdG9yPVxcXCJfX2NhcmQuc2VsZWN0YWJsZVxcXCI+XFxyXFxuXFx0PHRlbXBsYXRlIHdoZW4tc2VsZWN0b3I9XFxcImZhbHNlXFxcIiBkZWZhdWx0PlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcImNhcmRcXFwiIG5nLWNsYXNzPVxcXCJ7ICdzZWxlY3RlZCc6IF9fY2FyZC5pdGVtLnZpZXdEYXRhLnNlbGVjdGVkIH1cXFwiPlxcclxcblxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImhlYWRlclxcXCIgbmctY2xpY2s9XFxcIl9fY2FyZC50b2dnbGVDb250ZW50KClcXFwiIG5nLWNsYXNzPVxcXCJ7ICdhY3RpdmUnOiBfX2NhcmQuaGFzQm9keSB8fCAhX19jYXJkLnBlcm1hbmVudEZvb3RlciB9XFxcIj5cXHJcXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdDxkaXYgbmctcmVwZWF0PVxcXCJjb2x1bW4gaW4gX19jYXJkLmNvbHVtbnNcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdDxybC1jYXJkLWhlYWRlci1jb2x1bW4gY29sdW1uPVxcXCJjb2x1bW5cXFwiIGl0ZW09XFxcIl9fY2FyZC5pdGVtXFxcIj48L3JsLWNhcmQtaGVhZGVyLWNvbHVtbj5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHJcXG5cXHRcXHRcXHQ8ZGl2IG5nLXNob3c9XFxcIl9fY2FyZC5zaG93Q29udGVudFxcXCI+XFxyXFxuXFx0XFx0XFx0XFx0PG5nLWZvcm0gcmwtYXV0b3NhdmU9XFxcIl9fY2FyZC5hdXRvc2F2ZUxpbmtcXFwiIHNhdmU9XFxcIl9fY2FyZC5zYXZlQ2FyZCgpXFxcIiB2YWxpZGF0ZT1cXFwiX19jYXJkLnZhbGlkYXRlQ2FyZCgpXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJib2R5XFxcIiBuZy1jbGFzcz1cXFwieyAnYWN0aXZlJzogX19jYXJkLmNsaWNrYWJsZSB9XFxcIiBuZy1jbGljaz1cXFwiX19jYXJkLmNsaWNrQ2FyZCgpXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJjb250ZW50LXRlbXBsYXRlXFxcIj48L2Rpdj5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0PC9uZy1mb3JtPlxcclxcblxcdFxcdFxcdDwvZGl2PlxcclxcblxcdFxcdFxcdDxkaXYgbmctc2hvdz1cXFwiX19jYXJkLmhhc0Zvb3RlciAmJiAoX19jYXJkLnNob3dDb250ZW50IHx8IF9fY2FyZC5wZXJtYW5lbnRGb290ZXIpXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJmb290ZXJcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImZvb3Rlci10ZW1wbGF0ZVxcXCI+PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcblxcdFxcdFxcdFxcdDwvZGl2PlxcclxcblxcdFxcdFxcdDwvZGl2PlxcclxcblxcdFxcdDwvZGl2PlxcclxcblxcdDwvdGVtcGxhdGU+XFxyXFxuXFx0PHRlbXBsYXRlIHdoZW4tc2VsZWN0b3I9XFxcInRydWVcXFwiPlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcInNlbGVjdC1ncm91cFxcXCI+XFxyXFxuXFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwic2VsZWN0LWNvbHVtblxcXCI+XFxyXFxuXFx0XFx0XFx0XFx0PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBjbGFzcz1cXFwic3RhbmQtYWxvbmUtY2hlY2tib3hcXFwiIG5nLW1vZGVsPVxcXCJfX2NhcmQuaXRlbS52aWV3RGF0YS5zZWxlY3RlZFxcXCIgbmctY2hhbmdlPVxcXCJfX2NhcmQuc2VsZWN0aW9uQ2hhbmdlZCgpXFxcIlxcclxcblxcdFxcdFxcdFxcdFxcdCAgIG5nLWRpc2FibGVkPVxcXCJfX2NhcmQuaXRlbS52aWV3RGF0YS5kaXNhYmxlZFNlbGVjdGlvblxcXCIgdGl0bGU9XFxcInt7X19jYXJkLml0ZW0udmlld0RhdGEuc2VsZWN0aW9uVGl0bGV9fVxcXCIgLz5cXHJcXG5cXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJzZWxlY3QtY29udGVudFxcXCI+XFxyXFxuXFxyXFxuXFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiY2FyZCBzZWxlY3RhYmxlXFxcIiBuZy1jbGFzcz1cXFwieyAnc2VsZWN0ZWQnOiBfX2NhcmQuaXRlbS52aWV3RGF0YS5zZWxlY3RlZCB9XFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJoZWFkZXIgYWN0aXZlXFxcIiBuZy1jbGljaz1cXFwiX19jYXJkLnRvZ2dsZUNvbnRlbnQoKVxcXCI+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHQ8ZGl2IG5nLXJlcGVhdD1cXFwiY29sdW1uIGluIF9fY2FyZC5jb2x1bW5zXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8cmwtY2FyZC1oZWFkZXItY29sdW1uIGNvbHVtbj1cXFwiY29sdW1uXFxcIiBpdGVtPVxcXCJfX2NhcmQuaXRlbVxcXCI+PC9ybC1jYXJkLWhlYWRlci1jb2x1bW4+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFxyXFxuXFx0XFx0XFx0XFx0XFx0PGRpdiBuZy1zaG93PVxcXCJfX2NhcmQuc2hvd0NvbnRlbnRcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdDxuZy1mb3JtIHJsLWF1dG9zYXZlPVxcXCJfX2NhcmQuYXV0b3NhdmVMaW5rXFxcIiBzYXZlPVxcXCJfX2NhcmQuc2F2ZUNhcmQoKVxcXCIgdmFsaWRhdGU9XFxcIl9fY2FyZC52YWxpZGF0ZUNhcmQoKVxcXCI+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiYm9keVxcXCIgbmctY2xhc3M9XFxcInsgJ2FjdGl2ZSc6IF9fY2FyZC5jbGlja2FibGUgfVxcXCIgbmctY2xpY2s9XFxcIl9fY2FyZC5jbGlja0NhcmQoKVxcXCI+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiY29udGVudC10ZW1wbGF0ZVxcXCI+PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdDwvZGl2PlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdDwvbmctZm9ybT5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8ZGl2IG5nLXNob3c9XFxcIl9fY2FyZC5oYXNGb290ZXIgJiYgKF9fY2FyZC5zaG93Q29udGVudCB8fCBfX2NhcmQucGVybWFuZW50Rm9vdGVyKVxcXCI+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiZm9vdGVyXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJmb290ZXItdGVtcGxhdGVcXFwiPjwvZGl2PlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHQ8L2Rpdj5cXHJcXG5cXHQ8L3RlbXBsYXRlPlxcclxcbjwvcmwtZ2VuZXJpYy1jb250YWluZXI+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9jYXJkL2NhcmQuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDQ1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5jYXJkQ29udGFpbmVyLmNhcmRTZWFyY2gnO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxDYXJkU2VhcmNoJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdDYXJkU2VhcmNoQ29udHJvbGxlcic7XHJcbmV4cG9ydHMuZGVmYXVsdFNlYXJjaFBsYWNlaG9sZGVyID0gJ1NlYXJjaCc7XHJcbmV4cG9ydHMuZGVmYXVsdFNlYXJjaERlbGF5ID0gMTAwMDtcclxudmFyIENhcmRTZWFyY2hDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENhcmRTZWFyY2hDb250cm9sbGVyKCRzY29wZSwgJHRpbWVvdXQpIHtcclxuICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XHJcbiAgICAgICAgdGhpcy5zZWFyY2hMZW5ndGhFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaGFzU2VhcmNoRmlsdGVyID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIENhcmRTZWFyY2hDb250cm9sbGVyLnByb3RvdHlwZS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FyZENvbnRhaW5lciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5taW5TZWFyY2hFcnJvciA9ICdZb3UgbXVzdCBlbnRlciBhdCBsZWFzdCB7e2NhcmRTZWFyY2gubWluU2VhcmNoTGVuZ3RofX0gY2hhcmFjdGVycyB0byBwZXJmb3JtIGEgc2VhcmNoJztcclxuICAgICAgICBpZiAodGhpcy5zZWFyY2hGaWx0ZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gdGhpcy5jYXJkQ29udGFpbmVyLnNlYXJjaEZpbHRlcjtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hGaWx0ZXIgPSBmaWx0ZXI7XHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNTZWFyY2hGaWx0ZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5oYXNTZWFyY2hGaWx0ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hQbGFjZWhvbGRlciA9IGV4cG9ydHMuZGVmYXVsdFNlYXJjaFBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICB2YXIgZGF0YVNvdXJjZSA9IHRoaXMuY2FyZENvbnRhaW5lci5kYXRhU291cmNlO1xyXG4gICAgICAgICAgICB2YXIgZGVsYXkgPSB0aGlzLmRlbGF5ICE9IG51bGxcclxuICAgICAgICAgICAgICAgID8gdGhpcy5kZWxheVxyXG4gICAgICAgICAgICAgICAgOiBleHBvcnRzLmRlZmF1bHRTZWFyY2hEZWxheTtcclxuICAgICAgICAgICAgdmFyIHRpbWVyO1xyXG4gICAgICAgICAgICB0aGlzLiRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VhcmNoVGV4dDsgfSwgZnVuY3Rpb24gKHNlYXJjaCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2VhcmNoRmlsdGVyLnNlYXJjaFRleHQgPSBzZWFyY2g7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5taW5TZWFyY2hMZW5ndGggPSBfdGhpcy5zZWFyY2hGaWx0ZXIubWluU2VhcmNoTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVTZWFyY2hMZW5ndGgoc2VhcmNoLCBfdGhpcy5taW5TZWFyY2hMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kdGltZW91dC5jYW5jZWwodGltZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGltZXIgPSBfdGhpcy4kdGltZW91dChkYXRhU291cmNlLnJlZnJlc2guYmluZChkYXRhU291cmNlKSwgZGVsYXkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy4kc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zZWFyY2hGaWx0ZXIuc2VhcmNoVGV4dDtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2VhcmNoVGV4dCA9IF90aGlzLnNlYXJjaEZpbHRlci5zZWFyY2hUZXh0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2FyZFNlYXJjaENvbnRyb2xsZXIucHJvdG90eXBlLnZhbGlkYXRlU2VhcmNoTGVuZ3RoID0gZnVuY3Rpb24gKHNlYXJjaCwgbWluTGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gc2hvdyBlcnJvciBpZiBzZWFyY2ggc3RyaW5nIGV4aXN0cyBidXQgaXMgYmVsb3cgbWluaW11bSBzaXplXHJcbiAgICAgICAgdGhpcy5zZWFyY2hMZW5ndGhFcnJvciA9IHNlYXJjaCAhPSBudWxsXHJcbiAgICAgICAgICAgICYmIHNlYXJjaC5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICYmIHNlYXJjaC5sZW5ndGggPCBtaW5MZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgQ2FyZFNlYXJjaENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyR0aW1lb3V0J107XHJcbiAgICByZXR1cm4gQ2FyZFNlYXJjaENvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQ2FyZFNlYXJjaENvbnRyb2xsZXIgPSBDYXJkU2VhcmNoQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gY2FyZFNlYXJjaCgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICByZXF1aXJlOiB7IGNhcmRDb250YWluZXI6ICdeXnJsQ2FyZENvbnRhaW5lcicgfSxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9jYXJkU2VhcmNoLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2NhcmRTZWFyY2gnLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIGRlbGF5OiAnPXNlYXJjaERlbGF5JyxcclxuICAgICAgICAgICAgc2VhcmNoRmlsdGVyOiAnPT8nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuY2FyZFNlYXJjaCA9IGNhcmRTZWFyY2g7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgY2FyZFNlYXJjaClcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIENhcmRTZWFyY2hDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FyZFNlYXJjaC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9jYXJkU2VhcmNoL2NhcmRTZWFyY2guanNcbiAqKiBtb2R1bGUgaWQgPSA0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIiBuZy1zaG93PVxcXCJjYXJkU2VhcmNoLmhhc1NlYXJjaEZpbHRlclxcXCIgbmctY2xhc3M9XFxcInsgJ2hhcy1lcnJvcic6IGNhcmRTZWFyY2guc2VhcmNoTGVuZ3RoRXJyb3IgfVxcXCI+XFxyXFxuXFx0PGlucHV0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIHR5cGU9XFxcInRleHRcXFwiIHBsYWNlaG9sZGVyPVxcXCJ7e2NhcmRTZWFyY2guc2VhcmNoUGxhY2Vob2xkZXJ9fVxcXCIgbmctbW9kZWw9XFxcImNhcmRTZWFyY2guc2VhcmNoVGV4dFxcXCJcXHJcXG5cXHRcXHQgICBybC1wb3BvdmVyPVxcXCJjYXJkU2VhcmNoLm1pblNlYXJjaEVycm9yXFxcIiBwb3BvdmVyLXRyaWdnZXI9XFxcIm1vdXNlZW50ZXJcXFwiIHBvcG92ZXItZW5hYmxlPVxcXCJjYXJkU2VhcmNoLnNlYXJjaExlbmd0aEVycm9yXFxcIiAvPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwLWJ0blxcXCI+XFxyXFxuXFx0XFx0PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWRpc2FibGVkPVxcXCJjYXJkU2VhcmNoLnNlYXJjaFRleHQgfCBpc0VtcHR5XFxcIiBuZy1jbGljaz1cXFwiY2FyZFNlYXJjaC5zZWFyY2hUZXh0ID0gbnVsbFxcXCI+XFxyXFxuXFx0XFx0XFx0PGkgY2xhc3M9XFxcImZhIGZhLXRpbWVzXFxcIj48L2k+XFxyXFxuXFx0XFx0PC9idXR0b24+XFxyXFxuXFx0PC9kaXY+XFxyXFxuPC9kaXY+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9jYXJkU2VhcmNoL2NhcmRTZWFyY2guaHRtbFxuICoqIG1vZHVsZSBpZCA9IDQ3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi8uLi90eXBpbmdzL2pxdWVyeS9qcXVlcnkuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHNvcnREaXJlY3Rpb25fMSA9IHJlcXVpcmUoJy4uL3NvcnRzL3NvcnREaXJlY3Rpb24nKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5jb2x1bW5IZWFkZXInO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxDb2x1bW5IZWFkZXInO1xyXG5jYXJkQ29sdW1uSGVhZGVyLiRpbmplY3QgPSBbJyRjb21waWxlJ107XHJcbmZ1bmN0aW9uIGNhcmRDb2x1bW5IZWFkZXIoJGNvbXBpbGUpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0ZW1wbGF0ZTogXCJcXG5cXHRcXHRcXHQ8ZGl2IHJsLXNpemUtZm9yLWJyZWFrcG9pbnRzPVxcXCJjb2x1bW4uc2l6ZVxcXCIgbmctY2xpY2s9XFxcInNvcnQoKVxcXCIgdGl0bGU9XFxcInt7Ojpjb2x1bW4uZGVzY3JpcHRpb259fVxcXCJcXG5cXHRcXHRcXHRcXHRcXHRjbGFzcz1cXFwiY29sdW1uLWhlYWRlclxcXCI+XFxuXFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwidGVtcGxhdGUtY29udGFpbmVyXFxcIj48L2Rpdj5cXG5cXHRcXHRcXHRcXHQ8aSBuZy1zaG93PVxcXCJzb3J0aW5nID09PSBzb3J0RGlyZWN0aW9uLmFzY2VuZGluZ1xcXCIgY2xhc3M9XFxcImZhIGZhLXNvcnQtYXNjXFxcIj48L2k+XFxuXFx0XFx0XFx0XFx0PGkgbmctc2hvdz1cXFwic29ydGluZyA9PT0gc29ydERpcmVjdGlvbi5kZXNjZW5kaW5nXFxcIiBjbGFzcz1cXFwiZmEgZmEtc29ydC1kZXNjXFxcIj48L2k+XFxuXFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XCIsXHJcbiAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgY29sdW1uOiAnPScsXHJcbiAgICAgICAgICAgIHNvcnRpbmc6ICc9JyxcclxuICAgICAgICAgICAgc29ydDogJyYnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcHJlOiBmdW5jdGlvbiAoc2NvcGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uID0gc2NvcGUuY29sdW1uO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uaGVhZGVyVGVtcGxhdGVVcmwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5yZW5kZXJlZFRlbXBsYXRlID0gJGNvbXBpbGUoJzxkaXYgbmctaW5jbHVkZT1cIlxcJycgKyBjb2x1bW4uaGVhZGVyVGVtcGxhdGVVcmwgKyAnXFwnXCI+PC9kaXY+Jykoc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjb2x1bW4uaGVhZGVyVGVtcGxhdGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5yZW5kZXJlZFRlbXBsYXRlID0gJGNvbXBpbGUoY29sdW1uLmhlYWRlclRlbXBsYXRlKShzY29wZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5yZW5kZXJlZFRlbXBsYXRlID0gKCc8aDU+JyArIGNvbHVtbi5sYWJlbCArICc8L2g1Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBvc3Q6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5jb2x1bW4uZGlzcGxheUNvbHVtbkhlYWRlciAhPSBudWxsICYmIHNjb3BlLmNvbHVtbi5kaXNwbGF5Q29sdW1uSGVhZGVyID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50LmZpbmQoJy50ZW1wbGF0ZS1jb250YWluZXInKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKHNjb3BlLnJlbmRlcmVkVGVtcGxhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnNvcnREaXJlY3Rpb24gPSBzb3J0RGlyZWN0aW9uXzEuU29ydERpcmVjdGlvbjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLmNhcmRDb2x1bW5IZWFkZXIgPSBjYXJkQ29sdW1uSGVhZGVyO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGNhcmRDb2x1bW5IZWFkZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2x1bW5IZWFkZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY29sdW1uSGVhZGVyL2NvbHVtbkhlYWRlci5qc1xuICoqIG1vZHVsZSBpZCA9IDQ4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBTb3J0RGlyZWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNvcnREaXJlY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBTb3J0RGlyZWN0aW9uLnRvZ2dsZSA9IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBTb3J0RGlyZWN0aW9uLmFzY2VuZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gU29ydERpcmVjdGlvbi5kZXNjZW5kaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFNvcnREaXJlY3Rpb24uZGVzY2VuZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gU29ydERpcmVjdGlvbi5ub25lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNvcnREaXJlY3Rpb24uYXNjZW5kaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTb3J0RGlyZWN0aW9uLmdldEZ1bGxOYW1lID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xyXG4gICAgICAgICd1c2Ugc3RyaWN0JztcclxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBTb3J0RGlyZWN0aW9uLmFzY2VuZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2FzY2VuZGluZyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gU29ydERpcmVjdGlvbi5kZXNjZW5kaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnZGVzY2VuZGluZyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTb3J0RGlyZWN0aW9uLm5vbmUgPSBuZXcgU29ydERpcmVjdGlvbigwKTtcclxuICAgIFNvcnREaXJlY3Rpb24uYXNjZW5kaW5nID0gbmV3IFNvcnREaXJlY3Rpb24oMSk7XHJcbiAgICBTb3J0RGlyZWN0aW9uLmRlc2NlbmRpbmcgPSBuZXcgU29ydERpcmVjdGlvbigyKTtcclxuICAgIHJldHVybiBTb3J0RGlyZWN0aW9uO1xyXG59KCkpO1xyXG5leHBvcnRzLlNvcnREaXJlY3Rpb24gPSBTb3J0RGlyZWN0aW9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0RGlyZWN0aW9uLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL3NvcnRzL3NvcnREaXJlY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSA0OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIHNvcnRzX21vZHVsZV8xID0gcmVxdWlyZSgnLi4vc29ydHMvc29ydHMubW9kdWxlJyk7XHJcbnZhciBjbGllbnRTZXJ2ZXJEYXRhU291cmNlID0gcmVxdWlyZSgnLi9jbGllbnRTZXJ2ZXJEYXRhU291cmNlL2NsaWVudFNlcnZlckRhdGFTb3VyY2Uuc2VydmljZScpO1xyXG5leHBvcnRzLmNsaWVudFNlcnZlckRhdGFTb3VyY2UgPSBjbGllbnRTZXJ2ZXJEYXRhU291cmNlO1xyXG52YXIgZGF0YVBhZ2VyID0gcmVxdWlyZSgnLi9kYXRhUGFnZXIvZGF0YVBhZ2VyLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5kYXRhUGFnZXIgPSBkYXRhUGFnZXI7XHJcbnZhciBkYXRhU2VydmljZURhdGFTb3VyY2UgPSByZXF1aXJlKCcuL2RhdGFTZXJ2aWNlRGF0YVNvdXJjZS9kYXRhU2VydmljZURhdGFTb3VyY2Uuc2VydmljZScpO1xyXG5leHBvcnRzLmRhdGFTZXJ2aWNlRGF0YVNvdXJjZSA9IGRhdGFTZXJ2aWNlRGF0YVNvdXJjZTtcclxudmFyIHNlcnZlclNpZGVEYXRhU291cmNlID0gcmVxdWlyZSgnLi9zZXJ2ZXJTaWRlRGF0YVNvdXJjZS9zZXJ2ZXJTaWRlRGF0YVNvdXJjZS5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMuc2VydmVyU2lkZURhdGFTb3VyY2UgPSBzZXJ2ZXJTaWRlRGF0YVNvdXJjZTtcclxudmFyIHNpbXBsZURhdGFTb3VyY2UgPSByZXF1aXJlKCcuL3NpbXBsZURhdGFTb3VyY2Uvc2ltcGxlRGF0YVNvdXJjZS5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMuc2ltcGxlRGF0YVNvdXJjZSA9IHNpbXBsZURhdGFTb3VyY2U7XHJcbnZhciBzbWFydERhdGFTb3VyY2UgPSByZXF1aXJlKCcuL3NtYXJ0RGF0YVNvdXJjZS9zbWFydERhdGFTb3VyY2Uuc2VydmljZScpO1xyXG5leHBvcnRzLnNtYXJ0RGF0YVNvdXJjZSA9IHNtYXJ0RGF0YVNvdXJjZTtcclxudmFyIGV2ZW50cyA9IHJlcXVpcmUoJy4vZGF0YVNvdXJjZUV2ZW50cycpO1xyXG5leHBvcnRzLmV2ZW50cyA9IGV2ZW50cztcclxudmFyIGRhdGFTb3VyY2VQcm9jZXNzb3IgPSByZXF1aXJlKCcuL2RhdGFTb3VyY2VQcm9jZXNzb3Iuc2VydmljZScpO1xyXG5leHBvcnRzLmRhdGFTb3VyY2VQcm9jZXNzb3IgPSBkYXRhU291cmNlUHJvY2Vzc29yO1xyXG52YXIgZGF0YVNvdXJjZUJhc2UgPSByZXF1aXJlKCcuL2RhdGFTb3VyY2VCYXNlLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5kYXRhU291cmNlQmFzZSA9IGRhdGFTb3VyY2VCYXNlO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5jYXJkQ29udGFpbmVyLmRhdGFTb3VyY2VzJztcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXHJcbiAgICB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0Lm1vZHVsZU5hbWUsXHJcbiAgICBzb3J0c19tb2R1bGVfMS5tb2R1bGVOYW1lLFxyXG4gICAgY2xpZW50U2VydmVyRGF0YVNvdXJjZS5tb2R1bGVOYW1lLFxyXG4gICAgZGF0YVBhZ2VyLm1vZHVsZU5hbWUsXHJcbiAgICBkYXRhU2VydmljZURhdGFTb3VyY2UubW9kdWxlTmFtZSxcclxuICAgIHNlcnZlclNpZGVEYXRhU291cmNlLm1vZHVsZU5hbWUsXHJcbiAgICBzaW1wbGVEYXRhU291cmNlLm1vZHVsZU5hbWUsXHJcbiAgICBzbWFydERhdGFTb3VyY2UubW9kdWxlTmFtZSxcclxuXSlcclxuICAgIC5zZXJ2aWNlKGRhdGFTb3VyY2VQcm9jZXNzb3IucHJvY2Vzc29yU2VydmljZU5hbWUsIGRhdGFTb3VyY2VQcm9jZXNzb3IuRGF0YVNvdXJjZVByb2Nlc3Nvcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGFTb3VyY2VzLm1vZHVsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kYXRhU291cmNlcy9kYXRhU291cmNlcy5tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSA1MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBtZXJnZVNvcnQgPSByZXF1aXJlKCcuL21lcmdlU29ydC9tZXJnZVNvcnQuc2VydmljZScpO1xyXG5leHBvcnRzLm1lcmdlU29ydCA9IG1lcmdlU29ydDtcclxudmFyIHNvcnRlciA9IHJlcXVpcmUoJy4vc29ydGVyL3NvcnRlci5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMuc29ydGVyID0gc29ydGVyO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NvcnQnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc29ydERpcmVjdGlvbicpKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5zb3J0cyc7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW1xyXG4gICAgbWVyZ2VTb3J0Lm1vZHVsZU5hbWUsXHJcbiAgICBzb3J0ZXIubW9kdWxlTmFtZSxcclxuXSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvcnRzLm1vZHVsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9zb3J0cy9zb3J0cy5tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSA1MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5zb3J0cy5tZXJnZVNvcnQnO1xyXG5leHBvcnRzLnNlcnZpY2VOYW1lID0gJ21lcmdlU29ydCc7XHJcbnZhciBNZXJnZVNvcnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTWVyZ2VTb3J0KCkge1xyXG4gICAgfVxyXG4gICAgTWVyZ2VTb3J0LnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24gKGRhdGEsIGNvbXBhcmUpIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcGFyZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbXBhcmUgPSB0aGlzLmRlZmF1bHRDb21wYXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWlkO1xyXG4gICAgICAgIHZhciBsZWZ0O1xyXG4gICAgICAgIHZhciByaWdodDtcclxuICAgICAgICBtaWQgPSBkYXRhLmxlbmd0aCAvIDI7XHJcbiAgICAgICAgbGVmdCA9IHRoaXMuc29ydChkYXRhLnNsaWNlKDAsIG1pZCksIGNvbXBhcmUpO1xyXG4gICAgICAgIHJpZ2h0ID0gdGhpcy5zb3J0KGRhdGEuc2xpY2UobWlkLCBkYXRhLmxlbmd0aCksIGNvbXBhcmUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lcmdlKGxlZnQsIHJpZ2h0LCBjb21wYXJlKTtcclxuICAgIH07XHJcbiAgICBNZXJnZVNvcnQucHJvdG90eXBlLmRlZmF1bHRDb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gYSA8IGJcclxuICAgICAgICAgICAgPyB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEudHlwZXMuQ29tcGFyZVJlc3VsdC5sZXNzXHJcbiAgICAgICAgICAgIDogKGEgPiBiID8gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnR5cGVzLkNvbXBhcmVSZXN1bHQuZ3JlYXRlciA6IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS50eXBlcy5Db21wYXJlUmVzdWx0LmVxdWFsKTtcclxuICAgIH07XHJcbiAgICBNZXJnZVNvcnQucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBjb21wYXJlKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIHdoaWxlIChsZWZ0Lmxlbmd0aCAmJiByaWdodC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKGNvbXBhcmUobGVmdFswXSwgcmlnaHRbMF0pID09PSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEudHlwZXMuQ29tcGFyZVJlc3VsdC5ncmVhdGVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyaWdodC5zaGlmdCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIGVxdWFsIGl0IHNob3VsZCBwcmVzZXJ2ZSBzYW1lIG9yZGVyIChzdGFibGUpXHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChsZWZ0LnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZWZ0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIGxlZnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgcmlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNZXJnZVNvcnQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTWVyZ2VTb3J0ID0gTWVyZ2VTb3J0O1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLnNlcnZpY2UoZXhwb3J0cy5zZXJ2aWNlTmFtZSwgTWVyZ2VTb3J0KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VTb3J0LnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvc29ydHMvbWVyZ2VTb3J0L21lcmdlU29ydC5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gNTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBzb3J0RGlyZWN0aW9uXzEgPSByZXF1aXJlKCcuLi9zb3J0RGlyZWN0aW9uJyk7XHJcbnZhciBtZXJnZVNvcnRfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vbWVyZ2VTb3J0L21lcmdlU29ydC5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuc29ydHMuc29ydGVyJztcclxuZXhwb3J0cy5zZXJ2aWNlTmFtZSA9ICdzb3J0ZXInO1xyXG52YXIgU29ydGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNvcnRlcihtZXJnZVNvcnQpIHtcclxuICAgICAgICB0aGlzLm1lcmdlU29ydCA9IG1lcmdlU29ydDtcclxuICAgIH1cclxuICAgIFNvcnRlci5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIChkYXRhLCBzb3J0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoc29ydCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF8uaXNBcnJheShzb3J0KSkge1xyXG4gICAgICAgICAgICB2YXIgcmV2ZXJzZVNvcnRzID0gXy5jbG9uZShzb3J0KTtcclxuICAgICAgICAgICAgcmV2ZXJzZVNvcnRzLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgcmV0dXJuIF8ucmVkdWNlKHJldmVyc2VTb3J0cywgZnVuY3Rpb24gKHNvcnRlZERhdGEsIG5leHRTb3J0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2luZ2xlU29ydChzb3J0ZWREYXRhLCBuZXh0U29ydCk7XHJcbiAgICAgICAgICAgIH0sIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGVTb3J0KGRhdGEsIHNvcnQpO1xyXG4gICAgfTtcclxuICAgIFNvcnRlci5wcm90b3R5cGUuc2luZ2xlU29ydCA9IGZ1bmN0aW9uIChkYXRhLCBzb3J0KSB7XHJcbiAgICAgICAgdmFyIGNvbXBhcmVGdW5jdGlvbiA9IHRoaXMuYnVpbGRTb3J0RnVuY3Rpb24oc29ydCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVyZ2VTb3J0LnNvcnQoZGF0YSwgY29tcGFyZUZ1bmN0aW9uKTtcclxuICAgIH07XHJcbiAgICBTb3J0ZXIucHJvdG90eXBlLmJ1aWxkU29ydEZ1bmN0aW9uID0gZnVuY3Rpb24gKHNvcnQpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgaWYgKHNvcnQuZGlyZWN0aW9uID09PSBzb3J0RGlyZWN0aW9uXzEuU29ydERpcmVjdGlvbi5ub25lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnR5cGVzLkNvbXBhcmVSZXN1bHQuZXF1YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlT2ZBID0gc29ydC5jb2x1bW4uZ2V0VmFsdWUoYSk7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZU9mQiA9IHNvcnQuY29sdW1uLmdldFZhbHVlKGIpO1xyXG4gICAgICAgICAgICB2YXIgZ3JlYXRlclJlc3VsdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS50eXBlcy5Db21wYXJlUmVzdWx0LmdyZWF0ZXI7XHJcbiAgICAgICAgICAgIHZhciBsZXNzUmVzdWx0ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnR5cGVzLkNvbXBhcmVSZXN1bHQubGVzcztcclxuICAgICAgICAgICAgdmFyIGRlc2NlbmRpbmdTb3J0ID0gKHNvcnQuZGlyZWN0aW9uID09PSBzb3J0RGlyZWN0aW9uXzEuU29ydERpcmVjdGlvbi5kZXNjZW5kaW5nKTtcclxuICAgICAgICAgICAgdmFyIGZsaXAgPSBzb3J0LmNvbHVtbi5mbGlwU29ydDtcclxuICAgICAgICAgICAgLy8gRXhjbHVzaXZlIE9SLi4uIGlmIGZsaXBwaW5nIGEgZGVzY2VuZGluZyBzb3J0LCB5b3UgZ2V0IGFuIGFzY2VuZGluZyBzb3J0XHJcbiAgICAgICAgICAgIGlmICgoZGVzY2VuZGluZ1NvcnQgfHwgZmxpcCkgJiYgIShkZXNjZW5kaW5nU29ydCAmJiBmbGlwKSkge1xyXG4gICAgICAgICAgICAgICAgZ3JlYXRlclJlc3VsdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS50eXBlcy5Db21wYXJlUmVzdWx0Lmxlc3M7XHJcbiAgICAgICAgICAgICAgICBsZXNzUmVzdWx0ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnR5cGVzLkNvbXBhcmVSZXN1bHQuZ3JlYXRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVPZkEgPiB2YWx1ZU9mQlxyXG4gICAgICAgICAgICAgICAgPyBncmVhdGVyUmVzdWx0XHJcbiAgICAgICAgICAgICAgICA6ICh2YWx1ZU9mQSA8IHZhbHVlT2ZCID8gbGVzc1Jlc3VsdCA6IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS50eXBlcy5Db21wYXJlUmVzdWx0LmVxdWFsKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFNvcnRlci4kaW5qZWN0ID0gW21lcmdlU29ydF9zZXJ2aWNlXzEuc2VydmljZU5hbWVdO1xyXG4gICAgcmV0dXJuIFNvcnRlcjtcclxufSgpKTtcclxuZXhwb3J0cy5Tb3J0ZXIgPSBTb3J0ZXI7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuc2VydmljZShleHBvcnRzLnNlcnZpY2VOYW1lLCBTb3J0ZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0ZXIuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9zb3J0cy9zb3J0ZXIvc29ydGVyLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSA1M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuX19leHBvcnQocmVxdWlyZSgnLi9zb3J0RGlyZWN0aW9uJykpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL3NvcnRzL3NvcnQuanNcbiAqKiBtb2R1bGUgaWQgPSA1NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fb2JzZXJ2YWJsZSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYnNlcnZhYmxlO1xyXG52YXIgX19hcnJheSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5hcnJheTtcclxudmFyIF9fb2JqZWN0ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLm9iamVjdDtcclxudmFyIF9fc3luY2hyb25pemVkUmVxdWVzdHMgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuc3luY2hyb25pemVkUmVxdWVzdHM7XHJcbnZhciBhc3luY0RhdGFTb3VyY2Vfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vYXN5bmNEYXRhU291cmNlLnNlcnZpY2UnKTtcclxudmFyIGRhdGFTb3VyY2VQcm9jZXNzb3Jfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vZGF0YVNvdXJjZVByb2Nlc3Nvci5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuZGF0YVNvdXJjZXMuY2xpZW50U2VydmVyRGF0YVNvdXJjZSc7XHJcbmV4cG9ydHMuZmFjdG9yeU5hbWUgPSAnY2xpZW50U2VydmVyRGF0YVNvdXJjZSc7XHJcbnZhciBDbGllbnRTZXJ2ZXJEYXRhU291cmNlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDbGllbnRTZXJ2ZXJEYXRhU291cmNlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ2xpZW50U2VydmVyRGF0YVNvdXJjZShnZXREYXRhU2V0LCBzZWFyY2hGaWx0ZXIsIGdldEZpbHRlck1vZGVsLCB2YWxpZGF0ZU1vZGVsLCBvYnNlcnZhYmxlRmFjdG9yeSwgZGF0YVNvdXJjZVByb2Nlc3NvciwgYXJyYXksIG9iamVjdCwgc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ2V0RGF0YVNldCwgb2JzZXJ2YWJsZUZhY3RvcnksIGRhdGFTb3VyY2VQcm9jZXNzb3IsIGFycmF5LCBzeW5jaHJvbml6ZWRSZXF1ZXN0c0ZhY3RvcnkpO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoRmlsdGVyID0gc2VhcmNoRmlsdGVyO1xyXG4gICAgICAgIHRoaXMuZ2V0RmlsdGVyTW9kZWwgPSBnZXRGaWx0ZXJNb2RlbDtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlTW9kZWwgPSB2YWxpZGF0ZU1vZGVsO1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIHRoaXMubWluU2VhcmNoTGVuZ3RoID0gNDtcclxuICAgICAgICB0aGlzLmdldEZpbHRlck1vZGVsID0gdGhpcy5nZXRGaWx0ZXJNb2RlbCB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9O1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVNb2RlbCA9IHRoaXMudmFsaWRhdGVNb2RlbCB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xyXG4gICAgICAgIHRoaXMuY291bnRGaWx0ZXJHcm91cHMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2VhcmNoRmlsdGVyLnNlYXJjaFRleHQ7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJNb2RlbCA9IF8uY2xvbmUodGhpcy5nZXRGaWx0ZXJNb2RlbCgpKTtcclxuICAgICAgICBzZWFyY2hGaWx0ZXIubWluU2VhcmNoTGVuZ3RoID0gdGhpcy5taW5TZWFyY2hMZW5ndGg7XHJcbiAgICB9XHJcbiAgICBDbGllbnRTZXJ2ZXJEYXRhU291cmNlLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaEZpbHRlci5zZWFyY2hUZXh0ICE9PSB0aGlzLnNlYXJjaFxyXG4gICAgICAgICAgICB8fCB0aGlzLmZpbHRlck1vZGVsQ2hhbmdlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnJlZnJlc2guY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2xpZW50U2VydmVyRGF0YVNvdXJjZS5wcm90b3R5cGUucmVsb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc2VhcmNoID0gdGhpcy5zZWFyY2hGaWx0ZXIuc2VhcmNoVGV4dDtcclxuICAgICAgICB0aGlzLmZpbHRlck1vZGVsID0gXy5jbG9uZSh0aGlzLmdldEZpbHRlck1vZGVsKCkpO1xyXG4gICAgICAgIHZhciBoYXNWYWxpZFNlYXJjaCA9ICF0aGlzLm9iamVjdC5pc051bGxPckVtcHR5KHRoaXMuc2VhcmNoKSAmJiB0aGlzLnNlYXJjaC5sZW5ndGggPj0gdGhpcy5taW5TZWFyY2hMZW5ndGg7XHJcbiAgICAgICAgdmFyIGhhc1ZhbGlkRmlsdGVyTW9kZWwgPSB0aGlzLmZpbHRlck1vZGVsICE9IG51bGwgJiYgdGhpcy52YWxpZGF0ZU1vZGVsKHRoaXMuZmlsdGVyTW9kZWwpO1xyXG4gICAgICAgIGlmICghaGFzVmFsaWRTZWFyY2ggJiYgIWhhc1ZhbGlkRmlsdGVyTW9kZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlUmVsb2FkKG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUucmVsb2FkLmNhbGwodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgQ2xpZW50U2VydmVyRGF0YVNvdXJjZS5wcm90b3R5cGUuZmlsdGVyTW9kZWxDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5vYmplY3QuYXJlRXF1YWwodGhpcy5nZXRGaWx0ZXJNb2RlbCgpLCB0aGlzLmZpbHRlck1vZGVsKTtcclxuICAgIH07XHJcbiAgICBDbGllbnRTZXJ2ZXJEYXRhU291cmNlLnByb3RvdHlwZS5nZXRQYXJhbXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNlYXJjaE1vZGVsID0gdGhpcy5nZXRGaWx0ZXJNb2RlbCgpO1xyXG4gICAgICAgIGlmIChzZWFyY2hNb2RlbCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHNlYXJjaE1vZGVsLnNlYXJjaCA9IHRoaXMuc2VhcmNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2VhcmNoTW9kZWwgPSB0aGlzLnNlYXJjaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlYXJjaE1vZGVsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDbGllbnRTZXJ2ZXJEYXRhU291cmNlO1xyXG59KGFzeW5jRGF0YVNvdXJjZV9zZXJ2aWNlXzEuQXN5bmNEYXRhU291cmNlKSk7XHJcbmV4cG9ydHMuQ2xpZW50U2VydmVyRGF0YVNvdXJjZSA9IENsaWVudFNlcnZlckRhdGFTb3VyY2U7XHJcbmNsaWVudFNlcnZlckRhdGFTb3VyY2VGYWN0b3J5LiRpbmplY3QgPSBbX19vYnNlcnZhYmxlLmZhY3RvcnlOYW1lLCBkYXRhU291cmNlUHJvY2Vzc29yX3NlcnZpY2VfMS5wcm9jZXNzb3JTZXJ2aWNlTmFtZSwgX19hcnJheS5zZXJ2aWNlTmFtZSwgX19vYmplY3Quc2VydmljZU5hbWUsIF9fc3luY2hyb25pemVkUmVxdWVzdHMuZmFjdG9yeU5hbWVdO1xyXG5mdW5jdGlvbiBjbGllbnRTZXJ2ZXJEYXRhU291cmNlRmFjdG9yeShvYnNlcnZhYmxlRmFjdG9yeSwgZGF0YVNvdXJjZVByb2Nlc3NvciwgYXJyYXksIG9iamVjdCwgc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEluc3RhbmNlOiBmdW5jdGlvbiAoZ2V0RGF0YVNldCwgc2VhcmNoRmlsdGVyLCBnZXRGaWx0ZXJNb2RlbCwgdmFsaWRhdGVNb2RlbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENsaWVudFNlcnZlckRhdGFTb3VyY2UoZ2V0RGF0YVNldCwgc2VhcmNoRmlsdGVyLCBnZXRGaWx0ZXJNb2RlbCwgdmFsaWRhdGVNb2RlbCwgb2JzZXJ2YWJsZUZhY3RvcnksIGRhdGFTb3VyY2VQcm9jZXNzb3IsIGFycmF5LCBvYmplY3QsIHN5bmNocm9uaXplZFJlcXVlc3RzRmFjdG9yeSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5jbGllbnRTZXJ2ZXJEYXRhU291cmNlRmFjdG9yeSA9IGNsaWVudFNlcnZlckRhdGFTb3VyY2VGYWN0b3J5O1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtfX29ic2VydmFibGUubW9kdWxlTmFtZSwgX19hcnJheS5tb2R1bGVOYW1lLCBfX29iamVjdC5tb2R1bGVOYW1lLCBfX3N5bmNocm9uaXplZFJlcXVlc3RzLm1vZHVsZU5hbWVdKVxyXG4gICAgLmZhY3RvcnkoZXhwb3J0cy5mYWN0b3J5TmFtZSwgY2xpZW50U2VydmVyRGF0YVNvdXJjZUZhY3RvcnkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRTZXJ2ZXJEYXRhU291cmNlLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGF0YVNvdXJjZXMvY2xpZW50U2VydmVyRGF0YVNvdXJjZS9jbGllbnRTZXJ2ZXJEYXRhU291cmNlLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSA1NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgZGF0YVNvdXJjZUJhc2Vfc2VydmljZV8xID0gcmVxdWlyZSgnLi9kYXRhU291cmNlQmFzZS5zZXJ2aWNlJyk7XHJcbnZhciBldmVudHMgPSByZXF1aXJlKCcuL2RhdGFTb3VyY2VFdmVudHMnKTtcclxudmFyIEFzeW5jRGF0YVNvdXJjZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQXN5bmNEYXRhU291cmNlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQXN5bmNEYXRhU291cmNlKGdldERhdGFTZXQsIG9ic2VydmFibGVGYWN0b3J5LCBkYXRhU291cmNlUHJvY2Vzc29yLCBhcnJheSwgc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgb2JzZXJ2YWJsZUZhY3RvcnksIGRhdGFTb3VyY2VQcm9jZXNzb3IsIGFycmF5KTtcclxuICAgICAgICB0aGlzLnN5bmNocm9uaXplZFJlcXVlc3RzID0gc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5LmdldEluc3RhbmNlKGdldERhdGFTZXQsIHRoaXMucmVzb2x2ZVJlbG9hZC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBc3luY0RhdGFTb3VyY2UucHJvdG90eXBlLCBcImdldERhdGFTZXRcIiwge1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3luY2hyb25pemVkUmVxdWVzdHMuZGF0YVByb3ZpZGVyID0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBc3luY0RhdGFTb3VyY2UucHJvdG90eXBlLnJlbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmRhdGFTZXQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmF3RGF0YVNldCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nRGF0YVNldCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zeW5jaHJvbml6ZWRSZXF1ZXN0cy5nZXREYXRhKHRoaXMuZ2V0UGFyYW1zKCkpO1xyXG4gICAgfTtcclxuICAgIEFzeW5jRGF0YVNvdXJjZS5wcm90b3R5cGUucmVzb2x2ZVJlbG9hZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nRGF0YVNldCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmF3RGF0YVNldCA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzRGF0YSgpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5maXJlKGV2ZW50cy5hc3luYy5yZWxvYWRlZCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLmZpcmUoZXZlbnRzLnJlZHJhd2luZyk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLmZpcmUoZXZlbnRzLmNoYW5nZWQpO1xyXG4gICAgfTtcclxuICAgIC8vIG92ZXJyaWRlIHdpdGggcGFyYW1zIGZvciBnZXREYXRhU2V0XHJcbiAgICBBc3luY0RhdGFTb3VyY2UucHJvdG90eXBlLmdldFBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXN5bmNEYXRhU291cmNlO1xyXG59KGRhdGFTb3VyY2VCYXNlX3NlcnZpY2VfMS5EYXRhU291cmNlQmFzZSkpO1xyXG5leHBvcnRzLkFzeW5jRGF0YVNvdXJjZSA9IEFzeW5jRGF0YVNvdXJjZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmNEYXRhU291cmNlLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGF0YVNvdXJjZXMvYXN5bmNEYXRhU291cmNlLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSA1NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG52YXIgZXZlbnRzID0gcmVxdWlyZSgnLi9kYXRhU291cmNlRXZlbnRzJyk7XHJcbnZhciBEYXRhU291cmNlQmFzZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYXRhU291cmNlQmFzZShvYnNlcnZhYmxlRmFjdG9yeSwgZGF0YVNvdXJjZVByb2Nlc3NvciwgYXJyYXkpIHtcclxuICAgICAgICB0aGlzLmRhdGFTb3VyY2VQcm9jZXNzb3IgPSBkYXRhU291cmNlUHJvY2Vzc29yO1xyXG4gICAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcclxuICAgICAgICB0aGlzLnNvcnRzID0gW107XHJcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb3VudEZpbHRlckdyb3VwcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ0RhdGFTZXQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gICAgRGF0YVNvdXJjZUJhc2UucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24gKGFjdGlvbiwgZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZhYmxlLnJlZ2lzdGVyKGFjdGlvbiwgZXZlbnQpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhU291cmNlQmFzZS5wcm90b3R5cGUsIFwibmVlZHNSZWZpbmVkU2VhcmNoXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5vSXRlbXNEaXNwbGF5ZWQgPSBfX29iamVjdC5vYmplY3RVdGlsaXR5LmlzTnVsbE9yRW1wdHkodGhpcy5kYXRhU2V0KTtcclxuICAgICAgICAgICAgdmFyIG1vcmVJdGVtc09uU2VydmVyID0gdGhpcy5faXNFbXB0eSA9PT0gZmFsc2UgfHwgKHRoaXMucmF3RGF0YVNldCAhPSBudWxsICYmIHRoaXMucmF3RGF0YVNldC5sZW5ndGggPCB0aGlzLmNvdW50KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5vSXRlbXNEaXNwbGF5ZWQgJiYgbW9yZUl0ZW1zT25TZXJ2ZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YVNvdXJjZUJhc2UucHJvdG90eXBlLCBcImlzRW1wdHlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19vYmplY3Qub2JqZWN0VXRpbGl0eS5pc051bGxPckVtcHR5KHRoaXMucmF3RGF0YVNldClcclxuICAgICAgICAgICAgICAgICYmICh0aGlzLl9pc0VtcHR5ICE9IG51bGwgPyB0aGlzLl9pc0VtcHR5IDogdHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc0VtcHR5ID0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBEYXRhU291cmNlQmFzZS5wcm90b3R5cGUucHJvY2Vzc0RhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHByb2Nlc3NlZERhdGE7XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnRGaWx0ZXJHcm91cHMpIHtcclxuICAgICAgICAgICAgcHJvY2Vzc2VkRGF0YSA9IHRoaXMuZGF0YVNvdXJjZVByb2Nlc3Nvci5wcm9jZXNzQW5kQ291bnQodGhpcy5zb3J0cywgdGhpcy5maWx0ZXJzLCB0aGlzLnBhZ2VyLCB0aGlzLnJhd0RhdGFTZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJvY2Vzc2VkRGF0YSA9IHRoaXMuZGF0YVNvdXJjZVByb2Nlc3Nvci5wcm9jZXNzKHRoaXMuc29ydHMsIHRoaXMuZmlsdGVycywgdGhpcy5wYWdlciwgdGhpcy5yYXdEYXRhU2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRQcm9jZXNzZWREYXRhKHByb2Nlc3NlZERhdGEpO1xyXG4gICAgfTtcclxuICAgIC8vdXNlZCB3aGVuIHdlIG5lZWQgdG8gcHJvY2VzcyBkYXRhIGJ1dCB3aXRob3V0IGNsaWVudCBmaWx0ZXJzLlxyXG4gICAgRGF0YVNvdXJjZUJhc2UucHJvdG90eXBlLnByb2Nlc3NEYXRhTm9DbGllbnRGaWx0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwcm9jZXNzZWREYXRhO1xyXG4gICAgICAgIGlmICh0aGlzLmNvdW50RmlsdGVyR3JvdXBzKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3NlZERhdGEgPSB0aGlzLmRhdGFTb3VyY2VQcm9jZXNzb3IucHJvY2Vzc0FuZENvdW50KHRoaXMuc29ydHMsIG51bGwsIHRoaXMucGFnZXIsIHRoaXMucmF3RGF0YVNldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwcm9jZXNzZWREYXRhID0gdGhpcy5kYXRhU291cmNlUHJvY2Vzc29yLnByb2Nlc3ModGhpcy5zb3J0cywgbnVsbCwgdGhpcy5wYWdlciwgdGhpcy5yYXdEYXRhU2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRQcm9jZXNzZWREYXRhKHByb2Nlc3NlZERhdGEpO1xyXG4gICAgfTtcclxuICAgIERhdGFTb3VyY2VCYXNlLnByb3RvdHlwZS5zZXRQcm9jZXNzZWREYXRhID0gZnVuY3Rpb24gKHByb2Nlc3NlZERhdGEpIHtcclxuICAgICAgICB0aGlzLmNvdW50ID0gcHJvY2Vzc2VkRGF0YS5jb3VudDtcclxuICAgICAgICB0aGlzLmRhdGFTZXQgPSBwcm9jZXNzZWREYXRhLmRhdGFTZXQ7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJlZERhdGFTZXQgPSBwcm9jZXNzZWREYXRhLmZpbHRlcmVkRGF0YVNldDtcclxuICAgIH07XHJcbiAgICBEYXRhU291cmNlQmFzZS5wcm90b3R5cGUub25Tb3J0Q2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5sb2FkaW5nRGF0YVNldCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YVNldCA9IHRoaXMuZGF0YVNvdXJjZVByb2Nlc3Nvci5zb3J0KHRoaXMuZmlsdGVyZWREYXRhU2V0LCB0aGlzLnNvcnRzKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhU2V0ID0gdGhpcy5kYXRhU291cmNlUHJvY2Vzc29yLnBhZ2UodGhpcy5maWx0ZXJlZERhdGFTZXQsIHRoaXMucGFnZXIpO1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuZmlyZShldmVudHMucmVkcmF3aW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGF0YVNvdXJjZUJhc2UucHJvdG90eXBlLm9uUGFnaW5nQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5sb2FkaW5nRGF0YVNldCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFTZXQgPSB0aGlzLmRhdGFTb3VyY2VQcm9jZXNzb3IucGFnZSh0aGlzLmZpbHRlcmVkRGF0YVNldCwgdGhpcy5wYWdlcik7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZS5maXJlKGV2ZW50cy5yZWRyYXdpbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEYXRhU291cmNlQmFzZS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMubG9hZGluZ0RhdGFTZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzRGF0YSgpO1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuZmlyZShldmVudHMucmVkcmF3aW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGF0YVNvdXJjZUJhc2UucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmFycmF5LnJlbW92ZSh0aGlzLnJhd0RhdGFTZXQsIGRhdGEpO1xyXG4gICAgICAgIGlmIChpdGVtICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZhYmxlLmZpcmUoZXZlbnRzLnJlbW92ZWQpO1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuZmlyZShldmVudHMuY2hhbmdlZCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEYXRhU291cmNlQmFzZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5yYXdEYXRhU2V0LnB1c2goZGF0YSk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLmZpcmUoZXZlbnRzLmFkZGVkKTtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuZmlyZShldmVudHMuY2hhbmdlZCk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICB9O1xyXG4gICAgRGF0YVNvdXJjZUJhc2UucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAob2xkRGF0YSwgbmV3RGF0YSkge1xyXG4gICAgICAgIHZhciBsb2NhdGlvbk9mT2xkRGF0YSA9IHRoaXMucmF3RGF0YVNldC5pbmRleE9mKG9sZERhdGEpO1xyXG4gICAgICAgIGlmIChsb2NhdGlvbk9mT2xkRGF0YSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXJyYXkucmVwbGFjZSh0aGlzLnJhd0RhdGFTZXQsIG9sZERhdGEsIG5ld0RhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuZmlyZShldmVudHMucmVwbGFjZWQpO1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuZmlyZShldmVudHMuY2hhbmdlZCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRGF0YVNvdXJjZUJhc2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRGF0YVNvdXJjZUJhc2UgPSBEYXRhU291cmNlQmFzZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YVNvdXJjZUJhc2Uuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kYXRhU291cmNlcy9kYXRhU291cmNlQmFzZS5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gNTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxuZXhwb3J0cy5yZWRyYXdpbmcgPSAncmVkcmF3aW5nJztcclxuZXhwb3J0cy5jaGFuZ2VkID0gJ2NoYW5nZWQnO1xyXG5leHBvcnRzLmFkZGVkID0gJ2FkZGVkJztcclxuZXhwb3J0cy5yZW1vdmVkID0gJ3JlbW92ZWQnO1xyXG5leHBvcnRzLnJlcGxhY2VkID0gJ3JlcGxhY2VkJztcclxuZXhwb3J0cy5hc3luYyA9IHtcclxuICAgIHJlbG9hZGVkOiAncmVsb2FkZWQnLFxyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhU291cmNlRXZlbnRzLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2RhdGFTb3VyY2VzL2RhdGFTb3VyY2VFdmVudHMuanNcbiAqKiBtb2R1bGUgaWQgPSA1OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG52YXIgc29ydGVyX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL3NvcnRzL3NvcnRlci9zb3J0ZXIuc2VydmljZScpO1xyXG5leHBvcnRzLnByb2Nlc3NvclNlcnZpY2VOYW1lID0gJ2RhdGFTb3VyY2VQcm9jZXNzb3InO1xyXG52YXIgRGF0YVNvdXJjZVByb2Nlc3NvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYXRhU291cmNlUHJvY2Vzc29yKG9iamVjdCwgc29ydGVyKSB7XHJcbiAgICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgdGhpcy5zb3J0ZXIgPSBzb3J0ZXI7XHJcbiAgICB9XHJcbiAgICBEYXRhU291cmNlUHJvY2Vzc29yLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKHNvcnRzLCBmaWx0ZXJzLCBwYWdlciwgZGF0YSkge1xyXG4gICAgICAgIHZhciBwcm9jZXNzZWREYXRhID0gZGF0YTtcclxuICAgICAgICBwcm9jZXNzZWREYXRhID0gdGhpcy5zb3J0KHByb2Nlc3NlZERhdGEsIHNvcnRzKTtcclxuICAgICAgICBpZiAodGhpcy5vYmplY3QuaXNOdWxsT3JFbXB0eShmaWx0ZXJzKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcHJvY2Vzc2VkRGF0YSA9IF8ucmVkdWNlKGZpbHRlcnMsIGZ1bmN0aW9uIChmaWx0ZXJlZERhdGEsIGZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIHRoZSBkYXRhIHNldCB1c2luZyB0aGUgZmlsdGVyIGZ1bmN0aW9uIG9uIHRoZSBmaWx0ZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiBfLmZpbHRlcihmaWx0ZXJlZERhdGEsIGZpbHRlci5maWx0ZXIuYmluZChmaWx0ZXIpKTtcclxuICAgICAgICAgICAgfSwgcHJvY2Vzc2VkRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIGNvdW50OiAocHJvY2Vzc2VkRGF0YSAhPSBudWxsID8gcHJvY2Vzc2VkRGF0YS5sZW5ndGggOiAwKSxcclxuICAgICAgICAgICAgZmlsdGVyZWREYXRhU2V0OiBwcm9jZXNzZWREYXRhLFxyXG4gICAgICAgICAgICBkYXRhU2V0OiBwcm9jZXNzZWREYXRhLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVzdWx0LmRhdGFTZXQgPSB0aGlzLnBhZ2UocHJvY2Vzc2VkRGF0YSwgcGFnZXIpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgRGF0YVNvdXJjZVByb2Nlc3Nvci5wcm90b3R5cGUucHJvY2Vzc0FuZENvdW50ID0gZnVuY3Rpb24gKHNvcnRzLCBmaWx0ZXJzLCBwYWdlciwgZGF0YSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGZpbHRlcnMgdGhhdCBuZWVkIHRvIHVwZGF0ZWQgb3B0aW9uIGNvdW50cywgdXNlIHRoZSBub3JtYWwgcHJvY2Vzc29yXHJcbiAgICAgICAgaWYgKHRoaXMub2JqZWN0LmlzTnVsbE9yRW1wdHkoZmlsdGVycylcclxuICAgICAgICAgICAgfHwgXy5zb21lKGZpbHRlcnMsIGZ1bmN0aW9uIChmaWx0ZXIpIHsgcmV0dXJuIF8uaXNGdW5jdGlvbihmaWx0ZXIudXBkYXRlT3B0aW9uQ291bnRzKTsgfSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3Moc29ydHMsIGZpbHRlcnMsIHBhZ2VyLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHByb2Nlc3NlZERhdGEgPSBkYXRhO1xyXG4gICAgICAgIHByb2Nlc3NlZERhdGEgPSB0aGlzLnNvcnQocHJvY2Vzc2VkRGF0YSwgc29ydHMpO1xyXG4gICAgICAgIHZhciB3cmFwcGVkRGF0YSA9IHRoaXMud3JhcERhdGEocHJvY2Vzc2VkRGF0YSk7XHJcbiAgICAgICAgLy8gUnVuIGZpbHRyYXRpb24gbG9naWMgYW5kIGNvbXB1dGUgdmlzaWJsZSBpdGVtc1xyXG4gICAgICAgIF8uZWFjaChmaWx0ZXJzLCBmdW5jdGlvbiAoZmlsdGVyIC8qIGZpbHRlcnMuSUZpbHRlcldpdGhDb3VudHMgKi8pIHtcclxuICAgICAgICAgICAgXy5lYWNoKHdyYXBwZWREYXRhLCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5maWx0ZXJEYXRhW2ZpbHRlci50eXBlXSA9IGZpbHRlci5maWx0ZXIoaXRlbS5kYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gR2l2ZSBlYWNoIGZpbHRlciBhIGNoYW5jZSB0byB1cGRhdGUgb3B0aW9uIGNvdW50c1xyXG4gICAgICAgIF8uZWFjaChmaWx0ZXJzLCBmdW5jdGlvbiAoZmlsdGVyIC8qIGZpbHRlcnMuSUZpbHRlcldpdGhDb3VudHMgKi8pIHtcclxuICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihmaWx0ZXIudXBkYXRlT3B0aW9uQ291bnRzKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG90aGVyRmlsdGVyc0FwcGxpZWQgPSBfLmZpbHRlcih3cmFwcGVkRGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBPbWl0IHRoZSB0cnVlIG9yIGZhbHNlIG9mIHRoZSBjdXJyZW50IGZpbHRlciBhblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICBvbmx5IGZpbHRlciBvdXQgaXRlbXMgcmVtb3ZlZCBieSBvdGhlciBmaWx0ZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlckRhdGEgPSBfLm9taXQoaXRlbS5maWx0ZXJEYXRhLCBmaWx0ZXIudHlwZSk7IC8vKmZpbHRlckRhdGFcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5ldmVyeShfLnZhbHVlcyhmaWx0ZXJEYXRhKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGZpbHRlci51cGRhdGVPcHRpb25Db3VudHMoX3RoaXMudW53cmFwRGF0YShvdGhlckZpbHRlcnNBcHBsaWVkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBGaWx0ZXIgZG93biB0byBmaW5hbCBkYXRhIHNldCBieSByZW1vdmluZyBpdGVtcyB0aGF0IGRvbid0IG1hdGNoIGFsbCBmaWx0ZXJzXHJcbiAgICAgICAgd3JhcHBlZERhdGEgPSBfLmZpbHRlcih3cmFwcGVkRGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIF8uZXZlcnkoXy52YWx1ZXMoaXRlbS5maWx0ZXJEYXRhKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcHJvY2Vzc2VkRGF0YSA9IHRoaXMudW53cmFwRGF0YSh3cmFwcGVkRGF0YSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgY291bnQ6IHByb2Nlc3NlZERhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGFTZXQ6IHByb2Nlc3NlZERhdGEsXHJcbiAgICAgICAgICAgIGRhdGFTZXQ6IHByb2Nlc3NlZERhdGEsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXN1bHQuZGF0YVNldCA9IHRoaXMucGFnZShwcm9jZXNzZWREYXRhLCBwYWdlcik7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBEYXRhU291cmNlUHJvY2Vzc29yLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24gKGRhdGEsIHNvcnRzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JqZWN0LmlzTnVsbE9yRW1wdHkoc29ydHMpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZXIuc29ydChkYXRhLCBzb3J0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfTtcclxuICAgIERhdGFTb3VyY2VQcm9jZXNzb3IucHJvdG90eXBlLnBhZ2UgPSBmdW5jdGlvbiAoZGF0YSwgcGFnZXIpIHtcclxuICAgICAgICBpZiAocGFnZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFnZXIuZmlsdGVyKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH07XHJcbiAgICBEYXRhU291cmNlUHJvY2Vzc29yLnByb3RvdHlwZS53cmFwRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF8ubWFwKGRhdGEsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBpdGVtLFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyRGF0YToge30sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRGF0YVNvdXJjZVByb2Nlc3Nvci5wcm90b3R5cGUudW53cmFwRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF8ubWFwKGRhdGEsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmRhdGE7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRGF0YVNvdXJjZVByb2Nlc3Nvci4kaW5qZWN0ID0gW19fb2JqZWN0LnNlcnZpY2VOYW1lLCBzb3J0ZXJfc2VydmljZV8xLnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBEYXRhU291cmNlUHJvY2Vzc29yO1xyXG59KCkpO1xyXG5leHBvcnRzLkRhdGFTb3VyY2VQcm9jZXNzb3IgPSBEYXRhU291cmNlUHJvY2Vzc29yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhU291cmNlUHJvY2Vzc29yLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGF0YVNvdXJjZXMvZGF0YVNvdXJjZVByb2Nlc3Nvci5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gNTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uLy4uLy4uL3R5cGluZ3MvbG9kYXNoVHlwZUV4dGVuc2lvbnMuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5kYXRhU291cmNlcy5kYXRhUGFnZXInO1xyXG5leHBvcnRzLmZhY3RvcnlOYW1lID0gJ2RhdGFQYWdlcic7XHJcbmV4cG9ydHMuZGVmYXVsdFBhZ2VTaXplID0gMTA7XHJcbnZhciBEYXRhUGFnZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGF0YVBhZ2VyKCkge1xyXG4gICAgICAgIHRoaXMucGFnZU51bWJlciA9IDE7XHJcbiAgICAgICAgdGhpcy5wYWdlU2l6ZSA9IGV4cG9ydHMuZGVmYXVsdFBhZ2VTaXplO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERhdGFQYWdlci5wcm90b3R5cGUsIFwic3RhcnRJdGVtXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnBhZ2VOdW1iZXIgLSAxKSAqIHRoaXMucGFnZVNpemU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBEYXRhUGFnZXIucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChkYXRhU2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIF8oZGF0YVNldClcclxuICAgICAgICAgICAgLmRyb3AodGhpcy5zdGFydEl0ZW0pXHJcbiAgICAgICAgICAgIC50YWtlKHRoaXMucGFnZVNpemUpXHJcbiAgICAgICAgICAgIC52YWx1ZSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEYXRhUGFnZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRGF0YVBhZ2VyID0gRGF0YVBhZ2VyO1xyXG5mdW5jdGlvbiBkYXRhUGFnZXJGYWN0b3J5KCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGFQYWdlcigpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuZGF0YVBhZ2VyRmFjdG9yeSA9IGRhdGFQYWdlckZhY3Rvcnk7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZmFjdG9yeShleHBvcnRzLmZhY3RvcnlOYW1lLCBkYXRhUGFnZXJGYWN0b3J5KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YVBhZ2VyLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGF0YVNvdXJjZXMvZGF0YVBhZ2VyL2RhdGFQYWdlci5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gNjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29ic2VydmFibGUgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JzZXJ2YWJsZTtcclxudmFyIF9fYXJyYXkgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuYXJyYXk7XHJcbnZhciBfX3N5bmNocm9uaXplZFJlcXVlc3RzID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLnN5bmNocm9uaXplZFJlcXVlc3RzO1xyXG52YXIgYXN5bmNEYXRhU291cmNlX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL2FzeW5jRGF0YVNvdXJjZS5zZXJ2aWNlJyk7XHJcbnZhciBkYXRhU291cmNlUHJvY2Vzc29yX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL2RhdGFTb3VyY2VQcm9jZXNzb3Iuc2VydmljZScpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5jYXJkQ29udGFpbmVyLmRhdGFTb3VyY2VzLmRhdGFTZXJ2aWNlRGF0YVNvdXJjZSc7XHJcbmV4cG9ydHMuZmFjdG9yeU5hbWUgPSAnZGF0YVNlcnZpY2VEYXRhU291cmNlJztcclxudmFyIERhdGFTZXJ2aWNlRGF0YVNvdXJjZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGF0YVNlcnZpY2VEYXRhU291cmNlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRGF0YVNlcnZpY2VEYXRhU291cmNlKGdldERhdGFTZXQsIG9ic2VydmFibGVGYWN0b3J5LCBkYXRhU291cmNlUHJvY2Vzc29yLCBhcnJheSwgc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ2V0RGF0YVNldCwgb2JzZXJ2YWJsZUZhY3RvcnksIGRhdGFTb3VyY2VQcm9jZXNzb3IsIGFycmF5LCBzeW5jaHJvbml6ZWRSZXF1ZXN0c0ZhY3RvcnkpO1xyXG4gICAgICAgIHRoaXMuY291bnRGaWx0ZXJHcm91cHMgPSB0cnVlO1xyXG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24oZ2V0RGF0YVNldCkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRGF0YVNlcnZpY2VEYXRhU291cmNlO1xyXG59KGFzeW5jRGF0YVNvdXJjZV9zZXJ2aWNlXzEuQXN5bmNEYXRhU291cmNlKSk7XHJcbmV4cG9ydHMuRGF0YVNlcnZpY2VEYXRhU291cmNlID0gRGF0YVNlcnZpY2VEYXRhU291cmNlO1xyXG5kYXRhU2VydmljZURhdGFTb3VyY2VGYWN0b3J5LiRpbmplY3QgPSBbX19vYnNlcnZhYmxlLmZhY3RvcnlOYW1lLCBkYXRhU291cmNlUHJvY2Vzc29yX3NlcnZpY2VfMS5wcm9jZXNzb3JTZXJ2aWNlTmFtZSwgX19hcnJheS5zZXJ2aWNlTmFtZSwgX19zeW5jaHJvbml6ZWRSZXF1ZXN0cy5mYWN0b3J5TmFtZV07XHJcbmZ1bmN0aW9uIGRhdGFTZXJ2aWNlRGF0YVNvdXJjZUZhY3Rvcnkob2JzZXJ2YWJsZUZhY3RvcnksIGRhdGFTb3VyY2VQcm9jZXNzb3IsIGFycmF5LCBzeW5jaHJvbml6ZWRSZXF1ZXN0cykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKGdldERhdGFTZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRhU2VydmljZURhdGFTb3VyY2UoZ2V0RGF0YVNldCwgb2JzZXJ2YWJsZUZhY3RvcnksIGRhdGFTb3VyY2VQcm9jZXNzb3IsIGFycmF5LCBzeW5jaHJvbml6ZWRSZXF1ZXN0cyk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5kYXRhU2VydmljZURhdGFTb3VyY2VGYWN0b3J5ID0gZGF0YVNlcnZpY2VEYXRhU291cmNlRmFjdG9yeTtcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbX19vYnNlcnZhYmxlLm1vZHVsZU5hbWUsIF9fYXJyYXkubW9kdWxlTmFtZV0pXHJcbiAgICAuZmFjdG9yeShleHBvcnRzLmZhY3RvcnlOYW1lLCBkYXRhU2VydmljZURhdGFTb3VyY2VGYWN0b3J5KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YVNlcnZpY2VEYXRhU291cmNlLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGF0YVNvdXJjZXMvZGF0YVNlcnZpY2VEYXRhU291cmNlL2RhdGFTZXJ2aWNlRGF0YVNvdXJjZS5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gNjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29ic2VydmFibGUgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JzZXJ2YWJsZTtcclxudmFyIF9fYXJyYXkgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuYXJyYXk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBfX3N5bmNocm9uaXplZFJlcXVlc3RzID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLnN5bmNocm9uaXplZFJlcXVlc3RzO1xyXG52YXIgYXN5bmNEYXRhU291cmNlX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL2FzeW5jRGF0YVNvdXJjZS5zZXJ2aWNlJyk7XHJcbnZhciBkYXRhU291cmNlUHJvY2Vzc29yX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL2RhdGFTb3VyY2VQcm9jZXNzb3Iuc2VydmljZScpO1xyXG52YXIgc29ydF8xID0gcmVxdWlyZSgnLi4vLi4vc29ydHMvc29ydCcpO1xyXG52YXIgZXZlbnRzID0gcmVxdWlyZSgnLi4vZGF0YVNvdXJjZUV2ZW50cycpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5jYXJkQ29udGFpbmVyLmRhdGFTb3VyY2VzLnNlcnZlclNpZGVEYXRhU291cmNlJztcclxuZXhwb3J0cy5mYWN0b3J5TmFtZSA9ICdzZXJ2ZXJTaWRlRGF0YVNvdXJjZSc7XHJcbnZhciBTZXJ2ZXJTaWRlRGF0YVNvdXJjZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoU2VydmVyU2lkZURhdGFTb3VyY2UsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBTZXJ2ZXJTaWRlRGF0YVNvdXJjZShnZXREYXRhU2V0LCBvYnNlcnZhYmxlRmFjdG9yeSwgZGF0YVNvdXJjZVByb2Nlc3NvciwgYXJyYXksIG9iamVjdCwgc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ2V0RGF0YVNldCwgb2JzZXJ2YWJsZUZhY3RvcnksIGRhdGFTb3VyY2VQcm9jZXNzb3IsIGFycmF5LCBzeW5jaHJvbml6ZWRSZXF1ZXN0c0ZhY3RvcnkpO1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgfVxyXG4gICAgU2VydmVyU2lkZURhdGFTb3VyY2UucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5yZWxvYWQoKTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJTaWRlRGF0YVNvdXJjZS5wcm90b3R5cGUuZ2V0UGFyYW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXJEaWN0aW9uYXJ5ID0gdGhpcy5hcnJheS50b0RpY3Rpb25hcnkodGhpcy5maWx0ZXJzLCBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXIudHlwZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmaWx0ZXJzOiBfLm1hcFZhbHVlcyhmaWx0ZXJEaWN0aW9uYXJ5LCBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGZpbHRlci5zZXJpYWxpemUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci5zZXJpYWxpemUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgc29ydHM6IF8ubWFwKHRoaXMuc29ydHMsIGZ1bmN0aW9uIChzb3J0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbjogc29ydC5jb2x1bW4ubGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBzb3J0XzEuU29ydERpcmVjdGlvbi5nZXRGdWxsTmFtZShzb3J0LmRpcmVjdGlvbiksXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgcGFnaW5nOiB7XHJcbiAgICAgICAgICAgICAgICBwYWdlTnVtYmVyOiB0aGlzLnBhZ2VyLnBhZ2VOdW1iZXIsXHJcbiAgICAgICAgICAgICAgICBwYWdlU2l6ZTogdGhpcy5wYWdlci5wYWdlU2l6ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFNlcnZlclNpZGVEYXRhU291cmNlLnByb3RvdHlwZS5yZXNvbHZlUmVsb2FkID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gcmVzdWx0O1xyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUucmVzb2x2ZVJlbG9hZC5jYWxsKHRoaXMsIGRhdGEuZGF0YVNldCk7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9jZXNzZWREYXRhKHtcclxuICAgICAgICAgICAgY291bnQ6IGRhdGEuY291bnQsXHJcbiAgICAgICAgICAgIGZpbHRlcmVkRGF0YVNldDogZGF0YS5kYXRhU2V0LFxyXG4gICAgICAgICAgICBkYXRhU2V0OiBkYXRhLmRhdGFTZXQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLmZpcmUoZXZlbnRzLnJlZHJhd2luZyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNlcnZlclNpZGVEYXRhU291cmNlO1xyXG59KGFzeW5jRGF0YVNvdXJjZV9zZXJ2aWNlXzEuQXN5bmNEYXRhU291cmNlKSk7XHJcbmV4cG9ydHMuU2VydmVyU2lkZURhdGFTb3VyY2UgPSBTZXJ2ZXJTaWRlRGF0YVNvdXJjZTtcclxuc2VydmVyU2lkZURhdGFTb3VyY2VGYWN0b3J5LiRpbmplY3QgPSBbX19vYnNlcnZhYmxlLmZhY3RvcnlOYW1lLCBkYXRhU291cmNlUHJvY2Vzc29yX3NlcnZpY2VfMS5wcm9jZXNzb3JTZXJ2aWNlTmFtZSwgX19hcnJheS5zZXJ2aWNlTmFtZSwgX19vYmplY3Quc2VydmljZU5hbWUsIF9fc3luY2hyb25pemVkUmVxdWVzdHMuZmFjdG9yeU5hbWVdO1xyXG5mdW5jdGlvbiBzZXJ2ZXJTaWRlRGF0YVNvdXJjZUZhY3Rvcnkob2JzZXJ2YWJsZUZhY3RvcnksIGRhdGFTb3VyY2VQcm9jZXNzb3IsIGFycmF5LCBvYmplY3QsIHN5bmNocm9uaXplZFJlcXVlc3RzRmFjdG9yeSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKGdldERhdGFTZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZXJ2ZXJTaWRlRGF0YVNvdXJjZShnZXREYXRhU2V0LCBvYnNlcnZhYmxlRmFjdG9yeSwgZGF0YVNvdXJjZVByb2Nlc3NvciwgYXJyYXksIG9iamVjdCwgc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5KTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnNlcnZlclNpZGVEYXRhU291cmNlRmFjdG9yeSA9IHNlcnZlclNpZGVEYXRhU291cmNlRmFjdG9yeTtcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXSlcclxuICAgIC5mYWN0b3J5KGV4cG9ydHMuZmFjdG9yeU5hbWUsIHNlcnZlclNpZGVEYXRhU291cmNlRmFjdG9yeSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZlclNpZGVEYXRhU291cmNlLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGF0YVNvdXJjZXMvc2VydmVyU2lkZURhdGFTb3VyY2Uvc2VydmVyU2lkZURhdGFTb3VyY2Uuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDYyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYnNlcnZhYmxlID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLm9ic2VydmFibGU7XHJcbnZhciBfX2FycmF5ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLmFycmF5O1xyXG52YXIgZGF0YVNvdXJjZUJhc2Vfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vZGF0YVNvdXJjZUJhc2Uuc2VydmljZScpO1xyXG52YXIgZGF0YVNvdXJjZVByb2Nlc3Nvcl9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuLi9kYXRhU291cmNlUHJvY2Vzc29yLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5kYXRhU291cmNlcy5zaW1wbGVEYXRhU291cmNlJztcclxuZXhwb3J0cy5mYWN0b3J5TmFtZSA9ICdzaW1wbGVEYXRhU291cmNlJztcclxudmFyIFNpbXBsZURhdGFTb3VyY2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFNpbXBsZURhdGFTb3VyY2UsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBTaW1wbGVEYXRhU291cmNlKGRhdGEsIG9ic2VydmFibGVGYWN0b3J5LCBkYXRhU291cmNlUHJvY2Vzc29yLCBhcnJheSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG9ic2VydmFibGVGYWN0b3J5LCBkYXRhU291cmNlUHJvY2Vzc29yLCBhcnJheSk7XHJcbiAgICAgICAgdGhpcy5jb3VudEZpbHRlckdyb3VwcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmF3RGF0YVNldCA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzRGF0YSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFNpbXBsZURhdGFTb3VyY2U7XHJcbn0oZGF0YVNvdXJjZUJhc2Vfc2VydmljZV8xLkRhdGFTb3VyY2VCYXNlKSk7XHJcbmV4cG9ydHMuU2ltcGxlRGF0YVNvdXJjZSA9IFNpbXBsZURhdGFTb3VyY2U7XHJcbnNpbXBsZURhdGFTb3VyY2VGYWN0b3J5LiRpbmplY3QgPSBbX19vYnNlcnZhYmxlLmZhY3RvcnlOYW1lLCBkYXRhU291cmNlUHJvY2Vzc29yX3NlcnZpY2VfMS5wcm9jZXNzb3JTZXJ2aWNlTmFtZSwgX19hcnJheS5zZXJ2aWNlTmFtZV07XHJcbmZ1bmN0aW9uIHNpbXBsZURhdGFTb3VyY2VGYWN0b3J5KG9ic2VydmFibGVGYWN0b3J5LCBkYXRhU291cmNlUHJvY2Vzc29yLCBhcnJheSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaW1wbGVEYXRhU291cmNlKGRhdGEsIG9ic2VydmFibGVGYWN0b3J5LCBkYXRhU291cmNlUHJvY2Vzc29yLCBhcnJheSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5zaW1wbGVEYXRhU291cmNlRmFjdG9yeSA9IHNpbXBsZURhdGFTb3VyY2VGYWN0b3J5O1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtfX29ic2VydmFibGUubW9kdWxlTmFtZSwgX19hcnJheS5tb2R1bGVOYW1lXSlcclxuICAgIC5mYWN0b3J5KGV4cG9ydHMuZmFjdG9yeU5hbWUsIHNpbXBsZURhdGFTb3VyY2VGYWN0b3J5KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2ltcGxlRGF0YVNvdXJjZS5zZXJ2aWNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2RhdGFTb3VyY2VzL3NpbXBsZURhdGFTb3VyY2Uvc2ltcGxlRGF0YVNvdXJjZS5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gNjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29ic2VydmFibGUgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JzZXJ2YWJsZTtcclxudmFyIF9fYXJyYXkgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuYXJyYXk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBfX3N5bmNocm9uaXplZFJlcXVlc3RzID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLnN5bmNocm9uaXplZFJlcXVlc3RzO1xyXG52YXIgYXN5bmNEYXRhU291cmNlX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL2FzeW5jRGF0YVNvdXJjZS5zZXJ2aWNlJyk7XHJcbnZhciBkYXRhU291cmNlUHJvY2Vzc29yX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL2RhdGFTb3VyY2VQcm9jZXNzb3Iuc2VydmljZScpO1xyXG52YXIgc29ydF8xID0gcmVxdWlyZSgnLi4vLi4vc29ydHMvc29ydCcpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5jYXJkQ29udGFpbmVyLmRhdGFTb3VyY2VzLnNtYXJ0RGF0YVNvdXJjZSc7XHJcbmV4cG9ydHMuZmFjdG9yeU5hbWUgPSAnc21hcnREYXRhU291cmNlJztcclxudmFyIFNtYXJ0RGF0YVNvdXJjZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoU21hcnREYXRhU291cmNlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU21hcnREYXRhU291cmNlKGdldERhdGFTZXQsIG9ic2VydmFibGVGYWN0b3J5LCBkYXRhU291cmNlUHJvY2Vzc29yLCBhcnJheSwgb2JqZWN0LCBzeW5jaHJvbml6ZWRSZXF1ZXN0c0ZhY3RvcnkpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBnZXREYXRhU2V0LCBvYnNlcnZhYmxlRmFjdG9yeSwgZGF0YVNvdXJjZVByb2Nlc3NvciwgYXJyYXksIHN5bmNocm9uaXplZFJlcXVlc3RzRmFjdG9yeSk7XHJcbiAgICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgdGhpcy50aHJvdHRsZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudGhyb3R0bGVMaW1pdCA9IDIwMDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbWFydERhdGFTb3VyY2UucHJvdG90eXBlLCBcImZpbHRlcnNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVycztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbHRlcnMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5zZXR1cFN1YnNjcmlwdGlvbnMoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFNtYXJ0RGF0YVNvdXJjZS5wcm90b3R5cGUub25Tb3J0Q2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRocm90dGxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vblNvcnRDaGFuZ2UuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU21hcnREYXRhU291cmNlLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRocm90dGxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZWZyZXNoLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNtYXJ0RGF0YVNvdXJjZS5wcm90b3R5cGUuZ2V0UGFyYW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlQXBwbGllZEZpbHRlcnMoKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmaWx0ZXJzOiB0aGlzLmFwcGxpZWRGaWx0ZXJzLFxyXG4gICAgICAgICAgICBzb3J0czogXy5tYXAodGhpcy5zb3J0cywgZnVuY3Rpb24gKHNvcnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBzb3J0LmNvbHVtbi5sYWJlbCxcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHNvcnRfMS5Tb3J0RGlyZWN0aW9uLmdldEZ1bGxOYW1lKHNvcnQuZGlyZWN0aW9uKSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBwYWdpbmc6IHtcclxuICAgICAgICAgICAgICAgIHBhZ2VOdW1iZXI6IDEsXHJcbiAgICAgICAgICAgICAgICBwYWdlU2l6ZTogdGhpcy50aHJvdHRsZUxpbWl0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgU21hcnREYXRhU291cmNlLnByb3RvdHlwZS51cGRhdGVBcHBsaWVkRmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmlsdGVyRGljdGlvbmFyeSA9IHRoaXMuYXJyYXkudG9EaWN0aW9uYXJ5KHRoaXMuZmlsdGVycywgZnVuY3Rpb24gKGZpbHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyLnR5cGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5hcHBsaWVkRmlsdGVycyA9IF8ubWFwVmFsdWVzKGZpbHRlckRpY3Rpb25hcnksIGZ1bmN0aW9uIChmaWx0ZXIpIHtcclxuICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihmaWx0ZXIuc2VyaWFsaXplKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci5zZXJpYWxpemUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFwcGxpZWRGaWx0ZXJzID0gXy5vbWl0QnkodGhpcy5hcHBsaWVkRmlsdGVycywgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZSA9PSBudWxsOyB9KTtcclxuICAgIH07XHJcbiAgICBTbWFydERhdGFTb3VyY2UucHJvdG90eXBlLnNldHVwU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLnN1YnNjcmlwdGlvbnMsIGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcclxuICAgICAgICBfLmVhY2godGhpcy5maWx0ZXJzLCBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChfLmlzRnVuY3Rpb24oZmlsdGVyLnN1YnNjcmliZSkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbnMucHVzaChmaWx0ZXIuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHsgX3RoaXMub25GaWx0ZXJDaGFuZ2UoZmlsdGVyKTsgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU21hcnREYXRhU291cmNlLnByb3RvdHlwZS5vbkZpbHRlckNoYW5nZSA9IGZ1bmN0aW9uIChmaWx0ZXIpIHtcclxuICAgICAgICBpZiAoXy5oYXModGhpcy5hcHBsaWVkRmlsdGVycywgZmlsdGVyLnR5cGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNtYXJ0RGF0YVNvdXJjZS5wcm90b3R5cGUucmVzb2x2ZVJlbG9hZCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IHJlc3VsdDtcclxuICAgICAgICB0aGlzLnRocm90dGxlZCA9IChkYXRhLmNvdW50ID4gZGF0YS5kYXRhU2V0Lmxlbmd0aCk7XHJcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZXNvbHZlUmVsb2FkLmNhbGwodGhpcywgZGF0YS5kYXRhU2V0KTtcclxuICAgICAgICB0aGlzLmNvdW50ID0gZGF0YS5jb3VudDtcclxuICAgICAgICB0aGlzLmlzRW1wdHkgPSBkYXRhLmlzRW1wdHk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNtYXJ0RGF0YVNvdXJjZTtcclxufShhc3luY0RhdGFTb3VyY2Vfc2VydmljZV8xLkFzeW5jRGF0YVNvdXJjZSkpO1xyXG5leHBvcnRzLlNtYXJ0RGF0YVNvdXJjZSA9IFNtYXJ0RGF0YVNvdXJjZTtcclxuc21hcnREYXRhU291cmNlRmFjdG9yeS4kaW5qZWN0ID0gW19fb2JzZXJ2YWJsZS5mYWN0b3J5TmFtZSwgZGF0YVNvdXJjZVByb2Nlc3Nvcl9zZXJ2aWNlXzEucHJvY2Vzc29yU2VydmljZU5hbWUsIF9fYXJyYXkuc2VydmljZU5hbWUsIF9fb2JqZWN0LnNlcnZpY2VOYW1lLCBfX3N5bmNocm9uaXplZFJlcXVlc3RzLmZhY3RvcnlOYW1lXTtcclxuZnVuY3Rpb24gc21hcnREYXRhU291cmNlRmFjdG9yeShvYnNlcnZhYmxlRmFjdG9yeSwgZGF0YVNvdXJjZVByb2Nlc3NvciwgYXJyYXksIG9iamVjdCwgc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEluc3RhbmNlOiBmdW5jdGlvbiAoZ2V0RGF0YVNldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNtYXJ0RGF0YVNvdXJjZShnZXREYXRhU2V0LCBvYnNlcnZhYmxlRmFjdG9yeSwgZGF0YVNvdXJjZVByb2Nlc3NvciwgYXJyYXksIG9iamVjdCwgc3luY2hyb25pemVkUmVxdWVzdHNGYWN0b3J5KTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnNtYXJ0RGF0YVNvdXJjZUZhY3RvcnkgPSBzbWFydERhdGFTb3VyY2VGYWN0b3J5O1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLmZhY3RvcnkoZXhwb3J0cy5mYWN0b3J5TmFtZSwgc21hcnREYXRhU291cmNlRmFjdG9yeSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNtYXJ0RGF0YVNvdXJjZS5zZXJ2aWNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2RhdGFTb3VyY2VzL3NtYXJ0RGF0YVNvdXJjZS9zbWFydERhdGFTb3VyY2Uuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDY0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgY29sdW1uU2VhcmNoRmlsdGVyID0gcmVxdWlyZSgnLi9jb2x1bW5TZWFyY2hGaWx0ZXIvY29sdW1uU2VhcmNoRmlsdGVyLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5jb2x1bW5TZWFyY2hGaWx0ZXIgPSBjb2x1bW5TZWFyY2hGaWx0ZXI7XHJcbnZhciBkYXRlRmlsdGVyID0gcmVxdWlyZSgnLi9kYXRlRmlsdGVyL2RhdGVGaWx0ZXIubW9kdWxlJyk7XHJcbnZhciBmaWx0ZXJHcm91cCA9IHJlcXVpcmUoJy4vZmlsdGVyR3JvdXAvZmlsdGVyR3JvdXAubW9kdWxlJyk7XHJcbmV4cG9ydHMuZmlsdGVyR3JvdXAgPSBmaWx0ZXJHcm91cDtcclxudmFyIHNlbGVjdEZpbHRlciA9IHJlcXVpcmUoJy4vc2VsZWN0RmlsdGVyL3NlbGVjdEZpbHRlci5tb2R1bGUnKTtcclxuZXhwb3J0cy5zZWxlY3RGaWx0ZXIgPSBzZWxlY3RGaWx0ZXI7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuZmlsdGVycyc7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW1xyXG4gICAgY29sdW1uU2VhcmNoRmlsdGVyLm1vZHVsZU5hbWUsXHJcbiAgICBkYXRlRmlsdGVyLm1vZHVsZU5hbWUsXHJcbiAgICBmaWx0ZXJHcm91cC5tb2R1bGVOYW1lLFxyXG4gICAgc2VsZWN0RmlsdGVyLm1vZHVsZU5hbWVcclxuXSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlcnMubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZmlsdGVycy5tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSA2NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fb2JqZWN0ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLm9iamVjdDtcclxudmFyIF9fc3RyaW5nID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLnN0cmluZztcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5maWx0ZXJzLmNvbHVtblNlYXJjaEZpbHRlcic7XHJcbmV4cG9ydHMuZmFjdG9yeU5hbWUgPSAnY29sdW1uU2VhcmNoRmlsdGVyJztcclxuZXhwb3J0cy5maWx0ZXJOYW1lID0gJ2NvbHVtbi1zZWFyY2gnO1xyXG52YXIgQ29sdW1uU2VhcmNoRmlsdGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbHVtblNlYXJjaEZpbHRlcihvYmplY3QsIHN0cmluZykge1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIHRoaXMuc3RyaW5nID0gc3RyaW5nO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IGV4cG9ydHMuZmlsdGVyTmFtZTtcclxuICAgIH1cclxuICAgIENvbHVtblNlYXJjaEZpbHRlci5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpZiAodGhpcy5jb2x1bW4gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5vYmplY3QudG9TdHJpbmcodGhpcy5jb2x1bW4uZ2V0VmFsdWUoaXRlbSkpO1xyXG4gICAgICAgIHZhciBzZWFyY2ggPSB0aGlzLnNlYXJjaFRleHQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhc2VTZW5zaXRpdmUpIHtcclxuICAgICAgICAgICAgc2VhcmNoID0gc2VhcmNoLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nLmNvbnRhaW5zKHZhbHVlLCBzZWFyY2gpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb2x1bW5TZWFyY2hGaWx0ZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQ29sdW1uU2VhcmNoRmlsdGVyID0gQ29sdW1uU2VhcmNoRmlsdGVyO1xyXG5jb2x1bW5TZWFyY2hGaWx0ZXJGYWN0b3J5LiRpbmplY3QgPSBbX19vYmplY3Quc2VydmljZU5hbWUsIF9fc3RyaW5nLnNlcnZpY2VOYW1lXTtcclxuZnVuY3Rpb24gY29sdW1uU2VhcmNoRmlsdGVyRmFjdG9yeShvYmplY3QsIHN0cmluZykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbHVtblNlYXJjaEZpbHRlcihvYmplY3QsIHN0cmluZyk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5jb2x1bW5TZWFyY2hGaWx0ZXJGYWN0b3J5ID0gY29sdW1uU2VhcmNoRmlsdGVyRmFjdG9yeTtcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbX19vYmplY3QubW9kdWxlTmFtZSwgX19zdHJpbmcubW9kdWxlTmFtZV0pXHJcbiAgICAuZmFjdG9yeShleHBvcnRzLmZhY3RvcnlOYW1lLCBjb2x1bW5TZWFyY2hGaWx0ZXJGYWN0b3J5KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sdW1uU2VhcmNoRmlsdGVyLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9jb2x1bW5TZWFyY2hGaWx0ZXIvY29sdW1uU2VhcmNoRmlsdGVyLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSA2NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX2RhdGUgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuZGF0ZTtcclxudmFyIGRhdGVGaWx0ZXJfc2VydmljZV8xID0gcmVxdWlyZSgnLi9kYXRlRmlsdGVyLnNlcnZpY2UnKTtcclxudmFyIGRhdGVGaWx0ZXJfY29tcG9uZW50XzEgPSByZXF1aXJlKCcuL2RhdGVGaWx0ZXIuY29tcG9uZW50Jyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuZmlsdGVycy5kYXRlRmlsdGVyJztcclxuX19leHBvcnQocmVxdWlyZSgnLi9kYXRlRmlsdGVyLnNlcnZpY2UnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vZGF0ZUZpbHRlci5jb21wb25lbnQnKSk7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fZGF0ZS5tb2R1bGVOYW1lXSlcclxuICAgIC5mYWN0b3J5KGRhdGVGaWx0ZXJfc2VydmljZV8xLmZhY3RvcnlOYW1lLCBkYXRlRmlsdGVyX3NlcnZpY2VfMS5kYXRlRmlsdGVyRmFjdG9yeSlcclxuICAgIC5kaXJlY3RpdmUoZGF0ZUZpbHRlcl9jb21wb25lbnRfMS5kaXJlY3RpdmVOYW1lLCBkYXRlRmlsdGVyX2NvbXBvbmVudF8xLmRhdGVGaWx0ZXIpXHJcbiAgICAuY29udHJvbGxlcihkYXRlRmlsdGVyX2NvbXBvbmVudF8xLmNvbnRyb2xsZXJOYW1lLCBkYXRlRmlsdGVyX2NvbXBvbmVudF8xLkRhdGVGaWx0ZXJDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZUZpbHRlci5tb2R1bGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9kYXRlRmlsdGVyL2RhdGVGaWx0ZXIubW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gNjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19kYXRlID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLmRhdGU7XHJcbmV4cG9ydHMuZmFjdG9yeU5hbWUgPSAncmxEYXRlRmlsdGVyRmFjdG9yeSc7XHJcbnZhciBEYXRlRmlsdGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERhdGVGaWx0ZXIodmFsdWVTZWxlY3RvciwgZGF0ZVV0aWxpdHksIHR5cGUpIHtcclxuICAgICAgICB0aGlzLnZhbHVlU2VsZWN0b3IgPSB2YWx1ZVNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuZGF0ZVV0aWxpdHkgPSBkYXRlVXRpbGl0eTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuaW5jbHVkZVRpbWUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIERhdGVGaWx0ZXIucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGVVdGlsaXR5LmlzRGF0ZSh0aGlzLnNlbGVjdGVkRGF0ZTEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5kYXRlUmFuZ2UpIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW1EYXRlID0gdGhpcy5nZXRWYWx1ZShpdGVtKTtcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZTEgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIC8vaGF2ZSB0byBzZXQgdGhlIHNlbGVjdGVkRGF0ZTEgdG8gYSB2YWxpZCBEYXRlIG9iamVjdCBmb3IgY29tcGFyaXNvbnMuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluY2x1ZGVUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGUxID0gbW9tZW50KHRoaXMuc2VsZWN0ZWREYXRlMSkudG9EYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2luY3JlYXNlIGl0IGJ5IDEgZGF5cy4gdG8gaW5sY3VkZSB0aGUgc2VsZWN0ZWMgZGF0ZSBpbiB0aGUgcmFuZ2UuXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGUxID0gbW9tZW50KHRoaXMuc2VsZWN0ZWREYXRlMSkuYWRkKDEsICdkYXlzJykudG9EYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZVV0aWxpdHkuZGF0ZUluUmFuZ2UoaXRlbURhdGUsIHRoaXMuc2VsZWN0ZWREYXRlMiwgdGhpcy5zZWxlY3RlZERhdGUxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluY2x1ZGVUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlVXRpbGl0eS5zYW1lRGF0ZVRpbWUodGhpcy5nZXRWYWx1ZShpdGVtKSwgdGhpcy5zZWxlY3RlZERhdGUxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVVdGlsaXR5LnNhbWVEYXRlKHRoaXMuZ2V0VmFsdWUoaXRlbSksIHRoaXMuc2VsZWN0ZWREYXRlMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGF0ZUZpbHRlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IHRoaXMudmFsdWVTZWxlY3RvcjtcclxuICAgICAgICByZXR1cm4gaXRlbVtwcm9wZXJ0eV07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERhdGVGaWx0ZXI7XHJcbn0oKSk7XHJcbmRhdGVGaWx0ZXJGYWN0b3J5LiRpbmplY3QgPSBbX19kYXRlLnNlcnZpY2VOYW1lXTtcclxuZnVuY3Rpb24gZGF0ZUZpbHRlckZhY3RvcnkoZGF0ZVV0aWxpdHkpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uIChzZXR0aW5ncykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGVGaWx0ZXIoc2V0dGluZ3MudmFsdWVTZWxlY3RvciwgZGF0ZVV0aWxpdHksIHNldHRpbmdzLnR5cGUpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuZGF0ZUZpbHRlckZhY3RvcnkgPSBkYXRlRmlsdGVyRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZUZpbHRlci5zZXJ2aWNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZGF0ZUZpbHRlci9kYXRlRmlsdGVyLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSA2OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiKGZ1bmN0aW9uKCkgeyBtb2R1bGUuZXhwb3J0cyA9IHRoaXNbXCJtb21lbnRcIl07IH0oKSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCBcIm1vbWVudFwiXG4gKiogbW9kdWxlIGlkID0gNjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3Mvbm9kZS9ub2RlLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19kYXRlID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLmRhdGU7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybERhdGVGaWx0ZXInO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ3JsRGF0ZUZpbHRlckNvbnRyb2xsZXInO1xyXG4vLyBPcHRpb25hbCBpbnRlcmZhY2UgZm9yIGJvdW5kIGF0dHJpYnV0ZXNcclxudmFyIERhdGVPcHRpb25zO1xyXG4oZnVuY3Rpb24gKERhdGVPcHRpb25zKSB7XHJcbiAgICBEYXRlT3B0aW9uc1tEYXRlT3B0aW9uc1tcIkRheVwiXSA9IDBdID0gXCJEYXlcIjtcclxuICAgIERhdGVPcHRpb25zW0RhdGVPcHRpb25zW1wiV2Vla1wiXSA9IDFdID0gXCJXZWVrXCI7XHJcbiAgICBEYXRlT3B0aW9uc1tEYXRlT3B0aW9uc1tcIk1vbnRoXCJdID0gMl0gPSBcIk1vbnRoXCI7XHJcbn0pKERhdGVPcHRpb25zIHx8IChEYXRlT3B0aW9ucyA9IHt9KSk7XHJcbjtcclxudmFyIERhdGVGaWx0ZXJDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERhdGVGaWx0ZXJDb250cm9sbGVyKCRzY29wZSwgZGF0ZVV0aWxpdHksICRlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgdGhpcy5kYXRlVXRpbGl0eSA9IGRhdGVVdGlsaXR5O1xyXG4gICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBcImRheXNcIjtcclxuICAgICAgICB0aGlzLmZpbHRlci5pbmNsdWRlVGltZSA9IHRoaXMuaW5jbHVkZVRpbWU7XHJcbiAgICAgICAgLy90aGlzIGlzIGFkZGVkIHRvIGFkZHJlc3MgYW4gYWd1bGFyIHF1aXJrIG9uIHRoZSBzZXJ2aWNlIGV2ZW50IGxpc3QgcGFnZS5cclxuICAgICAgICAvL3RoZSBpbnB1dCBmaWVsZCB3YXMgbm90IGNsZWFyaW5nIGNvcnJlY2x0eSB3aGVuIHRoZSBzZWxlY3RlZERhdGUxIHZhbHVlIGlzIG51bGwuXHJcbiAgICAgICAgdGhpcy5pbnB1dEZpZWxkID0gdGhpcy4kZWxlbWVudC5maW5kKCdybC1kYXRlLXRpbWUgaW5wdXQnKTtcclxuICAgICAgICB0aGlzLmZpbHRlci5kYXRlUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5jbGVhckJ1dHRvbiA9PSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLmNsZWFyQnV0dG9uID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRlRmlsdGVyQ29udHJvbGxlci5wcm90b3R5cGUsIFwic2VsZWN0ZWREYXRlMVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlci5zZWxlY3RlZERhdGUxICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQodGhpcy5maWx0ZXIuc2VsZWN0ZWREYXRlMSkuZm9ybWF0KCdNL0QvWVlZWScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9jbGVhciBpbnB1dCBmaWVsZCBvZiBkYXRlIHZhbHVlLiBhbmQgcmVzdCBwYXN0IGRheS93ZWVrIGNvdW50XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0RmllbGQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZVV0aWxpdHkuaXNEYXRlKHYpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlci5zZWxlY3RlZERhdGUxID0gbW9tZW50KHYpLnRvRGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9jbGVhciBpbnB1dCBmaWVsZCBvZiBkYXRlIHZhbHVlLiBhbmQgcmVzdCBwYXN0IGRheS93ZWVrIGNvdW50XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0RmllbGQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXIuc2VsZWN0ZWREYXRlMSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoRGF0YVNvdXJjZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERhdGVGaWx0ZXJDb250cm9sbGVyLnByb3RvdHlwZSwgXCJzZWxlY3RlZERhdGUyXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyLnNlbGVjdGVkRGF0ZTI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyLnNlbGVjdGVkRGF0ZTIgPSB2O1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hEYXRhU291cmNlKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBEYXRlRmlsdGVyQ29udHJvbGxlci5wcm90b3R5cGUucmVmcmVzaERhdGFTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc291cmNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2UucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4kc2NvcGUuJGVtaXQoJ2RhdGFTb3VyY2UucmVxdWVzdFJlZnJlc2gnKTsgLy8qZXZlbnQ/XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERhdGVGaWx0ZXJDb250cm9sbGVyLnByb3RvdHlwZS5jbGVhckNvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuY291bnRDaGFuZ2UoKTtcclxuICAgIH07XHJcbiAgICBEYXRlRmlsdGVyQ29udHJvbGxlci5wcm90b3R5cGUuZGVjcmVhc2VDb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNvdW50IC09IDE7XHJcbiAgICAgICAgdGhpcy5zZXREYXRlVGltZU5vd0lmTnVsbCgpO1xyXG4gICAgICAgIC8vZG8gbm90IGFsbG93IGNvdW50IGJlbG93IDBcclxuICAgICAgICBpZiAodGhpcy5jb3VudCA8IDAgfHwgdGhpcy5jb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb3VudENoYW5nZSgpO1xyXG4gICAgfTtcclxuICAgIERhdGVGaWx0ZXJDb250cm9sbGVyLnByb3RvdHlwZS5jb3VudENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb3VudCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY291bnQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb3VudCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXIuZGF0ZVJhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8gYWRkIGRheXMgaGFzIHRvIGJlIGEgbmVnYXRpdmUgbnVtYmVyIHRvIGdvIGJhY2t3b3Jkcy5cclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUyID0gbW9tZW50KHRoaXMuc2VsZWN0ZWREYXRlMSkuYWRkKCh0aGlzLmNvdW50ICogLTEpLCB0aGlzLnR5cGUpLnRvRGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvdW50ID09IDApIHtcclxuICAgICAgICAgICAgLy9vbmx5IGNoYW5nZSB0aGlzIHZhbHVlcyB0aGUgZmlyc3QgdGltZS5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyLmRhdGVSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXIuZGF0ZVJhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZTIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERhdGVGaWx0ZXJDb250cm9sbGVyLnByb3RvdHlwZS5pbmNyZWFzZUNvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY291bnQgKz0gMTtcclxuICAgICAgICB0aGlzLnNldERhdGVUaW1lTm93SWZOdWxsKCk7XHJcbiAgICAgICAgdGhpcy5jb3VudENoYW5nZSgpO1xyXG4gICAgfTtcclxuICAgIERhdGVGaWx0ZXJDb250cm9sbGVyLnByb3RvdHlwZS5zZXREYXRlVGltZU5vd0lmTnVsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZERhdGUxID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUxID0gbW9tZW50KERhdGUubm93KCkpLmZvcm1hdCgnTS9EL1lZWVknKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGF0ZUZpbHRlckNvbnRyb2xsZXIucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZGF5cycpIHtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gJ3dlZWtzJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9ICdkYXlzJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb3VudENoYW5nZSgpO1xyXG4gICAgfTtcclxuICAgIERhdGVGaWx0ZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsIF9fZGF0ZS5zZXJ2aWNlTmFtZSwgJyRlbGVtZW50J107XHJcbiAgICByZXR1cm4gRGF0ZUZpbHRlckNvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRGF0ZUZpbHRlckNvbnRyb2xsZXIgPSBEYXRlRmlsdGVyQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gZGF0ZUZpbHRlcigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9kYXRlRmlsdGVyLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2ZpbHRlcicsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgZmlsdGVyOiAnPScsXHJcbiAgICAgICAgICAgIHNvdXJjZTogJz0nLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0AnLFxyXG4gICAgICAgICAgICBzZWxlY3RvcjogJz0nLFxyXG4gICAgICAgICAgICBpbmNsdWRlVGltZTogJz0nLFxyXG4gICAgICAgICAgICBpbmNsdWRlRGF0ZVJhbmdlOiAnPScsXHJcbiAgICAgICAgICAgIGNsZWFyQnV0dG9uOiAnPSdcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLmRhdGVGaWx0ZXIgPSBkYXRlRmlsdGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlRmlsdGVyLmNvbXBvbmVudC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2RhdGVGaWx0ZXIvZGF0ZUZpbHRlci5jb21wb25lbnQuanNcbiAqKiBtb2R1bGUgaWQgPSA3MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImZpbHRlci1ncm91cFxcXCI+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwiY29udGVudC1ncm91cFxcXCI+XFxyXFxuXFx0XFx0PGxhYmVsPnt7OjpmaWx0ZXIubGFiZWx9fTwvbGFiZWw+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYnRuXFxcIj5cXHJcXG5cXHRcXHRcXHQ8cmwtZGF0ZS10aW1lIG5nLW1vZGVsPVxcXCJmaWx0ZXIuc2VsZWN0ZWREYXRlMVxcXCIgdXNlLXRpbWU9XFxcImZpbHRlci5pbmNsdWRlVGltZVxcXCIgY2xlYXItYnV0dG9uPVxcXCJmaWx0ZXIuY2xlYXJCdXR0b25cXFwiIG9uLWNsZWFyLWV2ZW50PVxcXCJmaWx0ZXIuY2xlYXJDb3VudCgpXFxcIlxcclxcblxcdFxcdFxcdGNsYXNzPVxcXCJwdWxsLWxlZnRcXFwiPjwvcmwtZGF0ZS10aW1lPlxcclxcblxcdFxcdDwvZGl2PlxcclxcblxcdDwvZGl2PlxcclxcblxcdDxkaXYgbmctaWY9XFxcImZpbHRlci5pbmNsdWRlRGF0ZVJhbmdlXFxcIiBjbGFzcz1cXFwiY29udGVudC1ncm91cFxcXCI+XFxyXFxuXFx0XFx0PGxhYmVsPkFkZCBwcmV2aW91czwvbGFiZWw+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPlxcclxcblxcdFxcdDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1idG5cXFwiPlxcclxcblxcdFxcdFxcdDxidXR0b24gIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWNsaWNrPVxcXCJmaWx0ZXIuZGVjcmVhc2VDb3VudCgpO1xcXCI+XFxyXFxuXFx0XFx0XFx0XFx0PGkgY2xhc3M9XFxcImZhIGZhLW1pbnVzXFxcIj48L2k+XFxyXFxuXFx0XFx0XFx0PC9idXR0b24+XFxyXFxuXFx0XFx0PC9zcGFuPlxcclxcblxcdFxcdDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIG5nLW1vZGVsPVxcXCJmaWx0ZXIuY291bnRcXFwiIG5nLWNoYW5nZT1cXFwiZmlsdGVyLmNvdW50Q2hhbmdlKCk7XFxcIiAvPlxcclxcblxcdFxcdDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1idG5cXFwiPlxcclxcblxcdFxcdFxcdDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgbmctY2xpY2s9XFxcImZpbHRlci50b2dnbGUoKTtcXFwiPlxcclxcblxcdFxcdFxcdHt7ZmlsdGVyLnR5cGV9fVxcclxcblxcdFxcdFxcdDwvYnV0dG9uPlxcclxcblxcdFxcdDwvc3Bhbj5cXHJcXG5cXHRcXHQ8c3BhbiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYnRuXFxcIj5cXHJcXG5cXHRcXHRcXHQ8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWNsaWNrPVxcXCJmaWx0ZXIuaW5jcmVhc2VDb3VudCgpO1xcXCI+XFxyXFxuXFx0XFx0XFx0XFx0PGkgY2xhc3M9XFxcImZhIGZhLXBsdXNcXFwiPjwvaT5cXHJcXG5cXHRcXHRcXHQ8L2J1dHRvbj5cXHJcXG5cXHRcXHQ8L3NwYW4+XFxyXFxuXFx0XFx0PC9kaXY+XFxyXFxuXFx0PC9kaXY+XFxyXFxuPC9kaXY+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2RhdGVGaWx0ZXIvZGF0ZUZpbHRlci5odG1sXG4gKiogbW9kdWxlIGlkID0gNzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgZmlsdGVyT3B0aW9uID0gcmVxdWlyZSgnLi9maWx0ZXJPcHRpb24vZmlsdGVyT3B0aW9uJyk7XHJcbmV4cG9ydHMuZmlsdGVyT3B0aW9uID0gZmlsdGVyT3B0aW9uO1xyXG52YXIgbW9kZUZpbHRlckdyb3VwID0gcmVxdWlyZSgnLi9tb2RlRmlsdGVyR3JvdXAvbW9kZUZpbHRlckdyb3VwLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5tb2RlRmlsdGVyR3JvdXAgPSBtb2RlRmlsdGVyR3JvdXA7XHJcbnZhciByYW5nZUZpbHRlckdyb3VwID0gcmVxdWlyZSgnLi9yYW5nZUZpbHRlckdyb3VwL3JhbmdlRmlsdGVyR3JvdXAuc2VydmljZScpO1xyXG5leHBvcnRzLnJhbmdlRmlsdGVyR3JvdXAgPSByYW5nZUZpbHRlckdyb3VwO1xyXG52YXIgZmlsdGVyR3JvdXBfc2VydmljZV8xID0gcmVxdWlyZSgnLi9maWx0ZXJHcm91cC5zZXJ2aWNlJyk7XHJcbnZhciBmaWx0ZXJHcm91cF9kaXJlY3RpdmVfMSA9IHJlcXVpcmUoJy4vZmlsdGVyR3JvdXAuZGlyZWN0aXZlJyk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vZmlsdGVyR3JvdXAuZGlyZWN0aXZlJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL2ZpbHRlckdyb3VwLnNlcnZpY2UnKSk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuZmlsdGVycy5maWx0ZXJHcm91cCc7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW1xyXG4gICAgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLm9iamVjdC5tb2R1bGVOYW1lLFxyXG4gICAgZmlsdGVyT3B0aW9uLm1vZHVsZU5hbWUsXHJcbiAgICBtb2RlRmlsdGVyR3JvdXAubW9kdWxlTmFtZSxcclxuICAgIHJhbmdlRmlsdGVyR3JvdXAubW9kdWxlTmFtZSxcclxuXSlcclxuICAgIC5mYWN0b3J5KGZpbHRlckdyb3VwX3NlcnZpY2VfMS5mYWN0b3J5TmFtZSwgZmlsdGVyR3JvdXBfc2VydmljZV8xLmZpbHRlckdyb3VwRmFjdG9yeSlcclxuICAgIC5kaXJlY3RpdmUoZmlsdGVyR3JvdXBfZGlyZWN0aXZlXzEuZGlyZWN0aXZlTmFtZSwgZmlsdGVyR3JvdXBfZGlyZWN0aXZlXzEuZmlsdGVyR3JvdXApXHJcbiAgICAuY29udHJvbGxlcihmaWx0ZXJHcm91cF9kaXJlY3RpdmVfMS5jb250cm9sbGVyTmFtZSwgZmlsdGVyR3JvdXBfZGlyZWN0aXZlXzEuRmlsdGVyR3JvdXBDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyR3JvdXAubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZmlsdGVyR3JvdXAvZmlsdGVyR3JvdXAubW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gNzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uLy4uLy4uLy4uL3R5cGluZ3MvY29tbW9uanMuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5maWx0ZXJzLmZpbHRlckdyb3VwLmZpbHRlck9wdGlvbic7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybEZpbHRlck9wdGlvbic7XHJcbmZ1bmN0aW9uIGZpbHRlck9wdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9maWx0ZXJPcHRpb24uaHRtbCcpLFxyXG4gICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgIGFjdGl2YXRlOiAnJicsXHJcbiAgICAgICAgICAgIGlzQWN0aXZlOiAnPWFjdGl2ZScsXHJcbiAgICAgICAgICAgIG9wdGlvbjogJz0nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuZmlsdGVyT3B0aW9uID0gZmlsdGVyT3B0aW9uO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGZpbHRlck9wdGlvbik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlck9wdGlvbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2ZpbHRlckdyb3VwL2ZpbHRlck9wdGlvbi9maWx0ZXJPcHRpb24uanNcbiAqKiBtb2R1bGUgaWQgPSA3M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInJvdyBmaWx0ZXItb3B0aW9uXFxcIiBuZy1jbGFzcz1cXFwieyAnYWN0aXZlJzogaXNBY3RpdmUgfVxcXCIgbmctY2xpY2s9XFxcImFjdGl2YXRlKClcXFwiPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImNvbC14cy0xXFxcIj5cXHJcXG5cXHRcXHQ8aSBjbGFzcz0nZmEgZmEtYXJyb3ctcmlnaHQnIG5nLXNob3c9XFxcImlzQWN0aXZlID09IHRydWVcXFwiPjwvaT5cXHJcXG5cXHQ8L2Rpdj5cXHJcXG5cXHQ8ZGl2IGNsYXNzPVxcXCJjb2wteHMtMVxcXCIgbmctaWY9XFxcImhhc0ljb25cXFwiIG5nLWJpbmQtaHRtbD1cXFwib3B0aW9uLmljb25cXFwiPjwvZGl2PlxcclxcblxcdDxkaXYgbmctY2xhc3M9XFxcInsgJ2NvbC14cy02JzogaGFzSWNvbiwgJ2NvbC14cy03JzogIWhhc0ljb24gfVxcXCI+XFxyXFxuXFx0XFx0e3tvcHRpb24ubGFiZWx9fVxcclxcblxcdDwvZGl2PlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImNvbC14cy0zIHRleHQtcmlnaHRcXFwiIG5nLXNob3c9XFxcIm9wdGlvbi5jb3VudCAhPSBudWxsXFxcIj5cXHJcXG5cXHRcXHQoe3tvcHRpb24uY291bnR9fSlcXHJcXG5cXHQ8L2Rpdj5cXHJcXG48L2Rpdj5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZmlsdGVyR3JvdXAvZmlsdGVyT3B0aW9uL2ZpbHRlck9wdGlvbi5odG1sXG4gKiogbW9kdWxlIGlkID0gNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBmaWx0ZXJHcm91cF9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuLi9maWx0ZXJHcm91cC5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuZmlsdGVycy5maWx0ZXJHcm91cC5tb2RlRmlsdGVyR3JvdXAnO1xyXG5leHBvcnRzLmZhY3RvcnlOYW1lID0gJ21vZGVGaWx0ZXJHcm91cCc7XHJcbnZhciBNb2RlRmlsdGVyR3JvdXAgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE1vZGVGaWx0ZXJHcm91cCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE1vZGVGaWx0ZXJHcm91cChzZXR0aW5ncywgb2JqZWN0KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgc2V0dGluZ3MsIG9iamVjdCk7XHJcbiAgICAgICAgdGhpcy5nZXRWYWx1ZSA9IHNldHRpbmdzLmdldFZhbHVlO1xyXG4gICAgICAgIHNldHRpbmdzLm9wdGlvbnMgPSBfLm1hcChzZXR0aW5ncy5vcHRpb25zLCB0aGlzLmJ1aWxkTW9kZU9wdGlvbi5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLmluaXRPcHRpb25zKCk7XHJcbiAgICB9XHJcbiAgICBNb2RlRmlsdGVyR3JvdXAucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYWN0aXZlT3B0aW9uID0gdGhpcy5hY3RpdmVPcHRpb247XHJcbiAgICAgICAgaWYgKGFjdGl2ZU9wdGlvbi5kaXNwbGF5QWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWN0aXZlT3B0aW9uLnZhbHVlO1xyXG4gICAgfTtcclxuICAgIE1vZGVGaWx0ZXJHcm91cC5wcm90b3R5cGUuYnVpbGRNb2RlT3B0aW9uID0gZnVuY3Rpb24gKG9wdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG1vZGVPcHRpb24gPSBvcHRpb247XHJcbiAgICAgICAgbW9kZU9wdGlvbi5maWx0ZXIgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAobW9kZU9wdGlvbi5kaXNwbGF5QWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0VmFsdWUoaXRlbSkgPT09IG1vZGVPcHRpb24udmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbW9kZU9wdGlvbjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTW9kZUZpbHRlckdyb3VwO1xyXG59KGZpbHRlckdyb3VwX3NlcnZpY2VfMS5GaWx0ZXJHcm91cCkpO1xyXG5leHBvcnRzLk1vZGVGaWx0ZXJHcm91cCA9IE1vZGVGaWx0ZXJHcm91cDtcclxubW9kZUZpbHRlckdyb3VwRmFjdG9yeS4kaW5qZWN0ID0gW19fb2JqZWN0LnNlcnZpY2VOYW1lXTtcclxuZnVuY3Rpb24gbW9kZUZpbHRlckdyb3VwRmFjdG9yeShvYmplY3QpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uIChzZXR0aW5ncykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vZGVGaWx0ZXJHcm91cChzZXR0aW5ncywgb2JqZWN0KTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLm1vZGVGaWx0ZXJHcm91cEZhY3RvcnkgPSBtb2RlRmlsdGVyR3JvdXBGYWN0b3J5O1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtfX29iamVjdC5tb2R1bGVOYW1lXSlcclxuICAgIC5mYWN0b3J5KGV4cG9ydHMuZmFjdG9yeU5hbWUsIG1vZGVGaWx0ZXJHcm91cEZhY3RvcnkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlRmlsdGVyR3JvdXAuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL2ZpbHRlckdyb3VwL21vZGVGaWx0ZXJHcm91cC9tb2RlRmlsdGVyR3JvdXAuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDc1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbmV4cG9ydHMuZmFjdG9yeU5hbWUgPSAnZmlsdGVyR3JvdXAnO1xyXG52YXIgRmlsdGVyR3JvdXAgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZpbHRlckdyb3VwLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyR3JvdXAoc2V0dGluZ3MsIG9iamVjdCkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcclxuICAgICAgICB0aGlzLmxhYmVsID0gc2V0dGluZ3MubGFiZWw7XHJcbiAgICAgICAgdGhpcy50eXBlID0gc2V0dGluZ3MudHlwZSAhPSBudWxsID8gc2V0dGluZ3MudHlwZSA6IHNldHRpbmdzLmxhYmVsO1xyXG4gICAgICAgIHRoaXMuaW5pdE9wdGlvbnMoKTtcclxuICAgIH1cclxuICAgIEZpbHRlckdyb3VwLnByb3RvdHlwZS5pbml0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuc2V0dGluZ3Mub3B0aW9ucztcclxuICAgICAgICB0aGlzLmFjdGl2ZU9wdGlvbiA9IHRoaXMuc2V0RGVmYXVsdE9wdGlvbigpO1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLm9wdGlvbnMsIGZ1bmN0aW9uIChvcHRpb24pIHtcclxuICAgICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQob3B0aW9uLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24udHlwZSA9IG9wdGlvbi5sYWJlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcHRpb24udHlwZSA9IF90aGlzLm9iamVjdC50b1N0cmluZyhvcHRpb24udHlwZSkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlsdGVyR3JvdXAucHJvdG90eXBlLCBcImFjdGl2ZU9wdGlvblwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVPcHRpb247XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVPcHRpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZShmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGaWx0ZXJHcm91cC5wcm90b3R5cGUuc2V0RGVmYXVsdE9wdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGVmYXVsdE9wdGlvbiA9IHRoaXMub3B0aW9uc1swXTtcclxuICAgICAgICBfLmVhY2godGhpcy5vcHRpb25zLCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5hY3RpdmUgIT0gbnVsbCAmJiBpdGVtLmFjdGl2ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdE9wdGlvbiA9IGl0ZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdE9wdGlvbjtcclxuICAgIH07XHJcbiAgICBGaWx0ZXJHcm91cC5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVPcHRpb24uZmlsdGVyKGl0ZW0pO1xyXG4gICAgfTtcclxuICAgIEZpbHRlckdyb3VwLnByb3RvdHlwZS5zZXJpYWxpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0aGlzLnNldHRpbmdzLnNlcmlhbGl6ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Muc2VyaWFsaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24odGhpcy5hY3RpdmVPcHRpb24uc2VyaWFsaXplKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVPcHRpb24uc2VyaWFsaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZU9wdGlvbi52YWx1ZTtcclxuICAgIH07XHJcbiAgICBGaWx0ZXJHcm91cC5wcm90b3R5cGUuc2V0QWN0aXZlT3B0aW9uID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLm9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlT3B0aW9uID0gdGhpcy5vcHRpb25zW2luZGV4XTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmlsdGVyR3JvdXAucHJvdG90eXBlLnNldE9wdGlvbkNvdW50cyA9IGZ1bmN0aW9uIChjb3VudHMpIHtcclxuICAgICAgICBfLmVhY2godGhpcy5vcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChfLmhhcyhjb3VudHMsIG9wdGlvbi50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLmNvdW50ID0gY291bnRzW29wdGlvbi50eXBlXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZpbHRlckdyb3VwLnByb3RvdHlwZS51cGRhdGVPcHRpb25Db3VudHMgPSBmdW5jdGlvbiAoZmlsdGVyZWREYXRhU2V0KSB7XHJcbiAgICAgICAgXy5lYWNoKHRoaXMub3B0aW9ucywgZnVuY3Rpb24gKG9wdGlvbikge1xyXG4gICAgICAgICAgICBvcHRpb24uY291bnQgPSBfLmZpbHRlcihmaWx0ZXJlZERhdGFTZXQsIG9wdGlvbi5maWx0ZXIuYmluZChvcHRpb24pKS5sZW5ndGg7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpbHRlckdyb3VwO1xyXG59KHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5maWx0ZXJzLlNlcmlhbGl6YWJsZUZpbHRlcikpO1xyXG5leHBvcnRzLkZpbHRlckdyb3VwID0gRmlsdGVyR3JvdXA7XHJcbmZpbHRlckdyb3VwRmFjdG9yeS4kaW5qZWN0ID0gW19fb2JqZWN0LnNlcnZpY2VOYW1lXTtcclxuZnVuY3Rpb24gZmlsdGVyR3JvdXBGYWN0b3J5KG9iamVjdCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKHNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVyR3JvdXAoc2V0dGluZ3MsIG9iamVjdCk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5maWx0ZXJHcm91cEZhY3RvcnkgPSBmaWx0ZXJHcm91cEZhY3Rvcnk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlckdyb3VwLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9maWx0ZXJHcm91cC9maWx0ZXJHcm91cC5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gNzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBmaWx0ZXJHcm91cF9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuLi9maWx0ZXJHcm91cC5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuZmlsdGVycy5maWx0ZXJHcm91cC5yYW5nZUZpbHRlckdyb3VwJztcclxuZXhwb3J0cy5mYWN0b3J5TmFtZSA9ICdyYW5nZUZpbHRlckdyb3VwJztcclxudmFyIFJhbmdlRmlsdGVyR3JvdXAgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFJhbmdlRmlsdGVyR3JvdXAsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBSYW5nZUZpbHRlckdyb3VwKHNldHRpbmdzLCBvYmplY3QpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncywgb2JqZWN0KTtcclxuICAgICAgICB0aGlzLmdldFZhbHVlID0gc2V0dGluZ3MuZ2V0VmFsdWU7XHJcbiAgICAgICAgc2V0dGluZ3Mub3B0aW9ucyA9IF8ubWFwKHNldHRpbmdzLm9wdGlvbnMsIHRoaXMuYnVpbGRSYW5nZU9wdGlvbi5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLmluaXRPcHRpb25zKCk7XHJcbiAgICB9XHJcbiAgICBSYW5nZUZpbHRlckdyb3VwLnByb3RvdHlwZS5zZXJpYWxpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFjdGl2ZU9wdGlvbiA9IHRoaXMuYWN0aXZlT3B0aW9uO1xyXG4gICAgICAgIGlmICh0aGlzLmlzTnVsbE9wdGlvbihhY3RpdmVPcHRpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBoaWdoSW5jbHVzaXZlOiBhY3RpdmVPcHRpb24uaGlnaEluY2x1c2l2ZSxcclxuICAgICAgICAgICAgaGlnaEV4Y2x1c2l2ZTogYWN0aXZlT3B0aW9uLmhpZ2hFeGNsdXNpdmUsXHJcbiAgICAgICAgICAgIGxvd0luY2x1c2l2ZTogYWN0aXZlT3B0aW9uLmxvd0luY2x1c2l2ZSxcclxuICAgICAgICAgICAgbG93RXhjbHVzaXZlOiBhY3RpdmVPcHRpb24ubG93RXhjbHVzaXZlLFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgUmFuZ2VGaWx0ZXJHcm91cC5wcm90b3R5cGUuYnVpbGRSYW5nZU9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBtb2RlT3B0aW9uID0gb3B0aW9uO1xyXG4gICAgICAgIG1vZGVPcHRpb24uZmlsdGVyID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMuZ2V0VmFsdWUoaXRlbSk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChvcHRpb24uaGlnaEV4Y2x1c2l2ZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZSA8IG9wdGlvbi5oaWdoRXhjbHVzaXZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKF8uaXNVbmRlZmluZWQob3B0aW9uLmhpZ2hJbmNsdXNpdmUpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWUgPD0gb3B0aW9uLmhpZ2hJbmNsdXNpdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQob3B0aW9uLmxvd0V4Y2x1c2l2ZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgdmFsdWUgPiBvcHRpb24ubG93RXhjbHVzaXZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKF8uaXNVbmRlZmluZWQob3B0aW9uLmxvd0luY2x1c2l2ZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgdmFsdWUgPj0gb3B0aW9uLmxvd0luY2x1c2l2ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG1vZGVPcHRpb247XHJcbiAgICB9O1xyXG4gICAgUmFuZ2VGaWx0ZXJHcm91cC5wcm90b3R5cGUuaXNOdWxsT3B0aW9uID0gZnVuY3Rpb24gKG9wdGlvbikge1xyXG4gICAgICAgIHJldHVybiBvcHRpb24uaGlnaEluY2x1c2l2ZSA9PSBudWxsXHJcbiAgICAgICAgICAgICYmIG9wdGlvbi5oaWdoRXhjbHVzaXZlID09IG51bGxcclxuICAgICAgICAgICAgJiYgb3B0aW9uLmxvd0luY2x1c2l2ZSA9PSBudWxsXHJcbiAgICAgICAgICAgICYmIG9wdGlvbi5sb3dFeGNsdXNpdmUgPT0gbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmFuZ2VGaWx0ZXJHcm91cDtcclxufShmaWx0ZXJHcm91cF9zZXJ2aWNlXzEuRmlsdGVyR3JvdXApKTtcclxucmFuZ2VGaWx0ZXJHcm91cEZhY3RvcnkuJGluamVjdCA9IFtfX29iamVjdC5zZXJ2aWNlTmFtZV07XHJcbmZ1bmN0aW9uIHJhbmdlRmlsdGVyR3JvdXBGYWN0b3J5KG9iamVjdCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKHNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2VGaWx0ZXJHcm91cChzZXR0aW5ncywgb2JqZWN0KTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnJhbmdlRmlsdGVyR3JvdXBGYWN0b3J5ID0gcmFuZ2VGaWx0ZXJHcm91cEZhY3Rvcnk7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fb2JqZWN0Lm1vZHVsZU5hbWVdKVxyXG4gICAgLmZhY3RvcnkoZXhwb3J0cy5mYWN0b3J5TmFtZSwgcmFuZ2VGaWx0ZXJHcm91cEZhY3RvcnkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5nZUZpbHRlckdyb3VwLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9maWx0ZXJHcm91cC9yYW5nZUZpbHRlckdyb3VwL3JhbmdlRmlsdGVyR3JvdXAuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDc3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsRmlsdGVyR3JvdXAnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ0ZpbHRlckdyb3VwQ29udHJvbGxlcic7XHJcbnZhciBGaWx0ZXJHcm91cENvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyR3JvdXBDb250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICAgIHRoaXMuaGFzSWNvbiA9IHRoaXMuaWNvbiAhPSBudWxsICYmIHRoaXMuaWNvbiAhPT0gJyc7XHJcbiAgICAgICAgdGhpcy5zaG93Q2hpbGRyZW4gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgRmlsdGVyR3JvdXBDb250cm9sbGVyLnByb3RvdHlwZS50b2dnbGVDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNob3dDaGlsZHJlbiA9ICF0aGlzLnNob3dDaGlsZHJlbjtcclxuICAgIH07XHJcbiAgICBGaWx0ZXJHcm91cENvbnRyb2xsZXIucHJvdG90eXBlLnNlbGVjdE9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb24pIHtcclxuICAgICAgICB0aGlzLmZpbHRlckdyb3VwLmFjdGl2ZU9wdGlvbiA9IG9wdGlvbjtcclxuICAgICAgICB0aGlzLnNob3dDaGlsZHJlbiA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHNjb3BlLiRlbWl0KCdkYXRhU291cmNlLnJlcXVlc3RSZWZyZXNoJyk7IC8vKmV2ZW50P1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGaWx0ZXJHcm91cENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJ107XHJcbiAgICByZXR1cm4gRmlsdGVyR3JvdXBDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbHRlckdyb3VwQ29udHJvbGxlciA9IEZpbHRlckdyb3VwQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gZmlsdGVyR3JvdXAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vZmlsdGVyR3JvdXAuZGlyZWN0aXZlLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2NvbnRyb2xsZXInLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIGljb246ICc9JyxcclxuICAgICAgICAgICAgZmlsdGVyR3JvdXA6ICc9JyxcclxuICAgICAgICAgICAgc291cmNlOiAnPScsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5maWx0ZXJHcm91cCA9IGZpbHRlckdyb3VwO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXJHcm91cC5kaXJlY3RpdmUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9maWx0ZXJHcm91cC9maWx0ZXJHcm91cC5kaXJlY3RpdmUuanNcbiAqKiBtb2R1bGUgaWQgPSA3OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImZpbHRlci1ncm91cFxcXCI+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwicm93IGZpbHRlci1oZWFkZXJcXFwiIG5nLWNsaWNrPVxcXCJjb250cm9sbGVyLnRvZ2dsZUNoaWxkcmVuKClcXFwiPlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcImNvbC1zbS0xMlxcXCI+XFxyXFxuXFx0XFx0XFx0PGkgY2xhc3M9XFxcImNvbGxhcHNlLWljb24gZmEgZmEtY2FyZXQtZG93biBmYS0yeFxcXCIgbmctc2hvdz1cXFwiY29udHJvbGxlci5zaG93Q2hpbGRyZW5cXFwiIHRpdGxlPVxcXCJIaWRlIGZpbHRlciBsaXN0XFxcIj48L2k+XFxyXFxuXFx0XFx0XFx0PGkgY2xhc3M9XFxcImNvbGxhcHNlLWljb24gZmEgZmEtY2FyZXQtcmlnaHQgZmEtMnhcXFwiIG5nLWhpZGU9XFxcImNvbnRyb2xsZXIuc2hvd0NoaWxkcmVuXFxcIiB0aXRsZT1cXFwiU2hvdyBmaWx0ZXIgbGlzdFxcXCI+PC9pPlxcclxcblxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImZpbHRlci1vcHRpb25cXFwiPlxcclxcblxcdFxcdFxcdFxcdDxkaXYgc3R5bGU9XFxcImRpc3BsYXk6aW5saW5lLWJsb2NrXFxcIiBuZy1zaG93PVxcXCJjb250cm9sbGVyLmhhc0ljb25cXFwiIG5nLWJpbmQtaHRtbD1cXFwiY29udHJvbGxlci5pY29uXFxcIj48L2Rpdj5cXHJcXG5cXHRcXHRcXHRcXHQ8aDQgc3R5bGU9XFxcImRpc3BsYXk6IGlubGluZS1ibG9ja1xcXCI+e3tjb250cm9sbGVyLmZpbHRlckdyb3VwLmxhYmVsfX06IHt7Y29udHJvbGxlci5maWx0ZXJHcm91cC5hY3RpdmVPcHRpb24ubGFiZWx9fTwvaDQ+XFxyXFxuXFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0PC9kaXY+XFxyXFxuXFx0PC9kaXY+XFxyXFxuXFx0PGRpdiBuZy1zaG93PVxcXCJjb250cm9sbGVyLnNob3dDaGlsZHJlblxcXCIgbmctcmVwZWF0PVxcXCJmaWx0ZXJPcHRpb24gaW4gY29udHJvbGxlci5maWx0ZXJHcm91cC5vcHRpb25zXFxcIj5cXHJcXG5cXHRcXHQ8cmwtZmlsdGVyLW9wdGlvbiBvcHRpb249XFxcImZpbHRlck9wdGlvblxcXCIgYWN0aXZlPVxcXCJmaWx0ZXJHcm91cC5hY3RpdmVPcHRpb24gPT09IGZpbHRlck9wdGlvblxcXCIgYWN0aXZhdGU9XFxcImNvbnRyb2xsZXIuc2VsZWN0T3B0aW9uKGZpbHRlck9wdGlvbilcXFwiPjwvcmwtZmlsdGVyLW9wdGlvbj5cXHJcXG5cXHQ8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2ZpbHRlcnMvZmlsdGVyR3JvdXAvZmlsdGVyR3JvdXAuZGlyZWN0aXZlLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA3OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBzZWxlY3RGaWx0ZXJfc2VydmljZV8xID0gcmVxdWlyZSgnLi9zZWxlY3RGaWx0ZXIuc2VydmljZScpO1xyXG52YXIgc2VsZWN0RmlsdGVyX2NvbXBvbmVudF8xID0gcmVxdWlyZSgnLi9zZWxlY3RGaWx0ZXIuY29tcG9uZW50Jyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuZmlsdGVycy5zZWxlY3RGaWx0ZXInO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NlbGVjdEZpbHRlci5zZXJ2aWNlJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NlbGVjdEZpbHRlci5jb21wb25lbnQnKSk7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZmFjdG9yeShzZWxlY3RGaWx0ZXJfc2VydmljZV8xLmZhY3RvcnlOYW1lLCBzZWxlY3RGaWx0ZXJfc2VydmljZV8xLnNlbGVjdEZpbHRlckZhY3RvcnkpXHJcbiAgICAuZGlyZWN0aXZlKHNlbGVjdEZpbHRlcl9jb21wb25lbnRfMS5kaXJlY3RpdmVOYW1lLCBzZWxlY3RGaWx0ZXJfY29tcG9uZW50XzEuc2VsZWN0RmlsdGVyKVxyXG4gICAgLmNvbnRyb2xsZXIoc2VsZWN0RmlsdGVyX2NvbXBvbmVudF8xLmNvbnRyb2xsZXJOYW1lLCBzZWxlY3RGaWx0ZXJfY29tcG9uZW50XzEuU2VsZWN0RmlsdGVyQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdEZpbHRlci5tb2R1bGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9zZWxlY3RGaWx0ZXIvc2VsZWN0RmlsdGVyLm1vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDgwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbmV4cG9ydHMuZmFjdG9yeU5hbWUgPSAncmxTZWxlY3RGaWx0ZXJGYWN0b3J5JztcclxudmFyIFNlbGVjdEZpbHRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTZWxlY3RGaWx0ZXIodmFsdWVTZWxlY3RvciwgY29tcGFyZXIpIHtcclxuICAgICAgICB0aGlzLnZhbHVlU2VsZWN0b3IgPSB2YWx1ZVNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuY29tcGFyZXIgPSBjb21wYXJlcjtcclxuICAgICAgICB0aGlzLnR5cGUgPSAnc2VsZWN0RmlsdGVyJztcclxuICAgIH1cclxuICAgIFNlbGVjdEZpbHRlci5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbXBhcmVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZXIodGhpcy5nZXRWYWx1ZShpdGVtKSwgdGhpcy5zZWxlY3RlZFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF9fb2JqZWN0Lm9iamVjdFV0aWxpdHkuYXJlRXF1YWwodGhpcy5nZXRWYWx1ZShpdGVtKSwgdGhpcy5zZWxlY3RlZFZhbHVlKTtcclxuICAgIH07XHJcbiAgICBTZWxlY3RGaWx0ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKHRoaXMudmFsdWVTZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgdmFyIGZ1bmMgPSB0aGlzLnZhbHVlU2VsZWN0b3I7XHJcbiAgICAgICAgICAgIHJldHVybiAoZnVuYyhpdGVtKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcHJvcGVydHkgPSB0aGlzLnZhbHVlU2VsZWN0b3I7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtW3Byb3BlcnR5XTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNlbGVjdEZpbHRlcjtcclxufSgpKTtcclxuZnVuY3Rpb24gc2VsZWN0RmlsdGVyRmFjdG9yeSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uICh2YWx1ZVNlbGVjdG9yLCBjb21wYXJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlbGVjdEZpbHRlcih2YWx1ZVNlbGVjdG9yLCBjb21wYXJlcik7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5zZWxlY3RGaWx0ZXJGYWN0b3J5ID0gc2VsZWN0RmlsdGVyRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0RmlsdGVyLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9zZWxlY3RGaWx0ZXIvc2VsZWN0RmlsdGVyLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSA4MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybFNlbGVjdEZpbHRlcic7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnU2VsZWN0RmlsdGVyQ29udHJvbGxlcic7XHJcbnZhciBTZWxlY3RGaWx0ZXJDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNlbGVjdEZpbHRlckNvbnRyb2xsZXIoJHNjb3BlKSB7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VsZWN0RmlsdGVyQ29udHJvbGxlci5wcm90b3R5cGUsIFwic2VsZWN0ZWRWYWx1ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlci5zZWxlY3RlZFZhbHVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlci5zZWxlY3RlZFZhbHVlID0gdjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJHNjb3BlLiRlbWl0KCdkYXRhU291cmNlLnJlcXVlc3RSZWZyZXNoJyk7IC8vKmV2ZW50P1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBTZWxlY3RGaWx0ZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG4gICAgcmV0dXJuIFNlbGVjdEZpbHRlckNvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuU2VsZWN0RmlsdGVyQ29udHJvbGxlciA9IFNlbGVjdEZpbHRlckNvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIHNlbGVjdEZpbHRlcigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zZWxlY3RGaWx0ZXIuaHRtbCcpLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnZmlsdGVyJyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBmaWx0ZXI6ICc9JyxcclxuICAgICAgICAgICAgb3B0aW9uczogJz0nLFxyXG4gICAgICAgICAgICBnZXRPcHRpb25zOiAnJicsXHJcbiAgICAgICAgICAgIHNvdXJjZTogJz0nLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0AnLFxyXG4gICAgICAgICAgICBzZWxlY3RvcjogJz0nLFxyXG4gICAgICAgICAgICBudWxsT3B0aW9uOiAnQCdcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnNlbGVjdEZpbHRlciA9IHNlbGVjdEZpbHRlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0RmlsdGVyLmNvbXBvbmVudC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9maWx0ZXJzL3NlbGVjdEZpbHRlci9zZWxlY3RGaWx0ZXIuY29tcG9uZW50LmpzXG4gKiogbW9kdWxlIGlkID0gODJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJmaWx0ZXItZ3JvdXBcXFwiPlxcclxcblxcdDxybC1zZWxlY3QgbmctbW9kZWw9XFxcImZpbHRlci5zZWxlY3RlZFZhbHVlXFxcIiBvcHRpb25zPVxcXCJmaWx0ZXIub3B0aW9uc1xcXCIgbGFiZWw9XFxcInt7ZmlsdGVyLmxhYmVsfX1cXFwiXFxyXFxuXFx0XFx0XFx0ICAgc2VsZWN0b3I9XFxcImZpbHRlci5zZWxlY3RvclxcXCIgZ2V0LW9wdGlvbnM9XFxcImZpbHRlci5nZXRPcHRpb25zKClcXFwiIG51bGwtb3B0aW9uPVxcXCJ7e2ZpbHRlci5udWxsT3B0aW9ufX1cXFwiPjwvcmwtc2VsZWN0PlxcclxcbjwvZGl2PlwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZmlsdGVycy9zZWxlY3RGaWx0ZXIvc2VsZWN0RmlsdGVyLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA4M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5pdGVtQ291bnQnO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxJdGVtQ291bnQnO1xyXG5mdW5jdGlvbiBpdGVtQ291bnQoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgcmVxdWlyZTogeyBjYXJkQ29udGFpbmVyOiAnXl5ybENhcmRDb250YWluZXInIH0sXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vaXRlbUNvdW50Lmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoKSB7IH0sXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnaXRlbUNvdW50JyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5pdGVtQ291bnQgPSBpdGVtQ291bnQ7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgaXRlbUNvdW50KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlbUNvdW50LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL2l0ZW1Db3VudC9pdGVtQ291bnQuanNcbiAqKiBtb2R1bGUgaWQgPSA4NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwIG5nLXNob3c9XFxcIiFpdGVtQ291bnQuY2FyZENvbnRhaW5lci5kYXRhU291cmNlLmxvYWRpbmdEYXRhU2V0XFxcIj5cXHJcXG5cXHRTaG93aW5nIDxzdHJvbmc+e3tpdGVtQ291bnQuY2FyZENvbnRhaW5lci5kYXRhU291cmNlLmRhdGFTZXQubGVuZ3RofX0gb2Yge3tpdGVtQ291bnQuY2FyZENvbnRhaW5lci5kYXRhU291cmNlLmNvdW50fX08L3N0cm9uZz4gdG90YWwgaXRlbXNcXHJcXG48L3A+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9pdGVtQ291bnQvaXRlbUNvdW50Lmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA4NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5jYXJkQ29udGFpbmVyLnBhZ2VyJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsUGFnZXInO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ1BhZ2VyQ29udHJvbGxlcic7XHJcbmV4cG9ydHMuZGVmYXVsdFZpc2libGVQYWdlQ291bnQgPSA1O1xyXG52YXIgUGFnZXJDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBhZ2VyQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICAgIHRoaXMuY2FuR29CYWNrID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jYW5Hb0ZvcndhcmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmhhc1BhZ2VGaWx0ZXIgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFnZUNvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdG90YWxJdGVtcyA9IF90aGlzLmRhdGFTb3VyY2UuY291bnQ7XHJcbiAgICAgICAgICAgIHZhciBuZXdMYXN0UGFnZSA9IE1hdGguY2VpbCh0b3RhbEl0ZW1zIC8gX3RoaXMucGFnZXIucGFnZVNpemUpO1xyXG4gICAgICAgICAgICBpZiAobmV3TGFzdFBhZ2UgIT09IF90aGlzLmxhc3RQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sYXN0UGFnZSA9IG5ld0xhc3RQYWdlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZVBhZ2luZygpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBQYWdlckNvbnRyb2xsZXIucHJvdG90eXBlLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5jYXJkQ29udGFpbmVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZ2VyID0gdGhpcy5jYXJkQ29udGFpbmVyLmRhdGFTb3VyY2UucGFnZXI7XHJcbiAgICAgICAgaWYgKHRoaXMucGFnZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmhhc1BhZ2VGaWx0ZXIgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZVBhZ2VDb3VudCA9IHRoaXMucGFnZUNvdW50ICE9IG51bGwgPyB0aGlzLnBhZ2VDb3VudCA6IGV4cG9ydHMuZGVmYXVsdFZpc2libGVQYWdlQ291bnQ7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFBhZ2UgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UgPSB0aGlzLmNhcmRDb250YWluZXIuZGF0YVNvdXJjZTtcclxuICAgICAgICAgICAgdGhpcy4kc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmRhdGFTb3VyY2UuY291bnQ7IH0sIHRoaXMudXBkYXRlUGFnZUNvdW50KTtcclxuICAgICAgICAgICAgdGhpcy4kc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnBhZ2VyLnBhZ2VTaXplOyB9LCB0aGlzLnVwZGF0ZVBhZ2VDb3VudCk7XHJcbiAgICAgICAgICAgIHRoaXMuJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5jdXJyZW50UGFnZTsgfSwgZnVuY3Rpb24gKHBhZ2UpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVBhZ2luZygpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucGFnZXIucGFnZU51bWJlciA9IHBhZ2U7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5kYXRhU291cmNlLm9uUGFnaW5nQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQYWdlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZVBhZ2luZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcGFnZSA9IHRoaXMuY3VycmVudFBhZ2U7XHJcbiAgICAgICAgdGhpcy5jYW5Hb0JhY2sgPSBwYWdlID4gMTtcclxuICAgICAgICB0aGlzLmNhbkdvRm9yd2FyZCA9IHBhZ2UgPCB0aGlzLmxhc3RQYWdlO1xyXG4gICAgICAgIHZhciBub25DdXJyZW50VmlzaWJsZVBhZ2VzID0gdGhpcy52aXNpYmxlUGFnZUNvdW50IC0gMTtcclxuICAgICAgICB2YXIgYmVmb3JlID0gTWF0aC5mbG9vcihub25DdXJyZW50VmlzaWJsZVBhZ2VzIC8gMik7XHJcbiAgICAgICAgdmFyIGFmdGVyID0gTWF0aC5jZWlsKG5vbkN1cnJlbnRWaXNpYmxlUGFnZXMgLyAyKTtcclxuICAgICAgICB2YXIgc3RhcnRQYWdlID0gcGFnZSAtIGJlZm9yZTtcclxuICAgICAgICB2YXIgZW5kUGFnZSA9IHBhZ2UgKyBhZnRlcjtcclxuICAgICAgICBpZiAoc3RhcnRQYWdlIDwgMSkge1xyXG4gICAgICAgICAgICBzdGFydFBhZ2UgPSAxO1xyXG4gICAgICAgICAgICBlbmRQYWdlID0gTWF0aC5taW4odGhpcy52aXNpYmxlUGFnZUNvdW50LCB0aGlzLmxhc3RQYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZW5kUGFnZSA+IHRoaXMubGFzdFBhZ2UpIHtcclxuICAgICAgICAgICAgZW5kUGFnZSA9IHRoaXMubGFzdFBhZ2U7XHJcbiAgICAgICAgICAgIHN0YXJ0UGFnZSA9IE1hdGgubWF4KHRoaXMubGFzdFBhZ2UgLSBub25DdXJyZW50VmlzaWJsZVBhZ2VzLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYWdlcyA9IF8ucmFuZ2Uoc3RhcnRQYWdlLCBlbmRQYWdlICsgMSk7XHJcbiAgICB9O1xyXG4gICAgUGFnZXJDb250cm9sbGVyLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTtcclxuICAgIH07XHJcbiAgICBQYWdlckNvbnRyb2xsZXIucHJvdG90eXBlLnByZXZpb3VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlLS07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBhZ2VyQ29udHJvbGxlci5wcm90b3R5cGUuZ290byA9IGZ1bmN0aW9uIChwYWdlKSB7XHJcbiAgICAgICAgaWYgKHBhZ2UgPj0gMSAmJiBwYWdlIDw9IHRoaXMubGFzdFBhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IHBhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBhZ2VyQ29udHJvbGxlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA8IHRoaXMubGFzdFBhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSsrO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQYWdlckNvbnRyb2xsZXIucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IHRoaXMubGFzdFBhZ2U7XHJcbiAgICB9O1xyXG4gICAgUGFnZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG4gICAgcmV0dXJuIFBhZ2VyQ29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5QYWdlckNvbnRyb2xsZXIgPSBQYWdlckNvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIHBhZ2VyKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHJlcXVpcmU6IHsgY2FyZENvbnRhaW5lcjogJ15ecmxDYXJkQ29udGFpbmVyJyB9LFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3BhZ2VyLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3BhZ2VyJyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBwYWdlQ291bnQ6ICc9dmlzaWJsZVBhZ2VzJyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnBhZ2VyID0gcGFnZXI7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgcGFnZXIpXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBQYWdlckNvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9wYWdlci9wYWdlci5qc1xuICoqIG1vZHVsZSBpZCA9IDg2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPG5hdiBuZy1pZj1cXFwicGFnZXIuaGFzUGFnZUZpbHRlclxcXCI+XFxyXFxuXFx0PHVsIGNsYXNzPVxcXCJwYWdpbmF0aW9uXFxcIj5cXHJcXG5cXHRcXHQ8bGkgdGl0bGU9XFxcIkdvIHRvIGZpcnN0IHBhZ2VcXFwiIG5nLWNsaWNrPVxcXCJwYWdlci5maXJzdCgpXFxcIlxcclxcblxcdFxcdFxcdG5nLWNsYXNzPVxcXCJ7ICdkaXNhYmxlZCc6ICFwYWdlci5jYW5Hb0JhY2sgfVxcXCI+XFxyXFxuXFx0XFx0XFx0PGE+PGkgY2xhc3M9XFxcImZhIGZhLWFuZ2xlLWRvdWJsZS1sZWZ0XFxcIj48L2k+PC9hPlxcclxcblxcdFxcdDwvbGk+XFxyXFxuXFx0XFx0PGxpIHRpdGxlPVxcXCJHbyB0byBwcmV2aW91cyBwYWdlXFxcIiBuZy1jbGljaz1cXFwicGFnZXIucHJldmlvdXMoKVxcXCJcXHJcXG5cXHRcXHRcXHRuZy1jbGFzcz1cXFwieyAnZGlzYWJsZWQnOiAhcGFnZXIuY2FuR29CYWNrIH1cXFwiPlxcclxcblxcdFxcdFxcdDxhPjxpIGNsYXNzPVxcXCJmYSBmYS1hbmdsZS1sZWZ0XFxcIj48L2k+PC9hPlxcclxcblxcdFxcdDwvbGk+XFxyXFxuXFx0XFx0PGxpIHRpdGxlPVxcXCJHbyB0byBwYWdlIHt7cGFnZXIucGFnZX19XFxcIiBuZy1jbGljaz1cXFwicGFnZXIuZ290byhwYWdlKVxcXCJcXHJcXG5cXHRcXHRcXHRuZy1yZXBlYXQ9XFxcInBhZ2UgaW4gcGFnZXIucGFnZXNcXFwiXFxyXFxuXFx0XFx0XFx0bmctY2xhc3M9XFxcInsgJ2FjdGl2ZSc6IHBhZ2VyLmN1cnJlbnRQYWdlID09IHBhZ2UgfVxcXCI+XFxyXFxuXFx0XFx0XFx0PGE+e3twYWdlfX08L2E+XFxyXFxuXFx0XFx0PC9saT5cXHJcXG5cXHRcXHQ8bGkgdGl0bGU9XFxcIkdvIHRvIG5leHQgcGFnZVxcXCIgbmctY2xpY2s9XFxcInBhZ2VyLm5leHQoKVxcXCJcXHJcXG5cXHRcXHRcXHRuZy1jbGFzcz1cXFwieyAnZGlzYWJsZWQnOiAhcGFnZXIuY2FuR29Gb3J3YXJkIH1cXFwiPlxcclxcblxcdFxcdFxcdDxhPjxpIGNsYXNzPVxcXCJmYSBmYS1hbmdsZS1yaWdodFxcXCI+PC9pPjwvYT5cXHJcXG5cXHRcXHQ8L2xpPlxcclxcblxcdFxcdDxsaSB0aXRsZT1cXFwiR28gdG8gbGFzdCBwYWdlXFxcIiBuZy1jbGljaz1cXFwicGFnZXIubGFzdCgpXFxcIlxcclxcblxcdFxcdFxcdG5nLWNsYXNzPVxcXCJ7ICdkaXNhYmxlZCc6ICFwYWdlci5jYW5Hb0ZvcndhcmQgfVxcXCI+XFxyXFxuXFx0XFx0XFx0PGE+PGkgY2xhc3M9XFxcImZhIGZhLWFuZ2xlLWRvdWJsZS1yaWdodFxcXCI+PC9pPjwvYT5cXHJcXG5cXHRcXHQ8L2xpPlxcclxcblxcdDwvdWw+XFxyXFxuPC9uYXY+XFxyXFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9wYWdlci9wYWdlci5odG1sXG4gKiogbW9kdWxlIGlkID0gODdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uLy4uL3R5cGluZ3MvY29tbW9uanMuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuY2FyZENvbnRhaW5lci5wYWdlU2l6ZSc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybFBhZ2VTaXplJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdQYWdlU2l6ZUNvbnRyb2xsZXInO1xyXG5leHBvcnRzLmF2YWlsYWJsZVBhZ2VTaXplcyA9IFsxMCwgMjUsIDUwLCAxMDBdO1xyXG5leHBvcnRzLmRlZmF1bHRQYWdlU2l6ZSA9IDEwO1xyXG52YXIgUGFnZVNpemVDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBhZ2VTaXplQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgIH1cclxuICAgIFBhZ2VTaXplQ29udHJvbGxlci5wcm90b3R5cGUuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmNhcmRDb250YWluZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRQYWdlU2l6ZSA9IGV4cG9ydHMuZGVmYXVsdFBhZ2VTaXplO1xyXG4gICAgICAgIHRoaXMucGFnZVNpemVzID0gZXhwb3J0cy5hdmFpbGFibGVQYWdlU2l6ZXM7XHJcbiAgICAgICAgdGhpcy5oYXNQYWdlRmlsdGVyID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcGFnZXIgPSB0aGlzLmNhcmRDb250YWluZXIuZGF0YVNvdXJjZS5wYWdlcjtcclxuICAgICAgICBpZiAocGFnZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmhhc1BhZ2VGaWx0ZXIgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZWxlY3RlZFBhZ2VTaXplOyB9LCBmdW5jdGlvbiAobmV3UGFnZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYWdlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZXIucGFnZVNpemUgPSBuZXdQYWdlU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jYXJkQ29udGFpbmVyLmRhdGFTb3VyY2Uub25QYWdpbmdDaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBhZ2VTaXplQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuICAgIHJldHVybiBQYWdlU2l6ZUNvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUGFnZVNpemVDb250cm9sbGVyID0gUGFnZVNpemVDb250cm9sbGVyO1xyXG5mdW5jdGlvbiBwYWdlU2l6ZSgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICByZXF1aXJlOiB7IGNhcmRDb250YWluZXI6ICdeXnJsQ2FyZENvbnRhaW5lcicgfSxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9wYWdlU2l6ZS5odG1sJyksXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICdjb250cm9sbGVyJyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMucGFnZVNpemUgPSBwYWdlU2l6ZTtcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBwYWdlU2l6ZSlcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIFBhZ2VTaXplQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VTaXplLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL3BhZ2VTaXplL3BhZ2VTaXplLmpzXG4gKiogbW9kdWxlIGlkID0gODhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IG5nLXNob3c9XFxcImNvbnRyb2xsZXIuaGFzUGFnZUZpbHRlclxcXCI+XFxyXFxuXFx0PHNlbGVjdCBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiB0aXRsZT1cXFwiQ2FyZHMgcGVyIHBhZ2VcXFwiIG5nLW1vZGVsPVxcXCJjb250cm9sbGVyLnNlbGVjdGVkUGFnZVNpemVcXFwiXFxyXFxuXFx0XFx0XFx0bmctb3B0aW9ucz1cXFwicGFnZVNpemUgZm9yIHBhZ2VTaXplIGluIGNvbnRyb2xsZXIucGFnZVNpemVzXFxcIj48L3NlbGVjdD5cXHJcXG48L2Rpdj5cXHJcXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jYXJkQ29udGFpbmVyL3BhZ2VTaXplL3BhZ2VTaXplLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA4OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19ib29sZWFuID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLmJvb2xlYW47XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNhcmRDb250YWluZXIuc2VsZWN0aW9uQ29udHJvbCc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybFNlbGVjdGlvbkNvbnRyb2wnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ1NlbGVjdGlvbkNvbnRyb2xDb250cm9sbGVyJztcclxudmFyIFNlbGVjdGlvbkNvbnRyb2xDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNlbGVjdGlvbkNvbnRyb2xDb250cm9sbGVyKCRzY29wZSwgYm9vbCkge1xyXG4gICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICAgIHRoaXMuYm9vbCA9IGJvb2w7XHJcbiAgICB9XHJcbiAgICBTZWxlY3Rpb25Db250cm9sQ29udHJvbGxlci5wcm90b3R5cGUuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmNhcmRDb250YWluZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtcyA9IHRoaXMuY2FyZENvbnRhaW5lci5udW1iZXJTZWxlY3RlZDtcclxuICAgICAgICB0aGlzLnBhZ2luZ0VuYWJsZWQgPSB0aGlzLmJvb2wudG9Cb29sKHRoaXMuY2FyZENvbnRhaW5lci5kYXRhU291cmNlLnBhZ2VyKTtcclxuICAgICAgICB0aGlzLmRhdGFTb3VyY2UgPSB0aGlzLmNhcmRDb250YWluZXIuZGF0YVNvdXJjZTtcclxuICAgICAgICB0aGlzLiRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY2FyZENvbnRhaW5lci5udW1iZXJTZWxlY3RlZDsgfSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkSXRlbXMgPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZWxlY3Rpb25Db250cm9sQ29udHJvbGxlci5wcm90b3R5cGUuc2VsZWN0UGFnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfLmVhY2godGhpcy5kYXRhU291cmNlLmRhdGFTZXQsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGl0ZW0udmlld0RhdGEuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuJHNjb3BlLiRlbWl0KCdzZWxlY3Rpb25DaGFuZ2VkJyk7IC8vKmV2ZW50cz9cclxuICAgIH07XHJcbiAgICBTZWxlY3Rpb25Db250cm9sQ29udHJvbGxlci5wcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLmRhdGFTb3VyY2UuZmlsdGVyZWREYXRhU2V0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpdGVtLnZpZXdEYXRhLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLiRzY29wZS4kZW1pdCgnc2VsZWN0aW9uQ2hhbmdlZCcpOyAvLypldmVudHM/XHJcbiAgICB9O1xyXG4gICAgU2VsZWN0aW9uQ29udHJvbENvbnRyb2xsZXIucHJvdG90eXBlLmNsZWFyUGFnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfLmVhY2godGhpcy5kYXRhU291cmNlLmRhdGFTZXQsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGl0ZW0udmlld0RhdGEuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLiRzY29wZS4kZW1pdCgnc2VsZWN0aW9uQ2hhbmdlZCcpOyAvLypldmVudHM/XHJcbiAgICB9O1xyXG4gICAgU2VsZWN0aW9uQ29udHJvbENvbnRyb2xsZXIucHJvdG90eXBlLmNsZWFyQWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLmRhdGFTb3VyY2UuZmlsdGVyZWREYXRhU2V0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpdGVtLnZpZXdEYXRhLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUuJGVtaXQoJ3NlbGVjdGlvbkNoYW5nZWQnKTsgLy8qZXZlbnRzP1xyXG4gICAgfTtcclxuICAgIFNlbGVjdGlvbkNvbnRyb2xDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsIF9fYm9vbGVhbi5zZXJ2aWNlTmFtZV07XHJcbiAgICByZXR1cm4gU2VsZWN0aW9uQ29udHJvbENvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuU2VsZWN0aW9uQ29udHJvbENvbnRyb2xsZXIgPSBTZWxlY3Rpb25Db250cm9sQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gc2VsZWN0aW9uQ29udHJvbCgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICByZXF1aXJlOiB7IGNhcmRDb250YWluZXI6ICdeXnJsQ2FyZENvbnRhaW5lcicgfSxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zZWxlY3Rpb25Db250cm9sLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3NlbGVjdGlvbicsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHt9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnNlbGVjdGlvbkNvbnRyb2wgPSBzZWxlY3Rpb25Db250cm9sO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtfX2Jvb2xlYW4ubW9kdWxlTmFtZV0pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgc2VsZWN0aW9uQ29udHJvbClcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIFNlbGVjdGlvbkNvbnRyb2xDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0aW9uQ29udHJvbC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9zZWxlY3Rpb25Db250cm9sL3NlbGVjdGlvbkNvbnRyb2wuanNcbiAqKiBtb2R1bGUgaWQgPSA5MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+XFxyXFxuXFx0PGRpdiBzdHlsZT1cXFwibWFyZ2luLWJvdHRvbTogNXB4XFxcIj5cXHJcXG5cXHRcXHQ8c3Bhbj48c3Ryb25nPnt7c2VsZWN0aW9uLnNlbGVjdGVkSXRlbXN9fTwvc3Ryb25nPiBpdGVtcyBzZWxlY3RlZDwvc3Bhbj5cXHJcXG5cXHQ8L2Rpdj5cXHJcXG5cXHQ8ZGl2IHN0eWxlPVxcXCJtYXJnaW4tYm90dG9tOiA1cHhcXFwiIG5nLWlmPVxcXCJzZWxlY3Rpb24ucGFnaW5nRW5hYmxlZFxcXCI+XFxyXFxuXFx0XFx0PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3Rpb24uc2VsZWN0UGFnZSgpXFxcIj5TZWxlY3QgcGFnZTwvYnV0dG9uPlxcclxcblxcdFxcdDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBuZy1jbGljaz1cXFwic2VsZWN0aW9uLmNsZWFyUGFnZSgpXFxcIj5DbGVhciBwYWdlPC9idXR0b24+XFxyXFxuXFx0PC9kaXY+XFxyXFxuXFx0PGRpdj5cXHJcXG5cXHRcXHQ8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgbmctY2xpY2s9XFxcInNlbGVjdGlvbi5zZWxlY3RBbGwoKVxcXCI+U2VsZWN0IGFsbDwvYnV0dG9uPlxcclxcblxcdFxcdDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBuZy1jbGljaz1cXFwic2VsZWN0aW9uLmNsZWFyQWxsKClcXFwiPkNsZWFyIGFsbDwvYnV0dG9uPlxcclxcblxcdDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvc2VsZWN0aW9uQ29udHJvbC9zZWxlY3Rpb25Db250cm9sLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA5MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4vLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2pxdWVyeS9qcXVlcnkuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG52YXIgX19hcnJheSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5hcnJheTtcclxudmFyIF9fcGFyZW50Q2hpbGQgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMucGFyZW50Q2hpbGRCZWhhdmlvcjtcclxudmFyIGRhdGFTb3VyY2VzX21vZHVsZV8xID0gcmVxdWlyZSgnLi9kYXRhU291cmNlcy9kYXRhU291cmNlcy5tb2R1bGUnKTtcclxudmFyIHNvcnRzX21vZHVsZV8xID0gcmVxdWlyZSgnLi9zb3J0cy9zb3J0cy5tb2R1bGUnKTtcclxudmFyIGJyZWFrcG9pbnRfMSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2JyZWFrcG9pbnRzL2JyZWFrcG9pbnQnKTtcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsQ2FyZENvbnRhaW5lcic7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnQ2FyZENvbnRhaW5lckNvbnRyb2xsZXInO1xyXG5leHBvcnRzLmRlZmF1bHRNYXhDb2x1bW5Tb3J0cyA9IDI7XHJcbmV4cG9ydHMuZGVmYXVsdFNlbGVjdGlvblRpdGxlID0gJ1NlbGVjdCBjYXJkJztcclxudmFyIENhcmRDb250YWluZXJDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENhcmRDb250YWluZXJDb250cm9sbGVyKCRzY29wZSwgJGF0dHJzLCBvYmplY3QsIGFycmF5LCBkYXRhUGFnZXJGYWN0b3J5LCBwYXJlbnRDaGlsZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgdGhpcy5hcnJheSA9IGFycmF5O1xyXG4gICAgICAgIHRoaXMuZGF0YVBhZ2VyRmFjdG9yeSA9IGRhdGFQYWdlckZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDaGlsZCA9IHBhcmVudENoaWxkO1xyXG4gICAgICAgIHRoaXMubnVtYmVyU2VsZWN0ZWQgPSAwO1xyXG4gICAgICAgIHRoaXMuYWRkVmlld0RhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF8uZWFjaChfdGhpcy5kYXRhU291cmNlLnJhd0RhdGFTZXQsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChpdGVtLnZpZXdEYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udmlld0RhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMudXBkYXRlRGlzYWJsZWRTZWxlY3Rpb25zKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNsZWFyRmlsdGVyZWRTZWxlY3Rpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbm9uVmlzaWJsZUl0ZW1zID0gXy5kaWZmZXJlbmNlKF90aGlzLmRhdGFTb3VyY2UucmF3RGF0YVNldCwgX3RoaXMuZGF0YVNvdXJjZS5maWx0ZXJlZERhdGFTZXQpO1xyXG4gICAgICAgICAgICBfLmVhY2gobm9uVmlzaWJsZUl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQoaXRlbS52aWV3RGF0YSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnZpZXdEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGl0ZW0udmlld0RhdGEuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGl0ZW0udmlld0RhdGEuc2VsZWN0aW9uVGl0bGUgPSBleHBvcnRzLmRlZmF1bHRTZWxlY3Rpb25UaXRsZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZVNlbGVjdGVkKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5udW1iZXJTZWxlY3RlZCA9IF8uZmlsdGVyKF90aGlzLmRhdGFTb3VyY2UuZmlsdGVyZWREYXRhU2V0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udmlld0RhdGEgIT0gbnVsbCAmJiBpdGVtLnZpZXdEYXRhLnNlbGVjdGVkO1xyXG4gICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnVwZGF0ZURpc2FibGVkU2VsZWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmRpc2FibGluZ1NlbGVjdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIF8uZWFjaChfdGhpcy5kYXRhU291cmNlLnJhd0RhdGFTZXQsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc2FibGVkUmVhc29uID0gX3RoaXMuZGlzYWJsZVNlbGVjdGlvbih7IGl0ZW06IGl0ZW0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS52aWV3RGF0YS5kaXNhYmxlZFNlbGVjdGlvbiA9IChkaXNhYmxlZFJlYXNvbiAhPSBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnZpZXdEYXRhLnNlbGVjdGlvblRpdGxlID0gKGl0ZW0udmlld0RhdGEuZGlzYWJsZWRTZWxlY3Rpb24gPyBkaXNhYmxlZFJlYXNvbiA6IGV4cG9ydHMuZGVmYXVsdFNlbGVjdGlvblRpdGxlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodGhpcy5idWlsZGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5idWlsZGVyLnNldENhcmRDb250YWluZXJQcm9wZXJ0aWVzKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGFTb3VyY2UgPSB0aGlzLnNvdXJjZTtcclxuICAgICAgICB0aGlzLnBlcm1hbmVudEZvb3RlcnMgPSBfLmlzVW5kZWZpbmVkKHRoaXMucGVybWFuZW50Rm9vdGVycykgPyBmYWxzZSA6IHRoaXMucGVybWFuZW50Rm9vdGVycztcclxuICAgICAgICB0aGlzLm1heENvbFNvcnRzID0gdGhpcy5tYXhDb2x1bW5Tb3J0cyAhPSBudWxsID8gdGhpcy5tYXhDb2x1bW5Tb3J0cyA6IGV4cG9ydHMuZGVmYXVsdE1heENvbHVtblNvcnRzO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsaW5nU2VsZWN0aW9ucyA9IG9iamVjdC5pc051bGxPcldoaXRlc3BhY2UoJGF0dHJzLmRpc2FibGVTZWxlY3Rpb24pID09PSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNvcnREaXJlY3Rpb24gPSBzb3J0c19tb2R1bGVfMS5Tb3J0RGlyZWN0aW9uO1xyXG4gICAgICAgIHRoaXMuc3luY0ZpbHRlcnMoKTtcclxuICAgICAgICB0aGlzLnNldHVwUGFnaW5nKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZENvbHVtblNpemVzKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0YWJsZUNhcmRzKSB7XHJcbiAgICAgICAgICAgIC8vKnVzZSBjYXJkIGNvbnRhaW5lciBldmVudCBzZXJ2aWNlP1xyXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCdzZWxlY3Rpb25DaGFuZ2VkJywgdGhpcy51cGRhdGVTZWxlY3RlZCk7XHJcbiAgICAgICAgICAgICRzY29wZS4kb24oJ3VwZGF0ZURpc2FibGVkU2VsZWN0aW9ucycsIHRoaXMudXBkYXRlRGlzYWJsZWRTZWxlY3Rpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLndhdGNoKHRoaXMuYWRkVmlld0RhdGEsICdjaGFuZ2VkJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS53YXRjaCh0aGlzLmNsZWFyRmlsdGVyZWRTZWxlY3Rpb25zLCAncmVkcmF3aW5nJyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVmlld0RhdGEoKTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25Db2x1bW4gPSB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHNpemU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS52aWV3RGF0YS5zZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmbGlwU29ydDogdHJ1ZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNvdXJjZS5zb3J0cyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5zb3J0cyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuY29udGFpbmVyRGF0YSA9IHRoaXMuY29udGFpbmVyRGF0YTtcclxuICAgIH1cclxuICAgIENhcmRDb250YWluZXJDb250cm9sbGVyLnByb3RvdHlwZS5zb3J0U2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0KHRoaXMuc2VsZWN0aW9uQ29sdW1uKTtcclxuICAgIH07XHJcbiAgICBDYXJkQ29udGFpbmVyQ29udHJvbGxlci5wcm90b3R5cGUub3BlbkNhcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGJlaGF2aW9ycyA9IHRoaXMucGFyZW50Q2hpbGQuZ2V0QWxsQ2hpbGRCZWhhdmlvcnModGhpcy5kYXRhU291cmNlLmRhdGFTZXQpO1xyXG4gICAgICAgIHJldHVybiBfLmV2ZXJ5KF8ubWFwKGJlaGF2aW9ycywgZnVuY3Rpb24gKGJlaGF2aW9yKSB7IHJldHVybiBiZWhhdmlvci5jbG9zZSgpOyB9KSk7XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRhaW5lckNvbnRyb2xsZXIucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgdmFyIHNvcnRMaXN0ID0gdGhpcy5kYXRhU291cmNlLnNvcnRzO1xyXG4gICAgICAgIHZhciBmaXJzdFNvcnQgPSBzb3J0TGlzdFswXTtcclxuICAgICAgICAvLyBJZiBjb2x1bW4gaXMgYWxyZWFkeSB0aGUgcHJpbWFyeSBzb3J0LCBjaGFuZ2UgdGhlIGRpcmVjdGlvblxyXG4gICAgICAgIGlmIChmaXJzdFNvcnQgIT0gbnVsbFxyXG4gICAgICAgICAgICAmJiBmaXJzdFNvcnQuY29sdW1uID09PSBjb2x1bW4pIHtcclxuICAgICAgICAgICAgZmlyc3RTb3J0LmRpcmVjdGlvbiA9IHNvcnRzX21vZHVsZV8xLlNvcnREaXJlY3Rpb24udG9nZ2xlKGZpcnN0U29ydC5kaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAvLyBDbGVhciBzb3J0XHJcbiAgICAgICAgICAgIGlmIChmaXJzdFNvcnQuZGlyZWN0aW9uID09PSBzb3J0c19tb2R1bGVfMS5Tb3J0RGlyZWN0aW9uLm5vbmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJWaXN1YWxTb3J0SW5kaWNhdG9yKGZpcnN0U29ydCk7XHJcbiAgICAgICAgICAgICAgICBmaXJzdFNvcnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvbHVtbiBoYXMgc2Vjb25kYXJ5IHNvcnRzIGRvbid0IGZhbGwgYmFjayB0byBhXHJcbiAgICAgICAgICAgICAgICAvLyAgc2Vjb25kYXJ5IHNvcnQsIGluc3RlYWQganVzdCBjbGVhciBhbGwgc29ydHNcclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uc2Vjb25kYXJ5U29ydHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRMaXN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzb3J0TGlzdC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBFbHNlIG1ha2UgY29sdW1uIHByaW1hcnkgYXNjZW5kaW5nIHNvcnRcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBub24tcHJpbWFyeSBzb3J0cyBvbiBjb2x1bW5cclxuICAgICAgICAgICAgdGhpcy5hcnJheS5yZW1vdmUoc29ydExpc3QsIGZ1bmN0aW9uIChzb3J0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1uID09PSBzb3J0LmNvbHVtbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIEJ1aWxkIGFzY2VuZGluZyBzb3J0IGZvciBjb2x1bW5cclxuICAgICAgICAgICAgdmFyIG5ld1NvcnQgPSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW46IGNvbHVtbixcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogc29ydHNfbW9kdWxlXzEuU29ydERpcmVjdGlvbi5hc2NlbmRpbmcsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNvcnRMaXN0LnVuc2hpZnQobmV3U29ydCk7XHJcbiAgICAgICAgICAgIGZpcnN0U29ydCA9IG5ld1NvcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlVmlzdWFsQ29sdW1uU29ydGluZygpO1xyXG4gICAgICAgIC8vIElmIGNvbHVtbiBoYXMgc2Vjb25kYXJ5IHNvcnRzLCB3aXBlIHRoZSBzb3J0IG9yZGVyIGFuZCBqdXN0IGFwcGx5IHRoZSBzZWNvbmRhcnkgc29ydHNcclxuICAgICAgICBpZiAoZmlyc3RTb3J0ICE9IG51bGwgJiYgY29sdW1uLnNlY29uZGFyeVNvcnRzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgc29ydExpc3QubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdmFyIHNlY29uZGFyeVNvcnRzID0gdGhpcy5idWlsZFNlY29uZGFyeVNvcnRzKGZpcnN0U29ydC5kaXJlY3Rpb24sIGNvbHVtbi5zZWNvbmRhcnlTb3J0cyk7XHJcbiAgICAgICAgICAgIHNvcnRMaXN0LnB1c2goZmlyc3RTb3J0KTtcclxuICAgICAgICAgICAgc29ydExpc3QucHVzaC5hcHBseShzb3J0TGlzdCwgc2Vjb25kYXJ5U29ydHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgbm90IHVzaW5nIGNvbHVtbiBzZWNvbmRhcnkgc29ydHMsIGxpbWl0IHRoZSBtYXhpbXVtIG51bWJlclxyXG4gICAgICAgICAgICAvLyAgb2Ygc29ydHMgYXBwbGllZCB0byB0aGUgbWF4aW11bSBudW1iZXIgb2Ygc29ydHNcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLnNvcnRzID0gXy50YWtlKHNvcnRMaXN0LCB0aGlzLm1heENvbFNvcnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhU291cmNlLm9uU29ydENoYW5nZSgpO1xyXG4gICAgfTtcclxuICAgIENhcmRDb250YWluZXJDb250cm9sbGVyLnByb3RvdHlwZS5zZWxlY3Rpb25DaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWQoKTtcclxuICAgICAgICB0aGlzLiRzY29wZS4kZW1pdCgnc2VsZWN0aW9uQ2hhbmdlZCcpO1xyXG4gICAgfTtcclxuICAgIENhcmRDb250YWluZXJDb250cm9sbGVyLnByb3RvdHlwZS5zeW5jRmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMub2JqZWN0LmlzTnVsbE9yRW1wdHkodGhpcy5maWx0ZXJzKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZmlsdGVycyA9IHRoaXMuZmlsdGVycztcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhU291cmNlLmZpbHRlcnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlcnMgPSB0aGlzLmRhdGFTb3VyY2UuZmlsdGVycztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRhaW5lckNvbnRyb2xsZXIucHJvdG90eXBlLnNldHVwUGFnaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIElmIHBhZ2luZyBmbGFnIGlzIHNwZWNpZmllZCwgY2FyZCBjb250YWluZXIgY29udHJvbHMgcGFnZXIgaW5zdGFuY2VcclxuICAgICAgICBpZiAodGhpcy5wYWdpbmcgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYWdpbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UucGFnZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZGVyLl9wYWdlciA9IHRoaXMuZGF0YVBhZ2VyRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLnBhZ2VyID0gdGhpcy5idWlsZGVyLl9wYWdlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGFTb3VyY2UucGFnZXIpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHBhZ2luZyBmbGFnIGlzIG5vdCBzZXQgYW5kIHRoZSBkYXRhU291cmNlIGhhcyBhIHBhZ2VyLCBzYXZlIGEgcmVmZXJlbmNlIGhlcmVcclxuICAgICAgICAgICAgdGhpcy5idWlsZGVyLl9wYWdlciA9IHRoaXMuZGF0YVNvdXJjZS5wYWdlcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRhaW5lckNvbnRyb2xsZXIucHJvdG90eXBlLmJ1aWxkQ29sdW1uU2l6ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBfLmVhY2godGhpcy5jb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgIHZhciBzaXplcyA9IGNvbHVtbi5zaXplO1xyXG4gICAgICAgICAgICBpZiAoXy5pc09iamVjdChzaXplcykpIHtcclxuICAgICAgICAgICAgICAgIHNpemVzW2JyZWFrcG9pbnRfMS54c10gPSBfdGhpcy5vYmplY3QudmFsdWVPckRlZmF1bHQoc2l6ZXNbYnJlYWtwb2ludF8xLnhzXSwgMCk7XHJcbiAgICAgICAgICAgICAgICBzaXplc1ticmVha3BvaW50XzEuc21dID0gX3RoaXMub2JqZWN0LnZhbHVlT3JEZWZhdWx0KHNpemVzW2JyZWFrcG9pbnRfMS5zbV0sIHNpemVzW2JyZWFrcG9pbnRfMS54c10pO1xyXG4gICAgICAgICAgICAgICAgc2l6ZXNbYnJlYWtwb2ludF8xLm1kXSA9IF90aGlzLm9iamVjdC52YWx1ZU9yRGVmYXVsdChzaXplc1ticmVha3BvaW50XzEubWRdLCBzaXplc1ticmVha3BvaW50XzEuc21dKTtcclxuICAgICAgICAgICAgICAgIHNpemVzW2JyZWFrcG9pbnRfMS5sZ10gPSBfdGhpcy5vYmplY3QudmFsdWVPckRlZmF1bHQoc2l6ZXNbYnJlYWtwb2ludF8xLmxnXSwgc2l6ZXNbYnJlYWtwb2ludF8xLm1kXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW4uc2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4czogc2l6ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgc206IHNpemVzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1kOiBzaXplcyxcclxuICAgICAgICAgICAgICAgICAgICBsZzogc2l6ZXMsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRhaW5lckNvbnRyb2xsZXIucHJvdG90eXBlLmxvb2t1cENvbHVtbiA9IGZ1bmN0aW9uIChsYWJlbCkge1xyXG4gICAgICAgIHJldHVybiBfLmZpbmQodGhpcy5jb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW4ubGFiZWwgPT09IGxhYmVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIENhcmRDb250YWluZXJDb250cm9sbGVyLnByb3RvdHlwZS5idWlsZFNlY29uZGFyeVNvcnRzID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgc2Vjb25kYXJ5U29ydHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzb3J0TGlzdCA9IHNlY29uZGFyeVNvcnRzW3NvcnRzX21vZHVsZV8xLlNvcnREaXJlY3Rpb24uZ2V0RnVsbE5hbWUoZGlyZWN0aW9uKV07XHJcbiAgICAgICAgcmV0dXJuIF8ubWFwKHNvcnRMaXN0LCBmdW5jdGlvbiAoc29ydCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBzb3J0LmRpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgIGNvbHVtbjogX3RoaXMubG9va3VwQ29sdW1uKHNvcnQuY29sdW1uKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBDYXJkQ29udGFpbmVyQ29udHJvbGxlci5wcm90b3R5cGUudXBkYXRlVmlzdWFsQ29sdW1uU29ydGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLmRhdGFTb3VyY2Uuc29ydHMsIGZ1bmN0aW9uIChzb3J0LCBpbmRleCkge1xyXG4gICAgICAgICAgICAvLyBPbmx5IGZpcnN0IHNvcnQgc2hvdWxkIGhhdmUgdmlzaWJsZSBkaXJlY3Rpb25cclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVWaXN1YWxTb3J0SW5kaWNhdG9yKHNvcnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2xlYXJWaXN1YWxTb3J0SW5kaWNhdG9yKHNvcnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRhaW5lckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZVZpc3VhbFNvcnRJbmRpY2F0b3IgPSBmdW5jdGlvbiAoc29ydCkge1xyXG4gICAgICAgIHNvcnQuY29sdW1uLnNvcnREaXJlY3Rpb24gPSBzb3J0LmRpcmVjdGlvbjtcclxuICAgIH07XHJcbiAgICBDYXJkQ29udGFpbmVyQ29udHJvbGxlci5wcm90b3R5cGUuY2xlYXJWaXN1YWxTb3J0SW5kaWNhdG9yID0gZnVuY3Rpb24gKHNvcnQpIHtcclxuICAgICAgICBzb3J0LmNvbHVtbi5zb3J0RGlyZWN0aW9uID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBDYXJkQ29udGFpbmVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGF0dHJzJywgX19vYmplY3Quc2VydmljZU5hbWUsIF9fYXJyYXkuc2VydmljZU5hbWUsIGRhdGFTb3VyY2VzX21vZHVsZV8xLmRhdGFQYWdlci5mYWN0b3J5TmFtZSwgX19wYXJlbnRDaGlsZC5zZXJ2aWNlTmFtZV07XHJcbiAgICByZXR1cm4gQ2FyZENvbnRhaW5lckNvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQ2FyZENvbnRhaW5lckNvbnRyb2xsZXIgPSBDYXJkQ29udGFpbmVyQ29udHJvbGxlcjtcclxuY2FyZENvbnRhaW5lci4kaW5qZWN0ID0gWyckY29tcGlsZSddO1xyXG5mdW5jdGlvbiBjYXJkQ29udGFpbmVyKCRjb21waWxlKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9jYXJkQ29udGFpbmVyLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2NhcmRDb250YWluZXInLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIC8vIHN1bW1hcnk6IGEgYnVpbGRlciBmb3IgdGhlIGNhcmQgY29udGFpbmVyXHJcbiAgICAgICAgICAgIGJ1aWxkZXI6ICc9PycsXHJcbiAgICAgICAgICAgIC8vIHN1bW1hcnk6IGNvbnRyb2xsZXIgc2hhcmVkIGJ5IGFsbCBjb21wb25lbnRzIG9uIGEgY2FyZFxyXG4gICAgICAgICAgICAvLyByZW1hcmtzOiB0aGlzIGNvbnRyb2xsZXIgY2Fubm90IG92ZXJyaWRlIGFueSBvZiB0aGUgZm9sbG93aW5nIGxldGlhYmxlIG5hbWVzOlxyXG4gICAgICAgICAgICAvLyAgICAgICAgICBjb2x1bW5zXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIGl0ZW1cclxuICAgICAgICAgICAgLy8gICAgICAgICAgY29udGVudFRlbXBsYXRlXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIGZvb3RlclRlbXBsYXRlXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIGNsaWNrYWJsZVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICBjYXJkQ29udHJvbGxlclxyXG4gICAgICAgICAgICAvLyAgICAgICAgICBjYXJkQ29udHJvbGxlckFzXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIGNhcmRBc1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICBzaG93Q29udGVudFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICB0b2dnbGVDb250ZW50XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIGNvbGxhcHNlXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIHNlbGVjdGVkXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIHNldFNlbGVjdGVkXHJcbiAgICAgICAgICAgIGNhcmRDb250cm9sbGVyOiAnQCcsXHJcbiAgICAgICAgICAgIC8vIHN1bW1hcnk6IGNvbnRyb2xsZXIgYWxpYXMgc3BlY2lmaWVkIHVzaW5nIGNvbnRyb2xsZXJBcyBzeW50YXhcclxuICAgICAgICAgICAgY2FyZENvbnRyb2xsZXJBczogJ0AnLFxyXG4gICAgICAgICAgICAvLyBzdW1tYXJ5OiBuYW1lIHVzZWQgdG8gYWNjZXNzIHRoZSBjYXJkIGRhdGFcclxuICAgICAgICAgICAgY2FyZEFzOiAnQCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlKSB7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJBcmVhID0gZWxlbWVudC5maW5kKCcuY29udGFpbmVyLWhlYWRlci10ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICB2YXIgZm9vdGVyQXJlYSA9IGVsZW1lbnQuZmluZCgnLmNvbnRhaW5lci1mb290ZXItdGVtcGxhdGUnKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5tYWtlQ2FyZCA9IHRyYW5zY2x1ZGU7XHJcbiAgICAgICAgICAgIHRyYW5zY2x1ZGUoc2NvcGUsIGZ1bmN0aW9uIChjbG9uZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlciA9IGNsb25lLmZpbHRlcigncmwtY29udGFpbmVyLWhlYWRlcicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEhlYWRlciA9IHJlcXVpcmUoJy4vZGVmYXVsdENhcmRDb250YWluZXJIZWFkZXIuaHRtbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlciA9IGhlYWRlckFyZWEuYXBwZW5kKGRlZmF1bHRIZWFkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICRjb21waWxlKGhlYWRlcikoc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyQXJlYS5hcHBlbmQoaGVhZGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBmb290ZXIgPSBjbG9uZS5maWx0ZXIoJ3JsLWNvbnRhaW5lci1mb290ZXInKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb290ZXIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRGb290ZXIgPSByZXF1aXJlKCcuL2RlZmF1bHRDYXJkQ29udGFpbmVyRm9vdGVyLmh0bWwnKTtcclxuICAgICAgICAgICAgICAgICAgICBmb290ZXIgPSBmb290ZXJBcmVhLmFwcGVuZChkZWZhdWx0Rm9vdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAkY29tcGlsZShmb290ZXIpKHNjb3BlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlckFyZWEuYXBwZW5kKGZvb3Rlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5jYXJkQ29udGFpbmVyID0gY2FyZENvbnRhaW5lcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FyZENvbnRhaW5lci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9jYXJkQ29udGFpbmVyLmpzXG4gKiogbW9kdWxlIGlkID0gOTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJjYXJkLWNvbnRhaW5lclxcXCI+XFxyXFxuXFx0PGRpdj5cXHJcXG5cXHRcXHQ8ZGl2IGNsYXNzPVxcXCJjYXJkLWNvbnRhaW5lci1oZWFkZXJcXFwiPlxcclxcblxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci1oZWFkZXItdGVtcGxhdGVcXFwiPjwvZGl2PlxcclxcblxcdFxcdDwvZGl2PlxcclxcblxcclxcblxcdFxcdDxybC1nZW5lcmljLWNvbnRhaW5lciBzZWxlY3Rvcj1cXFwiY2FyZENvbnRhaW5lci5zZWxlY3RhYmxlQ2FyZHNcXFwiPlxcclxcblxcdFxcdFxcdDx0ZW1wbGF0ZSB3aGVuLXNlbGVjdG9yPVxcXCJmYWxzZVxcXCIgZGVmYXVsdD5cXHJcXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJjYXJkLWNvbHVtbnMtaGVhZGVyXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8ZGl2IG5nLXJlcGVhdD1cXFwiY29sdW1uIGluIGNhcmRDb250YWluZXIuY29sdW1uc1xcXCI+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0PHJsLWNvbHVtbi1oZWFkZXIgc29ydD1cXFwiY2FyZENvbnRhaW5lci5zb3J0KGNvbHVtbilcXFwiIHNvcnRpbmc9XFxcImNvbHVtbi5zb3J0RGlyZWN0aW9uXFxcIiBjb2x1bW49XFxcImNvbHVtblxcXCI+PC9ybC1jb2x1bW4taGVhZGVyPlxcclxcblxcdFxcdFxcdFxcdFxcdDwvZGl2PlxcclxcblxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG5cXHRcXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHQ8L3RlbXBsYXRlPlxcclxcblxcdFxcdFxcdDx0ZW1wbGF0ZSB3aGVuLXNlbGVjdG9yPVxcXCJ0cnVlXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJjYXJkLWNvbHVtbnMtaGVhZGVyXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJzZWxlY3QtZ3JvdXBcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcInNlbGVjdC1jb2x1bW5cXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdDxpIGNsYXNzPVxcXCJmYSBmYS1jaGVja1xcXCIgc3R5bGU9XFxcIm1hcmdpbi1sZWZ0OiA2cHg7IGN1cnNvcjogcG9pbnRlclxcXCIgbmctY2xpY2s9XFxcImNhcmRDb250YWluZXIuc29ydFNlbGVjdGVkKClcXFwiPjwvaT5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHQ8aSBuZy1zaG93PVxcXCJjYXJkQ29udGFpbmVyLnNvcnRDb2x1bW4uc29ydERpcmVjdGlvbiA9PT0gY2FyZENvbnRhaW5lci5zb3J0RGlyZWN0aW9uLmFzY2VuZGluZ1xcXCIgY2xhc3M9XFxcImZhIGZhLXNvcnQtYXNjXFxcIj48L2k+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PGkgbmctc2hvdz1cXFwiY2FyZENvbnRhaW5lci5zb3J0Q29sdW1uLnNvcnREaXJlY3Rpb24gPT09IGNhcmRDb250YWluZXIuc29ydERpcmVjdGlvbi5kZXNjZW5kaW5nXFxcIiBjbGFzcz1cXFwiZmEgZmEtc29ydC1kZXNjXFxcIj48L2k+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwic2VsZWN0LWNvbnRlbnRcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdDxkaXYgbmctcmVwZWF0PVxcXCJjb2x1bW4gaW4gY2FyZENvbnRhaW5lci5jb2x1bW5zXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8cmwtY29sdW1uLWhlYWRlciBzb3J0PVxcXCJjYXJkQ29udGFpbmVyLnNvcnQoY29sdW1uKVxcXCIgc29ydGluZz1cXFwiY29sdW1uLnNvcnREaXJlY3Rpb25cXFwiIGNvbHVtbj1cXFwiY29sdW1uXFxcIj48L3JsLWNvbHVtbi1oZWFkZXI+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcblxcdFxcdFxcdFxcdDwvZGl2PlxcclxcblxcdFxcdFxcdDwvdGVtcGxhdGU+XFxyXFxuXFx0XFx0PC9ybC1nZW5lcmljLWNvbnRhaW5lcj5cXHJcXG5cXHJcXG5cXHRcXHQ8ZGl2IG5nLWlmPVxcXCJjYXJkQ29udGFpbmVyLmRhdGFTb3VyY2UuZGF0YVNldCB8IGlzRW1wdHk6ZmFsc2VcXFwiPlxcclxcblxcdFxcdFxcdDxkaXYgbmctcmVwZWF0PVxcXCJjYXJkIGluIGNhcmRDb250YWluZXIuZGF0YVNvdXJjZS5kYXRhU2V0XFxcIj5cXHJcXG5cXHRcXHRcXHRcXHQ8cmwtY2FyZCBjb2x1bW5zPVxcXCJjYXJkQ29udGFpbmVyLmNvbHVtbnNcXFwiIGl0ZW09XFxcImNhcmRcXFwiXFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0IGNsaWNrYWJsZT1cXFwiY2FyZENvbnRhaW5lci5jbGlja2FibGVDYXJkc1xcXCJcXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQgc2VsZWN0YWJsZT1cXFwiY2FyZENvbnRhaW5lci5zZWxlY3RhYmxlQ2FyZHNcXFwiXFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0IHNlbGVjdGlvbi1jaGFuZ2VkPVxcXCJjYXJkQ29udGFpbmVyLnNlbGVjdGlvbkNoYW5nZWQoKVxcXCJcXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQgY29udGFpbmVyLWRhdGE9XFxcImNhcmRDb250YWluZXIuY29udGFpbmVyRGF0YVxcXCJcXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQgc291cmNlPVxcXCJjYXJkQ29udGFpbmVyLmRhdGFTb3VyY2VcXFwiXFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0IHBlcm1hbmVudC1mb290ZXI9XFxcImNhcmRDb250YWluZXIucGVybWFuZW50Rm9vdGVyc1xcXCJcXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQgY2FyZC1jb250cm9sbGVyPVxcXCJjYXJkQ29udGFpbmVyLmNhcmRDb250cm9sbGVyXFxcIlxcclxcblxcdFxcdFxcdFxcdFxcdFxcdCBjYXJkLWNvbnRyb2xsZXItYXM9XFxcImNhcmRDb250YWluZXIuY2FyZENvbnRyb2xsZXJBc1xcXCJcXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQgY2FyZC1hcz1cXFwiY2FyZENvbnRhaW5lci5jYXJkQXNcXFwiPjwvcmwtY2FyZD5cXHJcXG5cXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHQ8ZGl2IG5nLWlmPVxcXCJjYXJkQ29udGFpbmVyLmRhdGFTb3VyY2UubmVlZHNSZWZpbmVkU2VhcmNoXFxcIj5cXHJcXG5cXHRcXHRcXHRQbGVhc2UgcmVmaW5lIHlvdXIgc2VhcmNoIHJlc3VsdHNcXHJcXG5cXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHQ8ZGl2IG5nLWlmPVxcXCJjYXJkQ29udGFpbmVyLmRhdGFTb3VyY2UuaXNFbXB0eVxcXCI+XFxyXFxuXFx0XFx0XFx0VGhlcmUgYXJlIG5vIGl0ZW1zIHRvIHNob3dcXHJcXG5cXHRcXHQ8L2Rpdj5cXHJcXG5cXHJcXG5cXHRcXHQ8ZGl2PlxcclxcblxcdFxcdFxcdDxybC1idXN5IGxvYWRpbmc9XFxcImNhcmRDb250YWluZXIuZGF0YVNvdXJjZS5sb2FkaW5nRGF0YVNldFxcXCIgc2l6ZT1cXFwiMnhcXFwiPjwvcmwtYnVzeT5cXHJcXG5cXHRcXHQ8L2Rpdj5cXHJcXG5cXHJcXG5cXHRcXHQ8ZGl2IGNsYXNzPVxcXCJjYXJkLWNvbnRhaW5lci1mb290ZXJcXFwiPlxcclxcblxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci1mb290ZXItdGVtcGxhdGVcXFwiPjwvZGl2PlxcclxcblxcdFxcdDwvZGl2PlxcclxcblxcdDwvZGl2PlxcclxcbjwvZGl2PlwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZENvbnRhaW5lci5odG1sXG4gKiogbW9kdWxlIGlkID0gOTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImNvbC14cy0xMiBjb2wtc20tOVxcXCI+XFxyXFxuXFx0XFx0PHJsLWNhcmQtc2VhcmNoPjwvcmwtY2FyZC1zZWFyY2g+XFxyXFxuXFx0PC9kaXY+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwiaGlkZGVuLXhzIGNvbC1zbS0zXFxcIj5cXHJcXG5cXHRcXHQ8cmwtcGFnZS1zaXplPjwvcmwtcGFnZS1zaXplPlxcclxcblxcdDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvZGVmYXVsdENhcmRDb250YWluZXJIZWFkZXIuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDk0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXHJcXG5cXHQ8ZGl2IG5nLWlmPVxcXCIhY2FyZENvbnRhaW5lci5zZWxlY3RhYmxlQ2FyZHNcXFwiIGNsYXNzPVxcXCJjb2wtc20tNlxcXCI+XFxyXFxuXFx0XFx0PHJsLWl0ZW0tY291bnQ+PC9ybC1pdGVtLWNvdW50PlxcclxcblxcdDwvZGl2PlxcclxcblxcdDxzcGFuIG5nLWlmPVxcXCJjYXJkQ29udGFpbmVyLnNlbGVjdGFibGVDYXJkc1xcXCI+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcz1cXFwiY29sLXNtLTNcXFwiPlxcclxcblxcdFxcdFxcdDxybC1zZWxlY3Rpb24tY29udHJvbD48L3JsLXNlbGVjdGlvbi1jb250cm9sPlxcclxcblxcdFxcdDwvZGl2PlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcImNvbC1zbS0zXFxcIj5cXHJcXG5cXHRcXHRcXHQ8cmwtaXRlbS1jb3VudD48L3JsLWl0ZW0tY291bnQ+XFxyXFxuXFx0XFx0PC9kaXY+XFxyXFxuXFx0PC9zcGFuPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImNvbC1zbS02XFxcIj5cXHJcXG5cXHRcXHQ8cmwtcGFnZXIgY2xhc3M9XFxcInB1bGwtcmlnaHRcXFwiPjwvcmwtcGFnZXI+XFxyXFxuXFx0PC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY2FyZENvbnRhaW5lci9kZWZhdWx0Q2FyZENvbnRhaW5lckZvb3Rlci5odG1sXG4gKiogbW9kdWxlIGlkID0gOTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fZ2VuZXJpY1NlYXJjaEZpbHRlciA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5nZW5lcmljU2VhcmNoRmlsdGVyO1xyXG52YXIgZGF0YVNvdXJjZXMgPSByZXF1aXJlKCcuL2RhdGFTb3VyY2VzL2RhdGFTb3VyY2VzLm1vZHVsZScpO1xyXG52YXIgZmlsdGVyR3JvdXAgPSByZXF1aXJlKCcuL2ZpbHRlcnMvZmlsdGVyR3JvdXAvZmlsdGVyR3JvdXAubW9kdWxlJyk7XHJcbnZhciBzZWxlY3RGaWx0ZXIgPSByZXF1aXJlKCcuL2ZpbHRlcnMvc2VsZWN0RmlsdGVyL3NlbGVjdEZpbHRlci5tb2R1bGUnKTtcclxudmFyIGRhdGVGaWx0ZXIgPSByZXF1aXJlKCcuL2ZpbHRlcnMvZGF0ZUZpbHRlci9kYXRlRmlsdGVyLm1vZHVsZScpO1xyXG52YXIgY29sdW1uU2VhcmNoRmlsdGVyX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4vZmlsdGVycy9jb2x1bW5TZWFyY2hGaWx0ZXIvY29sdW1uU2VhcmNoRmlsdGVyLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5mYWN0b3J5TmFtZSA9ICdjYXJkQ29udGFpbmVyQnVpbGRlcic7XHJcbnZhciBDYXJkQ29udGFpbmVyQnVpbGRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDYXJkQ29udGFpbmVyQnVpbGRlcigkaW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLiRpbmplY3RvciA9ICRpbmplY3RvcjtcclxuICAgICAgICB0aGlzLmRhdGFTb3VyY2UgPSBuZXcgRGF0YVNvdXJjZUJ1aWxkZXIoJGluamVjdG9yLCB0aGlzKTtcclxuICAgICAgICB0aGlzLmZpbHRlcnMgPSBuZXcgRmlsdGVyQnVpbGRlcigkaW5qZWN0b3IsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2NvbHVtbnMgPSBbXTtcclxuICAgIH1cclxuICAgIENhcmRDb250YWluZXJCdWlsZGVyLnByb3RvdHlwZS51c2VTZWFyY2ggPSBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgaWYgKGZpbHRlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBmYWN0b3J5ID0gdGhpcy4kaW5qZWN0b3IuZ2V0KF9fZ2VuZXJpY1NlYXJjaEZpbHRlci5mYWN0b3J5TmFtZSk7XHJcbiAgICAgICAgICAgIGZpbHRlciA9IGZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc2VhcmNoRmlsdGVyID0gZmlsdGVyO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWFyY2hGaWx0ZXI7XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRhaW5lckJ1aWxkZXIucHJvdG90eXBlLnVzZVBhZ2luZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9wYWdpbmcgPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIENhcmRDb250YWluZXJCdWlsZGVyLnByb3RvdHlwZS5hZGRDb2x1bW4gPSBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgdGhpcy5fY29sdW1ucy5wdXNoKGNvbHVtbik7XHJcbiAgICB9O1xyXG4gICAgQ2FyZENvbnRhaW5lckJ1aWxkZXIucHJvdG90eXBlLnVzZUNsaWNrYWJsZUNhcmRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2NsaWNrYWJsZUNhcmRzID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBDYXJkQ29udGFpbmVyQnVpbGRlci5wcm90b3R5cGUudXNlUGVybWFuZW50Rm9vdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9wZXJtYW5lbnRGb290ZXJzID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBDYXJkQ29udGFpbmVyQnVpbGRlci5wcm90b3R5cGUudXNlU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX3NlbGVjdGFibGVDYXJkcyA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhcmRDb250YWluZXJCdWlsZGVyLnByb3RvdHlwZSwgXCJkaXNhYmxlU2VsZWN0aW9uXCIsIHtcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3NlbGVjdGFibGVDYXJkcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51c2VTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9kaXNhYmxlU2VsZWN0aW9uID0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBDYXJkQ29udGFpbmVyQnVpbGRlci5wcm90b3R5cGUuc2V0Q2FyZENvbnRhaW5lclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoY2FyZENvbnRhaW5lcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9zZWFyY2hGaWx0ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9maWx0ZXJzLnB1c2godGhpcy5fc2VhcmNoRmlsdGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FyZENvbnRhaW5lci5zb3VyY2UgPSB0aGlzLl9kYXRhU291cmNlO1xyXG4gICAgICAgIGNhcmRDb250YWluZXIuZmlsdGVycyA9IHRoaXMuX2ZpbHRlcnM7XHJcbiAgICAgICAgY2FyZENvbnRhaW5lci5zZWFyY2hGaWx0ZXIgPSB0aGlzLl9zZWFyY2hGaWx0ZXI7XHJcbiAgICAgICAgY2FyZENvbnRhaW5lci5wYWdpbmcgPSB0aGlzLl9wYWdpbmc7XHJcbiAgICAgICAgY2FyZENvbnRhaW5lci5jb2x1bW5zID0gdGhpcy5fY29sdW1ucztcclxuICAgICAgICBjYXJkQ29udGFpbmVyLmNvbnRhaW5lckRhdGEgPSB0aGlzLmNvbnRhaW5lckRhdGE7XHJcbiAgICAgICAgY2FyZENvbnRhaW5lci5jbGlja2FibGVDYXJkcyA9IHRoaXMuX2NsaWNrYWJsZUNhcmRzO1xyXG4gICAgICAgIGNhcmRDb250YWluZXIubWF4Q29sdW1uU29ydHMgPSB0aGlzLm1heENvbHVtblNvcnRzO1xyXG4gICAgICAgIGNhcmRDb250YWluZXIucGVybWFuZW50Rm9vdGVycyA9IHRoaXMuX3Blcm1hbmVudEZvb3RlcnM7XHJcbiAgICAgICAgY2FyZENvbnRhaW5lci5zZWxlY3RhYmxlQ2FyZHMgPSB0aGlzLl9zZWxlY3RhYmxlQ2FyZHM7XHJcbiAgICAgICAgY2FyZENvbnRhaW5lci5kaXNhYmxlU2VsZWN0aW9uID0gdGhpcy5fZGlzYWJsZVNlbGVjdGlvbjtcclxuICAgICAgICBpZiAoY2FyZENvbnRhaW5lci5jYXJkQ29udHJvbGxlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNhcmRDb250YWluZXIuY2FyZENvbnRyb2xsZXIgPSB0aGlzLmNhcmRDb250cm9sbGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FyZENvbnRhaW5lci5jYXJkQ29udHJvbGxlckFzID09IG51bGwpIHtcclxuICAgICAgICAgICAgY2FyZENvbnRhaW5lci5jYXJkQ29udHJvbGxlckFzID0gdGhpcy5jYXJkQ29udHJvbGxlckFzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FyZENvbnRhaW5lci5jYXJkQXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjYXJkQ29udGFpbmVyLmNhcmRBcyA9IHRoaXMuY2FyZEFzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQ2FyZENvbnRhaW5lckJ1aWxkZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQ2FyZENvbnRhaW5lckJ1aWxkZXIgPSBDYXJkQ29udGFpbmVyQnVpbGRlcjtcclxudmFyIERhdGFTb3VyY2VCdWlsZGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERhdGFTb3VyY2VCdWlsZGVyKCRpbmplY3RvciwgcGFyZW50KSB7XHJcbiAgICAgICAgdGhpcy4kaW5qZWN0b3IgPSAkaW5qZWN0b3I7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSB0aGlzLiRpbmplY3Rvci5nZXQoZGF0YVNvdXJjZXMuc2ltcGxlRGF0YVNvdXJjZS5mYWN0b3J5TmFtZSk7XHJcbiAgICAgICAgcGFyZW50Ll9kYXRhU291cmNlID0gZmFjdG9yeS5nZXRJbnN0YW5jZShbXSk7XHJcbiAgICB9XHJcbiAgICBEYXRhU291cmNlQnVpbGRlci5wcm90b3R5cGUuYnVpbGRTaW1wbGVEYXRhU291cmNlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB2YXIgZmFjdG9yeSA9IHRoaXMuJGluamVjdG9yLmdldChkYXRhU291cmNlcy5zaW1wbGVEYXRhU291cmNlLmZhY3RvcnlOYW1lKTtcclxuICAgICAgICB0aGlzLnBhcmVudC5fZGF0YVNvdXJjZSA9IGZhY3RvcnkuZ2V0SW5zdGFuY2UoZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Ll9kYXRhU291cmNlO1xyXG4gICAgfTtcclxuICAgIERhdGFTb3VyY2VCdWlsZGVyLnByb3RvdHlwZS5idWlsZERhdGFTZXJ2aWNlRGF0YVNvdXJjZSA9IGZ1bmN0aW9uIChnZXREYXRhU2V0KSB7XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSB0aGlzLiRpbmplY3Rvci5nZXQoZGF0YVNvdXJjZXMuZGF0YVNlcnZpY2VEYXRhU291cmNlLmZhY3RvcnlOYW1lKTtcclxuICAgICAgICB0aGlzLnBhcmVudC5fZGF0YVNvdXJjZSA9IGZhY3RvcnkuZ2V0SW5zdGFuY2UoZ2V0RGF0YVNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Ll9kYXRhU291cmNlO1xyXG4gICAgfTtcclxuICAgIERhdGFTb3VyY2VCdWlsZGVyLnByb3RvdHlwZS5idWlsZENsaWVudFNlcnZlckRhdGFTb3VyY2UgPSBmdW5jdGlvbiAoZ2V0RGF0YVNldCwgZ2V0RmlsdGVyTW9kZWwsIHZhbGlkYXRlTW9kZWwpIHtcclxuICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZCh0aGlzLnBhcmVudC5fc2VhcmNoRmlsdGVyKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC51c2VTZWFyY2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSB0aGlzLiRpbmplY3Rvci5nZXQoZGF0YVNvdXJjZXMuY2xpZW50U2VydmVyRGF0YVNvdXJjZS5mYWN0b3J5TmFtZSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQuX2RhdGFTb3VyY2UgPSBmYWN0b3J5LmdldEluc3RhbmNlKGdldERhdGFTZXQsIHRoaXMucGFyZW50Ll9zZWFyY2hGaWx0ZXIsIGdldEZpbHRlck1vZGVsLCB2YWxpZGF0ZU1vZGVsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuX2RhdGFTb3VyY2U7XHJcbiAgICB9O1xyXG4gICAgRGF0YVNvdXJjZUJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkU2VydmVyU2lkZURhdGFTb3VyY2UgPSBmdW5jdGlvbiAoZ2V0RGF0YVNldCkge1xyXG4gICAgICAgIHZhciBmYWN0b3J5ID0gdGhpcy4kaW5qZWN0b3IuZ2V0KGRhdGFTb3VyY2VzLnNlcnZlclNpZGVEYXRhU291cmNlLmZhY3RvcnlOYW1lKTtcclxuICAgICAgICB0aGlzLnBhcmVudC5fZGF0YVNvdXJjZSA9IGZhY3RvcnkuZ2V0SW5zdGFuY2UoZ2V0RGF0YVNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Ll9kYXRhU291cmNlO1xyXG4gICAgfTtcclxuICAgIERhdGFTb3VyY2VCdWlsZGVyLnByb3RvdHlwZS5idWlsZFNtYXJ0RGF0YVNvdXJjZSA9IGZ1bmN0aW9uIChnZXREYXRhU2V0KSB7XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSB0aGlzLiRpbmplY3Rvci5nZXQoZGF0YVNvdXJjZXMuc21hcnREYXRhU291cmNlLmZhY3RvcnlOYW1lKTtcclxuICAgICAgICB0aGlzLnBhcmVudC5fZGF0YVNvdXJjZSA9IGZhY3RvcnkuZ2V0SW5zdGFuY2UoZ2V0RGF0YVNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Ll9kYXRhU291cmNlO1xyXG4gICAgfTtcclxuICAgIERhdGFTb3VyY2VCdWlsZGVyLnByb3RvdHlwZS5idWlsZEN1c3RvbURhdGFTb3VyY2UgPSBmdW5jdGlvbiAoZGF0YVNvdXJjZSkge1xyXG4gICAgICAgIHRoaXMucGFyZW50Ll9kYXRhU291cmNlID0gZGF0YVNvdXJjZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuX2RhdGFTb3VyY2U7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERhdGFTb3VyY2VCdWlsZGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkRhdGFTb3VyY2VCdWlsZGVyID0gRGF0YVNvdXJjZUJ1aWxkZXI7XHJcbnZhciBGaWx0ZXJCdWlsZGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpbHRlckJ1aWxkZXIoJGluamVjdG9yLCBwYXJlbnQpIHtcclxuICAgICAgICB0aGlzLiRpbmplY3RvciA9ICRpbmplY3RvcjtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLnBhcmVudC5fZmlsdGVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgRmlsdGVyQnVpbGRlci5wcm90b3R5cGUuYnVpbGRGaWx0ZXJHcm91cCA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xyXG4gICAgICAgIHZhciBmYWN0b3J5ID0gdGhpcy4kaW5qZWN0b3IuZ2V0KGZpbHRlckdyb3VwLmZhY3RvcnlOYW1lKTtcclxuICAgICAgICB2YXIgZmlsdGVyID0gZmFjdG9yeS5nZXRJbnN0YW5jZShzZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQuX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXI7XHJcbiAgICB9O1xyXG4gICAgRmlsdGVyQnVpbGRlci5wcm90b3R5cGUuYnVpbGRNb2RlRmlsdGVyR3JvdXAgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcclxuICAgICAgICB2YXIgZmFjdG9yeSA9IHRoaXMuJGluamVjdG9yLmdldChmaWx0ZXJHcm91cC5tb2RlRmlsdGVyR3JvdXAuZmFjdG9yeU5hbWUpO1xyXG4gICAgICAgIHZhciBmaWx0ZXIgPSBmYWN0b3J5LmdldEluc3RhbmNlKHNldHRpbmdzKTtcclxuICAgICAgICB0aGlzLnBhcmVudC5fZmlsdGVycy5wdXNoKGZpbHRlcik7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcclxuICAgIH07XHJcbiAgICBGaWx0ZXJCdWlsZGVyLnByb3RvdHlwZS5idWlsZFJhbmdlRmlsdGVyR3JvdXAgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcclxuICAgICAgICB2YXIgZmFjdG9yeSA9IHRoaXMuJGluamVjdG9yLmdldChmaWx0ZXJHcm91cC5yYW5nZUZpbHRlckdyb3VwLmZhY3RvcnlOYW1lKTtcclxuICAgICAgICB2YXIgZmlsdGVyID0gZmFjdG9yeS5nZXRJbnN0YW5jZShzZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQuX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXI7XHJcbiAgICB9O1xyXG4gICAgRmlsdGVyQnVpbGRlci5wcm90b3R5cGUuYnVpbGRTZWxlY3RGaWx0ZXIgPSBmdW5jdGlvbiAodmFsdWVTZWxlY3RvciwgY29tcGFyZXIpIHtcclxuICAgICAgICB2YXIgZmFjdG9yeSA9IHRoaXMuJGluamVjdG9yLmdldChzZWxlY3RGaWx0ZXIuZmFjdG9yeU5hbWUpO1xyXG4gICAgICAgIHZhciBmaWx0ZXIgPSBmYWN0b3J5LmdldEluc3RhbmNlKHZhbHVlU2VsZWN0b3IsIGNvbXBhcmVyKTtcclxuICAgICAgICB0aGlzLnBhcmVudC5fZmlsdGVycy5wdXNoKGZpbHRlcik7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcclxuICAgIH07XHJcbiAgICBGaWx0ZXJCdWlsZGVyLnByb3RvdHlwZS5idWlsZERhdGVGaWx0ZXIgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcclxuICAgICAgICB2YXIgZmFjdG9yeSA9IHRoaXMuJGluamVjdG9yLmdldChkYXRlRmlsdGVyLmZhY3RvcnlOYW1lKTtcclxuICAgICAgICB2YXIgZmlsdGVyID0gZmFjdG9yeS5nZXRJbnN0YW5jZShzZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQuX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXI7XHJcbiAgICB9O1xyXG4gICAgRmlsdGVyQnVpbGRlci5wcm90b3R5cGUuYnVpbGRDb2x1bW5TZWFyY2hGaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSB0aGlzLiRpbmplY3Rvci5nZXQoY29sdW1uU2VhcmNoRmlsdGVyX3NlcnZpY2VfMS5mYWN0b3J5TmFtZSk7XHJcbiAgICAgICAgdmFyIGZpbHRlciA9IGZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICB0aGlzLnBhcmVudC5fZmlsdGVycy5wdXNoKGZpbHRlcik7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcclxuICAgIH07XHJcbiAgICBGaWx0ZXJCdWlsZGVyLnByb3RvdHlwZS5hZGRDdXN0b21GaWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQuX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaWx0ZXJCdWlsZGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbHRlckJ1aWxkZXIgPSBGaWx0ZXJCdWlsZGVyO1xyXG5jYXJkQ29udGFpbmVyQnVpbGRlckZhY3RvcnkuJGluamVjdCA9IFsnJGluamVjdG9yJ107XHJcbmZ1bmN0aW9uIGNhcmRDb250YWluZXJCdWlsZGVyRmFjdG9yeSgkaW5qZWN0b3IpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlTW9jazogZmFsc2UsXHJcbiAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXNlTW9jayA/IHRoaXMubW9ja0J1aWxkZXIgOiBuZXcgQ2FyZENvbnRhaW5lckJ1aWxkZXIoJGluamVjdG9yKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vY2tCdWlsZGVyOiBuZXcgQ2FyZENvbnRhaW5lckJ1aWxkZXIoJGluamVjdG9yKSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5jYXJkQ29udGFpbmVyQnVpbGRlckZhY3RvcnkgPSBjYXJkQ29udGFpbmVyQnVpbGRlckZhY3Rvcnk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcmRDb250YWluZXJCdWlsZGVyLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NhcmRDb250YWluZXIvY2FyZENvbnRhaW5lckJ1aWxkZXIuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDk2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNoZWNrYm94JztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsQ2hlY2tib3gnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ0NoZWNrYm94Q29udHJvbGxlcic7XHJcbnZhciBDaGVja2JveENvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2hlY2tib3hDb250cm9sbGVyKCRlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5uZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENoZWNrYm94Q29udHJvbGxlci5wcm90b3R5cGUsIFwiY2hlY2tlZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5nTW9kZWwuJHZpZXdWYWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIENoZWNrYm94Q29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCddO1xyXG4gICAgcmV0dXJuIENoZWNrYm94Q29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5DaGVja2JveENvbnRyb2xsZXIgPSBDaGVja2JveENvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIGNoZWNrYm94KCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL2NoZWNrYm94Lmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2NoZWNrYm94JyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBuZ0Rpc2FibGVkOiAnPScsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5jaGVja2JveCA9IGNoZWNrYm94O1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGNoZWNrYm94KVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgQ2hlY2tib3hDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2tib3guanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94LmpzXG4gKiogbW9kdWxlIGlkID0gOTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8bGFiZWw+XFxyXFxuXFx0PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBuZy1tb2RlbD1cXFwiY2hlY2tib3guY2hlY2tlZFxcXCIgbmctZGlzYWJsZWQ9XFxcImNoZWNrYm94Lm5nRGlzYWJsZWRcXFwiIC8+XFxyXFxuXFx0PHNwYW4gbmctdHJhbnNjbHVkZT48L3NwYW4+XFxyXFxuPC9sYWJlbD5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9jaGVja2JveC9jaGVja2JveC5odG1sXG4gKiogbW9kdWxlIGlkID0gOThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmNvbW1hTGlzdCc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybENvbW1hTGlzdCc7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnQ29tbWFMaXN0Q29udHJvbGxlcic7XHJcbnZhciBDb21tYUxpc3RDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbW1hTGlzdENvbnRyb2xsZXIoJGF0dHJzLCBvYmplY3QpIHtcclxuICAgICAgICB0aGlzLnJlbWFpbmluZ0l0ZW1zID0gMDtcclxuICAgICAgICB0aGlzLmhhc1RyYW5zZm9ybSA9IG9iamVjdC5pc051bGxPcldoaXRlc3BhY2UoJGF0dHJzLnRyYW5zZm9ybSkgPT09IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGlzdCA9IHRoaXMuZ2V0Rmlyc3RJdGVtcyh0aGlzLmluTGlzdCk7XHJcbiAgICB9XHJcbiAgICBDb21tYUxpc3RDb250cm9sbGVyLnByb3RvdHlwZS5nZXRGaXJzdEl0ZW1zID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmhhc1RyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICBsaXN0ID0gXy5tYXAobGlzdCwgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmFuc2Zvcm0oeyBpdGVtOiBpdGVtIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgICAgIHZhciBuZXdMaXN0O1xyXG4gICAgICAgIGlmICh0aGlzLm1heCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIG5ld0xpc3QgPSBfLnRha2UobGlzdCwgdGhpcy5tYXgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbWFpbmluZ0l0ZW1zID0gbGlzdC5sZW5ndGggLSB0aGlzLm1heDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld0xpc3QgPSBfLmNsb25lKGxpc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3TGlzdDtcclxuICAgIH07XHJcbiAgICBDb21tYUxpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRhdHRycycsIF9fb2JqZWN0LnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBDb21tYUxpc3RDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkNvbW1hTGlzdENvbnRyb2xsZXIgPSBDb21tYUxpc3RDb250cm9sbGVyO1xyXG5mdW5jdGlvbiBjb21tYUxpc3QoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiXFxuXFx0XFx0XFx0PHNwYW4+XFxuXFx0XFx0XFx0XFx0PHNwYW4gbmctcmVwZWF0PVxcXCJpdGVtIGluIGNvbW1hTGlzdC5saXN0IHRyYWNrIGJ5ICRpbmRleFxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0PHNwYW4+e3tpdGVtfX08L3NwYW4+PHNwYW4gbmctaGlkZT1cXFwiJGxhc3RcXFwiPiwgPC9zcGFuPlxcblxcdFxcdFxcdFxcdDwvc3Bhbj5cXG5cXHRcXHRcXHRcXHQ8c3BhbiBuZy1zaG93PVxcXCJjb21tYUxpc3QucmVtYWluaW5nSXRlbXMgPiAwXFxcIj4uLi4ge3tjb21tYUxpc3QucmVtYWluaW5nSXRlbXN9fSBtb3JlIGl0ZW1zPC9zcGFuPlxcblxcdFxcdFxcdDwvc3Bhbj5cXG5cXHRcXHRcIixcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2NvbW1hTGlzdCcsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgaW5MaXN0OiAnPWxpc3QnLFxyXG4gICAgICAgICAgICBtYXg6ICc9JyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiAnJicsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbX19vYmplY3QubW9kdWxlTmFtZV0pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgY29tbWFMaXN0KVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgQ29tbWFMaXN0Q29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1hTGlzdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvY29tbWFMaXN0L2NvbW1hTGlzdC5qc1xuICoqIG1vZHVsZSBpZCA9IDk5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3MvYm9vdHN0cmFwRGF0ZVRpbWVQaWNrZXIuZC50cycgLz5cclxucmVxdWlyZSgnLi4vLi4vLi4vbGlicmFyaWVzL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9pbmRleCcpO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcclxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fZGF0ZVRpbWVGb3JtYXRTdHJpbmdzID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLmRhdGU7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBjb21wb25lbnRWYWxpZGF0b3Jfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvY29tcG9uZW50VmFsaWRhdG9yL2NvbXBvbmVudFZhbGlkYXRvci5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLmRhdGVUaW1lJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsRGF0ZVRpbWUnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ0RhdGVUaW1lQ29udHJvbGxlcic7XHJcbnZhciBEYXRlVGltZUNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGF0ZVRpbWVDb250cm9sbGVyKCRzY29wZSwgY29tcG9uZW50VmFsaWRhdG9yRmFjdG9yeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHVucmVnaXN0ZXIgPSAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm5nTW9kZWw7IH0sIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoX3RoaXMudmFsaWRhdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZGF0ZVRpbWVWYWxpZGF0b3IgPSBjb21wb25lbnRWYWxpZGF0b3JGYWN0b3J5LmdldEluc3RhbmNlKHtcclxuICAgICAgICAgICAgICAgICAgICBuZ01vZGVsOiBfdGhpcy5uZ01vZGVsLFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZTogJHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IFtfdGhpcy52YWxpZGF0b3JdLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdW5yZWdpc3RlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgRGF0ZVRpbWVDb250cm9sbGVyLnByb3RvdHlwZS5vbkNsZWFyQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5uZ01vZGVsLiRzZXRWaWV3VmFsdWUoJycpO1xyXG4gICAgICAgIHRoaXMub25DbGVhckV2ZW50KCk7XHJcbiAgICB9O1xyXG4gICAgRGF0ZVRpbWVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsIGNvbXBvbmVudFZhbGlkYXRvcl9zZXJ2aWNlXzEuZmFjdG9yeU5hbWVdO1xyXG4gICAgcmV0dXJuIERhdGVUaW1lQ29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5EYXRlVGltZUNvbnRyb2xsZXIgPSBEYXRlVGltZUNvbnRyb2xsZXI7XHJcbmRhdGVUaW1lLiRpbmplY3QgPSBbdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLm1vbWVudC5zZXJ2aWNlTmFtZSwgX19kYXRlVGltZUZvcm1hdFN0cmluZ3MuZGF0ZVRpbWVGb3JtYXRTZXJ2aWNlTmFtZSwgX19vYmplY3Quc2VydmljZU5hbWVdO1xyXG5mdW5jdGlvbiBkYXRlVGltZShtb21lbnQsIGRhdGVUaW1lRm9ybWF0U3RyaW5ncywgb2JqZWN0KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vZGF0ZVRpbWUuaHRtbCcpLFxyXG4gICAgICAgIHJlcXVpcmU6ICc/Xm5nTW9kZWwnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnZGF0ZVRpbWUnLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIG1pbnV0ZVN0ZXBwaW5nOiAnPScsXHJcbiAgICAgICAgICAgIHVzZURhdGU6ICc9JyxcclxuICAgICAgICAgICAgdXNlVGltZTogJz0nLFxyXG4gICAgICAgICAgICBtaW46ICc9JyxcclxuICAgICAgICAgICAgbWF4OiAnPScsXHJcbiAgICAgICAgICAgIHZhbGlkYXRvcjogJz0nLFxyXG4gICAgICAgICAgICBjbGVhckJ1dHRvbjogJz0nLFxyXG4gICAgICAgICAgICBvbkNsZWFyRXZlbnQ6ICcmJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZVRpbWUgPSBzY29wZS5kYXRlVGltZTtcclxuICAgICAgICAgICAgZGF0ZVRpbWUubmdNb2RlbCA9IG5nTW9kZWw7XHJcbiAgICAgICAgICAgIC8vIGRlZmF1bHRzIHRvIHRydWVcclxuICAgICAgICAgICAgdmFyIGhhc0RhdGUgPSBfLmlzVW5kZWZpbmVkKGRhdGVUaW1lLnVzZURhdGUpID8gdHJ1ZSA6IGRhdGVUaW1lLnVzZURhdGU7XHJcbiAgICAgICAgICAgIHZhciBoYXNUaW1lID0gXy5pc1VuZGVmaW5lZChkYXRlVGltZS51c2VUaW1lKSA/IHRydWUgOiBkYXRlVGltZS51c2VUaW1lO1xyXG4gICAgICAgICAgICB2YXIgZGVmYXVsdHMgPSBlbGVtZW50LmRhdGV0aW1lcGlja2VyLmRlZmF1bHRzO1xyXG4gICAgICAgICAgICB2YXIgbWluID0gZGF0ZVRpbWUubWluICE9IG51bGwgPyBkYXRlVGltZS5taW4gOiBkZWZhdWx0cy5taW5EYXRlO1xyXG4gICAgICAgICAgICB2YXIgbWF4ID0gZGF0ZVRpbWUubWF4ICE9IG51bGwgPyBkYXRlVGltZS5tYXggOiBkZWZhdWx0cy5tYXhEYXRlO1xyXG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gbmdNb2RlbC4kdmlld1ZhbHVlOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGRhdGVUaW1lLnZhbGlkRm9ybWF0ID0gb2JqZWN0LmlzTnVsbE9yRW1wdHkobmV3VmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgOiBtb21lbnQobmV3VmFsdWUpLmlzVmFsaWQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZmluZCgnLnNob3ctZGF0ZS1waWNrZXInKS5kYXRldGltZXBpY2tlcih7XHJcbiAgICAgICAgICAgICAgICBzdGVwcGluZzogZGF0ZVRpbWUubWludXRlU3RlcHBpbmcgfHwgMSxcclxuICAgICAgICAgICAgICAgIGZvcm1hdDogZGF0ZVRpbWUuZm9ybWF0IHx8IGRlZmF1bHRGb3JtYXQoaGFzRGF0ZSwgaGFzVGltZSksXHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdib3R0b20nLFxyXG4gICAgICAgICAgICAgICAgZWxlbWVudEhlaWdodDogMixcclxuICAgICAgICAgICAgICAgIHBpY2tEYXRlOiBoYXNEYXRlLFxyXG4gICAgICAgICAgICAgICAgcGlja1RpbWU6IGhhc1RpbWUsXHJcbiAgICAgICAgICAgICAgICBtaW5EYXRlOiBtaW4sXHJcbiAgICAgICAgICAgICAgICBtYXhEYXRlOiBtYXgsXHJcbiAgICAgICAgICAgIH0pLm9uKCdjaGFuZ2UuZHAnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSAkKHRoaXMpLmZpbmQoJ2lucHV0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWZhdWx0Rm9ybWF0KGhhc0RhdGUsIGhhc1RpbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNEYXRlICYmIGhhc1RpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVRpbWVGb3JtYXRTdHJpbmdzLmRhdGVUaW1lRm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGFzRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlVGltZUZvcm1hdFN0cmluZ3MuZGF0ZUZvcm1hdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhhc1RpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVRpbWVGb3JtYXRTdHJpbmdzLnRpbWVGb3JtYXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXZlcnQgdG8gZGVmYXVsdCBmb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFt0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMubW9tZW50Lm1vZHVsZU5hbWUsIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5kYXRlLm1vZHVsZU5hbWUsIGNvbXBvbmVudFZhbGlkYXRvcl9zZXJ2aWNlXzEubW9kdWxlTmFtZSwgX19vYmplY3QubW9kdWxlTmFtZV0pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgZGF0ZVRpbWUpXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBEYXRlVGltZUNvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvZGF0ZVRpbWUvZGF0ZVRpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4vYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLmNzcycpO1xyXG5yZXF1aXJlKCcuL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlcicpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9saWJyYXJpZXMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMTAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5jc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9saWJyYXJpZXMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5jc3NcbiAqKiBtb2R1bGUgaWQgPSAxMDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohXFxyXFxuICogRGF0ZXRpbWVwaWNrZXIgZm9yIEJvb3RzdHJhcCB2M1xcclxcbi8vISB2ZXJzaW9uIDogMy4xLjNcXHJcXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRW9uYXNkYW4vYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL1xcclxcbiAqL1xcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuICB3aWR0aDogMjUwcHg7XFxyXFxuICBwYWRkaW5nOiA0cHg7XFxyXFxuICBtYXJnaW4tdG9wOiAxcHg7XFxyXFxuICB6LWluZGV4OiA5OTk5OSAhaW1wb3J0YW50O1xcclxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldC50aW1lcGlja2VyLXNicyB7XFxyXFxuICB3aWR0aDogNjAwcHg7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0LmJvdHRvbTpiZWZvcmUge1xcclxcbiAgY29udGVudDogJyc7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICBib3JkZXItbGVmdDogN3B4IHNvbGlkIHRyYW5zcGFyZW50O1xcclxcbiAgYm9yZGVyLXJpZ2h0OiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XFxyXFxuICBib3JkZXItYm90dG9tOiA3cHggc29saWQgI2NjYztcXHJcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yKTtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHRvcDogLTdweDtcXHJcXG4gIGxlZnQ6IDdweDtcXHJcXG59XFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQuYm90dG9tOmFmdGVyIHtcXHJcXG4gIGNvbnRlbnQ6ICcnO1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlci1yaWdodDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcclxcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkIHdoaXRlO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgdG9wOiAtNnB4O1xcclxcbiAgbGVmdDogOHB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldC50b3A6YmVmb3JlIHtcXHJcXG4gIGNvbnRlbnQ6ICcnO1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgYm9yZGVyLWxlZnQ6IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlci1yaWdodDogN3B4IHNvbGlkIHRyYW5zcGFyZW50O1xcclxcbiAgYm9yZGVyLXRvcDogN3B4IHNvbGlkICNjY2M7XFxyXFxuICBib3JkZXItdG9wLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBib3R0b206IC03cHg7XFxyXFxuICBsZWZ0OiA2cHg7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0LnRvcDphZnRlciB7XFxyXFxuICBjb250ZW50OiAnJztcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxyXFxuICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCB3aGl0ZTtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIGJvdHRvbTogLTZweDtcXHJcXG4gIGxlZnQ6IDdweDtcXHJcXG59XFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgLmRvdyB7XFxyXFxuICB3aWR0aDogMTQuMjg1NyU7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0LnB1bGwtcmlnaHQ6YmVmb3JlIHtcXHJcXG4gIGxlZnQ6IGF1dG87XFxyXFxuICByaWdodDogNnB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldC5wdWxsLXJpZ2h0OmFmdGVyIHtcXHJcXG4gIGxlZnQ6IGF1dG87XFxyXFxuICByaWdodDogN3B4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCA+IHVsIHtcXHJcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgYVtkYXRhLWFjdGlvbl0ge1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgYVtkYXRhLWFjdGlvbl06YWN0aXZlIHtcXHJcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IC50aW1lcGlja2VyIHtcXHJcXG4gIG1hcmdpbjogMCA0cHggNHB4IDRweDtcXHJcXG59XFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgLnRpbWVwaWNrZXItaG91cixcXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCAudGltZXBpY2tlci1taW51dGUsXFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgLnRpbWVwaWNrZXItc2Vjb25kIHtcXHJcXG4gIHdpZHRoOiA1NHB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBmb250LXNpemU6IDEuMmVtO1xcclxcbiAgbWFyZ2luLXRvcDogNHB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCBidXR0b25bZGF0YS1hY3Rpb25dIHtcXHJcXG4gIHBhZGRpbmc6IDZweDtcXHJcXG59XFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgdGFibGVbZGF0YS1ob3VyLWZvcm1hdD1cXFwiMTJcXFwiXSAuc2VwYXJhdG9yIHtcXHJcXG4gIHdpZHRoOiA0cHg7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCAuZGF0ZXBpY2tlciA+IGRpdiB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCAucGlja2VyLXN3aXRjaCB7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRhYmxlIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZCxcXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0aCB7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkIHtcXHJcXG4gIGhlaWdodDogMjVweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyNXB4O1xcclxcbiAgd2lkdGg6IDU0cHg7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkLmN3IHtcXHJcXG4gIGZvbnQtc2l6ZTogMTBweDtcXHJcXG4gIGhlaWdodDogMjBweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcclxcbiAgY29sb3I6ICM3Nzc3Nzc7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkLmRheSB7XFxyXFxuICBoZWlnaHQ6IDIwcHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjBweDtcXHJcXG4gIHdpZHRoOiAyMHB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZC5kYXk6aG92ZXIsXFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgdGQuaG91cjpob3ZlcixcXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZC5taW51dGU6aG92ZXIsXFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgdGQuc2Vjb25kOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQ6ICNlZWVlZWU7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkLm9sZCxcXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZC5uZXcge1xcclxcbiAgY29sb3I6ICM3Nzc3Nzc7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkLnRvZGF5IHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgdGQudG9kYXk6YmVmb3JlIHtcXHJcXG4gIGNvbnRlbnQ6ICcnO1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgYm9yZGVyLWxlZnQ6IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCAjNDI4YmNhO1xcclxcbiAgYm9yZGVyLXRvcC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgYm90dG9tOiA0cHg7XFxyXFxuICByaWdodDogNHB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZC5hY3RpdmUsXFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgdGQuYWN0aXZlOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0MjhiY2E7XFxyXFxuICBjb2xvcjogI2ZmZmZmZjtcXHJcXG4gIHRleHQtc2hhZG93OiAwIC0xcHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZC5hY3RpdmUudG9kYXk6YmVmb3JlIHtcXHJcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNmZmY7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkLmRpc2FibGVkLFxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkLmRpc2FibGVkOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICBjb2xvcjogIzc3Nzc3NztcXHJcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkIHNwYW4ge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgd2lkdGg6IDU0cHg7XFxyXFxuICBoZWlnaHQ6IDI1cHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjVweDtcXHJcXG4gIG1hcmdpbjogMHB4IDEuNXB4O1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZCBzcGFuOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQ6ICNlZWVlZWU7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRkIHNwYW4uYWN0aXZlIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0MjhiY2E7XFxyXFxuICBjb2xvcjogI2ZmZmZmZjtcXHJcXG4gIHRleHQtc2hhZG93OiAwIC0xcHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZCBzcGFuLm9sZCB7XFxyXFxuICBjb2xvcjogIzc3Nzc3NztcXHJcXG59XFxyXFxuLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQgdGQgc3Bhbi5kaXNhYmxlZCxcXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0ZCBzcGFuLmRpc2FibGVkOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICBjb2xvcjogIzc3Nzc3NztcXHJcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRoIHtcXHJcXG4gIGhlaWdodDogMjBweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcclxcbiAgd2lkdGg6IDIwcHg7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRoLnBpY2tlci1zd2l0Y2gge1xcclxcbiAgd2lkdGg6IDE0NXB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0aC5uZXh0LFxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRoLnByZXYge1xcclxcbiAgZm9udC1zaXplOiAyMXB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0aC5kaXNhYmxlZCxcXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0aC5kaXNhYmxlZDpob3ZlciB7XFxyXFxuICBiYWNrZ3JvdW5kOiBub25lO1xcclxcbiAgY29sb3I6ICM3Nzc3Nzc7XFxyXFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB0aGVhZCB0cjpmaXJzdC1jaGlsZCB0aCB7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IHRoZWFkIHRyOmZpcnN0LWNoaWxkIHRoOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQ6ICNlZWVlZWU7XFxyXFxufVxcclxcbi5pbnB1dC1ncm91cC5kYXRlIC5pbnB1dC1ncm91cC1hZGRvbiBzcGFuIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgd2lkdGg6IDE2cHg7XFxyXFxuICBoZWlnaHQ6IDE2cHg7XFxyXFxufVxcclxcbi5ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0LmxlZnQtb3JpZW50ZWQ6YmVmb3JlIHtcXHJcXG4gIGxlZnQ6IGF1dG87XFxyXFxuICByaWdodDogNnB4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldC5sZWZ0LW9yaWVudGVkOmFmdGVyIHtcXHJcXG4gIGxlZnQ6IGF1dG87XFxyXFxuICByaWdodDogN3B4O1xcclxcbn1cXHJcXG4uYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLXdpZGdldCB1bC5saXN0LXVuc3R5bGVkIGxpIGRpdi50aW1lcGlja2VyIGRpdi50aW1lcGlja2VyLXBpY2tlciB0YWJsZS50YWJsZS1jb25kZW5zZWQgdGJvZHkgPiB0ciA+IHRkIHtcXHJcXG4gIHBhZGRpbmc6IDBweCAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xcclxcbiAgLmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci13aWRnZXQudGltZXBpY2tlci1zYnMge1xcclxcbiAgICB3aWR0aDogMjgzcHg7XFxyXFxuICB9XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9saWJyYXJpZXMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5jc3NcbiAqKiBtb2R1bGUgaWQgPSAxMDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcbi8vISB2ZXJzaW9uIDogMy4xLjNcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbmJvb3RzdHJhcC1kYXRldGltZXBpY2tlci5qc1xyXG5odHRwczovL2dpdGh1Yi5jb20vRW9uYXNkYW4vYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNCBKb25hdGhhbiBQZXRlcnNvblxyXG5cclxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXHJcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcclxuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXHJcbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG5USEUgU09GVFdBUkUuXHJcbiovXHJcbjsgKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuXHRcdC8vIEFNRCBpcyB1c2VkIC0gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuXHRcdGRlZmluZShbJ2pxdWVyeScsICdtb21lbnQnXSwgZmFjdG9yeSk7XHJcblx0fSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuXHRcdGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJ21vbWVudCcpKTtcclxuXHR9XHJcblx0ZWxzZSB7XHJcblx0XHQvLyBOZWl0aGVyIEFNRCBvciBDb21tb25KUyB1c2VkLiBVc2UgZ2xvYmFsIHZhcmlhYmxlcy5cclxuXHRcdGlmICghalF1ZXJ5KSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyIHJlcXVpcmVzIGpRdWVyeSB0byBiZSBsb2FkZWQgZmlyc3QnKTtcclxuXHRcdH1cclxuXHRcdGlmICghbW9tZW50KSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyIHJlcXVpcmVzIG1vbWVudC5qcyB0byBiZSBsb2FkZWQgZmlyc3QnKTtcclxuXHRcdH1cclxuXHRcdGZhY3Rvcnkocm9vdC5qUXVlcnksIG1vbWVudCk7XHJcblx0fVxyXG59KHRoaXMsIGZ1bmN0aW9uICgkLCBtb21lbnQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblx0aWYgKHR5cGVvZiBtb21lbnQgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ21vbWVudGpzIGlzIHJlcXVpcmVkJyk7XHJcblx0fVxyXG5cclxuXHR2YXIgZHBnSWQgPSAwLFxyXG5cclxuICAgIERhdGVUaW1lUGlja2VyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIFx0dmFyIGRlZmF1bHRzID0gJC5mbi5kYXRldGltZXBpY2tlci5kZWZhdWx0cyxcclxuXHJcbiAgICAgICAgICAgIGljb25zID0ge1xyXG4gICAgICAgICAgICBcdHRpbWU6ICdmYSBmYS1jbG9jay1vJyxcclxuICAgICAgICAgICAgXHRkYXRlOiAnZmEgZmEtY2FsZW5kYXInLFxyXG4gICAgICAgICAgICBcdHVwOiAnZmEgZmEtY2hldnJvbi11cCcsXHJcbiAgICAgICAgICAgIFx0ZG93bjogJ2ZhIGZhLWNoZXZyb24tZG93bidcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHBpY2tlciA9IHRoaXMsXHJcbiAgICAgICAgICAgIGVycm9yZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgZERhdGUsXHJcblxyXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHR2YXIgaWNvbiA9IGZhbHNlLCBsb2NhbGVEYXRhLCBySW50ZXJ2YWw7XHJcbiAgICAgICAgXHRwaWNrZXIub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgICAgICAgXHRwaWNrZXIub3B0aW9ucy5pY29ucyA9ICQuZXh0ZW5kKHt9LCBpY29ucywgcGlja2VyLm9wdGlvbnMuaWNvbnMpO1xyXG5cclxuICAgICAgICBcdHBpY2tlci5lbGVtZW50ID0gJChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgXHRkYXRhVG9PcHRpb25zKCk7XHJcblxyXG4gICAgICAgIFx0aWYgKCEocGlja2VyLm9wdGlvbnMucGlja1RpbWUgfHwgcGlja2VyLm9wdGlvbnMucGlja0RhdGUpKSB7XHJcbiAgICAgICAgXHRcdHRocm93IG5ldyBFcnJvcignTXVzdCBjaG9vc2UgYXQgbGVhc3Qgb25lIHBpY2tlcicpO1xyXG4gICAgICAgIFx0fVxyXG5cclxuICAgICAgICBcdHBpY2tlci5pZCA9IGRwZ0lkKys7XHJcbiAgICAgICAgXHRtb21lbnQubG9jYWxlKHBpY2tlci5vcHRpb25zLmxhbmd1YWdlKTtcclxuICAgICAgICBcdHBpY2tlci5kYXRlID0gbW9tZW50KCk7XHJcbiAgICAgICAgXHRwaWNrZXIudW5zZXQgPSBmYWxzZTtcclxuICAgICAgICBcdHBpY2tlci5pc0lucHV0ID0gcGlja2VyLmVsZW1lbnQuaXMoJ2lucHV0Jyk7XHJcbiAgICAgICAgXHRwaWNrZXIuY29tcG9uZW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIFx0aWYgKHBpY2tlci5lbGVtZW50Lmhhc0NsYXNzKCdpbnB1dC1ncm91cCcpKSB7XHJcbiAgICAgICAgXHRcdGlmIChwaWNrZXIuZWxlbWVudC5maW5kKCcuZGF0ZXBpY2tlcmJ1dHRvbicpLnNpemUoKSA9PT0gMCkgey8vaW4gY2FzZSB0aGVyZSBpcyBtb3JlIHRoZW4gb25lICdpbnB1dC1ncm91cC1hZGRvbicgSXNzdWUgIzQ4XHJcbiAgICAgICAgXHRcdFx0cGlja2VyLmNvbXBvbmVudCA9IHBpY2tlci5lbGVtZW50LmZpbmQoJ1tjbGFzc149XCJpbnB1dC1ncm91cC1cIl0nKTtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0XHRlbHNlIHtcclxuICAgICAgICBcdFx0XHRwaWNrZXIuY29tcG9uZW50ID0gcGlja2VyLmVsZW1lbnQuZmluZCgnLmRhdGVwaWNrZXJidXR0b24nKTtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0cGlja2VyLmZvcm1hdCA9IHBpY2tlci5vcHRpb25zLmZvcm1hdDtcclxuXHJcbiAgICAgICAgXHRsb2NhbGVEYXRhID0gbW9tZW50KCkubG9jYWxlRGF0YSgpO1xyXG5cclxuICAgICAgICBcdGlmICghcGlja2VyLmZvcm1hdCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuZm9ybWF0ID0gKHBpY2tlci5vcHRpb25zLnBpY2tEYXRlID8gbG9jYWxlRGF0YS5sb25nRGF0ZUZvcm1hdCgnTCcpIDogJycpO1xyXG4gICAgICAgIFx0XHRpZiAocGlja2VyLm9wdGlvbnMucGlja0RhdGUgJiYgcGlja2VyLm9wdGlvbnMucGlja1RpbWUpIHtcclxuICAgICAgICBcdFx0XHRwaWNrZXIuZm9ybWF0ICs9ICcgJztcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0XHRwaWNrZXIuZm9ybWF0ICs9IChwaWNrZXIub3B0aW9ucy5waWNrVGltZSA/IGxvY2FsZURhdGEubG9uZ0RhdGVGb3JtYXQoJ0xUJykgOiAnJyk7XHJcbiAgICAgICAgXHRcdGlmIChwaWNrZXIub3B0aW9ucy51c2VTZWNvbmRzKSB7XHJcbiAgICAgICAgXHRcdFx0aWYgKGxvY2FsZURhdGEubG9uZ0RhdGVGb3JtYXQoJ0xUJykuaW5kZXhPZignIEEnKSAhPT0gLTEpIHtcclxuICAgICAgICBcdFx0XHRcdHBpY2tlci5mb3JtYXQgPSBwaWNrZXIuZm9ybWF0LnNwbGl0KCcgQScpWzBdICsgJzpzcyBBJztcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdFx0ZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0XHRwaWNrZXIuZm9ybWF0ICs9ICc6c3MnO1xyXG4gICAgICAgIFx0XHRcdH1cclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0cGlja2VyLnVzZTI0aG91cnMgPSAocGlja2VyLmZvcm1hdC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2EnKSA8IDAgJiYgcGlja2VyLmZvcm1hdC5pbmRleE9mKCdoJykgPCAwKTtcclxuXHJcbiAgICAgICAgXHRpZiAocGlja2VyLmNvbXBvbmVudCkge1xyXG4gICAgICAgIFx0XHRpY29uID0gcGlja2VyLmNvbXBvbmVudC5maW5kKCdzcGFuJyk7XHJcbiAgICAgICAgXHR9XHJcblxyXG4gICAgICAgIFx0aWYgKHBpY2tlci5vcHRpb25zLnBpY2tUaW1lKSB7XHJcbiAgICAgICAgXHRcdGlmIChpY29uKSB7XHJcbiAgICAgICAgXHRcdFx0aWNvbi5hZGRDbGFzcyhwaWNrZXIub3B0aW9ucy5pY29ucy50aW1lKTtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0aWYgKHBpY2tlci5vcHRpb25zLnBpY2tEYXRlKSB7XHJcbiAgICAgICAgXHRcdGlmIChpY29uKSB7XHJcbiAgICAgICAgXHRcdFx0aWNvbi5yZW1vdmVDbGFzcyhwaWNrZXIub3B0aW9ucy5pY29ucy50aW1lKTtcclxuICAgICAgICBcdFx0XHRpY29uLmFkZENsYXNzKHBpY2tlci5vcHRpb25zLmljb25zLmRhdGUpO1xyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHR9XHJcblxyXG4gICAgICAgIFx0cGlja2VyLm9wdGlvbnMud2lkZ2V0UGFyZW50ID1cclxuICAgICAgICAgICAgICAgIHR5cGVvZiBwaWNrZXIub3B0aW9ucy53aWRnZXRQYXJlbnQgPT09ICdzdHJpbmcnICYmIHBpY2tlci5vcHRpb25zLndpZGdldFBhcmVudCB8fFxyXG4gICAgICAgICAgICAgICAgcGlja2VyLmVsZW1lbnQucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBcdHJldHVybiAnc2Nyb2xsJyA9PT0gJCh0aGlzKS5jc3MoJ292ZXJmbG93LXknKTtcclxuICAgICAgICAgICAgICAgIH0pLmdldCgwKSB8fFxyXG4gICAgICAgICAgICAgICAgJ2JvZHknO1xyXG5cclxuICAgICAgICBcdHBpY2tlci53aWRnZXQgPSAkKGdldFRlbXBsYXRlKCkpLmFwcGVuZFRvKHBpY2tlci5vcHRpb25zLndpZGdldFBhcmVudCk7XHJcblxyXG4gICAgICAgIFx0cGlja2VyLm1pblZpZXdNb2RlID0gcGlja2VyLm9wdGlvbnMubWluVmlld01vZGUgfHwgMDtcclxuICAgICAgICBcdGlmICh0eXBlb2YgcGlja2VyLm1pblZpZXdNb2RlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIFx0XHRzd2l0Y2ggKHBpY2tlci5taW5WaWV3TW9kZSkge1xyXG4gICAgICAgIFx0XHRcdGNhc2UgJ21vbnRocyc6XHJcbiAgICAgICAgXHRcdFx0XHRwaWNrZXIubWluVmlld01vZGUgPSAxO1xyXG4gICAgICAgIFx0XHRcdFx0YnJlYWs7XHJcbiAgICAgICAgXHRcdFx0Y2FzZSAneWVhcnMnOlxyXG4gICAgICAgIFx0XHRcdFx0cGlja2VyLm1pblZpZXdNb2RlID0gMjtcclxuICAgICAgICBcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgIFx0XHRcdGRlZmF1bHQ6XHJcbiAgICAgICAgXHRcdFx0XHRwaWNrZXIubWluVmlld01vZGUgPSAwO1xyXG4gICAgICAgIFx0XHRcdFx0YnJlYWs7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH1cclxuICAgICAgICBcdHBpY2tlci52aWV3TW9kZSA9IHBpY2tlci5vcHRpb25zLnZpZXdNb2RlIHx8IDA7XHJcbiAgICAgICAgXHRpZiAodHlwZW9mIHBpY2tlci52aWV3TW9kZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBcdFx0c3dpdGNoIChwaWNrZXIudmlld01vZGUpIHtcclxuICAgICAgICBcdFx0XHRjYXNlICdtb250aHMnOlxyXG4gICAgICAgIFx0XHRcdFx0cGlja2VyLnZpZXdNb2RlID0gMTtcclxuICAgICAgICBcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgIFx0XHRcdGNhc2UgJ3llYXJzJzpcclxuICAgICAgICBcdFx0XHRcdHBpY2tlci52aWV3TW9kZSA9IDI7XHJcbiAgICAgICAgXHRcdFx0XHRicmVhaztcclxuICAgICAgICBcdFx0XHRkZWZhdWx0OlxyXG4gICAgICAgIFx0XHRcdFx0cGlja2VyLnZpZXdNb2RlID0gMDtcclxuICAgICAgICBcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHR9XHJcblxyXG4gICAgICAgIFx0cGlja2VyLnZpZXdNb2RlID0gTWF0aC5tYXgocGlja2VyLnZpZXdNb2RlLCBwaWNrZXIubWluVmlld01vZGUpO1xyXG5cclxuICAgICAgICBcdHBpY2tlci5vcHRpb25zLmRpc2FibGVkRGF0ZXMgPSBpbmRleEdpdmVuRGF0ZXMocGlja2VyLm9wdGlvbnMuZGlzYWJsZWREYXRlcyk7XHJcbiAgICAgICAgXHRwaWNrZXIub3B0aW9ucy5lbmFibGVkRGF0ZXMgPSBpbmRleEdpdmVuRGF0ZXMocGlja2VyLm9wdGlvbnMuZW5hYmxlZERhdGVzKTtcclxuXHJcbiAgICAgICAgXHRwaWNrZXIuc3RhcnRWaWV3TW9kZSA9IHBpY2tlci52aWV3TW9kZTtcclxuICAgICAgICBcdHBpY2tlci5zZXRNaW5EYXRlKHBpY2tlci5vcHRpb25zLm1pbkRhdGUpO1xyXG4gICAgICAgIFx0cGlja2VyLnNldE1heERhdGUocGlja2VyLm9wdGlvbnMubWF4RGF0ZSk7XHJcbiAgICAgICAgXHRmaWxsRG93KCk7XHJcbiAgICAgICAgXHRmaWxsTW9udGhzKCk7XHJcbiAgICAgICAgXHRmaWxsSG91cnMoKTtcclxuICAgICAgICBcdGZpbGxNaW51dGVzKCk7XHJcbiAgICAgICAgXHRmaWxsU2Vjb25kcygpO1xyXG4gICAgICAgIFx0dXBkYXRlKCk7XHJcbiAgICAgICAgXHRzaG93TW9kZSgpO1xyXG4gICAgICAgIFx0aWYgKCFnZXRQaWNrZXJJbnB1dCgpLnByb3AoJ2Rpc2FibGVkJykpIHtcclxuICAgICAgICBcdFx0YXR0YWNoRGF0ZVBpY2tlckV2ZW50cygpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0aWYgKHBpY2tlci5vcHRpb25zLmRlZmF1bHREYXRlICE9PSAnJyAmJiBnZXRQaWNrZXJJbnB1dCgpLnZhbCgpID09PSAnJykge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuc2V0VmFsdWUocGlja2VyLm9wdGlvbnMuZGVmYXVsdERhdGUpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0aWYgKHBpY2tlci5vcHRpb25zLm1pbnV0ZVN0ZXBwaW5nICE9PSAxKSB7XHJcbiAgICAgICAgXHRcdHJJbnRlcnZhbCA9IHBpY2tlci5vcHRpb25zLm1pbnV0ZVN0ZXBwaW5nO1xyXG4gICAgICAgIFx0XHRwaWNrZXIuZGF0ZS5taW51dGVzKChNYXRoLnJvdW5kKHBpY2tlci5kYXRlLm1pbnV0ZXMoKSAvIHJJbnRlcnZhbCkgKiBySW50ZXJ2YWwpICUgNjApLnNlY29uZHMoMCk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0UGlja2VySW5wdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHR2YXIgaW5wdXQ7XHJcblxyXG4gICAgICAgIFx0aWYgKHBpY2tlci5pc0lucHV0KSB7XHJcbiAgICAgICAgXHRcdHJldHVybiBwaWNrZXIuZWxlbWVudDtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlucHV0ID0gcGlja2VyLmVsZW1lbnQuZmluZCgnLmRhdGVwaWNrZXJpbnB1dCcpO1xyXG4gICAgICAgIFx0aWYgKGlucHV0LnNpemUoKSA9PT0gMCkge1xyXG4gICAgICAgIFx0XHRpbnB1dCA9IHBpY2tlci5lbGVtZW50LmZpbmQoJ2lucHV0Jyk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRlbHNlIGlmICghaW5wdXQuaXMoJ2lucHV0JykpIHtcclxuICAgICAgICBcdFx0dGhyb3cgbmV3IEVycm9yKCdDU1MgY2xhc3MgXCJkYXRlcGlja2VyaW5wdXRcIiBjYW5ub3QgYmUgYXBwbGllZCB0byBub24gaW5wdXQgZWxlbWVudCcpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0cmV0dXJuIGlucHV0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRhdGFUb09wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHR2YXIgZURhdGE7XHJcbiAgICAgICAgXHRpZiAocGlja2VyLmVsZW1lbnQuaXMoJ2lucHV0JykpIHtcclxuICAgICAgICBcdFx0ZURhdGEgPSBwaWNrZXIuZWxlbWVudC5kYXRhKCk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRlbHNlIHtcclxuICAgICAgICBcdFx0ZURhdGEgPSBwaWNrZXIuZWxlbWVudC5maW5kKCdpbnB1dCcpLmRhdGEoKTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChlRGF0YS5kYXRlRm9ybWF0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBcdFx0cGlja2VyLm9wdGlvbnMuZm9ybWF0ID0gZURhdGEuZGF0ZUZvcm1hdDtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChlRGF0YS5kYXRlUGlja2RhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIub3B0aW9ucy5waWNrRGF0ZSA9IGVEYXRhLmRhdGVQaWNrZGF0ZTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChlRGF0YS5kYXRlUGlja3RpbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIub3B0aW9ucy5waWNrVGltZSA9IGVEYXRhLmRhdGVQaWNrdGltZTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChlRGF0YS5kYXRlVXNlbWludXRlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5vcHRpb25zLnVzZU1pbnV0ZXMgPSBlRGF0YS5kYXRlVXNlbWludXRlcztcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChlRGF0YS5kYXRlVXNlc2Vjb25kcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5vcHRpb25zLnVzZVNlY29uZHMgPSBlRGF0YS5kYXRlVXNlc2Vjb25kcztcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChlRGF0YS5kYXRlVXNlY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5vcHRpb25zLnVzZUN1cnJlbnQgPSBlRGF0YS5kYXRlVXNlY3VycmVudDtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChlRGF0YS5jYWxlbmRhcldlZWtzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBcdFx0cGlja2VyLm9wdGlvbnMuY2FsZW5kYXJXZWVrcyA9IGVEYXRhLmNhbGVuZGFyV2Vla3M7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZU1pbnV0ZXN0ZXBwaW5nICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBcdFx0cGlja2VyLm9wdGlvbnMubWludXRlU3RlcHBpbmcgPSBlRGF0YS5kYXRlTWludXRlc3RlcHBpbmc7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZU1pbmRhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIub3B0aW9ucy5taW5EYXRlID0gZURhdGEuZGF0ZU1pbmRhdGU7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZU1heGRhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIub3B0aW9ucy5tYXhEYXRlID0gZURhdGEuZGF0ZU1heGRhdGU7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZVNob3d0b2RheSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5vcHRpb25zLnNob3dUb2RheSA9IGVEYXRhLmRhdGVTaG93dG9kYXk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZUNvbGxhcHNlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBcdFx0cGlja2VyLm9wdGlvbnMuY29sbGFwc2UgPSBlRGF0YS5kYXRlQ29sbGFwc2U7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZUxhbmd1YWdlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBcdFx0cGlja2VyLm9wdGlvbnMubGFuZ3VhZ2UgPSBlRGF0YS5kYXRlTGFuZ3VhZ2U7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZURlZmF1bHRkYXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBcdFx0cGlja2VyLm9wdGlvbnMuZGVmYXVsdERhdGUgPSBlRGF0YS5kYXRlRGVmYXVsdGRhdGU7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZURpc2FibGVkZGF0ZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIub3B0aW9ucy5kaXNhYmxlZERhdGVzID0gZURhdGEuZGF0ZURpc2FibGVkZGF0ZXM7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZUVuYWJsZWRkYXRlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5vcHRpb25zLmVuYWJsZWREYXRlcyA9IGVEYXRhLmRhdGVFbmFibGVkZGF0ZXM7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZUljb25zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBcdFx0cGlja2VyLm9wdGlvbnMuaWNvbnMgPSBlRGF0YS5kYXRlSWNvbnM7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZVVzZXN0cmljdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5vcHRpb25zLnVzZVN0cmljdCA9IGVEYXRhLmRhdGVVc2VzdHJpY3Q7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZURpcmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5vcHRpb25zLmRpcmVjdGlvbiA9IGVEYXRhLmRhdGVEaXJlY3Rpb247XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZVNpZGVieXNpZGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIub3B0aW9ucy5zaWRlQnlTaWRlID0gZURhdGEuZGF0ZVNpZGVieXNpZGU7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZURhdGEuZGF0ZURheXNvZndlZWtkaXNhYmxlZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5vcHRpb25zLmRheXNPZldlZWtEaXNhYmxlZCA9IGVEYXRhLmRhdGVEYXlzb2Z3ZWVrZGlzYWJsZWQ7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcGxhY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHR2YXIgcG9zaXRpb24gPSAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gcGlja2VyLmNvbXBvbmVudCA/IHBpY2tlci5jb21wb25lbnQub2Zmc2V0KCkgOiBwaWNrZXIuZWxlbWVudC5vZmZzZXQoKSxcclxuICAgICAgICAgICAgICAgICR3aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgICAgICBwbGFjZVBvc2l0aW9uO1xyXG5cclxuICAgICAgICBcdHBpY2tlci53aWR0aCA9IHBpY2tlci5jb21wb25lbnQgPyBwaWNrZXIuY29tcG9uZW50Lm91dGVyV2lkdGgoKSA6IHBpY2tlci5lbGVtZW50Lm91dGVyV2lkdGgoKTtcclxuICAgICAgICBcdG9mZnNldC50b3AgPSBvZmZzZXQudG9wICsgcGlja2VyLmVsZW1lbnQub3V0ZXJIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgXHRpZiAocGlja2VyLm9wdGlvbnMuZGlyZWN0aW9uID09PSAndXAnKSB7XHJcbiAgICAgICAgXHRcdHBsYWNlUG9zaXRpb24gPSAndG9wJztcclxuICAgICAgICBcdH0gZWxzZSBpZiAocGlja2VyLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnYm90dG9tJykge1xyXG4gICAgICAgIFx0XHRwbGFjZVBvc2l0aW9uID0gJ2JvdHRvbSc7XHJcbiAgICAgICAgXHR9IGVsc2UgaWYgKHBpY2tlci5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgXHRcdGlmIChvZmZzZXQudG9wICsgcGlja2VyLndpZGdldC5oZWlnaHQoKSA+ICR3aW5kb3cuaGVpZ2h0KCkgKyAkd2luZG93LnNjcm9sbFRvcCgpICYmIHBpY2tlci53aWRnZXQuaGVpZ2h0KCkgKyBwaWNrZXIuZWxlbWVudC5vdXRlckhlaWdodCgpIDwgb2Zmc2V0LnRvcCkge1xyXG4gICAgICAgIFx0XHRcdHBsYWNlUG9zaXRpb24gPSAndG9wJztcclxuICAgICAgICBcdFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0XHRwbGFjZVBvc2l0aW9uID0gJ2JvdHRvbSc7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChwbGFjZVBvc2l0aW9uID09PSAndG9wJykge1xyXG4gICAgICAgIFx0XHRvZmZzZXQuYm90dG9tID0gJHdpbmRvdy5oZWlnaHQoKSAtIG9mZnNldC50b3AgKyBwaWNrZXIuZWxlbWVudC5vdXRlckhlaWdodCgpICsgMztcclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5hZGRDbGFzcygndG9wJykucmVtb3ZlQ2xhc3MoJ2JvdHRvbScpO1xyXG4gICAgICAgIFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0b2Zmc2V0LnRvcCArPSAxO1xyXG4gICAgICAgIFx0XHRvZmZzZXQudG9wICs9IHBpY2tlci5vcHRpb25zLmVsZW1lbnRIZWlnaHQ7XHJcbiAgICAgICAgXHRcdHBpY2tlci53aWRnZXQuYWRkQ2xhc3MoJ2JvdHRvbScpLnJlbW92ZUNsYXNzKCd0b3AnKTtcclxuICAgICAgICBcdH1cclxuXHJcbiAgICAgICAgXHRpZiAocGlja2VyLm9wdGlvbnMud2lkdGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LndpZHRoKHBpY2tlci5vcHRpb25zLndpZHRoKTtcclxuICAgICAgICBcdH1cclxuXHJcbiAgICAgICAgXHRpZiAocGlja2VyLm9wdGlvbnMub3JpZW50YXRpb24gPT09ICdsZWZ0Jykge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LmFkZENsYXNzKCdsZWZ0LW9yaWVudGVkJyk7XHJcbiAgICAgICAgXHRcdG9mZnNldC5sZWZ0ID0gb2Zmc2V0LmxlZnQgLSBwaWNrZXIud2lkZ2V0LndpZHRoKCkgKyAyMDtcclxuICAgICAgICBcdH1cclxuXHJcbiAgICAgICAgXHRpZiAoaXNJbkZpeGVkKCkpIHtcclxuICAgICAgICBcdFx0cG9zaXRpb24gPSAnZml4ZWQnO1xyXG4gICAgICAgIFx0XHRvZmZzZXQudG9wIC09ICR3aW5kb3cuc2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgXHRcdG9mZnNldC5sZWZ0IC09ICR3aW5kb3cuc2Nyb2xsTGVmdCgpO1xyXG4gICAgICAgIFx0fVxyXG5cclxuICAgICAgICBcdGlmICgkd2luZG93LndpZHRoKCkgPCBvZmZzZXQubGVmdCArIHBpY2tlci53aWRnZXQub3V0ZXJXaWR0aCgpKSB7XHJcbiAgICAgICAgXHRcdG9mZnNldC5yaWdodCA9ICR3aW5kb3cud2lkdGgoKSAtIG9mZnNldC5sZWZ0IC0gcGlja2VyLndpZHRoO1xyXG4gICAgICAgIFx0XHRvZmZzZXQubGVmdCA9ICdhdXRvJztcclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5hZGRDbGFzcygncHVsbC1yaWdodCcpO1xyXG4gICAgICAgIFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0b2Zmc2V0LnJpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LnJlbW92ZUNsYXNzKCdwdWxsLXJpZ2h0Jyk7XHJcbiAgICAgICAgXHR9XHJcblxyXG4gICAgICAgIFx0aWYgKHBsYWNlUG9zaXRpb24gPT09ICd0b3AnKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci53aWRnZXQuY3NzKHtcclxuICAgICAgICBcdFx0XHRwb3NpdGlvbjogcG9zaXRpb24sXHJcbiAgICAgICAgXHRcdFx0Ym90dG9tOiBvZmZzZXQuYm90dG9tLFxyXG4gICAgICAgIFx0XHRcdHRvcDogJ2F1dG8nLFxyXG4gICAgICAgIFx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0LFxyXG4gICAgICAgIFx0XHRcdHJpZ2h0OiBvZmZzZXQucmlnaHRcclxuICAgICAgICBcdFx0fSk7XHJcbiAgICAgICAgXHR9IGVsc2Uge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LmNzcyh7XHJcbiAgICAgICAgXHRcdFx0cG9zaXRpb246IHBvc2l0aW9uLFxyXG4gICAgICAgIFx0XHRcdHRvcDogb2Zmc2V0LnRvcCxcclxuICAgICAgICBcdFx0XHRib3R0b206ICdhdXRvJyxcclxuICAgICAgICBcdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCxcclxuICAgICAgICBcdFx0XHRyaWdodDogb2Zmc2V0LnJpZ2h0XHJcbiAgICAgICAgXHRcdH0pO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG5vdGlmeUNoYW5nZSA9IGZ1bmN0aW9uIChvbGREYXRlLCBldmVudFR5cGUpIHtcclxuICAgICAgICBcdGlmIChtb21lbnQocGlja2VyLmRhdGUpLmlzU2FtZShtb21lbnQob2xkRGF0ZSkpICYmICFlcnJvcmVkKSB7XHJcbiAgICAgICAgXHRcdHJldHVybjtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGVycm9yZWQgPSBmYWxzZTtcclxuICAgICAgICBcdHBpY2tlci5lbGVtZW50LnRyaWdnZXIoe1xyXG4gICAgICAgIFx0XHR0eXBlOiAnZHAuY2hhbmdlJyxcclxuICAgICAgICBcdFx0ZGF0ZTogbW9tZW50KHBpY2tlci5kYXRlKSxcclxuICAgICAgICBcdFx0b2xkRGF0ZTogbW9tZW50KG9sZERhdGUpXHJcbiAgICAgICAgXHR9KTtcclxuXHJcbiAgICAgICAgXHRpZiAoZXZlbnRUeXBlICE9PSAnY2hhbmdlJykge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuZWxlbWVudC5jaGFuZ2UoKTtcclxuICAgICAgICBcdH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgXHRlcnJvcmVkID0gdHJ1ZTtcclxuICAgICAgICBcdHBpY2tlci5lbGVtZW50LnRyaWdnZXIoe1xyXG4gICAgICAgIFx0XHR0eXBlOiAnZHAuZXJyb3InLFxyXG4gICAgICAgIFx0XHRkYXRlOiBtb21lbnQoZGF0ZSwgcGlja2VyLmZvcm1hdCwgcGlja2VyLm9wdGlvbnMudXNlU3RyaWN0KVxyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gKG5ld0RhdGUpIHtcclxuICAgICAgICBcdG1vbWVudC5sb2NhbGUocGlja2VyLm9wdGlvbnMubGFuZ3VhZ2UpO1xyXG4gICAgICAgIFx0dmFyIGRhdGVTdHIgPSBuZXdEYXRlO1xyXG4gICAgICAgIFx0aWYgKCFkYXRlU3RyKSB7XHJcbiAgICAgICAgXHRcdGRhdGVTdHIgPSBnZXRQaWNrZXJJbnB1dCgpLnZhbCgpO1xyXG4gICAgICAgIFx0XHRpZiAoZGF0ZVN0cikge1xyXG4gICAgICAgIFx0XHRcdHBpY2tlci5kYXRlID0gbW9tZW50KGRhdGVTdHIsIHBpY2tlci5mb3JtYXQsIHBpY2tlci5vcHRpb25zLnVzZVN0cmljdCk7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0aWYgKCFwaWNrZXIuZGF0ZSkge1xyXG4gICAgICAgIFx0XHRcdHBpY2tlci5kYXRlID0gbW9tZW50KCk7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH1cclxuICAgICAgICBcdHBpY2tlci52aWV3RGF0ZSA9IG1vbWVudChwaWNrZXIuZGF0ZSkuc3RhcnRPZignbW9udGgnKTtcclxuICAgICAgICBcdGZpbGxEYXRlKCk7XHJcbiAgICAgICAgXHRmaWxsVGltZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZpbGxEb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHRtb21lbnQubG9jYWxlKHBpY2tlci5vcHRpb25zLmxhbmd1YWdlKTtcclxuICAgICAgICBcdHZhciBodG1sID0gJCgnPHRyPicpLCB3ZWVrZGF5c01pbiA9IG1vbWVudC53ZWVrZGF5c01pbigpLCBpO1xyXG4gICAgICAgIFx0aWYgKHBpY2tlci5vcHRpb25zLmNhbGVuZGFyV2Vla3MgPT09IHRydWUpIHtcclxuICAgICAgICBcdFx0aHRtbC5hcHBlbmQoJzx0aCBjbGFzcz1cImN3XCI+IzwvdGg+Jyk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAobW9tZW50KCkubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyA9PT0gMCkgeyAvLyBzdGFydHMgb24gU3VuZGF5XHJcbiAgICAgICAgXHRcdGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcclxuICAgICAgICBcdFx0XHRodG1sLmFwcGVuZCgnPHRoIGNsYXNzPVwiZG93XCI+JyArIHdlZWtkYXlzTWluW2ldICsgJzwvdGg+Jyk7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdGZvciAoaSA9IDE7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICBcdFx0XHRpZiAoaSA9PT0gNykge1xyXG4gICAgICAgIFx0XHRcdFx0aHRtbC5hcHBlbmQoJzx0aCBjbGFzcz1cImRvd1wiPicgKyB3ZWVrZGF5c01pblswXSArICc8L3RoPicpO1xyXG4gICAgICAgIFx0XHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0XHRodG1sLmFwcGVuZCgnPHRoIGNsYXNzPVwiZG93XCI+JyArIHdlZWtkYXlzTWluW2ldICsgJzwvdGg+Jyk7XHJcbiAgICAgICAgXHRcdFx0fVxyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQnKS5hcHBlbmQoaHRtbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZmlsbE1vbnRocyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdG1vbWVudC5sb2NhbGUocGlja2VyLm9wdGlvbnMubGFuZ3VhZ2UpO1xyXG4gICAgICAgIFx0dmFyIGh0bWwgPSAnJywgaSwgbW9udGhzU2hvcnQgPSBtb21lbnQubW9udGhzU2hvcnQoKTtcclxuICAgICAgICBcdGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XHJcbiAgICAgICAgXHRcdGh0bWwgKz0gJzxzcGFuIGNsYXNzPVwibW9udGhcIj4nICsgbW9udGhzU2hvcnRbaV0gKyAnPC9zcGFuPic7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLW1vbnRocyB0ZCcpLmFwcGVuZChodG1sKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmaWxsRGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdGlmICghcGlja2VyLm9wdGlvbnMucGlja0RhdGUpIHtcclxuICAgICAgICBcdFx0cmV0dXJuO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0bW9tZW50LmxvY2FsZShwaWNrZXIub3B0aW9ucy5sYW5ndWFnZSk7XHJcbiAgICAgICAgXHR2YXIgeWVhciA9IHBpY2tlci52aWV3RGF0ZS55ZWFyKCksXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IHBpY2tlci52aWV3RGF0ZS5tb250aCgpLFxyXG4gICAgICAgICAgICAgICAgc3RhcnRZZWFyID0gcGlja2VyLm9wdGlvbnMubWluRGF0ZS55ZWFyKCksXHJcbiAgICAgICAgICAgICAgICBzdGFydE1vbnRoID0gcGlja2VyLm9wdGlvbnMubWluRGF0ZS5tb250aCgpLFxyXG4gICAgICAgICAgICAgICAgZW5kWWVhciA9IHBpY2tlci5vcHRpb25zLm1heERhdGUueWVhcigpLFxyXG4gICAgICAgICAgICAgICAgZW5kTW9udGggPSBwaWNrZXIub3B0aW9ucy5tYXhEYXRlLm1vbnRoKCksXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZSxcclxuICAgICAgICAgICAgICAgIHByZXZNb250aCwgbmV4dE1vbnRoLCBodG1sID0gW10sIHJvdywgY2xzTmFtZSwgaSwgZGF5cywgeWVhckNvbnQsIGN1cnJlbnRZZWFyLCBtb250aHMgPSBtb21lbnQubW9udGhzKCk7XHJcblxyXG4gICAgICAgIFx0cGlja2VyLndpZGdldC5maW5kKCcuZGF0ZXBpY2tlci1kYXlzJykuZmluZCgnLmRpc2FibGVkJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLW1vbnRocycpLmZpbmQoJy5kaXNhYmxlZCcpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIFx0cGlja2VyLndpZGdldC5maW5kKCcuZGF0ZXBpY2tlci15ZWFycycpLmZpbmQoJy5kaXNhYmxlZCcpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICBcdHBpY2tlci53aWRnZXQuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0aDplcSgxKScpLnRleHQoXHJcbiAgICAgICAgICAgICAgICBtb250aHNbbW9udGhdICsgJyAnICsgeWVhcik7XHJcblxyXG4gICAgICAgIFx0cHJldk1vbnRoID0gbW9tZW50KHBpY2tlci52aWV3RGF0ZSwgcGlja2VyLmZvcm1hdCwgcGlja2VyLm9wdGlvbnMudXNlU3RyaWN0KS5zdWJ0cmFjdCgxLCAnbW9udGhzJyk7XHJcbiAgICAgICAgXHRkYXlzID0gcHJldk1vbnRoLmRheXNJbk1vbnRoKCk7XHJcbiAgICAgICAgXHRwcmV2TW9udGguZGF0ZShkYXlzKS5zdGFydE9mKCd3ZWVrJyk7XHJcbiAgICAgICAgXHRpZiAoKHllYXIgPT09IHN0YXJ0WWVhciAmJiBtb250aCA8PSBzdGFydE1vbnRoKSB8fCB5ZWFyIDwgc3RhcnRZZWFyKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci53aWRnZXQuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0aDplcSgwKScpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0aWYgKCh5ZWFyID09PSBlbmRZZWFyICYmIG1vbnRoID49IGVuZE1vbnRoKSB8fCB5ZWFyID4gZW5kWWVhcikge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGg6ZXEoMiknKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICBcdH1cclxuXHJcbiAgICAgICAgXHRuZXh0TW9udGggPSBtb21lbnQocHJldk1vbnRoKS5hZGQoNDIsICdkJyk7XHJcbiAgICAgICAgXHR3aGlsZSAocHJldk1vbnRoLmlzQmVmb3JlKG5leHRNb250aCkpIHtcclxuICAgICAgICBcdFx0aWYgKHByZXZNb250aC53ZWVrZGF5KCkgPT09IG1vbWVudCgpLnN0YXJ0T2YoJ3dlZWsnKS53ZWVrZGF5KCkpIHtcclxuICAgICAgICBcdFx0XHRyb3cgPSAkKCc8dHI+Jyk7XHJcbiAgICAgICAgXHRcdFx0aHRtbC5wdXNoKHJvdyk7XHJcbiAgICAgICAgXHRcdFx0aWYgKHBpY2tlci5vcHRpb25zLmNhbGVuZGFyV2Vla3MgPT09IHRydWUpIHtcclxuICAgICAgICBcdFx0XHRcdHJvdy5hcHBlbmQoJzx0ZCBjbGFzcz1cImN3XCI+JyArIHByZXZNb250aC53ZWVrKCkgKyAnPC90ZD4nKTtcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0Y2xzTmFtZSA9ICcnO1xyXG4gICAgICAgIFx0XHRpZiAocHJldk1vbnRoLnllYXIoKSA8IHllYXIgfHwgKHByZXZNb250aC55ZWFyKCkgPT09IHllYXIgJiYgcHJldk1vbnRoLm1vbnRoKCkgPCBtb250aCkpIHtcclxuICAgICAgICBcdFx0XHRjbHNOYW1lICs9ICcgb2xkJztcclxuICAgICAgICBcdFx0fSBlbHNlIGlmIChwcmV2TW9udGgueWVhcigpID4geWVhciB8fCAocHJldk1vbnRoLnllYXIoKSA9PT0geWVhciAmJiBwcmV2TW9udGgubW9udGgoKSA+IG1vbnRoKSkge1xyXG4gICAgICAgIFx0XHRcdGNsc05hbWUgKz0gJyBuZXcnO1xyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHRcdGlmIChwcmV2TW9udGguaXNTYW1lKG1vbWVudCh7IHk6IHBpY2tlci5kYXRlLnllYXIoKSwgTTogcGlja2VyLmRhdGUubW9udGgoKSwgZDogcGlja2VyLmRhdGUuZGF0ZSgpIH0pKSkge1xyXG4gICAgICAgIFx0XHRcdGNsc05hbWUgKz0gJyBhY3RpdmUnO1xyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHRcdGlmIChpc0luRGlzYWJsZURhdGVzKHByZXZNb250aCwgJ2RheScpIHx8ICFpc0luRW5hYmxlRGF0ZXMocHJldk1vbnRoKSkge1xyXG4gICAgICAgIFx0XHRcdGNsc05hbWUgKz0gJyBkaXNhYmxlZCc7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0aWYgKHBpY2tlci5vcHRpb25zLnNob3dUb2RheSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIFx0XHRcdGlmIChwcmV2TW9udGguaXNTYW1lKG1vbWVudCgpLCAnZGF5JykpIHtcclxuICAgICAgICBcdFx0XHRcdGNsc05hbWUgKz0gJyB0b2RheSc7XHJcbiAgICAgICAgXHRcdFx0fVxyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHRcdGlmIChwaWNrZXIub3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWQpIHtcclxuICAgICAgICBcdFx0XHRmb3IgKGkgPSAwOyBpIDwgcGlja2VyLm9wdGlvbnMuZGF5c09mV2Vla0Rpc2FibGVkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgXHRcdFx0XHRpZiAocHJldk1vbnRoLmRheSgpID09PSBwaWNrZXIub3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWRbaV0pIHtcclxuICAgICAgICBcdFx0XHRcdFx0Y2xzTmFtZSArPSAnIGRpc2FibGVkJztcclxuICAgICAgICBcdFx0XHRcdFx0YnJlYWs7XHJcbiAgICAgICAgXHRcdFx0XHR9XHJcbiAgICAgICAgXHRcdFx0fVxyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHRcdHJvdy5hcHBlbmQoJzx0ZCBjbGFzcz1cImRheScgKyBjbHNOYW1lICsgJ1wiPicgKyBwcmV2TW9udGguZGF0ZSgpICsgJzwvdGQ+Jyk7XHJcblxyXG4gICAgICAgIFx0XHRjdXJyZW50RGF0ZSA9IHByZXZNb250aC5kYXRlKCk7XHJcbiAgICAgICAgXHRcdHByZXZNb250aC5hZGQoMSwgJ2QnKTtcclxuXHJcbiAgICAgICAgXHRcdGlmIChjdXJyZW50RGF0ZSA9PT0gcHJldk1vbnRoLmRhdGUoKSkge1xyXG4gICAgICAgIFx0XHRcdHByZXZNb250aC5hZGQoMSwgJ2QnKTtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0cGlja2VyLndpZGdldC5maW5kKCcuZGF0ZXBpY2tlci1kYXlzIHRib2R5JykuZW1wdHkoKS5hcHBlbmQoaHRtbCk7XHJcbiAgICAgICAgXHRjdXJyZW50WWVhciA9IHBpY2tlci5kYXRlLnllYXIoKTtcclxuICAgICAgICBcdG1vbnRocyA9IHBpY2tlci53aWRnZXQuZmluZCgnLmRhdGVwaWNrZXItbW9udGhzJykuZmluZCgndGg6ZXEoMSknKS50ZXh0KHllYXIpLmVuZCgpLmZpbmQoJ3NwYW4nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgXHRpZiAoY3VycmVudFllYXIgPT09IHllYXIpIHtcclxuICAgICAgICBcdFx0bW9udGhzLmVxKHBpY2tlci5kYXRlLm1vbnRoKCkpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmICh5ZWFyIC0gMSA8IHN0YXJ0WWVhcikge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLW1vbnRocyB0aDplcSgwKScpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0aWYgKHllYXIgKyAxID4gZW5kWWVhcikge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLW1vbnRocyB0aDplcSgyKScpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0Zm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcclxuICAgICAgICBcdFx0aWYgKCh5ZWFyID09PSBzdGFydFllYXIgJiYgc3RhcnRNb250aCA+IGkpIHx8ICh5ZWFyIDwgc3RhcnRZZWFyKSkge1xyXG4gICAgICAgIFx0XHRcdCQobW9udGhzW2ldKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICBcdFx0fSBlbHNlIGlmICgoeWVhciA9PT0gZW5kWWVhciAmJiBlbmRNb250aCA8IGkpIHx8ICh5ZWFyID4gZW5kWWVhcikpIHtcclxuICAgICAgICBcdFx0XHQkKG1vbnRoc1tpXSkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH1cclxuXHJcbiAgICAgICAgXHRodG1sID0gJyc7XHJcbiAgICAgICAgXHR5ZWFyID0gcGFyc2VJbnQoeWVhciAvIDEwLCAxMCkgKiAxMDtcclxuICAgICAgICBcdHllYXJDb250ID0gcGlja2VyLndpZGdldC5maW5kKCcuZGF0ZXBpY2tlci15ZWFycycpLmZpbmQoXHJcbiAgICAgICAgICAgICAgICAndGg6ZXEoMSknKS50ZXh0KHllYXIgKyAnLScgKyAoeWVhciArIDkpKS5wYXJlbnRzKCd0YWJsZScpLmZpbmQoJ3RkJyk7XHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLXllYXJzJykuZmluZCgndGgnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICBcdGlmIChzdGFydFllYXIgPiB5ZWFyKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci53aWRnZXQuZmluZCgnLmRhdGVwaWNrZXIteWVhcnMnKS5maW5kKCd0aDplcSgwKScpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0aWYgKGVuZFllYXIgPCB5ZWFyICsgOSkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LmZpbmQoJy5kYXRlcGlja2VyLXllYXJzJykuZmluZCgndGg6ZXEoMiknKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdHllYXIgLT0gMTtcclxuICAgICAgICBcdGZvciAoaSA9IC0xOyBpIDwgMTE7IGkrKykge1xyXG4gICAgICAgIFx0XHRodG1sICs9ICc8c3BhbiBjbGFzcz1cInllYXInICsgKGkgPT09IC0xIHx8IGkgPT09IDEwID8gJyBvbGQnIDogJycpICsgKGN1cnJlbnRZZWFyID09PSB5ZWFyID8gJyBhY3RpdmUnIDogJycpICsgKCh5ZWFyIDwgc3RhcnRZZWFyIHx8IHllYXIgPiBlbmRZZWFyKSA/ICcgZGlzYWJsZWQnIDogJycpICsgJ1wiPicgKyB5ZWFyICsgJzwvc3Bhbj4nO1xyXG4gICAgICAgIFx0XHR5ZWFyICs9IDE7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHR5ZWFyQ29udC5odG1sKGh0bWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZpbGxIb3VycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdG1vbWVudC5sb2NhbGUocGlja2VyLm9wdGlvbnMubGFuZ3VhZ2UpO1xyXG4gICAgICAgIFx0dmFyIHRhYmxlID0gcGlja2VyLndpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1ob3VycyB0YWJsZScpLCBodG1sID0gJycsIGN1cnJlbnQsIGksIGo7XHJcbiAgICAgICAgXHR0YWJsZS5wYXJlbnQoKS5oaWRlKCk7XHJcbiAgICAgICAgXHRpZiAocGlja2VyLnVzZTI0aG91cnMpIHtcclxuICAgICAgICBcdFx0Y3VycmVudCA9IDA7XHJcbiAgICAgICAgXHRcdGZvciAoaSA9IDA7IGkgPCA2OyBpICs9IDEpIHtcclxuICAgICAgICBcdFx0XHRodG1sICs9ICc8dHI+JztcclxuICAgICAgICBcdFx0XHRmb3IgKGogPSAwOyBqIDwgNDsgaiArPSAxKSB7XHJcbiAgICAgICAgXHRcdFx0XHRodG1sICs9ICc8dGQgY2xhc3M9XCJob3VyXCI+JyArIHBhZExlZnQoY3VycmVudC50b1N0cmluZygpKSArICc8L3RkPic7XHJcbiAgICAgICAgXHRcdFx0XHRjdXJyZW50Kys7XHJcbiAgICAgICAgXHRcdFx0fVxyXG4gICAgICAgIFx0XHRcdGh0bWwgKz0gJzwvdHI+JztcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0ZWxzZSB7XHJcbiAgICAgICAgXHRcdGN1cnJlbnQgPSAxO1xyXG4gICAgICAgIFx0XHRmb3IgKGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XHJcbiAgICAgICAgXHRcdFx0aHRtbCArPSAnPHRyPic7XHJcbiAgICAgICAgXHRcdFx0Zm9yIChqID0gMDsgaiA8IDQ7IGogKz0gMSkge1xyXG4gICAgICAgIFx0XHRcdFx0aHRtbCArPSAnPHRkIGNsYXNzPVwiaG91clwiPicgKyBwYWRMZWZ0KGN1cnJlbnQudG9TdHJpbmcoKSkgKyAnPC90ZD4nO1xyXG4gICAgICAgIFx0XHRcdFx0Y3VycmVudCsrO1xyXG4gICAgICAgIFx0XHRcdH1cclxuICAgICAgICBcdFx0XHRodG1sICs9ICc8L3RyPic7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH1cclxuICAgICAgICBcdHRhYmxlLmh0bWwoaHRtbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZmlsbE1pbnV0ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHR2YXIgdGFibGUgPSBwaWNrZXIud2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyIC50aW1lcGlja2VyLW1pbnV0ZXMgdGFibGUnKSwgaHRtbCA9ICcnLCBjdXJyZW50ID0gMCwgaSwgaiwgc3RlcCA9IHBpY2tlci5vcHRpb25zLm1pbnV0ZVN0ZXBwaW5nO1xyXG4gICAgICAgIFx0dGFibGUucGFyZW50KCkuaGlkZSgpO1xyXG4gICAgICAgIFx0aWYgKHN0ZXAgPT09IDEpIHtcclxuICAgICAgICBcdFx0c3RlcCA9IDU7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKDYwIC8gc3RlcCAvIDQpIDsgaSsrKSB7XHJcbiAgICAgICAgXHRcdGh0bWwgKz0gJzx0cj4nO1xyXG4gICAgICAgIFx0XHRmb3IgKGogPSAwOyBqIDwgNDsgaiArPSAxKSB7XHJcbiAgICAgICAgXHRcdFx0aWYgKGN1cnJlbnQgPCA2MCkge1xyXG4gICAgICAgIFx0XHRcdFx0aHRtbCArPSAnPHRkIGNsYXNzPVwibWludXRlXCI+JyArIHBhZExlZnQoY3VycmVudC50b1N0cmluZygpKSArICc8L3RkPic7XHJcbiAgICAgICAgXHRcdFx0XHRjdXJyZW50ICs9IHN0ZXA7XHJcbiAgICAgICAgXHRcdFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0XHRcdGh0bWwgKz0gJzx0ZD48L3RkPic7XHJcbiAgICAgICAgXHRcdFx0fVxyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHRcdGh0bWwgKz0gJzwvdHI+JztcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdHRhYmxlLmh0bWwoaHRtbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZmlsbFNlY29uZHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHR2YXIgdGFibGUgPSBwaWNrZXIud2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyIC50aW1lcGlja2VyLXNlY29uZHMgdGFibGUnKSwgaHRtbCA9ICcnLCBjdXJyZW50ID0gMCwgaSwgajtcclxuICAgICAgICBcdHRhYmxlLnBhcmVudCgpLmhpZGUoKTtcclxuICAgICAgICBcdGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICBcdFx0aHRtbCArPSAnPHRyPic7XHJcbiAgICAgICAgXHRcdGZvciAoaiA9IDA7IGogPCA0OyBqICs9IDEpIHtcclxuICAgICAgICBcdFx0XHRodG1sICs9ICc8dGQgY2xhc3M9XCJzZWNvbmRcIj4nICsgcGFkTGVmdChjdXJyZW50LnRvU3RyaW5nKCkpICsgJzwvdGQ+JztcclxuICAgICAgICBcdFx0XHRjdXJyZW50ICs9IDU7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0aHRtbCArPSAnPC90cj4nO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0dGFibGUuaHRtbChodG1sKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmaWxsVGltZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdGlmICghcGlja2VyLmRhdGUpIHtcclxuICAgICAgICBcdFx0cmV0dXJuO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0dmFyIHRpbWVDb21wb25lbnRzID0gcGlja2VyLndpZGdldC5maW5kKCcudGltZXBpY2tlciBzcGFuW2RhdGEtdGltZS1jb21wb25lbnRdJyksXHJcbiAgICAgICAgICAgICAgICBob3VyID0gcGlja2VyLmRhdGUuaG91cnMoKSxcclxuICAgICAgICAgICAgICAgIHBlcmlvZCA9IHBpY2tlci5kYXRlLmZvcm1hdCgnQScpO1xyXG4gICAgICAgIFx0aWYgKCFwaWNrZXIudXNlMjRob3Vycykge1xyXG4gICAgICAgIFx0XHRpZiAoaG91ciA9PT0gMCkge1xyXG4gICAgICAgIFx0XHRcdGhvdXIgPSAxMjtcclxuICAgICAgICBcdFx0fSBlbHNlIGlmIChob3VyICE9PSAxMikge1xyXG4gICAgICAgIFx0XHRcdGhvdXIgPSBob3VyICUgMTI7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5maW5kKCcudGltZXBpY2tlciBbZGF0YS1hY3Rpb249dG9nZ2xlUGVyaW9kXScpLnRleHQocGVyaW9kKTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdHRpbWVDb21wb25lbnRzLmZpbHRlcignW2RhdGEtdGltZS1jb21wb25lbnQ9aG91cnNdJykudGV4dChwYWRMZWZ0KGhvdXIpKTtcclxuICAgICAgICBcdHRpbWVDb21wb25lbnRzLmZpbHRlcignW2RhdGEtdGltZS1jb21wb25lbnQ9bWludXRlc10nKS50ZXh0KHBhZExlZnQocGlja2VyLmRhdGUubWludXRlcygpKSk7XHJcbiAgICAgICAgXHR0aW1lQ29tcG9uZW50cy5maWx0ZXIoJ1tkYXRhLXRpbWUtY29tcG9uZW50PXNlY29uZHNdJykudGV4dChwYWRMZWZ0KHBpY2tlci5kYXRlLnNlY29uZCgpKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBcdGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBcdHBpY2tlci51bnNldCA9IGZhbHNlO1xyXG4gICAgICAgIFx0dmFyIHRhcmdldCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ3NwYW4sIHRkLCB0aCcpLCBtb250aCwgeWVhciwgc3RlcCwgZGF5LCBvbGREYXRlID0gbW9tZW50KHBpY2tlci5kYXRlKTtcclxuICAgICAgICBcdGlmICh0YXJnZXQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgXHRcdGlmICghdGFyZ2V0LmlzKCcuZGlzYWJsZWQnKSkge1xyXG4gICAgICAgIFx0XHRcdHN3aXRjaCAodGFyZ2V0WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICBcdFx0XHRcdGNhc2UgJ3RoJzpcclxuICAgICAgICBcdFx0XHRcdFx0c3dpdGNoICh0YXJnZXRbMF0uY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0Y2FzZSAncGlja2VyLXN3aXRjaCc6XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRzaG93TW9kZSgxKTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdGNhc2UgJ3ByZXYnOlxyXG4gICAgICAgIFx0XHRcdFx0XHRcdGNhc2UgJ25leHQnOlxyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0c3RlcCA9IGRwR2xvYmFsLm1vZGVzW3BpY2tlci52aWV3TW9kZV0ubmF2U3RlcDtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdGlmICh0YXJnZXRbMF0uY2xhc3NOYW1lID09PSAncHJldicpIHtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0c3RlcCA9IHN0ZXAgKiAtMTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdH1cclxuICAgICAgICBcdFx0XHRcdFx0XHRcdHBpY2tlci52aWV3RGF0ZS5hZGQoc3RlcCwgZHBHbG9iYWwubW9kZXNbcGlja2VyLnZpZXdNb2RlXS5uYXZGbmMpO1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0ZmlsbERhdGUoKTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgIFx0XHRcdFx0XHR9XHJcbiAgICAgICAgXHRcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgIFx0XHRcdFx0Y2FzZSAnc3Bhbic6XHJcbiAgICAgICAgXHRcdFx0XHRcdGlmICh0YXJnZXQuaXMoJy5tb250aCcpKSB7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0bW9udGggPSB0YXJnZXQucGFyZW50KCkuZmluZCgnc3BhbicpLmluZGV4KHRhcmdldCk7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0cGlja2VyLnZpZXdEYXRlLm1vbnRoKG1vbnRoKTtcclxuICAgICAgICBcdFx0XHRcdFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0XHRcdFx0XHR5ZWFyID0gcGFyc2VJbnQodGFyZ2V0LnRleHQoKSwgMTApIHx8IDA7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0cGlja2VyLnZpZXdEYXRlLnllYXIoeWVhcik7XHJcbiAgICAgICAgXHRcdFx0XHRcdH1cclxuICAgICAgICBcdFx0XHRcdFx0aWYgKHBpY2tlci52aWV3TW9kZSA9PT0gcGlja2VyLm1pblZpZXdNb2RlKSB7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0cGlja2VyLmRhdGUgPSBtb21lbnQoe1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0eTogcGlja2VyLnZpZXdEYXRlLnllYXIoKSxcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdE06IHBpY2tlci52aWV3RGF0ZS5tb250aCgpLFxyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0ZDogcGlja2VyLnZpZXdEYXRlLmRhdGUoKSxcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdGg6IHBpY2tlci5kYXRlLmhvdXJzKCksXHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRtOiBwaWNrZXIuZGF0ZS5taW51dGVzKCksXHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRzOiBwaWNrZXIuZGF0ZS5zZWNvbmRzKClcclxuICAgICAgICBcdFx0XHRcdFx0XHR9KTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRzZXQoKTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRub3RpZnlDaGFuZ2Uob2xkRGF0ZSwgZS50eXBlKTtcclxuICAgICAgICBcdFx0XHRcdFx0fVxyXG4gICAgICAgIFx0XHRcdFx0XHRzaG93TW9kZSgtMSk7XHJcbiAgICAgICAgXHRcdFx0XHRcdGZpbGxEYXRlKCk7XHJcbiAgICAgICAgXHRcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgIFx0XHRcdFx0Y2FzZSAndGQnOlxyXG4gICAgICAgIFx0XHRcdFx0XHRpZiAodGFyZ2V0LmlzKCcuZGF5JykpIHtcclxuICAgICAgICBcdFx0XHRcdFx0XHRkYXkgPSBwYXJzZUludCh0YXJnZXQudGV4dCgpLCAxMCkgfHwgMTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRtb250aCA9IHBpY2tlci52aWV3RGF0ZS5tb250aCgpO1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdHllYXIgPSBwaWNrZXIudmlld0RhdGUueWVhcigpO1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdGlmICh0YXJnZXQuaXMoJy5vbGQnKSkge1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0aWYgKG1vbnRoID09PSAwKSB7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdG1vbnRoID0gMTE7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdHllYXIgLT0gMTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdG1vbnRoIC09IDE7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHR9XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0YXJnZXQuaXMoJy5uZXcnKSkge1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0aWYgKG1vbnRoID09PSAxMSkge1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRtb250aCA9IDA7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdHllYXIgKz0gMTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdG1vbnRoICs9IDE7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHR9XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0fVxyXG4gICAgICAgIFx0XHRcdFx0XHRcdHBpY2tlci5kYXRlID0gbW9tZW50KHtcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdHk6IHllYXIsXHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRNOiBtb250aCxcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdGQ6IGRheSxcclxuICAgICAgICBcdFx0XHRcdFx0XHRcdGg6IHBpY2tlci5kYXRlLmhvdXJzKCksXHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRtOiBwaWNrZXIuZGF0ZS5taW51dGVzKCksXHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRzOiBwaWNrZXIuZGF0ZS5zZWNvbmRzKClcclxuICAgICAgICBcdFx0XHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRwaWNrZXIudmlld0RhdGUgPSBtb21lbnQoe1xyXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0eTogeWVhciwgTTogbW9udGgsIGQ6IE1hdGgubWluKDI4LCBkYXkpXHJcbiAgICAgICAgXHRcdFx0XHRcdFx0fSk7XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0ZmlsbERhdGUoKTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRzZXQoKTtcclxuICAgICAgICBcdFx0XHRcdFx0XHRub3RpZnlDaGFuZ2Uob2xkRGF0ZSwgZS50eXBlKTtcclxuICAgICAgICBcdFx0XHRcdFx0fVxyXG4gICAgICAgIFx0XHRcdFx0XHRicmVhaztcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhY3Rpb25zID0ge1xyXG4gICAgICAgIFx0aW5jcmVtZW50SG91cnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdFx0Y2hlY2tEYXRlKCdhZGQnLCAnaG91cnMnLCAxKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0aW5jcmVtZW50TWludXRlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0XHRjaGVja0RhdGUoJ2FkZCcsICdtaW51dGVzJywgcGlja2VyLm9wdGlvbnMubWludXRlU3RlcHBpbmcpO1xyXG4gICAgICAgIFx0fSxcclxuXHJcbiAgICAgICAgXHRpbmNyZW1lbnRTZWNvbmRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHRcdGNoZWNrRGF0ZSgnYWRkJywgJ3NlY29uZHMnLCAxKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0ZGVjcmVtZW50SG91cnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdFx0Y2hlY2tEYXRlKCdzdWJ0cmFjdCcsICdob3VycycsIDEpO1xyXG4gICAgICAgIFx0fSxcclxuXHJcbiAgICAgICAgXHRkZWNyZW1lbnRNaW51dGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHRcdGNoZWNrRGF0ZSgnc3VidHJhY3QnLCAnbWludXRlcycsIHBpY2tlci5vcHRpb25zLm1pbnV0ZVN0ZXBwaW5nKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0ZGVjcmVtZW50U2Vjb25kczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0XHRjaGVja0RhdGUoJ3N1YnRyYWN0JywgJ3NlY29uZHMnLCAxKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0dG9nZ2xlUGVyaW9kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHRcdHZhciBob3VyID0gcGlja2VyLmRhdGUuaG91cnMoKTtcclxuICAgICAgICBcdFx0aWYgKGhvdXIgPj0gMTIpIHtcclxuICAgICAgICBcdFx0XHRob3VyIC09IDEyO1xyXG4gICAgICAgIFx0XHR9IGVsc2Uge1xyXG4gICAgICAgIFx0XHRcdGhvdXIgKz0gMTI7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0cGlja2VyLmRhdGUuaG91cnMoaG91cik7XHJcbiAgICAgICAgXHR9LFxyXG5cclxuICAgICAgICBcdHNob3dQaWNrZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5maW5kKCcudGltZXBpY2tlciA+IGRpdjpub3QoLnRpbWVwaWNrZXItcGlja2VyKScpLmhpZGUoKTtcclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1waWNrZXInKS5zaG93KCk7XHJcbiAgICAgICAgXHR9LFxyXG5cclxuICAgICAgICBcdHNob3dIb3VyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0LmZpbmQoJy50aW1lcGlja2VyIC50aW1lcGlja2VyLXBpY2tlcicpLmhpZGUoKTtcclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1ob3VycycpLnNob3coKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0c2hvd01pbnV0ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1waWNrZXInKS5oaWRlKCk7XHJcbiAgICAgICAgXHRcdHBpY2tlci53aWRnZXQuZmluZCgnLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItbWludXRlcycpLnNob3coKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0c2hvd1NlY29uZHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5maW5kKCcudGltZXBpY2tlciAudGltZXBpY2tlci1waWNrZXInKS5oaWRlKCk7XHJcbiAgICAgICAgXHRcdHBpY2tlci53aWRnZXQuZmluZCgnLnRpbWVwaWNrZXIgLnRpbWVwaWNrZXItc2Vjb25kcycpLnNob3coKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0c2VsZWN0SG91cjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBcdFx0dmFyIGhvdXIgPSBwYXJzZUludCgkKGUudGFyZ2V0KS50ZXh0KCksIDEwKTtcclxuICAgICAgICBcdFx0aWYgKCFwaWNrZXIudXNlMjRob3Vycykge1xyXG4gICAgICAgIFx0XHRcdGlmIChwaWNrZXIuZGF0ZS5ob3VycygpID49IDEyKSB7XHJcbiAgICAgICAgXHRcdFx0XHRpZiAoaG91ciAhPT0gMTIpIHtcclxuICAgICAgICBcdFx0XHRcdFx0aG91ciArPSAxMjtcclxuICAgICAgICBcdFx0XHRcdH1cclxuICAgICAgICBcdFx0XHR9IGVsc2Uge1xyXG4gICAgICAgIFx0XHRcdFx0aWYgKGhvdXIgPT09IDEyKSB7XHJcbiAgICAgICAgXHRcdFx0XHRcdGhvdXIgPSAwO1xyXG4gICAgICAgIFx0XHRcdFx0fVxyXG4gICAgICAgIFx0XHRcdH1cclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0XHRwaWNrZXIuZGF0ZS5ob3Vycyhob3VyKTtcclxuICAgICAgICBcdFx0YWN0aW9ucy5zaG93UGlja2VyLmNhbGwocGlja2VyKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0c2VsZWN0TWludXRlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuZGF0ZS5taW51dGVzKHBhcnNlSW50KCQoZS50YXJnZXQpLnRleHQoKSwgMTApKTtcclxuICAgICAgICBcdFx0YWN0aW9ucy5zaG93UGlja2VyLmNhbGwocGlja2VyKTtcclxuICAgICAgICBcdH0sXHJcblxyXG4gICAgICAgIFx0c2VsZWN0U2Vjb25kOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuZGF0ZS5zZWNvbmRzKHBhcnNlSW50KCQoZS50YXJnZXQpLnRleHQoKSwgMTApKTtcclxuICAgICAgICBcdFx0YWN0aW9ucy5zaG93UGlja2VyLmNhbGwocGlja2VyKTtcclxuICAgICAgICBcdH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkb0FjdGlvbiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgXHR2YXIgb2xkRGF0ZSA9IG1vbWVudChwaWNrZXIuZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgnYWN0aW9uJyksXHJcbiAgICAgICAgICAgICAgICBydiA9IGFjdGlvbnNbYWN0aW9uXS5hcHBseShwaWNrZXIsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgXHRzdG9wRXZlbnQoZSk7XHJcbiAgICAgICAgXHRpZiAoIXBpY2tlci5kYXRlKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5kYXRlID0gbW9tZW50KHsgeTogMTk3MCB9KTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdHNldCgpO1xyXG4gICAgICAgIFx0ZmlsbFRpbWUoKTtcclxuICAgICAgICBcdG5vdGlmeUNoYW5nZShvbGREYXRlLCBlLnR5cGUpO1xyXG4gICAgICAgIFx0cmV0dXJuIHJ2O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHN0b3BFdmVudCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgXHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIFx0aWYgKGUua2V5Q29kZSA9PT0gMjcpIHsgLy8gYWxsb3cgZXNjYXBlIHRvIGhpZGUgcGlja2VyXHJcbiAgICAgICAgXHRcdHBpY2tlci5oaWRlKCk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBcdG1vbWVudC5sb2NhbGUocGlja2VyLm9wdGlvbnMubGFuZ3VhZ2UpO1xyXG4gICAgICAgIFx0dmFyIGlucHV0ID0gJChlLnRhcmdldCksIG9sZERhdGUgPSBtb21lbnQocGlja2VyLmRhdGUpLCBuZXdEYXRlID0gbW9tZW50KGlucHV0LnZhbCgpLCBwaWNrZXIuZm9ybWF0LCBwaWNrZXIub3B0aW9ucy51c2VTdHJpY3QpO1xyXG4gICAgICAgIFx0aWYgKG5ld0RhdGUuaXNWYWxpZCgpICYmICFpc0luRGlzYWJsZURhdGVzKG5ld0RhdGUpICYmIGlzSW5FbmFibGVEYXRlcyhuZXdEYXRlKSkge1xyXG4gICAgICAgIFx0XHR1cGRhdGUoKTtcclxuICAgICAgICBcdFx0cGlja2VyLnNldFZhbHVlKG5ld0RhdGUpO1xyXG4gICAgICAgIFx0XHRub3RpZnlDaGFuZ2Uob2xkRGF0ZSwgZS50eXBlKTtcclxuICAgICAgICBcdFx0c2V0KCk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRlbHNlIHtcclxuICAgICAgICBcdFx0cGlja2VyLnZpZXdEYXRlID0gb2xkRGF0ZTtcclxuICAgICAgICBcdFx0cGlja2VyLnVuc2V0ID0gdHJ1ZTtcclxuICAgICAgICBcdFx0bm90aWZ5Q2hhbmdlKG9sZERhdGUsIGUudHlwZSk7XHJcbiAgICAgICAgXHRcdG5vdGlmeUVycm9yKG5ld0RhdGUpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3dNb2RlID0gZnVuY3Rpb24gKGRpcikge1xyXG4gICAgICAgIFx0aWYgKGRpcikge1xyXG4gICAgICAgIFx0XHRwaWNrZXIudmlld01vZGUgPSBNYXRoLm1heChwaWNrZXIubWluVmlld01vZGUsIE1hdGgubWluKDIsIHBpY2tlci52aWV3TW9kZSArIGRpcikpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0cGlja2VyLndpZGdldC5maW5kKCcuZGF0ZXBpY2tlciA+IGRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRlcGlja2VyLScgKyBkcEdsb2JhbC5tb2Rlc1twaWNrZXIudmlld01vZGVdLmNsc05hbWUpLnNob3coKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhdHRhY2hEYXRlUGlja2VyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0dmFyICR0aGlzLCAkcGFyZW50LCBleHBhbmRlZCwgY2xvc2VkLCBjb2xsYXBzZURhdGE7XHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0Lm9uKCdjbGljaycsICcuZGF0ZXBpY2tlciAqJywgJC5wcm94eShjbGljaywgdGhpcykpOyAvLyB0aGlzIGhhbmRsZXMgZGF0ZSBwaWNrZXIgY2xpY2tzXHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0Lm9uKCdjbGljaycsICdbZGF0YS1hY3Rpb25dJywgJC5wcm94eShkb0FjdGlvbiwgdGhpcykpOyAvLyB0aGlzIGhhbmRsZXMgdGltZSBwaWNrZXIgY2xpY2tzXHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0Lm9uKCdtb3VzZWRvd24nLCAkLnByb3h5KHN0b3BFdmVudCwgdGhpcykpO1xyXG4gICAgICAgIFx0cGlja2VyLmVsZW1lbnQub24oJ2tleWRvd24nLCAkLnByb3h5KGtleWRvd24sIHRoaXMpKTtcclxuICAgICAgICBcdGlmIChwaWNrZXIub3B0aW9ucy5waWNrRGF0ZSAmJiBwaWNrZXIub3B0aW9ucy5waWNrVGltZSkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIud2lkZ2V0Lm9uKCdjbGljay50b2dnbGVQaWNrZXInLCAnLmFjY29yZGlvbi10b2dnbGUnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgXHRcdFx0JHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgIFx0XHRcdCRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCd1bCcpO1xyXG4gICAgICAgIFx0XHRcdGV4cGFuZGVkID0gJHBhcmVudC5maW5kKCcuaW4nKTtcclxuICAgICAgICBcdFx0XHRjbG9zZWQgPSAkcGFyZW50LmZpbmQoJy5jb2xsYXBzZTpub3QoLmluKScpO1xyXG5cclxuICAgICAgICBcdFx0XHRpZiAoZXhwYW5kZWQgJiYgZXhwYW5kZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgXHRcdFx0XHRjb2xsYXBzZURhdGEgPSBleHBhbmRlZC5kYXRhKCdjb2xsYXBzZScpO1xyXG4gICAgICAgIFx0XHRcdFx0aWYgKGNvbGxhcHNlRGF0YSAmJiBjb2xsYXBzZURhdGEudHJhbnNpdGlvbmluZykge1xyXG4gICAgICAgIFx0XHRcdFx0XHRyZXR1cm47XHJcbiAgICAgICAgXHRcdFx0XHR9XHJcbiAgICAgICAgXHRcdFx0XHRleHBhbmRlZC5jb2xsYXBzZSgnaGlkZScpO1xyXG4gICAgICAgIFx0XHRcdFx0Y2xvc2VkLmNvbGxhcHNlKCdzaG93Jyk7XHJcbiAgICAgICAgXHRcdFx0XHQkdGhpcy5maW5kKCdzcGFuJykudG9nZ2xlQ2xhc3MocGlja2VyLm9wdGlvbnMuaWNvbnMudGltZSArICcgJyArIHBpY2tlci5vcHRpb25zLmljb25zLmRhdGUpO1xyXG4gICAgICAgIFx0XHRcdFx0aWYgKHBpY2tlci5jb21wb25lbnQpIHtcclxuICAgICAgICBcdFx0XHRcdFx0cGlja2VyLmNvbXBvbmVudC5maW5kKCdzcGFuJykudG9nZ2xlQ2xhc3MocGlja2VyLm9wdGlvbnMuaWNvbnMudGltZSArICcgJyArIHBpY2tlci5vcHRpb25zLmljb25zLmRhdGUpO1xyXG4gICAgICAgIFx0XHRcdFx0fVxyXG4gICAgICAgIFx0XHRcdH1cclxuICAgICAgICBcdFx0fSk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAocGlja2VyLmlzSW5wdXQpIHtcclxuICAgICAgICBcdFx0cGlja2VyLmVsZW1lbnQub24oe1xyXG4gICAgICAgIFx0XHRcdCdjbGljayc6ICQucHJveHkocGlja2VyLnNob3csIHRoaXMpLFxyXG4gICAgICAgIFx0XHRcdCdmb2N1cyc6ICQucHJveHkocGlja2VyLnNob3csIHRoaXMpLFxyXG4gICAgICAgIFx0XHRcdCdjaGFuZ2UnOiAkLnByb3h5KGNoYW5nZSwgdGhpcyksXHJcbiAgICAgICAgXHRcdFx0J2JsdXInOiAkLnByb3h5KHBpY2tlci5oaWRlLCB0aGlzKVxyXG4gICAgICAgIFx0XHR9KTtcclxuICAgICAgICBcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5lbGVtZW50Lm9uKHtcclxuICAgICAgICBcdFx0XHQnY2hhbmdlJzogJC5wcm94eShjaGFuZ2UsIHRoaXMpXHJcbiAgICAgICAgXHRcdH0sICdpbnB1dCcpO1xyXG4gICAgICAgIFx0XHRpZiAocGlja2VyLmNvbXBvbmVudCkge1xyXG4gICAgICAgIFx0XHRcdHBpY2tlci5jb21wb25lbnQub24oJ2NsaWNrJywgJC5wcm94eShwaWNrZXIuc2hvdywgdGhpcykpO1xyXG4gICAgICAgIFx0XHRcdHBpY2tlci5jb21wb25lbnQub24oJ21vdXNlZG93bicsICQucHJveHkoc3RvcEV2ZW50LCB0aGlzKSk7XHJcbiAgICAgICAgXHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0cGlja2VyLmVsZW1lbnQub24oJ2NsaWNrJywgJC5wcm94eShwaWNrZXIuc2hvdywgdGhpcykpO1xyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0Lm9uKCdjbGljay50b2dnbGVQaWNrZXInLCAnI3RvZGF5LWJ1dHRvbicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgXHRcdGlmIChwaWNrZXIub3B0aW9ucy5taW51dGVTdGVwcGluZyAhPT0gMSkge1xyXG4gICAgICAgIFx0XHRcdHZhciBtRGF0ZSA9IG1vbWVudCgpLFxyXG5cdFx0XHRcdFx0XHRySW50ZXJ2YWwgPSBwaWNrZXIub3B0aW9ucy5taW51dGVTdGVwcGluZztcclxuICAgICAgICBcdFx0XHRtRGF0ZS5taW51dGVzKChNYXRoLnJvdW5kKG1EYXRlLm1pbnV0ZXMoKSAvIHJJbnRlcnZhbCkgKiBySW50ZXJ2YWwpICUgNjApLnNlY29uZHMoMCk7XHJcbiAgICAgICAgXHRcdFx0cGlja2VyLnNldFZhbHVlKG1EYXRlLmZvcm1hdChwaWNrZXIuZm9ybWF0KSk7XHJcbiAgICAgICAgXHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0cGlja2VyLnNldFZhbHVlKG1vbWVudCgpLmZvcm1hdChwaWNrZXIuZm9ybWF0KSk7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0bm90aWZ5Q2hhbmdlKCcnLCBlLnR5cGUpO1xyXG4gICAgICAgIFx0XHRzZXQoKTtcclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIFx0cGlja2VyLndpZGdldC5vbignY2xpY2sudG9nZ2xlUGlja2VyJywgJyNjbGVhci1idXR0b24nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuc2V0VmFsdWUobnVsbCk7XHJcbiAgICAgICAgXHRcdG5vdGlmeUNoYW5nZSgnJywgZS50eXBlKTtcclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIFx0cGlja2VyLndpZGdldC5vbignY2xpY2sudG9nZ2xlUGlja2VyJywgJyNjbG9zZS1idXR0b24nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuaGlkZSgpO1xyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYXR0YWNoRGF0ZVBpY2tlckdsb2JhbEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdCQod2luZG93KS5vbihcclxuICAgICAgICAgICAgICAgICdyZXNpemUuZGF0ZXRpbWVwaWNrZXInICsgcGlja2VyLmlkLCAkLnByb3h5KHBsYWNlLCB0aGlzKSk7XHJcbiAgICAgICAgXHRpZiAoIXBpY2tlci5pc0lucHV0KSB7XHJcbiAgICAgICAgXHRcdCQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZWRvd24uZGF0ZXRpbWVwaWNrZXInICsgcGlja2VyLmlkLCAkLnByb3h5KHBpY2tlci5oaWRlLCB0aGlzKSk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGV0YWNoRGF0ZVBpY2tlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdHBpY2tlci53aWRnZXQub2ZmKCdjbGljaycsICcuZGF0ZXBpY2tlciAqJywgcGlja2VyLmNsaWNrKTtcclxuICAgICAgICBcdHBpY2tlci53aWRnZXQub2ZmKCdjbGljaycsICdbZGF0YS1hY3Rpb25dJyk7XHJcbiAgICAgICAgXHRwaWNrZXIud2lkZ2V0Lm9mZignbW91c2Vkb3duJywgcGlja2VyLnN0b3BFdmVudCk7XHJcbiAgICAgICAgXHRpZiAocGlja2VyLm9wdGlvbnMucGlja0RhdGUgJiYgcGlja2VyLm9wdGlvbnMucGlja1RpbWUpIHtcclxuICAgICAgICBcdFx0cGlja2VyLndpZGdldC5vZmYoJ2NsaWNrLnRvZ2dsZVBpY2tlcicpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0aWYgKHBpY2tlci5pc0lucHV0KSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5lbGVtZW50Lm9mZih7XHJcbiAgICAgICAgXHRcdFx0J2ZvY3VzJzogcGlja2VyLnNob3csXHJcbiAgICAgICAgXHRcdFx0J2NoYW5nZSc6IGNoYW5nZSxcclxuICAgICAgICBcdFx0XHQnY2xpY2snOiBwaWNrZXIuc2hvdyxcclxuICAgICAgICBcdFx0XHQnYmx1cic6IHBpY2tlci5oaWRlXHJcbiAgICAgICAgXHRcdH0pO1xyXG4gICAgICAgIFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0cGlja2VyLmVsZW1lbnQub2ZmKHtcclxuICAgICAgICBcdFx0XHQnY2hhbmdlJzogY2hhbmdlXHJcbiAgICAgICAgXHRcdH0sICdpbnB1dCcpO1xyXG4gICAgICAgIFx0XHRpZiAocGlja2VyLmNvbXBvbmVudCkge1xyXG4gICAgICAgIFx0XHRcdHBpY2tlci5jb21wb25lbnQub2ZmKCdjbGljaycsIHBpY2tlci5zaG93KTtcclxuICAgICAgICBcdFx0XHRwaWNrZXIuY29tcG9uZW50Lm9mZignbW91c2Vkb3duJywgcGlja2VyLnN0b3BFdmVudCk7XHJcbiAgICAgICAgXHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0cGlja2VyLmVsZW1lbnQub2ZmKCdjbGljaycsIHBpY2tlci5zaG93KTtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRldGFjaERhdGVQaWNrZXJHbG9iYWxFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHQkKHdpbmRvdykub2ZmKCdyZXNpemUuZGF0ZXRpbWVwaWNrZXInICsgcGlja2VyLmlkKTtcclxuICAgICAgICBcdGlmICghcGlja2VyLmlzSW5wdXQpIHtcclxuICAgICAgICBcdFx0JChkb2N1bWVudCkub2ZmKCdtb3VzZWRvd24uZGF0ZXRpbWVwaWNrZXInICsgcGlja2VyLmlkKTtcclxuICAgICAgICBcdH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0luRml4ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHRpZiAocGlja2VyLmVsZW1lbnQpIHtcclxuICAgICAgICBcdFx0dmFyIHBhcmVudHMgPSBwaWNrZXIuZWxlbWVudC5wYXJlbnRzKCksIGluRml4ZWQgPSBmYWxzZSwgaTtcclxuICAgICAgICBcdFx0Zm9yIChpID0gMDsgaSA8IHBhcmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBcdFx0XHRpZiAoJChwYXJlbnRzW2ldKS5jc3MoJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcclxuICAgICAgICBcdFx0XHRcdGluRml4ZWQgPSB0cnVlO1xyXG4gICAgICAgIFx0XHRcdFx0YnJlYWs7XHJcbiAgICAgICAgXHRcdFx0fVxyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHRcdHJldHVybiBpbkZpeGVkO1xyXG4gICAgICAgIFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0cmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdG1vbWVudC5sb2NhbGUocGlja2VyLm9wdGlvbnMubGFuZ3VhZ2UpO1xyXG4gICAgICAgIFx0dmFyIGZvcm1hdHRlZCA9ICcnO1xyXG4gICAgICAgIFx0aWYgKCFwaWNrZXIudW5zZXQpIHtcclxuICAgICAgICBcdFx0Zm9ybWF0dGVkID0gbW9tZW50KHBpY2tlci5kYXRlKS5mb3JtYXQocGlja2VyLmZvcm1hdCk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRnZXRQaWNrZXJJbnB1dCgpLnZhbChmb3JtYXR0ZWQpO1xyXG4gICAgICAgIFx0cGlja2VyLmVsZW1lbnQuZGF0YSgnZGF0ZScsIGZvcm1hdHRlZCk7XHJcbiAgICAgICAgXHRpZiAoIXBpY2tlci5vcHRpb25zLnBpY2tUaW1lKSB7XHJcbiAgICAgICAgXHRcdHBpY2tlci5oaWRlKCk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2hlY2tEYXRlID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgdW5pdCwgYW1vdW50KSB7XHJcbiAgICAgICAgXHRtb21lbnQubG9jYWxlKHBpY2tlci5vcHRpb25zLmxhbmd1YWdlKTtcclxuICAgICAgICBcdHZhciBuZXdEYXRlO1xyXG4gICAgICAgIFx0aWYgKGRpcmVjdGlvbiA9PT0gJ2FkZCcpIHtcclxuICAgICAgICBcdFx0bmV3RGF0ZSA9IG1vbWVudChwaWNrZXIuZGF0ZSk7XHJcbiAgICAgICAgXHRcdGlmIChuZXdEYXRlLmhvdXJzKCkgPT09IDIzKSB7XHJcbiAgICAgICAgXHRcdFx0bmV3RGF0ZS5hZGQoYW1vdW50LCB1bml0KTtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0XHRuZXdEYXRlLmFkZChhbW91bnQsIHVuaXQpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0ZWxzZSB7XHJcbiAgICAgICAgXHRcdG5ld0RhdGUgPSBtb21lbnQocGlja2VyLmRhdGUpLnN1YnRyYWN0KGFtb3VudCwgdW5pdCk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoaXNJbkRpc2FibGVEYXRlcyhtb21lbnQobmV3RGF0ZS5zdWJ0cmFjdChhbW91bnQsIHVuaXQpKSkgfHwgaXNJbkRpc2FibGVEYXRlcyhuZXdEYXRlKSkge1xyXG4gICAgICAgIFx0XHRub3RpZnlFcnJvcihuZXdEYXRlLmZvcm1hdChwaWNrZXIuZm9ybWF0KSk7XHJcbiAgICAgICAgXHRcdHJldHVybjtcclxuICAgICAgICBcdH1cclxuXHJcbiAgICAgICAgXHRpZiAoZGlyZWN0aW9uID09PSAnYWRkJykge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuZGF0ZS5hZGQoYW1vdW50LCB1bml0KTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGVsc2Uge1xyXG4gICAgICAgIFx0XHRwaWNrZXIuZGF0ZS5zdWJ0cmFjdChhbW91bnQsIHVuaXQpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0cGlja2VyLnVuc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNJbkRpc2FibGVEYXRlcyA9IGZ1bmN0aW9uIChkYXRlLCB0aW1lVW5pdCkge1xyXG4gICAgICAgIFx0bW9tZW50LmxvY2FsZShwaWNrZXIub3B0aW9ucy5sYW5ndWFnZSk7XHJcbiAgICAgICAgXHR2YXIgbWF4RGF0ZSA9IG1vbWVudChwaWNrZXIub3B0aW9ucy5tYXhEYXRlLCBwaWNrZXIuZm9ybWF0LCBwaWNrZXIub3B0aW9ucy51c2VTdHJpY3QpLFxyXG4gICAgICAgICAgICAgICAgbWluRGF0ZSA9IG1vbWVudChwaWNrZXIub3B0aW9ucy5taW5EYXRlLCBwaWNrZXIuZm9ybWF0LCBwaWNrZXIub3B0aW9ucy51c2VTdHJpY3QpO1xyXG5cclxuICAgICAgICBcdGlmICh0aW1lVW5pdCkge1xyXG4gICAgICAgIFx0XHRtYXhEYXRlID0gbWF4RGF0ZS5lbmRPZih0aW1lVW5pdCk7XHJcbiAgICAgICAgXHRcdG1pbkRhdGUgPSBtaW5EYXRlLnN0YXJ0T2YodGltZVVuaXQpO1xyXG4gICAgICAgIFx0fVxyXG5cclxuICAgICAgICBcdGlmIChkYXRlLmlzQWZ0ZXIobWF4RGF0ZSkgfHwgZGF0ZS5pc0JlZm9yZShtaW5EYXRlKSkge1xyXG4gICAgICAgIFx0XHRyZXR1cm4gdHJ1ZTtcclxuICAgICAgICBcdH1cclxuICAgICAgICBcdGlmIChwaWNrZXIub3B0aW9ucy5kaXNhYmxlZERhdGVzID09PSBmYWxzZSkge1xyXG4gICAgICAgIFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRyZXR1cm4gcGlja2VyLm9wdGlvbnMuZGlzYWJsZWREYXRlc1tkYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpXSA9PT0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzSW5FbmFibGVEYXRlcyA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgXHRtb21lbnQubG9jYWxlKHBpY2tlci5vcHRpb25zLmxhbmd1YWdlKTtcclxuICAgICAgICBcdGlmIChwaWNrZXIub3B0aW9ucy5lbmFibGVkRGF0ZXMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgXHRcdHJldHVybiB0cnVlO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0cmV0dXJuIHBpY2tlci5vcHRpb25zLmVuYWJsZWREYXRlc1tkYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpXSA9PT0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbmRleEdpdmVuRGF0ZXMgPSBmdW5jdGlvbiAoZ2l2ZW5EYXRlc0FycmF5KSB7XHJcbiAgICAgICAgXHQvLyBTdG9yZSBnaXZlbiBlbmFibGVkRGF0ZXMgYW5kIGRpc2FibGVkRGF0ZXMgYXMga2V5cy5cclxuICAgICAgICBcdC8vIFRoaXMgd2F5IHdlIGNhbiBjaGVjayB0aGVpciBleGlzdGVuY2UgaW4gTygxKSB0aW1lIGluc3RlYWQgb2YgbG9vcGluZyB0aHJvdWdoIHdob2xlIGFycmF5LlxyXG4gICAgICAgIFx0Ly8gKGZvciBleGFtcGxlOiBwaWNrZXIub3B0aW9ucy5lbmFibGVkRGF0ZXNbJzIwMTQtMDItMjcnXSA9PT0gdHJ1ZSlcclxuICAgICAgICBcdHZhciBnaXZlbkRhdGVzSW5kZXhlZCA9IHt9LCBnaXZlbkRhdGVzQ291bnQgPSAwLCBpO1xyXG4gICAgICAgIFx0Zm9yIChpID0gMDsgaSA8IGdpdmVuRGF0ZXNBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIFx0XHRpZiAobW9tZW50LmlzTW9tZW50KGdpdmVuRGF0ZXNBcnJheVtpXSkgfHwgZ2l2ZW5EYXRlc0FycmF5W2ldIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgIFx0XHRcdGREYXRlID0gbW9tZW50KGdpdmVuRGF0ZXNBcnJheVtpXSk7XHJcbiAgICAgICAgXHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0ZERhdGUgPSBtb21lbnQoZ2l2ZW5EYXRlc0FycmF5W2ldLCBwaWNrZXIuZm9ybWF0LCBwaWNrZXIub3B0aW9ucy51c2VTdHJpY3QpO1xyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHRcdGlmIChkRGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICBcdFx0XHRnaXZlbkRhdGVzSW5kZXhlZFtkRGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKV0gPSB0cnVlO1xyXG4gICAgICAgIFx0XHRcdGdpdmVuRGF0ZXNDb3VudCsrO1xyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoZ2l2ZW5EYXRlc0NvdW50ID4gMCkge1xyXG4gICAgICAgIFx0XHRyZXR1cm4gZ2l2ZW5EYXRlc0luZGV4ZWQ7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRyZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcGFkTGVmdCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcclxuICAgICAgICBcdHN0cmluZyA9IHN0cmluZy50b1N0cmluZygpO1xyXG4gICAgICAgIFx0aWYgKHN0cmluZy5sZW5ndGggPj0gMikge1xyXG4gICAgICAgIFx0XHRyZXR1cm4gc3RyaW5nO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0cmV0dXJuICcwJyArIHN0cmluZztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdHZhclxyXG4gICAgICAgICAgICAgICAgaGVhZFRlbXBsYXRlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJzx0aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dHI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx0aCBjbGFzcz1cInByZXZcIj4mbHNhcXVvOzwvdGg+PHRoIGNvbHNwYW49XCInICsgKHBpY2tlci5vcHRpb25zLmNhbGVuZGFyV2Vla3MgPyAnNicgOiAnNScpICsgJ1wiIGNsYXNzPVwicGlja2VyLXN3aXRjaFwiPjwvdGg+PHRoIGNsYXNzPVwibmV4dFwiPiZyc2FxdW87PC90aD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3RyPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC90aGVhZD4nLFxyXG4gICAgICAgICAgICAgICAgY29udFRlbXBsYXRlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJzx0Ym9keT48dHI+PHRkIGNvbHNwYW49XCInICsgKHBpY2tlci5vcHRpb25zLmNhbGVuZGFyV2Vla3MgPyAnOCcgOiAnNycpICsgJ1wiPjwvdGQ+PC90cj48L3Rib2R5PicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci1kYXlzXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicgKyBoZWFkVGVtcGxhdGUgKyAnPHRib2R5PjwvdGJvZHk+PC90YWJsZT4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci1tb250aHNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+JyArIGhlYWRUZW1wbGF0ZSArIGNvbnRUZW1wbGF0ZSArICc8L3RhYmxlPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLXllYXJzXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicgKyBoZWFkVGVtcGxhdGUgKyBjb250VGVtcGxhdGUgKyAnPC90YWJsZT4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgcmV0ID0gJyc7XHJcbiAgICAgICAgXHRpZiAocGlja2VyLm9wdGlvbnMucGlja0RhdGUgJiYgcGlja2VyLm9wdGlvbnMucGlja1RpbWUpIHtcclxuICAgICAgICBcdFx0cmV0ID0gJzxkaXYgY2xhc3M9XCJib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0JyArIChwaWNrZXIub3B0aW9ucy5zaWRlQnlTaWRlID8gJyB0aW1lcGlja2VyLXNicycgOiAnJykgKyAocGlja2VyLnVzZTI0aG91cnMgPyAnIHVzZXR3ZW50eWZvdXInIDogJycpICsgJyBkcm9wZG93bi1tZW51XCIgc3R5bGU9XCJ6LWluZGV4Ojk5OTkgIWltcG9ydGFudDtcIj4nO1xyXG4gICAgICAgIFx0XHRpZiAocGlja2VyLm9wdGlvbnMuc2lkZUJ5U2lkZSkge1xyXG4gICAgICAgIFx0XHRcdHJldCArPSAnPGRpdiBjbGFzcz1cInJvd1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY29sLXNtLTYgZGF0ZXBpY2tlclwiPicgKyB0ZW1wbGF0ZSArICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImNvbC1zbS02IHRpbWVwaWNrZXJcIj4nICsgdHBHbG9iYWwuZ2V0VGVtcGxhdGUoKSArICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcbiAgICAgICAgXHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0cmV0ICs9ICc8dWwgY2xhc3M9XCJsaXN0LXVuc3R5bGVkXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGknICsgKHBpY2tlci5vcHRpb25zLmNvbGxhcHNlID8gJyBjbGFzcz1cImNvbGxhcHNlIGluXCInIDogJycpICsgJz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlclwiPicgKyB0ZW1wbGF0ZSArICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvbGk+JyArXHJcblx0XHRcdFx0XHRcdCc8bGk+JyArXHJcblx0XHRcdFx0XHRcdCc8c3BhbiBjbGFzcz1cImJ0bi1ncm91cFwiIHN0eWxlPVwiZmxvYXQ6bGVmdDsgbWFyZ2luLWxlZnQ6NHB4XCI+JyArXHJcblx0XHRcdFx0XHRcdCc8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1pbmZvXCJcIiBpZD1cInRvZGF5LWJ1dHRvblwiPiBOb3cgPC9idXR0b24+JyArXHJcblx0XHRcdFx0XHRcdCc8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIiBpZD1cImNsZWFyLWJ1dHRvblwiPiBDbGVhciA8L2J1dHRvbj4nICtcclxuXHRcdFx0XHRcdFx0Jzwvc3Bhbj4nICtcclxuXHRcdFx0XHRcdFx0JzxidXR0b24gY2xhc3M9XCJidG4gYnRuLXN1Y2Nlc3NcIiBpZD1cImNsb3NlLWJ1dHRvblwiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7IG1hcmdpbi1yaWdodDo0cHg7XCI+RG9uZTwvYnV0dG9uPicgK1xyXG5cdFx0XHRcdFx0XHQnPGRpdiBzdHlsZT1cImNsZWFyOmJvdGg7IHBhZGRpbmctYm90dG9tOjVweDtcIj48L2Rpdj4nICtcclxuXHRcdFx0XHRcdFx0JzwvbGk+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGknICsgKHBpY2tlci5vcHRpb25zLmNvbGxhcHNlID8gJyBjbGFzcz1cImNvbGxhcHNlXCInIDogJycpICsgJz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGltZXBpY2tlclwiPicgKyB0cEdsb2JhbC5nZXRUZW1wbGF0ZSgpICsgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9saT4nICtcclxuICAgICAgICAgICAgICAgICAgICc8L3VsPic7XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0cmV0ICs9ICc8L2Rpdj4nO1xyXG4gICAgICAgIFx0XHRyZXR1cm4gcmV0O1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIFx0aWYgKHBpY2tlci5vcHRpb25zLnBpY2tUaW1lKSB7XHJcbiAgICAgICAgXHRcdHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IGRyb3Bkb3duLW1lbnVcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0aW1lcGlja2VyXCI+JyArIHRwR2xvYmFsLmdldFRlbXBsYXRlKCkgKyAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRyZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJib290c3RyYXAtZGF0ZXRpbWVwaWNrZXItd2lkZ2V0IGRyb3Bkb3duLW1lbnVcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXJcIj4nICsgdGVtcGxhdGUgKyAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+J1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRwR2xvYmFsID0ge1xyXG4gICAgICAgIFx0bW9kZXM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFx0Y2xzTmFtZTogJ2RheXMnLFxyXG4gICAgICAgICAgICAgICAgXHRuYXZGbmM6ICdtb250aCcsXHJcbiAgICAgICAgICAgICAgICBcdG5hdlN0ZXA6IDFcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcdGNsc05hbWU6ICdtb250aHMnLFxyXG4gICAgICAgICAgICAgICAgXHRuYXZGbmM6ICd5ZWFyJyxcclxuICAgICAgICAgICAgICAgIFx0bmF2U3RlcDogMVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFx0Y2xzTmFtZTogJ3llYXJzJyxcclxuICAgICAgICAgICAgICAgIFx0bmF2Rm5jOiAneWVhcicsXHJcbiAgICAgICAgICAgICAgICBcdG5hdlN0ZXA6IDEwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHRdXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdHBHbG9iYWwgPSB7XHJcbiAgICAgICAgXHRob3VyVGVtcGxhdGU6ICc8c3BhbiBkYXRhLWFjdGlvbj1cInNob3dIb3Vyc1wiICAgZGF0YS10aW1lLWNvbXBvbmVudD1cImhvdXJzXCIgICBjbGFzcz1cInRpbWVwaWNrZXItaG91clwiPjwvc3Bhbj4nLFxyXG4gICAgICAgIFx0bWludXRlVGVtcGxhdGU6ICc8c3BhbiBkYXRhLWFjdGlvbj1cInNob3dNaW51dGVzXCIgZGF0YS10aW1lLWNvbXBvbmVudD1cIm1pbnV0ZXNcIiBjbGFzcz1cInRpbWVwaWNrZXItbWludXRlXCI+PC9zcGFuPicsXHJcbiAgICAgICAgXHRzZWNvbmRUZW1wbGF0ZTogJzxzcGFuIGRhdGEtYWN0aW9uPVwic2hvd1NlY29uZHNcIiAgZGF0YS10aW1lLWNvbXBvbmVudD1cInNlY29uZHNcIiBjbGFzcz1cInRpbWVwaWNrZXItc2Vjb25kXCI+PC9zcGFuPidcclxuICAgICAgICB9O1xyXG5cclxuICAgIFx0dHBHbG9iYWwuZ2V0VGVtcGxhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcdFx0cmV0dXJuIChcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGltZXBpY2tlci1waWNrZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8dHI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHRkPjxhIGhyZWY9XCIjXCIgY2xhc3M9XCJidG5cIiBkYXRhLWFjdGlvbj1cImluY3JlbWVudEhvdXJzXCI+PHNwYW4gY2xhc3M9XCInICsgcGlja2VyLm9wdGlvbnMuaWNvbnMudXAgKyAnXCI+PC9zcGFuPjwvYT48L3RkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cInNlcGFyYXRvclwiPjwvdGQ+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHRkPicgKyAocGlja2VyLm9wdGlvbnMudXNlTWludXRlcyA/ICc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYnRuXCIgZGF0YS1hY3Rpb249XCJpbmNyZW1lbnRNaW51dGVzXCI+PHNwYW4gY2xhc3M9XCInICsgcGlja2VyLm9wdGlvbnMuaWNvbnMudXAgKyAnXCI+PC9zcGFuPjwvYT4nIDogJycpICsgJzwvdGQ+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGlja2VyLm9wdGlvbnMudXNlU2Vjb25kcyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cInNlcGFyYXRvclwiPjwvdGQ+PHRkPjxhIGhyZWY9XCIjXCIgY2xhc3M9XCJidG5cIiBkYXRhLWFjdGlvbj1cImluY3JlbWVudFNlY29uZHNcIj48c3BhbiBjbGFzcz1cIicgKyBwaWNrZXIub3B0aW9ucy5pY29ucy51cCArICdcIj48L3NwYW4+PC9hPjwvdGQ+JyA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGlja2VyLnVzZTI0aG91cnMgPyAnJyA6ICc8dGQgY2xhc3M9XCJzZXBhcmF0b3JcIj48L3RkPicpICsgJzx0ZD48L3RkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC90cj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzx0cj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGQ+JyArIHRwR2xvYmFsLmhvdXJUZW1wbGF0ZSArICc8L3RkPiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJzZXBhcmF0b3JcIj46PC90ZD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGQ+JyArIChwaWNrZXIub3B0aW9ucy51c2VNaW51dGVzID8gdHBHbG9iYWwubWludXRlVGVtcGxhdGUgOiAnPHNwYW4gY2xhc3M9XCJ0aW1lcGlja2VyLW1pbnV0ZVwiPjAwPC9zcGFuPicpICsgJzwvdGQ+ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBpY2tlci5vcHRpb25zLnVzZVNlY29uZHMgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJzZXBhcmF0b3JcIj46PC90ZD48dGQ+JyArIHRwR2xvYmFsLnNlY29uZFRlbXBsYXRlICsgJzwvdGQ+JyA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGlja2VyLnVzZTI0aG91cnMgPyAnJyA6ICc8dGQgY2xhc3M9XCJzZXBhcmF0b3JcIj48L3RkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx0ZD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIGRhdGEtYWN0aW9uPVwidG9nZ2xlUGVyaW9kXCI+PC9idXR0b24+PC90ZD4nKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L3RyPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHRyPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx0ZD48YSBocmVmPVwiI1wiIGNsYXNzPVwiYnRuXCIgZGF0YS1hY3Rpb249XCJkZWNyZW1lbnRIb3Vyc1wiPjxzcGFuIGNsYXNzPVwiJyArIHBpY2tlci5vcHRpb25zLmljb25zLmRvd24gKyAnXCI+PC9zcGFuPjwvYT48L3RkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cInNlcGFyYXRvclwiPjwvdGQ+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHRkPicgKyAocGlja2VyLm9wdGlvbnMudXNlTWludXRlcyA/ICc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYnRuXCIgZGF0YS1hY3Rpb249XCJkZWNyZW1lbnRNaW51dGVzXCI+PHNwYW4gY2xhc3M9XCInICsgcGlja2VyLm9wdGlvbnMuaWNvbnMuZG93biArICdcIj48L3NwYW4+PC9hPicgOiAnJykgKyAnPC90ZD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwaWNrZXIub3B0aW9ucy51c2VTZWNvbmRzID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwic2VwYXJhdG9yXCI+PC90ZD48dGQ+PGEgaHJlZj1cIiNcIiBjbGFzcz1cImJ0blwiIGRhdGEtYWN0aW9uPVwiZGVjcmVtZW50U2Vjb25kc1wiPjxzcGFuIGNsYXNzPVwiJyArIHBpY2tlci5vcHRpb25zLmljb25zLmRvd24gKyAnXCI+PC9zcGFuPjwvYT48L3RkPicgOiAnJykgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBpY2tlci51c2UyNGhvdXJzID8gJycgOiAnPHRkIGNsYXNzPVwic2VwYXJhdG9yXCI+PC90ZD4nKSArICc8dGQ+PC90ZD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvdHI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvdGFibGU+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRpbWVwaWNrZXItaG91cnNcIiBkYXRhLWFjdGlvbj1cInNlbGVjdEhvdXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+PC90YWJsZT4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGltZXBpY2tlci1taW51dGVzXCIgZGF0YS1hY3Rpb249XCJzZWxlY3RNaW51dGVcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+PC90YWJsZT4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgIChwaWNrZXIub3B0aW9ucy51c2VTZWNvbmRzID9cclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRpbWVwaWNrZXItc2Vjb25kc1wiIGRhdGEtYWN0aW9uPVwic2VsZWN0U2Vjb25kXCI+PHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+PC90YWJsZT48L2Rpdj4nIDogJycpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICBcdH07XHJcblxyXG4gICAgXHRwaWNrZXIuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFx0XHRkZXRhY2hEYXRlUGlja2VyRXZlbnRzKCk7XHJcbiAgICBcdFx0ZGV0YWNoRGF0ZVBpY2tlckdsb2JhbEV2ZW50cygpO1xyXG4gICAgXHRcdHBpY2tlci53aWRnZXQucmVtb3ZlKCk7XHJcbiAgICBcdFx0cGlja2VyLmVsZW1lbnQucmVtb3ZlRGF0YSgnRGF0ZVRpbWVQaWNrZXInKTtcclxuICAgIFx0XHRpZiAocGlja2VyLmNvbXBvbmVudCkge1xyXG4gICAgXHRcdFx0cGlja2VyLmNvbXBvbmVudC5yZW1vdmVEYXRhKCdEYXRlVGltZVBpY2tlcicpO1xyXG4gICAgXHRcdH1cclxuICAgIFx0fTtcclxuXHJcbiAgICBcdHBpY2tlci5zaG93ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIFx0XHRpZiAoZ2V0UGlja2VySW5wdXQoKS5wcm9wKCdkaXNhYmxlZCcpKSB7XHJcbiAgICBcdFx0XHRyZXR1cm47XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdGlmIChwaWNrZXIub3B0aW9ucy51c2VDdXJyZW50KSB7XHJcbiAgICBcdFx0XHRpZiAoZ2V0UGlja2VySW5wdXQoKS52YWwoKSA9PT0gJycpIHtcclxuICAgIFx0XHRcdFx0aWYgKHBpY2tlci5vcHRpb25zLmZpbGxFbXB0eSkge1xyXG4gICAgXHRcdFx0XHRcdGlmIChwaWNrZXIub3B0aW9ucy5taW51dGVTdGVwcGluZyAhPT0gMSkge1xyXG4gICAgXHRcdFx0XHRcdFx0dmFyIG1EYXRlID0gbW9tZW50KCksXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIHJJbnRlcnZhbCA9IHBpY2tlci5vcHRpb25zLm1pbnV0ZVN0ZXBwaW5nO1xyXG4gICAgXHRcdFx0XHRcdFx0bURhdGUubWludXRlcygoTWF0aC5yb3VuZChtRGF0ZS5taW51dGVzKCkgLyBySW50ZXJ2YWwpICogckludGVydmFsKSAlIDYwKS5zZWNvbmRzKDApO1xyXG4gICAgXHRcdFx0XHRcdFx0cGlja2VyLnNldFZhbHVlKG1EYXRlLmZvcm1hdChwaWNrZXIuZm9ybWF0KSk7XHJcbiAgICBcdFx0XHRcdFx0fSBlbHNlIHtcclxuICAgIFx0XHRcdFx0XHRcdHBpY2tlci5zZXRWYWx1ZShtb21lbnQoKS5mb3JtYXQocGlja2VyLmZvcm1hdCkpO1xyXG4gICAgXHRcdFx0XHRcdH1cclxuICAgIFx0XHRcdFx0XHRub3RpZnlDaGFuZ2UoJycsIGUudHlwZSk7XHJcbiAgICBcdFx0XHRcdH1cclxuICAgIFx0XHRcdH0gZWxzZVxyXG4gICAgXHRcdFx0XHRwaWNrZXIuc2V0VmFsdWUoZ2V0UGlja2VySW5wdXQoKS52YWwoKSk7XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdC8vIGlmIHRoaXMgaXMgYSBjbGljayBldmVudCBvbiB0aGUgaW5wdXQgZmllbGQgYW5kIHBpY2tlciBpcyBhbHJlYWR5IG9wZW4gZG9uJ3QgaGlkZSBpdFxyXG4gICAgXHRcdGlmIChlICYmIGUudHlwZSA9PT0gJ2NsaWNrJyAmJiBwaWNrZXIuaXNJbnB1dCAmJiBwaWNrZXIud2lkZ2V0Lmhhc0NsYXNzKCdwaWNrZXItb3BlbicpKSB7XHJcbiAgICBcdFx0XHRyZXR1cm47XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdGlmIChwaWNrZXIud2lkZ2V0Lmhhc0NsYXNzKCdwaWNrZXItb3BlbicpKSB7XHJcbiAgICBcdFx0XHRwaWNrZXIud2lkZ2V0LmhpZGUoKTtcclxuICAgIFx0XHRcdHBpY2tlci53aWRnZXQucmVtb3ZlQ2xhc3MoJ3BpY2tlci1vcGVuJyk7XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdGVsc2Uge1xyXG4gICAgXHRcdFx0cGlja2VyLndpZGdldC5zaG93KCk7XHJcbiAgICBcdFx0XHRwaWNrZXIud2lkZ2V0LmFkZENsYXNzKCdwaWNrZXItb3BlbicpO1xyXG4gICAgXHRcdH1cclxuICAgIFx0XHRwaWNrZXIuaGVpZ2h0ID0gcGlja2VyLmNvbXBvbmVudCA/IHBpY2tlci5jb21wb25lbnQub3V0ZXJIZWlnaHQoKSA6IHBpY2tlci5lbGVtZW50Lm91dGVySGVpZ2h0KCk7XHJcbiAgICBcdFx0cGxhY2UoKTtcclxuICAgIFx0XHRwaWNrZXIuZWxlbWVudC50cmlnZ2VyKHtcclxuICAgIFx0XHRcdHR5cGU6ICdkcC5zaG93JyxcclxuICAgIFx0XHRcdGRhdGU6IG1vbWVudChwaWNrZXIuZGF0ZSlcclxuICAgIFx0XHR9KTtcclxuICAgIFx0XHRhdHRhY2hEYXRlUGlja2VyR2xvYmFsRXZlbnRzKCk7XHJcbiAgICBcdFx0aWYgKGUpIHtcclxuICAgIFx0XHRcdHN0b3BFdmVudChlKTtcclxuICAgIFx0XHR9XHJcbiAgICBcdH07XHJcblxyXG4gICAgXHRwaWNrZXIuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFx0XHR2YXIgaW5wdXQgPSBnZXRQaWNrZXJJbnB1dCgpO1xyXG4gICAgXHRcdGlmIChpbnB1dC5wcm9wKCdkaXNhYmxlZCcpKSB7XHJcbiAgICBcdFx0XHRyZXR1cm47XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdGlucHV0LnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICBcdFx0ZGV0YWNoRGF0ZVBpY2tlckV2ZW50cygpO1xyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0cGlja2VyLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFx0XHR2YXIgaW5wdXQgPSBnZXRQaWNrZXJJbnB1dCgpO1xyXG4gICAgXHRcdGlmICghaW5wdXQucHJvcCgnZGlzYWJsZWQnKSkge1xyXG4gICAgXHRcdFx0cmV0dXJuO1xyXG4gICAgXHRcdH1cclxuICAgIFx0XHRpbnB1dC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgIFx0XHRhdHRhY2hEYXRlUGlja2VyRXZlbnRzKCk7XHJcbiAgICBcdH07XHJcblxyXG4gICAgXHRwaWNrZXIuaGlkZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFx0XHQvLyBJZ25vcmUgZXZlbnQgaWYgaW4gdGhlIG1pZGRsZSBvZiBhIHBpY2tlciB0cmFuc2l0aW9uXHJcbiAgICBcdFx0dmFyIGNvbGxhcHNlID0gcGlja2VyLndpZGdldC5maW5kKCcuY29sbGFwc2UnKSwgaSwgY29sbGFwc2VEYXRhO1xyXG4gICAgXHRcdGZvciAoaSA9IDA7IGkgPCBjb2xsYXBzZS5sZW5ndGg7IGkrKykge1xyXG4gICAgXHRcdFx0Y29sbGFwc2VEYXRhID0gY29sbGFwc2UuZXEoaSkuZGF0YSgnY29sbGFwc2UnKTtcclxuICAgIFx0XHRcdGlmIChjb2xsYXBzZURhdGEgJiYgY29sbGFwc2VEYXRhLnRyYW5zaXRpb25pbmcpIHtcclxuICAgIFx0XHRcdFx0cmV0dXJuO1xyXG4gICAgXHRcdFx0fVxyXG4gICAgXHRcdH1cclxuICAgIFx0XHRwaWNrZXIud2lkZ2V0LmhpZGUoKTtcclxuICAgIFx0XHRwaWNrZXIud2lkZ2V0LnJlbW92ZUNsYXNzKCdwaWNrZXItb3BlbicpO1xyXG4gICAgXHRcdHBpY2tlci52aWV3TW9kZSA9IHBpY2tlci5zdGFydFZpZXdNb2RlO1xyXG4gICAgXHRcdHNob3dNb2RlKCk7XHJcbiAgICBcdFx0cGlja2VyLmVsZW1lbnQudHJpZ2dlcih7XHJcbiAgICBcdFx0XHR0eXBlOiAnZHAuaGlkZScsXHJcbiAgICBcdFx0XHRkYXRlOiBtb21lbnQocGlja2VyLmRhdGUpXHJcbiAgICBcdFx0fSk7XHJcbiAgICBcdFx0ZGV0YWNoRGF0ZVBpY2tlckdsb2JhbEV2ZW50cygpO1xyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0cGlja2VyLnNldFZhbHVlID0gZnVuY3Rpb24gKG5ld0RhdGUpIHtcclxuICAgIFx0XHRtb21lbnQubG9jYWxlKHBpY2tlci5vcHRpb25zLmxhbmd1YWdlKTtcclxuICAgIFx0XHRpZiAoIW5ld0RhdGUpIHtcclxuICAgIFx0XHRcdHBpY2tlci51bnNldCA9IHRydWU7XHJcbiAgICBcdFx0XHRzZXQoKTtcclxuICAgIFx0XHR9IGVsc2Uge1xyXG4gICAgXHRcdFx0cGlja2VyLnVuc2V0ID0gZmFsc2U7XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdGlmICghbW9tZW50LmlzTW9tZW50KG5ld0RhdGUpKSB7XHJcbiAgICBcdFx0XHRuZXdEYXRlID0gKG5ld0RhdGUgaW5zdGFuY2VvZiBEYXRlKSA/IG1vbWVudChuZXdEYXRlKSA6IG1vbWVudChuZXdEYXRlLCBwaWNrZXIuZm9ybWF0LCBwaWNrZXIub3B0aW9ucy51c2VTdHJpY3QpO1xyXG4gICAgXHRcdH0gZWxzZSB7XHJcbiAgICBcdFx0XHRuZXdEYXRlID0gbmV3RGF0ZS5sb2NhbGUocGlja2VyLm9wdGlvbnMubGFuZ3VhZ2UpO1xyXG4gICAgXHRcdH1cclxuICAgIFx0XHRpZiAobmV3RGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgIFx0XHRcdHBpY2tlci5kYXRlID0gbmV3RGF0ZTtcclxuICAgIFx0XHRcdHNldCgpO1xyXG4gICAgXHRcdFx0cGlja2VyLnZpZXdEYXRlID0gbW9tZW50KHsgeTogcGlja2VyLmRhdGUueWVhcigpLCBNOiBwaWNrZXIuZGF0ZS5tb250aCgpIH0pO1xyXG4gICAgXHRcdFx0ZmlsbERhdGUoKTtcclxuICAgIFx0XHRcdGZpbGxUaW1lKCk7XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdGVsc2Uge1xyXG4gICAgXHRcdFx0bm90aWZ5RXJyb3IobmV3RGF0ZSk7XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0cGlja2VyLmdldERhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcdFx0aWYgKHBpY2tlci51bnNldCkge1xyXG4gICAgXHRcdFx0cmV0dXJuIG51bGw7XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdHJldHVybiBtb21lbnQocGlja2VyLmRhdGUpO1xyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0cGlja2VyLnNldERhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgXHRcdHZhciBvbGREYXRlID0gbW9tZW50KHBpY2tlci5kYXRlKTtcclxuICAgIFx0XHRpZiAoIWRhdGUpIHtcclxuICAgIFx0XHRcdHBpY2tlci5zZXRWYWx1ZShudWxsKTtcclxuICAgIFx0XHR9IGVsc2Uge1xyXG4gICAgXHRcdFx0cGlja2VyLnNldFZhbHVlKGRhdGUpO1xyXG4gICAgXHRcdH1cclxuICAgIFx0XHRub3RpZnlDaGFuZ2Uob2xkRGF0ZSwgJ2Z1bmN0aW9uJyk7XHJcbiAgICBcdH07XHJcblxyXG4gICAgXHRwaWNrZXIuc2V0RGlzYWJsZWREYXRlcyA9IGZ1bmN0aW9uIChkYXRlcykge1xyXG4gICAgXHRcdHBpY2tlci5vcHRpb25zLmRpc2FibGVkRGF0ZXMgPSBpbmRleEdpdmVuRGF0ZXMoZGF0ZXMpO1xyXG4gICAgXHRcdGlmIChwaWNrZXIudmlld0RhdGUpIHtcclxuICAgIFx0XHRcdHVwZGF0ZSgpO1xyXG4gICAgXHRcdH1cclxuICAgIFx0fTtcclxuXHJcbiAgICBcdHBpY2tlci5zZXRFbmFibGVkRGF0ZXMgPSBmdW5jdGlvbiAoZGF0ZXMpIHtcclxuICAgIFx0XHRwaWNrZXIub3B0aW9ucy5lbmFibGVkRGF0ZXMgPSBpbmRleEdpdmVuRGF0ZXMoZGF0ZXMpO1xyXG4gICAgXHRcdGlmIChwaWNrZXIudmlld0RhdGUpIHtcclxuICAgIFx0XHRcdHVwZGF0ZSgpO1xyXG4gICAgXHRcdH1cclxuICAgIFx0fTtcclxuXHJcbiAgICBcdHBpY2tlci5zZXRNYXhEYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgIFx0XHRpZiAoZGF0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBcdFx0XHRyZXR1cm47XHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdGlmIChtb21lbnQuaXNNb21lbnQoZGF0ZSkgfHwgZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgIFx0XHRcdHBpY2tlci5vcHRpb25zLm1heERhdGUgPSBtb21lbnQoZGF0ZSk7XHJcbiAgICBcdFx0fSBlbHNlIHtcclxuICAgIFx0XHRcdHBpY2tlci5vcHRpb25zLm1heERhdGUgPSBtb21lbnQoZGF0ZSwgcGlja2VyLmZvcm1hdCwgcGlja2VyLm9wdGlvbnMudXNlU3RyaWN0KTtcclxuICAgIFx0XHR9XHJcbiAgICBcdFx0aWYgKHBpY2tlci52aWV3RGF0ZSkge1xyXG4gICAgXHRcdFx0dXBkYXRlKCk7XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0cGlja2VyLnNldE1pbkRhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgXHRcdGlmIChkYXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgIFx0XHRcdHJldHVybjtcclxuICAgIFx0XHR9XHJcbiAgICBcdFx0aWYgKG1vbWVudC5pc01vbWVudChkYXRlKSB8fCBkYXRlIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgXHRcdFx0cGlja2VyLm9wdGlvbnMubWluRGF0ZSA9IG1vbWVudChkYXRlKTtcclxuICAgIFx0XHR9IGVsc2Uge1xyXG4gICAgXHRcdFx0cGlja2VyLm9wdGlvbnMubWluRGF0ZSA9IG1vbWVudChkYXRlLCBwaWNrZXIuZm9ybWF0LCBwaWNrZXIub3B0aW9ucy51c2VTdHJpY3QpO1xyXG4gICAgXHRcdH1cclxuICAgIFx0XHRpZiAocGlja2VyLnZpZXdEYXRlKSB7XHJcbiAgICBcdFx0XHR1cGRhdGUoKTtcclxuICAgIFx0XHR9XHJcbiAgICBcdH07XHJcblxyXG4gICAgXHRpbml0KCk7XHJcbiAgICB9O1xyXG5cclxuXHQkLmZuLmRhdGV0aW1lcGlja2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ0RhdGVUaW1lUGlja2VyJyk7XHJcblx0XHRcdGlmICghZGF0YSkge1xyXG5cdFx0XHRcdCR0aGlzLmRhdGEoJ0RhdGVUaW1lUGlja2VyJywgbmV3IERhdGVUaW1lUGlja2VyKHRoaXMsIG9wdGlvbnMpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0JC5mbi5kYXRldGltZXBpY2tlci5kZWZhdWx0cyA9IHtcclxuXHRcdGZvcm1hdDogZmFsc2UsXHJcblx0XHRwaWNrRGF0ZTogdHJ1ZSxcclxuXHRcdHBpY2tUaW1lOiB0cnVlLFxyXG5cdFx0dXNlTWludXRlczogdHJ1ZSxcclxuXHRcdHVzZVNlY29uZHM6IGZhbHNlLFxyXG5cdFx0dXNlQ3VycmVudDogdHJ1ZSxcclxuXHRcdGNhbGVuZGFyV2Vla3M6IGZhbHNlLFxyXG5cdFx0bWludXRlU3RlcHBpbmc6IDEsXHJcblx0XHRtaW5EYXRlOiBtb21lbnQoeyB5OiAxOTAwIH0pLFxyXG5cdFx0bWF4RGF0ZTogbW9tZW50KCkuYWRkKDEwMCwgJ3knKSxcclxuXHRcdHNob3dUb2RheTogdHJ1ZSxcclxuXHRcdGNvbGxhcHNlOiBmYWxzZSxcclxuXHRcdGxhbmd1YWdlOiBtb21lbnQubG9jYWxlKCksXHJcblx0XHRkZWZhdWx0RGF0ZTogJycsXHJcblx0XHRkaXNhYmxlZERhdGVzOiBmYWxzZSxcclxuXHRcdGVuYWJsZWREYXRlczogZmFsc2UsXHJcblx0XHRpY29uczoge30sXHJcblx0XHR1c2VTdHJpY3Q6IGZhbHNlLFxyXG5cdFx0ZGlyZWN0aW9uOiAnYXV0bycsXHJcblx0XHRzaWRlQnlTaWRlOiBmYWxzZSxcclxuXHRcdGRheXNPZldlZWtEaXNhYmxlZDogW10sXHJcblx0XHR3aWRnZXRQYXJlbnQ6IGZhbHNlLFxyXG5cdFx0ZmlsbEVtcHR5OiBmYWxzZVxyXG5cdH07XHJcbn0pKTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2xpYnJhcmllcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLmpzXG4gKiogbW9kdWxlIGlkID0gMTA0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX192YWxpZGF0aW9uID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLnZhbGlkYXRpb247XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5zZXJ2aWNlcy5jb21wb25lbnRWYWxpZGF0b3InO1xyXG5leHBvcnRzLmZhY3RvcnlOYW1lID0gJ2NvbXBvbmVudFZhbGlkYXRvcic7XHJcbnZhciBDb21wb25lbnRWYWxpZGF0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29tcG9uZW50VmFsaWRhdG9yKHZhbGlkYXRpb25TZXJ2aWNlLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLiRzY29wZSA9IG9wdGlvbnMuJHNjb3BlO1xyXG4gICAgICAgIHRoaXMubmdNb2RlbCA9IG9wdGlvbnMubmdNb2RlbDtcclxuICAgICAgICB0aGlzLmZvcm0gPSBvcHRpb25zLmZvcm07XHJcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSB2YWxpZGF0aW9uU2VydmljZS5idWlsZEN1c3RvbVZhbGlkYXRvcihmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgX3RoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBfLmVhY2gob3B0aW9ucy52YWxpZGF0b3JzLCBmdW5jdGlvbiAoY3VzdG9tVmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnZhbGlkYXRvci5yZWdpc3RlclZhbGlkYXRpb25IYW5kbGVyKGN1c3RvbVZhbGlkYXRvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZXRWYWxpZGF0b3IoKTtcclxuICAgIH1cclxuICAgIENvbXBvbmVudFZhbGlkYXRvci5wcm90b3R5cGUuc2V0VmFsaWRhdG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHNjb3BlLiR3YXRjaCh0aGlzLnZhbGlkYXRvci52YWxpZGF0ZS5iaW5kKHRoaXMudmFsaWRhdG9yKSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChfdGhpcy5uZ01vZGVsKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubmdNb2RlbC4kc2V0VmFsaWRpdHkoJ2N1c3RvbVZhbGlkYXRpb24nLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIV8uaXNVbmRlZmluZWQoX3RoaXMuZm9ybSkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmZvcm0uJHNldFZhbGlkaXR5KCdjdXN0b21WYWxpZGF0aW9uJywgdmFsdWUsICdncm91cCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKF8uaXNGdW5jdGlvbihfdGhpcy5zZXRWYWxpZGl0eSkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldFZhbGlkaXR5KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmVycm9yID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb21wb25lbnRWYWxpZGF0b3I7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQ29tcG9uZW50VmFsaWRhdG9yID0gQ29tcG9uZW50VmFsaWRhdG9yO1xyXG5jb21wb25lbnRWYWxpZGF0b3JGYWN0b3J5LiRpbmplY3QgPSBbX192YWxpZGF0aW9uLnNlcnZpY2VOYW1lXTtcclxuZnVuY3Rpb24gY29tcG9uZW50VmFsaWRhdG9yRmFjdG9yeSh2YWxpZGF0aW9uU2VydmljZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRWYWxpZGF0b3IodmFsaWRhdGlvblNlcnZpY2UsIG9wdGlvbnMpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuY29tcG9uZW50VmFsaWRhdG9yRmFjdG9yeSA9IGNvbXBvbmVudFZhbGlkYXRvckZhY3Rvcnk7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fdmFsaWRhdGlvbi5tb2R1bGVOYW1lXSlcclxuICAgIC5mYWN0b3J5KGV4cG9ydHMuZmFjdG9yeU5hbWUsIGNvbXBvbmVudFZhbGlkYXRvckZhY3RvcnkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnRWYWxpZGF0b3Iuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL3NlcnZpY2VzL2NvbXBvbmVudFZhbGlkYXRvci9jb21wb25lbnRWYWxpZGF0b3Iuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInZhbGlkYXRpb24taW5wdXQtZ3JvdXBcXFwiPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwIHZhbGlkYXRpb24taW5wdXRcXFwiIG5nLWNsYXNzPVxcXCJ7ICdoYXMtd2FybmluZyc6ICFkYXRlVGltZS52YWxpZEZvcm1hdCwgJ2Vycm9yJzogZGF0ZVRpbWUubmdNb2RlbC4kaW52YWxpZCwgJ3JlcXVpcmVkLWVycm9yJzogZGF0ZVRpbWUubmdNb2RlbC4kZXJyb3IucmVxdWlyZWQgfVxcXCI+XFxyXFxuXFx0XFx0PHNwYW4gY2xhc3M9XFxcInNob3ctZGF0ZS1waWNrZXJcXFwiPlxcclxcblxcdFxcdFxcdDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBuZy1tb2RlbD1cXFwiZGF0ZVRpbWUubmdNb2RlbC4kdmlld1ZhbHVlXFxcIiAvPlxcclxcblxcdFxcdFxcdDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1idG5cXFwiPlxcclxcblxcdFxcdFxcdFxcdDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZSgpXFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtY2FsZW5kYXJcXFwiPjwvaT48L2J1dHRvbj5cXHJcXG5cXHRcXHRcXHQ8L3NwYW4+XFxyXFxuXFx0XFx0PC9zcGFuPlxcclxcblxcdFxcdDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1idG5cXFwiIG5nLWlmPVxcXCJkYXRlVGltZS5jbGVhckJ1dHRvblxcXCI+XFxyXFxuXFx0XFx0XFx0PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgcHVsbC1sZWZ0XFxcIiAgbmctZGlzYWJsZWQ9XFxcImRhdGVUaW1lLm5nTW9kZWwuJHZpZXdWYWx1ZSB8IGlzRW1wdHlcXFwiIG5nLWNsaWNrPVxcXCJkYXRlVGltZS5vbkNsZWFyQ2xpY2soKVxcXCIgPlxcclxcblxcdFxcdFxcdFxcdDxpIGNsYXNzPVxcXCJmYSBmYS10aW1lc1xcXCI+PC9pPlxcclxcblxcdFxcdFxcdDwvYnV0dG9uPlxcclxcblxcdFxcdDwvc3Bhbj5cXHJcXG5cXHRcXHQ8c3BhbiBjbGFzcz1cXFwiZXJyb3Itc3RyaW5nXFxcIiBuZy1oaWRlPVxcXCJkYXRlVGltZS5kYXRlVGltZVZhbGlkYXRvci5lcnJvciB8IGlzRW1wdHlcXFwiPnt7ZGF0ZVRpbWUuZGF0ZVRpbWVWYWxpZGF0b3IuZXJyb3J9fTwvc3Bhbj5cXHJcXG5cXHQ8L2Rpdj5cXHJcXG48L2Rpdj5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9kYXRlVGltZS9kYXRlVGltZS5odG1sXG4gKiogbW9kdWxlIGlkID0gMTA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3MvYm9vdHN0cmFwRGF0ZVRpbWVQaWNrZXIuZC50cycgLz5cclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuZGF0ZVRpbWVTdGF0aWMnO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxEYXRlVGltZVN0YXRpYyc7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnRGF0ZVRpbWVTdGF0aWNDb250cm9sbGVyJztcclxudmFyIERhdGVUaW1lU3RhdGljQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYXRlVGltZVN0YXRpY0NvbnRyb2xsZXIoZGF0ZVV0aWxpdHkpIHtcclxuICAgICAgICB0aGlzLmRhdGVVdGlsaXR5ID0gZGF0ZVV0aWxpdHk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSAnJztcclxuICAgICAgICBpZiAodGhpcy5kYXRlVmFsdWUgIT0gbnVsbCAmJiB0aGlzLmRhdGVVdGlsaXR5LmlzRGF0ZSh0aGlzLmRhdGVWYWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSBtb21lbnQodGhpcy5kYXRlVmFsdWUpLmZvcm1hdCgnTU0vREQvWVlZWScpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbmNsdWRlVGltZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGltZVpvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLmRpc3BsYXlWYWx1ZSArIG1vbWVudCh0aGlzLmRhdGVWYWx1ZSkuZm9ybWF0KCcgaDptbSBhJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRGF0ZVRpbWVTdGF0aWNDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkRhdGVUaW1lU3RhdGljQ29udHJvbGxlciA9IERhdGVUaW1lU3RhdGljQ29udHJvbGxlcjtcclxuZGF0ZVRpbWVTdGF0aWMuJGluamVjdCA9IFtdO1xyXG5mdW5jdGlvbiBkYXRlVGltZVN0YXRpYygpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9kYXRlVGltZVN0YXRpYy5odG1sJyksXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2aWV3JyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBkYXRlVmFsdWU6ICc9JyxcclxuICAgICAgICAgICAgaW5jbHVkZVRpbWU6ICc9PycsXHJcbiAgICAgICAgICAgIGRpc3BsYXlUaW1lWm9uZTogJz0/J1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBkYXRlVGltZVN0YXRpYylcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIERhdGVUaW1lU3RhdGljQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGVUaW1lU3RhdGljLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9kYXRlVGltZVN0YXRpYy9kYXRlVGltZVN0YXRpYy5qc1xuICoqIG1vZHVsZSBpZCA9IDEwN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzcGFuIGNsYXNzPVxcXCJybC1kYXRlLXRpbWUtc3RhdGljXFxcIj57ezo6dmlldy5kaXNwbGF5VmFsdWV9fSZuYnNwOzxzcGFuIG5nLWlmPVxcXCI6OnZpZXcuZGlzcGxheVRpbWVab25lXFxcIiBjbGFzcz1cXFwidGltZS16b25lXFxcIj5FU1Q8L3NwYW4+PC9zcGFuPlwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2RhdGVUaW1lU3RhdGljL2RhdGVUaW1lU3RhdGljLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSAxMDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3Mvbm9kZS9ub2RlLmQudHMnIC8+XHJcbi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3MvanF1ZXJ5L2pxdWVyeS5kLnRzJyAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5kaWFsb2cnO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxEaWFsb2cnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ0RpYWxvZ0NvbnRyb2xsZXInO1xyXG52YXIgRGlhbG9nQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEaWFsb2dDb250cm9sbGVyKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERpYWxvZ0NvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRGlhbG9nQ29udHJvbGxlciA9IERpYWxvZ0NvbnRyb2xsZXI7XHJcbmRpYWxvZy4kaW5qZWN0ID0gWyckY29tcGlsZSddO1xyXG5mdW5jdGlvbiBkaWFsb2coJGNvbXBpbGUpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL2RpYWxvZy5odG1sJyksXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICdkaWFsb2cnLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIGF1dG9zYXZlOiAnPScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UgPSBzY29wZS4kcGFyZW50LiRjbG9zZTtcclxuICAgICAgICAgICAgdHJhbnNjbHVkZShmdW5jdGlvbiAoY2xvbmUsIGRpYWxvZ1Njb3BlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyID0gY2xvbmUuZmlsdGVyKCdybC1kaWFsb2ctaGVhZGVyJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IGNsb25lLmZpbHRlcigncmwtZGlhbG9nLWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgICAgIHZhciBmb290ZXIgPSBjbG9uZS5maWx0ZXIoJ3JsLWRpYWxvZy1mb290ZXInKTtcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJBcmVhID0gZWxlbWVudC5maW5kKCcuaGVhZGVyLXRlbXBsYXRlJyk7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJBcmVhLmFwcGVuZChoZWFkZXIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRBcmVhID0gZWxlbWVudC5maW5kKCcuY29udGVudC10ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgY29udGVudEFyZWEuYXBwZW5kKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5oYXNGb290ZXIgPSAoZm9vdGVyLmxlbmd0aCA+IDApO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb250cm9sbGVyLmhhc0Zvb3RlciAmJiBjb250cm9sbGVyLmF1dG9zYXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9vdGVyID0gJGNvbXBpbGUocmVxdWlyZSgnLi9hdXRvc2F2ZURpYWxvZ0Zvb3Rlci5odG1sJykpKGRpYWxvZ1Njb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmhhc0Zvb3RlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci5oYXNGb290ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9vdGVyQXJlYSA9IGVsZW1lbnQuZmluZCgnLmZvb3Rlci10ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlckFyZWEuYXBwZW5kKGZvb3Rlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgZGlhbG9nKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgRGlhbG9nQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpYWxvZy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvZGlhbG9nL2RpYWxvZy5qc1xuICoqIG1vZHVsZSBpZCA9IDEwOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+XFxyXFxuXFx0PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJjbG9zZVxcXCIgZGF0YS1kaXNtaXNzPVxcXCJtb2RhbFxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPlxcclxcblxcdFxcdDxpIGNsYXNzPVxcXCJmYSBmYS1jbG9zZVxcXCIgXFxcIiBuZy1jbGljaz1cXFwiZGlhbG9nLmNsb3NlKCkgXFxcIj48L2k+PC9idXR0b24+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwiaGVhZGVyLXRlbXBsYXRlIFxcXCI+PC9kaXY+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwiY2xlYXJmaXggXFxcIj48L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG48ZGl2IGNsYXNzPVxcXCJtb2RhbC1ib2R5IFxcXCI+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwiY29udGVudC10ZW1wbGF0ZSBcXFwiPjwvZGl2PlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImNsZWFyZml4IFxcXCI+PC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuPGRpdiBjbGFzcz1cXFwibW9kYWwtZm9vdGVyIFxcXCIgbmctc2hvdz1cXFwiZGlhbG9nLmhhc0Zvb3RlciBcXFwiPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImZvb3Rlci10ZW1wbGF0ZSBcXFwiPjwvZGl2PlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImNsZWFyZml4IFxcXCI+PC9kaXY+XFxyXFxuPC9kaXY+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvZGlhbG9nL2RpYWxvZy5odG1sXG4gKiogbW9kdWxlIGlkID0gMTEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kYW5nZXJcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgbmctY2xpY2s9XFxcIiRjbG9zZSgpXFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtdGltZXNcXFwiPjwvaT4gQ2FuY2VsPC9idXR0b24+XFxyXFxuPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1zdWNjZXNzXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIG5nLWNsaWNrPVxcXCIkZGlzbWlzcygpXFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtY2hlY2tcXFwiPjwvaT4gU2F2ZTwvYnV0dG9uPlwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2RpYWxvZy9hdXRvc2F2ZURpYWxvZ0Zvb3Rlci5odG1sXG4gKiogbW9kdWxlIGlkID0gMTExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIganF1ZXJ5X3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2pxdWVyeS9qcXVlcnkuc2VydmljZScpO1xyXG52YXIgdGVtcGxhdGVMb2FkZXJfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvdGVtcGxhdGVMb2FkZXIvdGVtcGxhdGVMb2FkZXIuc2VydmljZScpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5nZW5lcmljQ29udGFpbmVyJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsR2VuZXJpY0NvbnRhaW5lcic7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnR2VuZXJpY0NvbnRhaW5lckNvbnRyb2xsZXInO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG52YXIgR2VuZXJpY0NvbnRhaW5lckNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gR2VuZXJpY0NvbnRhaW5lckNvbnRyb2xsZXIoJHNjb3BlLCBvYmplY3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0b3I7IH0sIGZ1bmN0aW9uIChuZXdUeXBlLCBvbGRUeXBlKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vYmplY3QuYXJlRXF1YWwobmV3VHlwZSwgb2xkVHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBfdGhpcy5yZXNvbHZlVGVtcGxhdGUobmV3VHlwZSk7XHJcbiAgICAgICAgICAgIF90aGlzLnN3YXBUZW1wbGF0ZXModGVtcGxhdGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgR2VuZXJpY0NvbnRhaW5lckNvbnRyb2xsZXIucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gdGhpcy5yZXNvbHZlVGVtcGxhdGUodGhpcy5zZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5zd2FwVGVtcGxhdGVzKHRlbXBsYXRlKTtcclxuICAgIH07XHJcbiAgICBHZW5lcmljQ29udGFpbmVyQ29udHJvbGxlci5wcm90b3R5cGUucmVzb2x2ZVRlbXBsYXRlID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICBpZiAoXy5oYXModGhpcy50ZW1wbGF0ZXMsIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlc1t0eXBlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEdlbmVyaWNDb250YWluZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsIF9fb2JqZWN0LnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBHZW5lcmljQ29udGFpbmVyQ29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5HZW5lcmljQ29udGFpbmVyQ29udHJvbGxlciA9IEdlbmVyaWNDb250YWluZXJDb250cm9sbGVyO1xyXG5nZW5lcmljQ29udGFpbmVyLiRpbmplY3QgPSBbXHJcbiAgICAnJGNvbXBpbGUnLFxyXG4gICAgJyRpbnRlcnBvbGF0ZScsXHJcbiAgICBqcXVlcnlfc2VydmljZV8xLnNlcnZpY2VOYW1lLFxyXG4gICAgdGVtcGxhdGVMb2FkZXJfc2VydmljZV8xLnNlcnZpY2VOYW1lLFxyXG4gICAgX19vYmplY3Quc2VydmljZU5hbWUsXHJcbl07XHJcbmZ1bmN0aW9uIGdlbmVyaWNDb250YWluZXIoJGNvbXBpbGUsICRpbnRlcnBvbGF0ZSwganF1ZXJ5LCB0ZW1wbGF0ZUxvYWRlciwgb2JqZWN0KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGlkPVwiY29udGFpbmVyXCI+PC9kaXY+JyxcclxuICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnZ2VuZXJpY0NvbnRhaW5lcicsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICc9JyxcclxuICAgICAgICAgICAgY29uZmlndXJlZFRlbXBsYXRlczogJz10ZW1wbGF0ZXMnLFxyXG4gICAgICAgICAgICBkZWZhdWx0VGVtcGxhdGU6ICc9JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcywgY29udHJvbGxlciwgdHJhbnNjbHVkZSkge1xyXG4gICAgICAgICAgICBpbml0RGVmYXVsdHMoY29udHJvbGxlcik7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50LmZpbmQoJyNjb250YWluZXInKTtcclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlUmVzdWx0ID0gdGVtcGxhdGVMb2FkZXIubG9hZFRlbXBsYXRlcyh0cmFuc2NsdWRlKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci50ZW1wbGF0ZXMgPSBfLmV4dGVuZChjb250cm9sbGVyLnRlbXBsYXRlcywgdGVtcGxhdGVSZXN1bHQudGVtcGxhdGVzKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5kZWZhdWx0ID0gdGVtcGxhdGVSZXN1bHQuZGVmYXVsdDtcclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlU2NvcGUgPSB0ZW1wbGF0ZVJlc3VsdC50cmFuc2NsdXNpb25TY29wZTtcclxuICAgICAgICAgICAgaWYgKCFjb250cm9sbGVyLmRlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZGVmYXVsdCA9ICc8ZGl2PjwvZGl2Pic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udHJvbGxlci5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXREZWZhdWx0cyhjb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmRlZmF1bHQgPSBjb250cm9sbGVyLmRlZmF1bHRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIudGVtcGxhdGVzID0gY29udHJvbGxlci5jb25maWd1cmVkVGVtcGxhdGVzID8gY29udHJvbGxlci5jb25maWd1cmVkVGVtcGxhdGVzIDoge307XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnN3YXBUZW1wbGF0ZXMgPSBzd2FwVGVtcGxhdGVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN3YXBUZW1wbGF0ZXModGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gYW5ndWxhci5lbGVtZW50KHRlbXBsYXRlKTtcclxuICAgICAgICAgICAgICAgIGpxdWVyeS5yZXBsYWNlQ29udGVudChjb250YWluZXIsIGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgJGNvbXBpbGUoY29udGVudCkodGVtcGxhdGVTY29wZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW2pxdWVyeV9zZXJ2aWNlXzEubW9kdWxlTmFtZSwgX19vYmplY3QubW9kdWxlTmFtZSwgdGVtcGxhdGVMb2FkZXJfc2VydmljZV8xLm1vZHVsZU5hbWVdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGdlbmVyaWNDb250YWluZXIpXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBHZW5lcmljQ29udGFpbmVyQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyaWNDb250YWluZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2dlbmVyaWNDb250YWluZXIvZ2VuZXJpY0NvbnRhaW5lci5qc1xuICoqIG1vZHVsZSBpZCA9IDExMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvanF1ZXJ5L2pxdWVyeS5kLnRzXCIgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnV0aWxpdGllcy5zZXJ2aWNlcy5qcXVlcnknO1xyXG5leHBvcnRzLnNlcnZpY2VOYW1lID0gJ2pxdWVyeVV0aWxpdHknO1xyXG52YXIgSlF1ZXJ5VXRpbGl0eSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBKUXVlcnlVdGlsaXR5KCkge1xyXG4gICAgfVxyXG4gICAgSlF1ZXJ5VXRpbGl0eS5wcm90b3R5cGUucmVwbGFjZUNvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudEFyZWEsIG5ld0NvbnRlbnQpIHtcclxuICAgICAgICBjb250ZW50QXJlYS5lbXB0eSgpO1xyXG4gICAgICAgIGNvbnRlbnRBcmVhLmFwcGVuZChuZXdDb250ZW50KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSlF1ZXJ5VXRpbGl0eTtcclxufSgpKTtcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXSlcclxuICAgIC5zZXJ2aWNlKGV4cG9ydHMuc2VydmljZU5hbWUsIEpRdWVyeVV0aWxpdHkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1qcXVlcnkuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL3NlcnZpY2VzL2pxdWVyeS9qcXVlcnkuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDExM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vdHlwaW5ncy9qcXVlcnkvanF1ZXJ5LmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51dGlsaXRpZXMuc2VydmljZXMudGVtcGxhdGVMb2FkZXInO1xyXG5leHBvcnRzLnNlcnZpY2VOYW1lID0gJ3RlbXBsYXRlTG9hZGVyJztcclxudmFyIFRlbXBsYXRlTG9hZGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRlbXBsYXRlTG9hZGVyKCRpbnRlcnBvbGF0ZSwgdGVtcGxhdGVTZWxlY3RvclZhbHVlLCBvYmplY3RVdGlsaXR5KSB7XHJcbiAgICAgICAgdGhpcy4kaW50ZXJwb2xhdGUgPSAkaW50ZXJwb2xhdGU7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVNlbGVjdG9yVmFsdWUgPSB0ZW1wbGF0ZVNlbGVjdG9yVmFsdWU7XHJcbiAgICAgICAgdGhpcy5vYmplY3RVdGlsaXR5ID0gb2JqZWN0VXRpbGl0eTtcclxuICAgIH1cclxuICAgIFRlbXBsYXRlTG9hZGVyLnByb3RvdHlwZS5sb2FkVGVtcGxhdGVzID0gZnVuY3Rpb24gKHRyYW5zY2x1ZGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlczoge30sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXHJcbiAgICAgICAgICAgIHRyYW5zY2x1c2lvblNjb3BlOiBudWxsLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gTG9hZCB0ZW1wbGF0ZXMgZnJvbSB0aGUgRE9NXHJcbiAgICAgICAgdHJhbnNjbHVkZShmdW5jdGlvbiAoY2xvbmUsIHRyYW5zY2x1c2lvblNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZXMgPSBjbG9uZS5maWx0ZXIoX3RoaXMudGVtcGxhdGVTZWxlY3RvclZhbHVlKTtcclxuICAgICAgICAgICAgdGVtcGxhdGVzLmVhY2goZnVuY3Rpb24gKGluZGV4LCB0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVIdG1sID0gdGVtcGxhdGVFbGVtZW50Lmh0bWwoKTtcclxuICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyQXR0cmlidXRlID0gdGVtcGxhdGVFbGVtZW50LmF0dHIoJ3doZW4tc2VsZWN0b3InKTtcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMub2JqZWN0VXRpbGl0eS5pc051bGxPcldoaXRlc3BhY2UodHJpZ2dlckF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlciA9IF90aGlzLiRpbnRlcnBvbGF0ZSh0cmlnZ2VyQXR0cmlidXRlKSh0cmFuc2NsdXNpb25TY29wZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRlbXBsYXRlc1t0cmlnZ2VyXSA9IHRlbXBsYXRlSHRtbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBpc0RlZmF1bHQgPSB0ZW1wbGF0ZUVsZW1lbnQuYXR0cignZGVmYXVsdCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKGlzRGVmYXVsdCkgJiYgaXNEZWZhdWx0LnRvTG93ZXJDYXNlKCkgIT09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGVmYXVsdCA9IHRlbXBsYXRlSHRtbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC50cmFuc2NsdXNpb25TY29wZSA9IHRyYW5zY2x1c2lvblNjb3BlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVMb2FkZXIuJGluamVjdCA9IFsnJGludGVycG9sYXRlJywgJ3RlbXBsYXRlU2VsZWN0b3JWYWx1ZScsIF9fb2JqZWN0LnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBUZW1wbGF0ZUxvYWRlcjtcclxufSgpKTtcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbX19vYmplY3QubW9kdWxlTmFtZV0pXHJcbiAgICAudmFsdWUoJ3RlbXBsYXRlU2VsZWN0b3JWYWx1ZScsICd0ZW1wbGF0ZScpXHJcbiAgICAuc2VydmljZShleHBvcnRzLnNlcnZpY2VOYW1lLCBUZW1wbGF0ZUxvYWRlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlTG9hZGVyLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9zZXJ2aWNlcy90ZW1wbGF0ZUxvYWRlci90ZW1wbGF0ZUxvYWRlci5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5sYXp5TG9hZCc7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybExhenlMb2FkJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdMYXp5TG9hZENvbnRyb2xsZXInO1xyXG52YXIgTGF6eUxvYWRDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExhenlMb2FkQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuaW5pdCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciB1bmJpbmQgPSAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNob3c7IH0sIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmluaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdW5iaW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIExhenlMb2FkQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuICAgIHJldHVybiBMYXp5TG9hZENvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTGF6eUxvYWRDb250cm9sbGVyID0gTGF6eUxvYWRDb250cm9sbGVyO1xyXG5mdW5jdGlvbiBsYXp5TG9hZCgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgICAgIHRlbXBsYXRlOiBcIlxcblxcdFxcdFxcdDxkaXYgbmctaWY9XFxcImxhenlMb2FkLmluaXRcXFwiPlxcblxcdFxcdFxcdFxcdDxkaXYgbmctc2hvdz1cXFwibGF6eUxvYWQuc2hvd1xcXCI+XFxuXFx0XFx0XFx0XFx0XFx0PGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFwiLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnbGF6eUxvYWQnLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIHNob3c6ICc9JyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGxhenlMb2FkKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgTGF6eUxvYWRDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGF6eUxvYWQuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2xhenlMb2FkL2xhenlMb2FkLmpzXG4gKiogbW9kdWxlIGlkID0gMTE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX3Byb21pc2UgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMucHJvbWlzZTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMubG9uZ0NsaWNrQnV0dG9uJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsTG9uZ0NsaWNrQnV0dG9uJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdMb25nQ2xpY2tCdXR0b25Db250cm9sbGVyJztcclxudmFyIF9fb2JqZWN0ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLm9iamVjdDtcclxudmFyIExvbmdDbGlja0J1dHRvbkNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9uZ0NsaWNrQnV0dG9uQ29udHJvbGxlcigkc2NvcGUsICRpbnRlcnZhbCwgJHRpbWVvdXQsIG9iamVjdFV0aWxpdHksIHByb21pc2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuJGludGVydmFsID0gJGludGVydmFsO1xyXG4gICAgICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcclxuICAgICAgICB0aGlzLm9iamVjdFV0aWxpdHkgPSBvYmplY3RVdGlsaXR5O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IDI1O1xyXG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSAxNTAwO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uVGV4dCA9IHRoaXMudGV4dDtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLnR5cGUgIT0gbnVsbCA/IHRoaXMudHlwZSA6ICdkZWZhdWx0JztcclxuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLnNpemUgIT0gbnVsbCA/ICdidG4tJyArIHRoaXMuc2l6ZSA6IG51bGw7XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5idXR0b25UZXh0OyB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLndpZHRoID0gJCgnI2FjdGlvbkJ1dHRvbicpLm91dGVyV2lkdGgoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBMb25nQ2xpY2tCdXR0b25Db250cm9sbGVyLnByb3RvdHlwZS5zdGFydEFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSB8fCB0aGlzLmJ1c3kpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFjdGlvblByb2dyZXNzID0gMDtcclxuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5hY3Rpb25JbnRlcnZhbCA9IHRoaXMuJGludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuYWN0aW9uUHJvZ3Jlc3MgKz0gX3RoaXMuaW50ZXJ2YWw7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5hY3Rpb25Qcm9ncmVzcyA+PSBfdGhpcy5kdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2xlYW51cCgpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuYnV0dG9uVGV4dCA9IF90aGlzLnRleHQ7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy50cmlnZ2VyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzLmludGVydmFsKTtcclxuICAgIH07XHJcbiAgICBMb25nQ2xpY2tCdXR0b25Db250cm9sbGVyLnByb3RvdHlwZS5zdG9wQWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25Qcm9ncmVzcyA8IHRoaXMuZHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2FybigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYW51cCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMb25nQ2xpY2tCdXR0b25Db250cm9sbGVyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuJGludGVydmFsLmNhbmNlbCh0aGlzLmFjdGlvbkludGVydmFsKTtcclxuICAgICAgICB0aGlzLmFjdGlvblByb2dyZXNzID0gMDtcclxuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIExvbmdDbGlja0J1dHRvbkNvbnRyb2xsZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JqZWN0VXRpbGl0eS5pc051bGxPckVtcHR5KHRoaXMub25TaG9ydENsaWNrVGV4dCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uVGV4dCA9IHRoaXMub25TaG9ydENsaWNrVGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTG9uZ0NsaWNrQnV0dG9uQ29udHJvbGxlci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICghdGhpcy5idXN5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVzeSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmFjdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9taXNlLmlzUHJvbWlzZShyZXN1bHQpICYmIF8uaXNGdW5jdGlvbihyZXN1bHQuZmluYWxseSkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5idXN5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMb25nQ2xpY2tCdXR0b25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJHRpbWVvdXQnLCBfX29iamVjdC5zZXJ2aWNlTmFtZSwgX19wcm9taXNlLnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBMb25nQ2xpY2tCdXR0b25Db250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkxvbmdDbGlja0J1dHRvbkNvbnRyb2xsZXIgPSBMb25nQ2xpY2tCdXR0b25Db250cm9sbGVyO1xyXG5mdW5jdGlvbiBsb25nQ2xpY2tCdXR0b24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vbG9uZ0NsaWNrQnV0dG9uLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2J1dHRvbicsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgYWN0aW9uOiAnJicsXHJcbiAgICAgICAgICAgIHRleHQ6ICdAJyxcclxuICAgICAgICAgICAgb25TaG9ydENsaWNrVGV4dDogJ0AnLFxyXG4gICAgICAgICAgICBpY29uOiAnQCcsXHJcbiAgICAgICAgICAgIGJ1c3k6ICc9PycsXHJcbiAgICAgICAgICAgIHJpZ2h0QWxpZ25lZDogJz0/JyxcclxuICAgICAgICAgICAgdHlwZTogJ0AnLFxyXG4gICAgICAgICAgICBuZ0Rpc2FibGVkOiAnPT8nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fb2JqZWN0Lm1vZHVsZU5hbWVdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIGxvbmdDbGlja0J1dHRvbilcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIExvbmdDbGlja0J1dHRvbkNvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb25nQ2xpY2tCdXR0b24uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL2xvbmdDbGlja0J1dHRvbi9sb25nQ2xpY2tCdXR0b24uanNcbiAqKiBtb2R1bGUgaWQgPSAxMTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJsb25nLWNsaWNrLWJ1dHRvblxcXCI+XFxyXFxuXFx0PGJ1dHRvbiBpZD1cXFwiYWN0aW9uQnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi17e2J1dHRvbi50eXBlfX0ge3tidXR0b24uc2l6ZX19XFxcIiBuZy1tb3VzZWRvd249XFxcImJ1dHRvbi5zdGFydEFjdGlvbigpXFxcIiBuZy1tb3VzZWxlYXZlPVxcXCJidXR0b24uc3RvcEFjdGlvbigpXFxcIiBuZy1tb3VzZXVwPVxcXCJidXR0b24uc3RvcEFjdGlvbigpXFxcIiBuZy1kaXNhYmxlZD1cXFwiYnV0dG9uLmJ1c3kgfHwgYnV0dG9uLm5nRGlzYWJsZWRcXFwiPlxcclxcblxcdFxcdDxybC1idXN5IGxvYWRpbmc9XFxcImJ1dHRvbi5idXN5XFxcIiBuZy1pZj1cXFwiYnV0dG9uLnJpZ2h0QWxpZ25lZFxcXCI+PC9ybC1idXN5PlxcclxcblxcdFxcdDxpIG5nLXNob3c9XFxcImJ1dHRvbi5pY29uICE9IG51bGxcXFwiIGNsYXNzPVxcXCJmYSBmYS17e2J1dHRvbi5pY29ufX1cXFwiPjwvaT4ge3tidXR0b24uYnV0dG9uVGV4dH19XFxyXFxuXFx0XFx0PHJsLWJ1c3kgbG9hZGluZz1cXFwiYnV0dG9uLmJ1c3lcXFwiIG5nLWlmPVxcXCIhYnV0dG9uLnJpZ2h0QWxpZ25lZFxcXCI+PC9ybC1idXN5PlxcclxcblxcdDwvYnV0dG9uPlxcclxcblxcdDxybC1yYXRpbmctYmFyIG5nLWlmPVxcXCJidXR0b24uYWN0aXZlXFxcIiB3aWR0aD1cXFwiYnV0dG9uLndpZHRoXFxcIiBoZWlnaHQ9XFxcIjVcXFwiIG1pbj1cXFwiMFxcXCIgbWF4PVxcXCJidXR0b24uZHVyYXRpb25cXFwiXFxyXFxuXFx0XFx0XFx0XFx0dmFsdWU9XFxcImJ1dHRvbi5hY3Rpb25Qcm9ncmVzc1xcXCIgYmFja2dyb3VuZD1cXFwidHJhbnNwYXJlbnRcXFwiPjwvcmwtcmF0aW5nLWJhcj5cXHJcXG48L2Rpdj5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9sb25nQ2xpY2tCdXR0b24vbG9uZ0NsaWNrQnV0dG9uLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSAxMTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG52YXIganF1ZXJ5X3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2pxdWVyeS9qcXVlcnkuc2VydmljZScpO1xyXG52YXIgbWVzc2FnZUxvZ19zZXJ2aWNlXzEgPSByZXF1aXJlKCcuL21lc3NhZ2VMb2cuc2VydmljZScpO1xyXG52YXIgbWVzc2FnZUxvZ19kaXJlY3RpdmVfMSA9IHJlcXVpcmUoJy4vbWVzc2FnZUxvZy5kaXJlY3RpdmUnKTtcclxudmFyIGVkaXRhYmxlTWVzc2FnZUxvZ18xID0gcmVxdWlyZSgnLi9lZGl0YWJsZU1lc3NhZ2VMb2cnKTtcclxudmFyIHRlbXBsYXRlTG9hZGVyX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL3RlbXBsYXRlTG9hZGVyL3RlbXBsYXRlTG9hZGVyLnNlcnZpY2UnKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9tZXNzYWdlTG9nLnNlcnZpY2UnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vbWVzc2FnZUxvZy5kaXJlY3RpdmUnKSk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLm1lc3NhZ2VMb2cnO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtfX29iamVjdC5tb2R1bGVOYW1lLCBqcXVlcnlfc2VydmljZV8xLm1vZHVsZU5hbWUsIHRlbXBsYXRlTG9hZGVyX3NlcnZpY2VfMS5tb2R1bGVOYW1lXSlcclxuICAgIC5mYWN0b3J5KG1lc3NhZ2VMb2dfc2VydmljZV8xLmZhY3RvcnlOYW1lLCBtZXNzYWdlTG9nX3NlcnZpY2VfMS5tZXNzYWdlTG9nRmFjdG9yeSlcclxuICAgIC5kaXJlY3RpdmUobWVzc2FnZUxvZ19kaXJlY3RpdmVfMS5kaXJlY3RpdmVOYW1lLCBtZXNzYWdlTG9nX2RpcmVjdGl2ZV8xLm1lc3NhZ2VMb2cpXHJcbiAgICAuY29udHJvbGxlcihtZXNzYWdlTG9nX2RpcmVjdGl2ZV8xLmNvbnRyb2xsZXJOYW1lLCBtZXNzYWdlTG9nX2RpcmVjdGl2ZV8xLk1lc3NhZ2VMb2dDb250cm9sbGVyKVxyXG4gICAgLmRpcmVjdGl2ZShlZGl0YWJsZU1lc3NhZ2VMb2dfMS5kaXJlY3RpdmVOYW1lLCBlZGl0YWJsZU1lc3NhZ2VMb2dfMS5lZGl0YWJsZU1lc3NhZ2VMb2cpXHJcbiAgICAuY29udHJvbGxlcihlZGl0YWJsZU1lc3NhZ2VMb2dfMS5jb250cm9sbGVyTmFtZSwgZWRpdGFibGVNZXNzYWdlTG9nXzEuRWRpdGFibGVNZXNzYWdlTG9nQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VMb2cubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9tZXNzYWdlTG9nL21lc3NhZ2VMb2cubW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gMTE4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbmV4cG9ydHMuZmFjdG9yeU5hbWUgPSAnbWVzc2FnZUxvZyc7XHJcbmV4cG9ydHMuZGVmYXVsdFBhZ2VTaXplID0gMTA7XHJcbnZhciBNZXNzYWdlTG9nID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1lc3NhZ2VMb2coKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhcnRpbmdNZXNzYWdlID0gMDtcclxuICAgICAgICB0aGlzLl9oYXNGb3J3YXJkTWVzc2FnZXMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9oYXNCYWNrd2FyZE1lc3NhZ2VzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fcGFnZVNpemUgPSBleHBvcnRzLmRlZmF1bHRQYWdlU2l6ZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNzYWdlTG9nLnByb3RvdHlwZSwgXCJwYWdlU2l6ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYWdlU2l6ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qIHRzbGludDpkaXNhYmxlICovXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFnZVNpemUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50UGFnZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc3NhZ2VMb2cucHJvdG90eXBlLCBcImhhc0ZvcndhcmRNZXNzYWdlc1wiLCB7XHJcbiAgICAgICAgLyogdHNsaW50OmVuYWJsZSAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzRm9yd2FyZE1lc3NhZ2VzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc3NhZ2VMb2cucHJvdG90eXBlLCBcImhhc0JhY2t3YXJkTWVzc2FnZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzQmFja3dhcmRNZXNzYWdlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNzYWdlTG9nLnByb3RvdHlwZSwgXCJkYXRhU2VydmljZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhU2VydmljZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qIHRzbGludDpkaXNhYmxlICovXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YVNlcnZpY2UgPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZU1lc3NhZ2VzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VycmVudFBhZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyogdHNsaW50OmVuYWJsZSAqL1xyXG4gICAgTWVzc2FnZUxvZy5wcm90b3R5cGUuYWRkTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5zYXZlTWVzc2FnZShtZXNzYWdlKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZ2V0VG9wUGFnZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE1lc3NhZ2VMb2cucHJvdG90eXBlLmRlbGV0ZU1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UuZGVsZXRlTWVzc2FnZShtZXNzYWdlKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE1lc3NhZ2VMb2cucHJvdG90eXBlLmdldE5leHRQYWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5oYXNGb3J3YXJkTWVzc2FnZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRTdGFydGluZ01lc3NhZ2UgKz0gdGhpcy5wYWdlU2l6ZTtcclxuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVDdXJyZW50UGFnZSgpO1xyXG4gICAgfTtcclxuICAgIE1lc3NhZ2VMb2cucHJvdG90eXBlLmdldFByZXZpb3VzUGFnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzQmFja3dhcmRNZXNzYWdlcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3VycmVudFN0YXJ0aW5nTWVzc2FnZSAtPSB0aGlzLnBhZ2VTaXplO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdGFydGluZ01lc3NhZ2UgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0YXJ0aW5nTWVzc2FnZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUN1cnJlbnRQYWdlKCk7XHJcbiAgICB9O1xyXG4gICAgTWVzc2FnZUxvZy5wcm90b3R5cGUuZ2V0VG9wUGFnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTdGFydGluZ01lc3NhZ2UgPSAwO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUN1cnJlbnRQYWdlKCk7XHJcbiAgICB9O1xyXG4gICAgTWVzc2FnZUxvZy5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVDdXJyZW50UGFnZSgpO1xyXG4gICAgfTtcclxuICAgIE1lc3NhZ2VMb2cucHJvdG90eXBlLnVwZGF0ZUN1cnJlbnRQYWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNlcnZpY2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5nZXRNZXNzYWdlcyh0aGlzLmN1cnJlbnRTdGFydGluZ01lc3NhZ2UsIHRoaXMucGFnZVNpemUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBfdGhpcy52aXNpYmxlTWVzc2FnZXMgPSByZXN1bHQubWVzc2FnZXM7XHJcbiAgICAgICAgICAgIF90aGlzLl9oYXNGb3J3YXJkTWVzc2FnZXMgPSByZXN1bHQuaGFzTW9yZU1lc3NhZ2VzO1xyXG4gICAgICAgICAgICBfdGhpcy5faGFzQmFja3dhcmRNZXNzYWdlcyA9IChfdGhpcy5jdXJyZW50U3RhcnRpbmdNZXNzYWdlID4gMCk7XHJcbiAgICAgICAgICAgIF90aGlzLmJ1c3kgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWVzc2FnZUxvZztcclxufSgpKTtcclxuZXhwb3J0cy5NZXNzYWdlTG9nID0gTWVzc2FnZUxvZztcclxuZnVuY3Rpb24gbWVzc2FnZUxvZ0ZhY3RvcnkoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEluc3RhbmNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWVzc2FnZUxvZygpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMubWVzc2FnZUxvZ0ZhY3RvcnkgPSBtZXNzYWdlTG9nRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZUxvZy5zZXJ2aWNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9tZXNzYWdlTG9nL21lc3NhZ2VMb2cuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDExOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBqcXVlcnlfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvanF1ZXJ5L2pxdWVyeS5zZXJ2aWNlJyk7XHJcbnZhciBtZXNzYWdlTG9nX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4vbWVzc2FnZUxvZy5zZXJ2aWNlJyk7XHJcbnZhciB0ZW1wbGF0ZUxvYWRlcl9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy90ZW1wbGF0ZUxvYWRlci90ZW1wbGF0ZUxvYWRlci5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybE1lc3NhZ2VMb2cnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ01lc3NhZ2VMb2dDb250cm9sbGVyJztcclxudmFyIE1lc3NhZ2VMb2dDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1lc3NhZ2VMb2dDb250cm9sbGVyKCRzY29wZSwgbWVzc2FnZUxvZ0ZhY3RvcnkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUxvZyA9IHRoaXMubWVzc2FnZUxvZ0JpbmRpbmcgfHwgbWVzc2FnZUxvZ0ZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm1lc3NhZ2VMb2cudmlzaWJsZU1lc3NhZ2VzOyB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgX3RoaXMubWVzc2FnZXMgPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm1lc3NhZ2VMb2cuaGFzRm9yd2FyZE1lc3NhZ2VzOyB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgX3RoaXMuaGFzTmV4dFBhZ2UgPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm1lc3NhZ2VMb2cuaGFzQmFja3dhcmRNZXNzYWdlczsgfSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmhhc1ByZXZpb3VzUGFnZSA9IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubWVzc2FnZUxvZy5idXN5OyB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9hZGluZ0luaXRpYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZXJ2aWNlOyB9LCBmdW5jdGlvbiAoc2VydmljZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5tZXNzYWdlTG9nLmRhdGFTZXJ2aWNlID0gc2VydmljZTtcclxuICAgICAgICAgICAgX3RoaXMubG9hZGluZ0luaXRpYWwgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUxvZy5wYWdlU2l6ZSA9IHRoaXMucGFnZVNpemUgIT0gbnVsbCA/IHRoaXMucGFnZVNpemUgOiA4O1xyXG4gICAgfVxyXG4gICAgTWVzc2FnZUxvZ0NvbnRyb2xsZXIucHJvdG90eXBlLmdldEVudHJ5U2VsZWN0b3IgPSBmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICBpZiAoXy5pc1N0cmluZyh0aGlzLnNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnlbdGhpcy5zZWxlY3Rvcl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKF8uaXNGdW5jdGlvbih0aGlzLnNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RvcihlbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1lc3NhZ2VMb2dDb250cm9sbGVyLnByb3RvdHlwZS5nZXRPbGRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlTG9nLmdldE5leHRQYWdlKCk7XHJcbiAgICB9O1xyXG4gICAgTWVzc2FnZUxvZ0NvbnRyb2xsZXIucHJvdG90eXBlLmdldFRvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlTG9nLmdldFRvcFBhZ2UoKTtcclxuICAgIH07XHJcbiAgICBNZXNzYWdlTG9nQ29udHJvbGxlci5wcm90b3R5cGUuY2FuRGVsZXRlRW50cnkgPSBmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW5EZWxldGUgJiYgKHRoaXMuY3VycmVudFVzZXIgPT0gbnVsbCB8fCB0aGlzLmN1cnJlbnRVc2VyLmlkID09IGVudHJ5LmNyZWF0ZWRCeS5pZCk7XHJcbiAgICB9O1xyXG4gICAgTWVzc2FnZUxvZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgbWVzc2FnZUxvZ19zZXJ2aWNlXzEuZmFjdG9yeU5hbWVdO1xyXG4gICAgcmV0dXJuIE1lc3NhZ2VMb2dDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLk1lc3NhZ2VMb2dDb250cm9sbGVyID0gTWVzc2FnZUxvZ0NvbnRyb2xsZXI7XHJcbm1lc3NhZ2VMb2cuJGluamVjdCA9IFtcclxuICAgICckaW50ZXJwb2xhdGUnLFxyXG4gICAganF1ZXJ5X3NlcnZpY2VfMS5zZXJ2aWNlTmFtZSxcclxuICAgIHRlbXBsYXRlTG9hZGVyX3NlcnZpY2VfMS5zZXJ2aWNlTmFtZSxcclxuICAgIF9fb2JqZWN0LnNlcnZpY2VOYW1lLFxyXG5dO1xyXG5mdW5jdGlvbiBtZXNzYWdlTG9nKCRpbnRlcnBvbGF0ZSwganF1ZXJ5LCB0ZW1wbGF0ZUxvYWRlciwgb2JqZWN0KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vbWVzc2FnZUxvZy5odG1sJyksXHJcbiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2xvZycsXHJcbiAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgbWVzc2FnZURhdGE6IFwiPVwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBzZXJ2aWNlOiAnPScsXHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnPScsXHJcbiAgICAgICAgICAgIHBhZ2VTaXplOiAnPScsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VMb2dCaW5kaW5nOiAnPW1lc3NhZ2VMb2cnLFxyXG4gICAgICAgICAgICBtZXNzYWdlQXM6IFwiQFwiLFxyXG4gICAgICAgICAgICBjdXJyZW50VXNlcjogJz0/JyxcclxuICAgICAgICAgICAgY2FuRGVsZXRlOiAnPT8nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIudGVtcGxhdGVzID0gdGVtcGxhdGVMb2FkZXIubG9hZFRlbXBsYXRlcyh0cmFuc2NsdWRlKS50ZW1wbGF0ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLm1lc3NhZ2VMb2cgPSBtZXNzYWdlTG9nO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlTG9nLmRpcmVjdGl2ZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvbWVzc2FnZUxvZy9tZXNzYWdlTG9nLmRpcmVjdGl2ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEyMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+XFxyXFxuXFx0PHJsLWJ1c3kgbG9hZGluZz1cXFwibG9nLmxvYWRpbmdJbml0aWFsXFxcIiBzaXplPVxcXCIyeFxcXCI+PC9ybC1idXN5PlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImNvbnRlbnQtZ3JvdXBcXFwiIG5nLXJlcGVhdD1cXFwiZW50cnkgaW4gbG9nLm1lc3NhZ2VzXFxcIiBybC1hbGlhcz1cXFwiZW50cnkgYXMge3tsb2cubWVzc2FnZUFzfX1cXFwiPlxcclxcblxcdFxcdDxybC1nZW5lcmljLWNvbnRhaW5lciBzZWxlY3Rvcj1cXFwibG9nLmdldEVudHJ5U2VsZWN0b3IoZW50cnkpXFxcIiB0ZW1wbGF0ZXM9XFxcImxvZy50ZW1wbGF0ZXNcXFwiPlxcclxcblxcdFxcdFxcdDx0ZW1wbGF0ZSBkZWZhdWx0PlxcclxcblxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcIm1lc3NhZ2UtYm9keVxcXCI+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwibWVzc2FnZS1jb250ZW50XFxcIj5cXHJcXG5cXHRcXHRcXHRcXHRcXHRcXHQ8ZGl2IG5nLWJpbmQtaHRtbD1cXFwiZW50cnkubWVzc2FnZVxcXCI+PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PHNwYW4gY2xhc3M9XFxcIm1lc3NhZ2UtYnV0dG9uXFxcIiBuZy1pZj1cXFwibG9nLmNhbkRlbGV0ZUVudHJ5KGVudHJ5KVxcXCI+XFxyXFxuXFx0XFx0XFx0XFx0XFx0XFx0PHJsLWJ1dHRvbi1hc3luYyB0eXBlPVxcXCJtZXNzYWdlLWRlbGV0ZS1idXR0b24gZmxhdFxcXCIgYWN0aW9uPVxcXCJsb2cubWVzc2FnZUxvZy5kZWxldGVNZXNzYWdlKGVudHJ5KVxcXCIgc2l6ZT1cXFwieHNcXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1yZW1vdmVcXFwiPjwvaT48L3JsLWJ1dHRvbi1hc3luYz5cXHJcXG5cXHRcXHRcXHRcXHRcXHQ8L3NwYW4+XFxyXFxuXFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwibWVzc2FnZS1ieWxpbmVcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImJ5bGluZVxcXCI+e3tlbnRyeS5jcmVhdGVkQnkubmFtZX19PC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiYnlsaW5lXFxcIj57e2VudHJ5LmNyZWF0ZWREYXRlIHwgZGF0ZTonc2hvcnQnfX0gVVRDPC9kaXY+XFxyXFxuXFx0XFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0XFx0PC90ZW1wbGF0ZT5cXHJcXG5cXHRcXHQ8L3JsLWdlbmVyaWMtY29udGFpbmVyPlxcclxcblxcdDwvZGl2PlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImNvbnRlbnQtZ3JvdXBcXFwiIG5nLWlmPVxcXCIobG9nLm1lc3NhZ2VzIHwgaXNFbXB0eSkgJiYgIWxvZy5sb2FkaW5nSW5pdGlhbFxcXCI+Tm8gZXhpc3RpbmcgbWVzc2FnZXM8L2Rpdj5cXHJcXG5cXHQ8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcImNvbC14cy0xMlxcXCI+XFxyXFxuXFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiPlxcclxcblxcdFxcdFxcdFxcdDxybC1idXR0b24tYXN5bmMgYWN0aW9uPVxcXCJsb2cuZ2V0VG9wKClcXFwiIG5nLWRpc2FibGVkPVxcXCJsb2cubG9hZGluZ1xcXCIgYnV0dG9uLXJpZ2h0LWFsaWduZWQ9XFxcInRydWVcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdDxzcGFuIG5nLXNob3c9XFxcImxvZy5oYXNQcmV2aW91c1BhZ2VcXFwiPlRvcCA8aSBjbGFzcz1cXFwiZmEgZmEtY2FyZXQtdXBcXFwiPjwvaT48L3NwYW4+XFxyXFxuXFx0XFx0XFx0XFx0XFx0PHNwYW4gbmctaGlkZT1cXFwibG9nLmhhc1ByZXZpb3VzUGFnZVxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLXJlZnJlc2hcXFwiPjwvaT4gUmVmcmVzaDwvc3Bhbj5cXHJcXG5cXHRcXHRcXHRcXHQ8L3JsLWJ1dHRvbi1hc3luYz5cXHJcXG5cXHRcXHRcXHRcXHQ8cmwtYnV0dG9uLWFzeW5jIG5nLWRpc2FibGVkPVxcXCJsb2cuaGFzTmV4dFBhZ2UgPT0gZmFsc2UgfHwgbG9nLmxvYWRpbmdcXFwiIGFjdGlvbj1cXFwibG9nLmdldE9sZGVyKClcXFwiPlxcclxcblxcdFxcdFxcdFxcdFxcdE9sZGVyIDxpIGNsYXNzPVxcXCJmYSBmYS1jYXJldC1yaWdodFxcXCI+PC9pPlxcclxcblxcdFxcdFxcdFxcdDwvcmwtYnV0dG9uLWFzeW5jPlxcclxcblxcdFxcdFxcdDwvZGl2PlxcclxcblxcdFxcdDwvZGl2PlxcclxcblxcdDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL21lc3NhZ2VMb2cvbWVzc2FnZUxvZy5odG1sXG4gKiogbW9kdWxlIGlkID0gMTIxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBtZXNzYWdlTG9nX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4vbWVzc2FnZUxvZy5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybEVkaXRhYmxlTWVzc2FnZUxvZyc7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnRWRpdGFibGVNZXNzYWdlTG9nQ29udHJvbGxlcic7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbjtcclxudmFyIEVkaXRhYmxlTWVzc2FnZUxvZ0NvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRWRpdGFibGVNZXNzYWdlTG9nQ29udHJvbGxlcigkc2NvcGUsIG1lc3NhZ2VMb2dGYWN0b3J5LCBvYmplY3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUxvZ1NlcnZpY2UgPSBtZXNzYWdlTG9nRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubWVzc2FnZUxvZ1NlcnZpY2UuYnVzeTsgfSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmJ1c3kgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNhdmluZ01lc3NhZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmJ1c3kgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBFZGl0YWJsZU1lc3NhZ2VMb2dDb250cm9sbGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JqZWN0LmlzTnVsbE9yV2hpdGVzcGFjZSh0aGlzLm5ld01lc3NhZ2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNhdmluZ01lc3NhZ2UgPSB0cnVlO1xyXG4gICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5uZXdNZXNzYWdlO1xyXG4gICAgICAgIHRoaXMubmV3TWVzc2FnZSA9ICcnO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VMb2dTZXJ2aWNlLmFkZE1lc3NhZ2UoeyBtZXNzYWdlOiBtZXNzYWdlIH0pO1xyXG4gICAgfTtcclxuICAgIEVkaXRhYmxlTWVzc2FnZUxvZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgbWVzc2FnZUxvZ19zZXJ2aWNlXzEuZmFjdG9yeU5hbWUsIF9fb2JqZWN0LnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBFZGl0YWJsZU1lc3NhZ2VMb2dDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkVkaXRhYmxlTWVzc2FnZUxvZ0NvbnRyb2xsZXIgPSBFZGl0YWJsZU1lc3NhZ2VMb2dDb250cm9sbGVyO1xyXG5mdW5jdGlvbiBlZGl0YWJsZU1lc3NhZ2VMb2coKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiXFxuXFx0XFx0XFx0PGZvcm0gbmctc3VibWl0PVxcXCJsb2cuYWRkKClcXFwiPlxcblxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj5cXG5cXHRcXHRcXHRcXHRcXHQ8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgbmctbW9kZWw9XFxcImxvZy5uZXdNZXNzYWdlXFxcIiBwbGFjZWhvbGRlcj1cXFwiRW50ZXIgbG9nIG1lc3NhZ2VcXFwiIC8+XFxuXFx0XFx0XFx0XFx0XFx0PHNwYW4gY2xhc3M9XFxcImlucHV0LWdyb3VwLWJ0blxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiB0eXBlPVxcXCJzdWJtaXRcXFwiIG5nLWRpc2FibGVkPVxcXCJsb2cuYnVzeVxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PHJsLWJ1c3kgbG9hZGluZz1cXFwibG9nLnNhdmluZ01lc3NhZ2VcXFwiPjwvcmwtYnVzeT4gQWRkXFxuXFx0XFx0XFx0XFx0XFx0XFx0PC9idXR0b24+XFxuXFx0XFx0XFx0XFx0XFx0PC9zcGFuPlxcblxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcIm1lc3NhZ2UtbG9nXFxcIj5cXG5cXHRcXHRcXHRcXHRcXHQ8cmwtbWVzc2FnZS1sb2cgc2VydmljZT1cXFwibG9nLnNlcnZpY2VcXFwiIHBhZ2Utc2l6ZT1cXFwibG9nLnBhZ2VTaXplXFxcIiBtZXNzYWdlLWxvZz1cXFwibG9nLm1lc3NhZ2VMb2dTZXJ2aWNlXFxcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdGN1cnJlbnQtdXNlcj1cXFwibG9nLmN1cnJlbnRVc2VyXFxcIiBjYW4tZGVsZXRlPVxcXCJsb2cuY2FuRGVsZXRlXFxcIj48L3JsLW1lc3NhZ2UtbG9nPlxcblxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdDwvZm9ybT5cXG5cXHRcXHRcIixcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2xvZycsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgc2VydmljZTogJz0nLFxyXG4gICAgICAgICAgICBwYWdlU2l6ZTogJz0nLFxyXG4gICAgICAgICAgICBjdXJyZW50VXNlcjogJz0/JyxcclxuICAgICAgICAgICAgY2FuRGVsZXRlOiAnPT8nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuZWRpdGFibGVNZXNzYWdlTG9nID0gZWRpdGFibGVNZXNzYWdlTG9nO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lZGl0YWJsZU1lc3NhZ2VMb2cuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL21lc3NhZ2VMb2cvZWRpdGFibGVNZXNzYWdlTG9nLmpzXG4gKiogbW9kdWxlIGlkID0gMTIyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLm11bHRpU3RlcEluZGljYXRvcic7XHJcbmV4cG9ydHMuZGlyZWN0aXZlTmFtZSA9ICdybE11bHRpU3RlcEluZGljYXRvcic7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnTXVsdGlTdGVwSW5kaWNhdG9yQ29udHJvbGxlcic7XHJcbnZhciBfX29iamVjdCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBNdWx0aVN0ZXBJbmRpY2F0b3JDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE11bHRpU3RlcEluZGljYXRvckNvbnRyb2xsZXIoJHN0YXRlLCAkcSwgb2JqZWN0KSB7XHJcbiAgICAgICAgdGhpcy4kc3RhdGUgPSAkc3RhdGU7XHJcbiAgICAgICAgdGhpcy4kcSA9ICRxO1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIHRoaXMuY29uZmlndXJlU3RlcHMoKTtcclxuICAgIH1cclxuICAgIE11bHRpU3RlcEluZGljYXRvckNvbnRyb2xsZXIucHJvdG90eXBlLm9uQ2xpY2sgPSBmdW5jdGlvbiAoc3RlcCkge1xyXG4gICAgICAgIGlmICghdGhpcy5hbnlMb2FkaW5nKCkpIHtcclxuICAgICAgICAgICAgc3RlcC5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy4kcS53aGVuKHN0ZXAub25DbGljaygpKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0ZXAubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTXVsdGlTdGVwSW5kaWNhdG9yQ29udHJvbGxlci5wcm90b3R5cGUuYW55TG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gXy5zb21lKHRoaXMuc3RlcHMsIGZ1bmN0aW9uIChzdGVwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGVwLmxvYWRpbmc7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTXVsdGlTdGVwSW5kaWNhdG9yQ29udHJvbGxlci5wcm90b3R5cGUuY29uZmlndXJlU3RlcHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBfLmVhY2godGhpcy5zdGVwcywgZnVuY3Rpb24gKHN0ZXApIHtcclxuICAgICAgICAgICAgc3RlcC5oYXNDb3VudCA9IF8uaXNGdW5jdGlvbihzdGVwLmNvdW50KTtcclxuICAgICAgICAgICAgc3RlcC5nZXRDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5nZXRJc0NvbXBsZXRlZChzdGVwKTsgfTtcclxuICAgICAgICAgICAgc3RlcC5nZXRWYWxpZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmdldElzVmFsaWQoc3RlcCk7IH07XHJcbiAgICAgICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKHN0ZXAub25DbGljaykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vYmplY3QuaXNOdWxsT3JXaGl0ZXNwYWNlKHN0ZXAuc3RhdGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ZXAuaW5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RlcC5vbkNsaWNrID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVkaXJlY3RUb1N0YXRlKHN0ZXApOyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy4kc3RhdGUuaW5jbHVkZXMoc3RlcC5zdGF0ZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXAuaXNDdXJyZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBNdWx0aVN0ZXBJbmRpY2F0b3JDb250cm9sbGVyLnByb3RvdHlwZS5yZWRpcmVjdFRvU3RhdGUgPSBmdW5jdGlvbiAoc3RlcCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHN0YXRlLmdvKHN0ZXAuc3RhdGVOYW1lKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuY2xlYXJDdXJyZW50U3RhdGUoKTtcclxuICAgICAgICAgICAgc3RlcC5pc0N1cnJlbnQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE11bHRpU3RlcEluZGljYXRvckNvbnRyb2xsZXIucHJvdG90eXBlLmNsZWFyQ3VycmVudFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLnN0ZXBzLCBmdW5jdGlvbiAoc3RlcCkge1xyXG4gICAgICAgICAgICBzdGVwLmlzQ3VycmVudCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE11bHRpU3RlcEluZGljYXRvckNvbnRyb2xsZXIucHJvdG90eXBlLmdldElzQ29tcGxldGVkID0gZnVuY3Rpb24gKHN0ZXApIHtcclxuICAgICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHN0ZXAuaXNDb21wbGV0ZWQpXHJcbiAgICAgICAgICAgID8gc3RlcC5pc0NvbXBsZXRlZCgpXHJcbiAgICAgICAgICAgIDogc3RlcC5pc0NvbXBsZXRlZDtcclxuICAgIH07XHJcbiAgICBNdWx0aVN0ZXBJbmRpY2F0b3JDb250cm9sbGVyLnByb3RvdHlwZS5zZXRJc0NvbXBsZXRlZCA9IGZ1bmN0aW9uIChzdGVwLCBpc0NvbXBsZXRlZCkge1xyXG4gICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKHN0ZXAuaXNDb21wbGV0ZWQpKSB7XHJcbiAgICAgICAgICAgIHN0ZXAuaXNDb21wbGV0ZWQgPSBpc0NvbXBsZXRlZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTXVsdGlTdGVwSW5kaWNhdG9yQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0SXNWYWxpZCA9IGZ1bmN0aW9uIChzdGVwKSB7XHJcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihzdGVwLmlzVmFsaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGVwLmlzVmFsaWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIV8uaXNVbmRlZmluZWQoc3RlcC5pc1ZhbGlkICE9IG51bGwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGVwLmlzVmFsaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTXVsdGlTdGVwSW5kaWNhdG9yQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJHEnLCBfX29iamVjdC5zZXJ2aWNlTmFtZV07XHJcbiAgICByZXR1cm4gTXVsdGlTdGVwSW5kaWNhdG9yQ29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5NdWx0aVN0ZXBJbmRpY2F0b3JDb250cm9sbGVyID0gTXVsdGlTdGVwSW5kaWNhdG9yQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gbXVsdGlTdGVwSW5kaWNhdG9yKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL211bHRpU3RlcEluZGljYXRvci5odG1sJyksXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICdicmVhZGNydW1iJyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBzdGVwczogJz0nLFxyXG4gICAgICAgICAgICBudW1iZXJlZDogJz0nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fb2JqZWN0Lm1vZHVsZU5hbWVdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIG11bHRpU3RlcEluZGljYXRvcilcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIE11bHRpU3RlcEluZGljYXRvckNvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aVN0ZXBJbmRpY2F0b3IuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL211bHRpU3RlcEluZGljYXRvci9tdWx0aVN0ZXBJbmRpY2F0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJtdWx0aS1zdGVwIGNoZWNrZWRcXFwiIG5nLWNsYXNzPVxcXCJ7ICdudW1iZXJlZCc6IGJyZWFkY3J1bWIubnVtYmVyZWQgfVxcXCI+XFxyXFxuXFx0PG9sPlxcclxcblxcdFxcdDxsaSBuZy1yZXBlYXQ9XFxcInN0ZXAgaW4gYnJlYWRjcnVtYi5zdGVwc1xcXCIgbmctY2xpY2s9XFxcImJyZWFkY3J1bWIub25DbGljayhzdGVwKVxcXCJcXHJcXG5cXHRcXHRcXHRuZy1jbGFzcz1cXFwieyAnY29tcGxldGVkJzogc3RlcC5nZXRDb21wbGV0ZWQoKSwgJ2N1cnJlbnQnOiBzdGVwLmlzQ3VycmVudCwgJ2FjdGl2ZSc6ICFzdGVwLmluYWN0aXZlICYmICFicmVhZGNydW1iLmFueUxvYWRpbmcoKSB9XFxcIj5cXHJcXG5cXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJ3cmFwXFxcIj5cXHJcXG5cXHRcXHRcXHRcXHQ8cCBjbGFzcz1cXFwiYmFkZ2VcXFwiIG5nLXNob3c9XFxcInN0ZXAuaGFzQ291bnRcXFwiPnt7c3RlcC5jb3VudCgpfX08L3A+XFxyXFxuXFx0XFx0XFx0XFx0PHAgY2xhc3M9XFxcImVycm9yXFxcIiBuZy1pZj1cXFwiIXN0ZXAuZ2V0VmFsaWQoKVxcXCI+PC9wPlxcclxcblxcdFxcdFxcdFxcdDxwIGNsYXNzPVxcXCJ0aXRsZVxcXCI+e3tzdGVwLnRpdGxlfX0gPHJsLWJ1c3kgbG9hZGluZz1cXFwic3RlcC5sb2FkaW5nXFxcIj48L3JsLWJ1c3k+PC9wPlxcclxcblxcdFxcdFxcdFxcdDxwIGNsYXNzPVxcXCJzdWJ0aXRsZVxcXCI+e3tzdGVwLnN1YnRpdGxlfX08L3A+XFxyXFxuXFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0PC9saT5cXHJcXG5cXHQ8L29sPlxcclxcbjwvZGl2PlwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL211bHRpU3RlcEluZGljYXRvci9tdWx0aVN0ZXBJbmRpY2F0b3IuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDEyNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fb2JqZWN0ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLm9iamVjdDtcclxudmFyIHJhZGlvR3JvdXBfMSA9IHJlcXVpcmUoJy4vcmFkaW9Hcm91cCcpO1xyXG5leHBvcnRzLnJhZGlvR3JvdXBEaXJlY3RpdmVOYW1lID0gcmFkaW9Hcm91cF8xLmRpcmVjdGl2ZU5hbWU7XHJcbmV4cG9ydHMucmFkaW9Hcm91cCA9IHJhZGlvR3JvdXBfMS5yYWRpb0dyb3VwO1xyXG5leHBvcnRzLnJhZGlvR3JvdXBDb250cm9sbGVyTmFtZSA9IHJhZGlvR3JvdXBfMS5jb250cm9sbGVyTmFtZTtcclxuZXhwb3J0cy5SYWRpb0dyb3VwQ29udHJvbGxlciA9IHJhZGlvR3JvdXBfMS5SYWRpb0dyb3VwQ29udHJvbGxlcjtcclxudmFyIHJhZGlvXzEgPSByZXF1aXJlKCcuL3JhZGlvJyk7XHJcbmV4cG9ydHMucmFkaW9EaXJlY3RpdmVOYW1lID0gcmFkaW9fMS5kaXJlY3RpdmVOYW1lO1xyXG5leHBvcnRzLnJhZGlvID0gcmFkaW9fMS5yYWRpbztcclxuZXhwb3J0cy5yYWRpb0NvbnRyb2xsZXJOYW1lID0gcmFkaW9fMS5jb250cm9sbGVyTmFtZTtcclxuZXhwb3J0cy5SYWRpb0NvbnRyb2xsZXIgPSByYWRpb18xLlJhZGlvQ29udHJvbGxlcjtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsMjEuY29tcG9uZW50cy5yYWRpbyc7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fb2JqZWN0Lm1vZHVsZU5hbWVdKVxyXG4gICAgLmRpcmVjdGl2ZShyYWRpb0dyb3VwXzEuZGlyZWN0aXZlTmFtZSwgcmFkaW9Hcm91cF8xLnJhZGlvR3JvdXApXHJcbiAgICAuY29udHJvbGxlcihyYWRpb0dyb3VwXzEuY29udHJvbGxlck5hbWUsIHJhZGlvR3JvdXBfMS5SYWRpb0dyb3VwQ29udHJvbGxlcilcclxuICAgIC5kaXJlY3RpdmUocmFkaW9fMS5kaXJlY3RpdmVOYW1lLCByYWRpb18xLnJhZGlvKVxyXG4gICAgLmNvbnRyb2xsZXIocmFkaW9fMS5jb250cm9sbGVyTmFtZSwgcmFkaW9fMS5SYWRpb0NvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWRpby5tb2R1bGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3JhZGlvL3JhZGlvLm1vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEyNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxSYWRpb0dyb3VwJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdSYWRpb0dyb3VwQ29udHJvbGxlcic7XHJcbnZhciBSYWRpb0dyb3VwID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJhZGlvR3JvdXAoJHNjb3BlLCBuZ01vZGVsLCBuYW1lKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gbmdNb2RlbC4kdmlld1ZhbHVlOyB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgX3RoaXMuc2VsZWN0aW9uID0gdmFsdWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZWxlY3Rpb247IH0sIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJhZGlvR3JvdXA7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUmFkaW9Hcm91cCA9IFJhZGlvR3JvdXA7XHJcbnZhciBSYWRpb0dyb3VwQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSYWRpb0dyb3VwQ29udHJvbGxlcigkc2NvcGUsICRhdHRycywgJGVsZW1lbnQsIG9iamVjdCkge1xyXG4gICAgICAgIHZhciBuYW1lO1xyXG4gICAgICAgIGlmICghb2JqZWN0LmlzTnVsbE9yV2hpdGVzcGFjZSgkYXR0cnMucmxSYWRpb0dyb3VwKSkge1xyXG4gICAgICAgICAgICBuYW1lID0gJGF0dHJzLnJsUmFkaW9Hcm91cDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIW9iamVjdC5pc051bGxPcldoaXRlc3BhY2UoJGF0dHJzLm5hbWUpKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSAkYXR0cnMubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSAnUmFkaW9Hcm91cCcgKyB0aGlzLmdldE5leHRJZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmdNb2RlbCA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcclxuICAgICAgICB0aGlzLmdyb3VwID0gbmV3IFJhZGlvR3JvdXAoJHNjb3BlLCBuZ01vZGVsLCBuYW1lKTtcclxuICAgIH1cclxuICAgIFJhZGlvR3JvdXBDb250cm9sbGVyLnByb3RvdHlwZS5yZWdpc3RlckJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ncm91cDtcclxuICAgIH07XHJcbiAgICBSYWRpb0dyb3VwQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0TmV4dElkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuZXh0SWQgPSBSYWRpb0dyb3VwQ29udHJvbGxlci5uZXh0SWQudG9TdHJpbmcoKTtcclxuICAgICAgICBSYWRpb0dyb3VwQ29udHJvbGxlci5uZXh0SWQrKztcclxuICAgICAgICByZXR1cm4gbmV4dElkO1xyXG4gICAgfTtcclxuICAgIFJhZGlvR3JvdXBDb250cm9sbGVyLm5leHRJZCA9IDE7XHJcbiAgICBSYWRpb0dyb3VwQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGF0dHJzJywgJyRlbGVtZW50JywgX19vYmplY3Quc2VydmljZU5hbWVdO1xyXG4gICAgcmV0dXJuIFJhZGlvR3JvdXBDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLlJhZGlvR3JvdXBDb250cm9sbGVyID0gUmFkaW9Hcm91cENvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIHJhZGlvR3JvdXAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnQUUnLFxyXG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnJhZGlvR3JvdXAgPSByYWRpb0dyb3VwO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWRpb0dyb3VwLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9yYWRpby9yYWRpb0dyb3VwLmpzXG4gKiogbW9kdWxlIGlkID0gMTI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciByYWRpb0dyb3VwXzEgPSByZXF1aXJlKCcuL3JhZGlvR3JvdXAnKTtcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsUmFkaW8nO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ1JhZGlvQ29udHJvbGxlcic7XHJcbnZhciBSYWRpb0NvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmFkaW9Db250cm9sbGVyKCRzY29wZSwgJGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgcmFkaW9Hcm91cENvbnRyb2xsZXIgPSAkZWxlbWVudC5jb250cm9sbGVyKCdybFJhZGlvR3JvdXAnKTtcclxuICAgICAgICBpZiAocmFkaW9Hcm91cENvbnRyb2xsZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJhZGlvR3JvdXAgPSByYWRpb0dyb3VwQ29udHJvbGxlci5yZWdpc3RlckJ1dHRvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIG5nTW9kZWwgPSAkZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XHJcbiAgICAgICAgICAgIHRoaXMucmFkaW9Hcm91cCA9IG5ldyByYWRpb0dyb3VwXzEuUmFkaW9Hcm91cCgkc2NvcGUsIG5nTW9kZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJhZGlvQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGVsZW1lbnQnXTtcclxuICAgIHJldHVybiBSYWRpb0NvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUmFkaW9Db250cm9sbGVyID0gUmFkaW9Db250cm9sbGVyO1xyXG5mdW5jdGlvbiByYWRpbygpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICByZXF1aXJlOiBbJz9eXnJsUmFkaW9Hcm91cCcsICc/bmdNb2RlbCddLFxyXG4gICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiXFxuXFx0XFx0XFx0PGxhYmVsPlxcblxcdFxcdFxcdFxcdDxpbnB1dCBpZD1cXFwicmFkaW9cXFwiIHR5cGU9XFxcInJhZGlvXFxcIiBuYW1lPVxcXCJ7e3JhZGlvLnJhZGlvR3JvdXAubmFtZX19XFxcIiBuZy1tb2RlbD1cXFwicmFkaW8ucmFkaW9Hcm91cC5zZWxlY3Rpb25cXFwiIG5nLXZhbHVlPVxcXCJyYWRpby52YWx1ZVxcXCIgLz5cXG5cXHRcXHRcXHRcXHQ8c3BhbiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblxcdFxcdFxcdDwvbGFiZWw+XFxuXFx0XFx0XCIsXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICdyYWRpbycsXHJcbiAgICAgICAgc2NvcGU6IHRydWUsXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICB2YWx1ZTogJz0nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMucmFkaW8gPSByYWRpbztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFkaW8uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3JhZGlvL3JhZGlvLmpzXG4gKiogbW9kdWxlIGlkID0gMTI3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgcmF0aW5nQmFyQmFja2dyb3VuZHNfc2VydmljZV8xID0gcmVxdWlyZSgnLi9yYXRpbmdCYXJCYWNrZ3JvdW5kcy5zZXJ2aWNlJyk7XHJcbnZhciByYXRpbmdCYXJDbGFzc19zZXJ2aWNlXzEgPSByZXF1aXJlKCcuL3JhdGluZ0JhckNsYXNzLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMucmF0aW5nQmFyJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsUmF0aW5nQmFyJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdSYXRpbmdCYXJDb250cm9sbGVyJztcclxudmFyIFJhdGluZ0JhckNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmF0aW5nQmFyQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICAgIHZhciByYXRpbmdCYXJCYWNrZ3JvdW5kcyA9IG5ldyByYXRpbmdCYXJCYWNrZ3JvdW5kc19zZXJ2aWNlXzEuUmF0aW5nQmFyQmFja2dyb3VuZFNlcnZpY2U7XHJcbiAgICAgICAgdGhpcy5yYXRpbmdCYXJDbGFzcyA9IG5ldyByYXRpbmdCYXJDbGFzc19zZXJ2aWNlXzEuUmF0aW5nQmFyQ2xhc3NTZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENsYXNzID0gcmF0aW5nQmFyQmFja2dyb3VuZHMuZ2V0QmFja2dyb3VuZCh0aGlzLmJhY2tncm91bmQpO1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudmFsdWU7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICBfdGhpcy51cGRhdGVWYWx1ZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy50b3RhbFdpZHRoOyB9LCBmdW5jdGlvbiAobmV3V2lkdGgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZGltZW5zaW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBuZXdXaWR0aCArIDIsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IF90aGlzLmhlaWdodCArIDIsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZVZhbHVlKF90aGlzLnZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFJhdGluZ0JhckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNvbmZpZGVuY2VTY29yZSA9IChuZXdWYWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcclxuICAgICAgICB0aGlzLmJhckNsYXNzID0gdGhpcy5yYXRpbmdCYXJDbGFzcy5nZXRDbGFzcyhjb25maWRlbmNlU2NvcmUpO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBNYXRoLnJvdW5kKGNvbmZpZGVuY2VTY29yZSAqIHRoaXMudG90YWxXaWR0aCk7XHJcbiAgICB9O1xyXG4gICAgUmF0aW5nQmFyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuICAgIHJldHVybiBSYXRpbmdCYXJDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLlJhdGluZ0JhckNvbnRyb2xsZXIgPSBSYXRpbmdCYXJDb250cm9sbGVyO1xyXG5mdW5jdGlvbiByYXRpbmdCYXIoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiXFxuXFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwicmF0aW5nLWJhclxcXCI+XFxuXFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwie3tyYXRpbmdCYXIuYmFja2dyb3VuZENsYXNzfX1cXFwiIG5nLWNsYXNzPVxcXCJ7IGVtcHR5OiByYXRpbmdCYXIudmFsdWUgPT0gbWluIH1cXFwiIG5nLXN0eWxlPVxcXCJyYXRpbmdCYXIuZGltZW5zaW9uc1xcXCI+XFxuXFx0XFx0XFx0XFx0XFx0PGRpdiBuZy1jbGFzcz1cXFwicmF0aW5nQmFyLmJhckNsYXNzXFxcIiBuZy1zdHlsZT1cXFwieyB3aWR0aDogcmF0aW5nQmFyLndpZHRoLCBoZWlnaHQ6IHJhdGluZ0Jhci5oZWlnaHQgfVxcXCI+PC9kaXY+XFxuXFx0XFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XCIsXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICdyYXRpbmdCYXInLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIHRvdGFsV2lkdGg6ICc9d2lkdGgnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICc9JyxcclxuICAgICAgICAgICAgdmFsdWU6ICc9JyxcclxuICAgICAgICAgICAgbWluOiAnPScsXHJcbiAgICAgICAgICAgIG1heDogJz0nLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAnPScsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5yYXRpbmdCYXIgPSByYXRpbmdCYXI7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZGlyZWN0aXZlKGV4cG9ydHMuZGlyZWN0aXZlTmFtZSwgcmF0aW5nQmFyKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgUmF0aW5nQmFyQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhdGluZ0Jhci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvcmF0aW5nQmFyL3JhdGluZ0Jhci5qc1xuICoqIG1vZHVsZSBpZCA9IDEyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgUmF0aW5nQmFyQmFja2dyb3VuZFNlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmF0aW5nQmFyQmFja2dyb3VuZFNlcnZpY2UoKSB7XHJcbiAgICAgICAgdGhpcy5zdGFuZGFyZCA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ3N0YW5kYXJkJyxcclxuICAgICAgICAgICAgY2xhc3M6ICdiYWNrZ3JvdW5kJyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZGFyayA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2RhcmsnLFxyXG4gICAgICAgICAgICBjbGFzczogJ2JhY2tncm91bmQtZGFyaycsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnRyYW5zcGFyZW50ID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICAgICAgICBjbGFzczogJ2JhY2tncm91bmQtdHJhbnNwYXJlbnQnLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBSYXRpbmdCYXJCYWNrZ3JvdW5kU2VydmljZS5wcm90b3R5cGUuZ2V0QmFja2dyb3VuZCA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IHRoaXMuZGFyay50eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhcmsuY2xhc3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IHRoaXMudHJhbnNwYXJlbnQudHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BhcmVudC5jbGFzcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YW5kYXJkLmNsYXNzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUmF0aW5nQmFyQmFja2dyb3VuZFNlcnZpY2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUmF0aW5nQmFyQmFja2dyb3VuZFNlcnZpY2UgPSBSYXRpbmdCYXJCYWNrZ3JvdW5kU2VydmljZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmF0aW5nQmFyQmFja2dyb3VuZHMuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvcmF0aW5nQmFyL3JhdGluZ0JhckJhY2tncm91bmRzLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIFJhdGluZ0JhckNsYXNzU2VydmljZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSYXRpbmdCYXJDbGFzc1NlcnZpY2UoKSB7XHJcbiAgICB9XHJcbiAgICBSYXRpbmdCYXJDbGFzc1NlcnZpY2UucHJvdG90eXBlLmdldENsYXNzID0gZnVuY3Rpb24gKGNvbmZpZGVuY2UpIHtcclxuICAgICAgICBpZiAoY29uZmlkZW5jZSA+PSAwLjgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICd2ZXJ5LWhpZ2gnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjb25maWRlbmNlID49IDAuNikge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2hpZ2gnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjb25maWRlbmNlID49IDAuNCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ21lZGl1bSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvbmZpZGVuY2UgPj0gMC4yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnbG93JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAndmVyeS1sb3cnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUmF0aW5nQmFyQ2xhc3NTZXJ2aWNlO1xyXG59KCkpO1xyXG5leHBvcnRzLlJhdGluZ0JhckNsYXNzU2VydmljZSA9IFJhdGluZ0JhckNsYXNzU2VydmljZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmF0aW5nQmFyQ2xhc3Muc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvcmF0aW5nQmFyL3JhdGluZ0JhckNsYXNzLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSAxMzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3MvY29tbW9uanMuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG5yZXF1aXJlKCduZy13aWcvZGlzdC9jc3Mvbmctd2lnLmNzcycpO1xyXG5yZXF1aXJlKCduZy13aWcvZGlzdC9uZy13aWcnKTtcclxucmVxdWlyZSgnLi9lZGl0b3JCdXR0b25zLmNzcycpO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fb2JqZWN0ID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLm9iamVjdDtcclxudmFyIHJpY2hUZXh0RWRpdG9yX2NvbmZpZ18xID0gcmVxdWlyZSgnLi9yaWNoVGV4dEVkaXRvci5jb25maWcnKTtcclxudmFyIGhlYWRlckJ1dHRvbl8xID0gcmVxdWlyZSgnLi9oZWFkZXJCdXR0b24nKTtcclxudmFyIHBhcmFncmFwaEJ1dHRvbl8xID0gcmVxdWlyZSgnLi9wYXJhZ3JhcGhCdXR0b24nKTtcclxudmFyIGV4dGVybmFsUHJvdmlkZXJOYW1lID0gcmljaFRleHRFZGl0b3JfY29uZmlnXzEucHJvdmlkZXJOYW1lICsgJ1Byb3ZpZGVyJztcclxuZXhwb3J0cy5wcm92aWRlck5hbWUgPSBleHRlcm5hbFByb3ZpZGVyTmFtZTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMucmljaFRleHRFZGl0b3InO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxSaWNoVGV4dEVkaXRvcic7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnUmljaFRleHRFZGl0b3JDb250cm9sbGVyJztcclxudmFyIFJpY2hUZXh0RWRpdG9yQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSaWNoVGV4dEVkaXRvckNvbnRyb2xsZXIob2JqZWN0LCBwcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMudG9vbGJhciA9ICdoMSwgcGFyYWdyYXBoLCBib2xkLCBpdGFsaWMsIHVuZGVybGluZSwgbGlzdDEsIGxpc3QyLCBpbmRlbnQsIG91dGRlbnQnO1xyXG4gICAgICAgIGlmICghb2JqZWN0LmlzTnVsbE9yRW1wdHkodGhpcy5jdXN0b21CdXR0b25zKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRvb2xiYXIgKz0gJywgJyArIHRoaXMuY3VzdG9tQnV0dG9ucztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBSaWNoVGV4dEVkaXRvckNvbnRyb2xsZXIuJGluamVjdCA9IFtfX29iamVjdC5zZXJ2aWNlTmFtZSwgcmljaFRleHRFZGl0b3JfY29uZmlnXzEucHJvdmlkZXJOYW1lXTtcclxuICAgIHJldHVybiBSaWNoVGV4dEVkaXRvckNvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUmljaFRleHRFZGl0b3JDb250cm9sbGVyID0gUmljaFRleHRFZGl0b3JDb250cm9sbGVyO1xyXG5mdW5jdGlvbiByaWNoVGV4dEVkaXRvcigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9yaWNoVGV4dEVkaXRvci5odG1sJyksXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICdlZGl0b3InLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIG5nTW9kZWw6ICc9JyxcclxuICAgICAgICAgICAgY3VzdG9tQnV0dG9uczogJz0nLFxyXG4gICAgICAgICAgICBuZ0Rpc2FibGVkOiAnPScsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5yaWNoVGV4dEVkaXRvciA9IHJpY2hUZXh0RWRpdG9yO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFsnbmdXaWcnLCBfX29iamVjdC5tb2R1bGVOYW1lXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCByaWNoVGV4dEVkaXRvcilcclxuICAgIC5jb250cm9sbGVyKGV4cG9ydHMuY29udHJvbGxlck5hbWUsIFJpY2hUZXh0RWRpdG9yQ29udHJvbGxlcilcclxuICAgIC5kaXJlY3RpdmUoaGVhZGVyQnV0dG9uXzEuaGVhZGVyQnV0dG9uRGlyZWN0aXZlTmFtZSwgaGVhZGVyQnV0dG9uXzEuaGVhZGVyQnV0dG9uKVxyXG4gICAgLmRpcmVjdGl2ZShwYXJhZ3JhcGhCdXR0b25fMS5wYXJhZ3JhcGhCdXR0b25EaXJlY3RpdmVOYW1lLCBwYXJhZ3JhcGhCdXR0b25fMS5wYXJhZ3JhcGhCdXR0b24pXHJcbiAgICAucHJvdmlkZXIocmljaFRleHRFZGl0b3JfY29uZmlnXzEucHJvdmlkZXJOYW1lLCByaWNoVGV4dEVkaXRvcl9jb25maWdfMS5yaWNoVGV4dEVkaXRvclByb3ZpZGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmljaFRleHRFZGl0b3IuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3JpY2hUZXh0RWRpdG9yL3JpY2hUZXh0RWRpdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gMTMxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbmctd2lnLmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbmctd2lnLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbmctd2lnLmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vbmctd2lnL2Rpc3QvY3NzL25nLXdpZy5jc3NcbiAqKiBtb2R1bGUgaWQgPSAxMzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2ZvbnQtYXdlc29tZS80LjQuMC9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MpO1wiLCBcIlwiXSk7XG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogLS0tLS0tLS0gTkctV0lHIC0tLS0tLS0tICovXFxuLyoqXFxuICpcXG4gKiAgUkVTRVQgQk9YIE1PREVMXFxuICpcXG4gKi9cXG4ubmctd2lnLFxcbltjbGFzc149XFxcIm53LVxcXCJdIHtcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIC1vLWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAtbXMtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcblxcbi8qKlxcbiAqICAgbWFpbiB3cmFwcGVyIGZvciB0aGUgZWRpdG9yXFxuICpcXG4gKiAgLm5nLXdpZ1xcbiAqXFxuICovXFxuLm5nLXdpZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxufVxcblxcblxcbi8qKlxcbiAqICBzdHlsaW5nIGZvciB0b29sYmFyIGFuZCBpdHMgaXRlbXNcXG4gKlxcbiAqICAubnctdG9vbGJhclxcbiAqICAgICZfX2l0ZW1cXG4gKlxcbiAqL1xcbi5udy10b29sYmFyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxuICBsaXN0LXN0eWxlOiBub25lICFpbXBvcnRhbnQ7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBjb2xvcjogIzZCNzI3NztcXG5cXG4gIGJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KDkwZGVnLCAjZmZmZmZmIDAlLCAjZjlmOWY5IDEwMCUpO1xcbiAgYmFja2dyb3VuZDogICAgLW1vei1saW5lYXItZ3JhZGllbnQoOTBkZWcsICNmZmZmZmYgMCUsICNmOWY5ZjkgMTAwJSk7XFxuICBiYWNrZ3JvdW5kOiAgICAgICAgIGxpbmVhci1ncmFkaWVudCgxODBkZWcsICNmZmZmZmYgMCUsICNmOWY5ZjkgMTAwJSk7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjQ0NDQ0NDO1xcbiAgYm9yZGVyLXJhZGl1czogM3B4IDNweCAwIDA7XFxufVxcblxcbi5udy10b29sYmFyX19pdGVtIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBtYXJnaW46IDA7XFxuXFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjREVERURFO1xcbn1cXG5cXG4ubnctdG9vbGJhciBsYWJlbCB7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IDAgNnB4IDAgM3B4O1xcbn1cXG5cXG4ubnctdG9vbGJhciBpbnB1dFt0eXBlPWNoZWNrYm94XSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogLTNweDtcXG4gIG1hcmdpbi1yaWdodDogLTFweDtcXG59XFxuXFxuLyoqXFxuICogIHN0eWxpbmcgZm9yIHRoZSBlZGl0b3IgcGFydDogc291cmNlIGNvZGUgKG9yaWdpbmFsIHRleHRhcmVhKSBhbmQgcmVzdWx0aW5nIGRpdlxcbiAqXFxuICogIC5udy1lZGl0b3JcXG4gKiAgICAmX19zcmNcXG4gKiAgICAmX19yZXNcXG4gKlxcbiAqL1xcbi5udy1lZGl0b3Ige1xcbiAgZGlzcGxheTogdGFibGU7XFxuICAvKiBEZWZhdWx0IHdoZW4gaGVpZ2h0IGlzIG5vdCBzZXQgKi9cXG4gIGhlaWdodDogMzAwcHg7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgY3Vyc29yOiB0ZXh0O1xcbiAgd2lkdGg6MTAwJTtcXG59XFxuXFxuLm53LWVkaXRvci1jb250YWluZXIge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI0NDQ0NDQztcXG4gIGJvcmRlci10b3A6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiAwIDAgM3B4IDNweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLm53LWVkaXRvcl9fcmVzIHtcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICBwYWRkaW5nOiAwIDhweDtcXG4gIGRpc3BsYXk6IHRhYmxlLWNlbGw7XFxufVxcblxcbi5udy1lZGl0b3JfX3NyYyxcXG4ubnctZWRpdG9yX19yZXMge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLm53LWVkaXRvcl9fc3JjLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxufVxcblxcbi5udy1lZGl0b3JfX3NyYyB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICByZXNpemU6IG5vbmU7XFxuICBwYWRkaW5nOiAwIDhweDtcXG59XFxuXFxuLm53LWVkaXRvci0tZml4ZWQgLm53LWVkaXRvciB7XFxuICBkaXNwbGF5OmJsb2NrO1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG59XFxuXFxuLm53LWVkaXRvci0tZml4ZWQgLm53LWVkaXRvcl9fcmVzIHtcXG4gIHBhZGRpbmc6IDFweCA4cHg7XFxuICBkaXNwbGF5OmJsb2NrO1xcbn1cXG5cXG4ubnctaW52aXNpYmxlIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuXFxuLm53LWVkaXRvci0tZml4ZWQgLm53LWludmlzaWJsZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubnctZWRpdG9yLm53LWRpc2FibGVkIHtcXG5cXHRjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbi8qKlxcbiAqICBzdHlsaW5nIGZvciB0b29sYmFyIGJ1dHRvbiwgaGFzIHR3byBtb2RpZmllcnM6IGFjdGl2ZSBhbmQgdHlwZSBvZiBpY29uIGZvciBiYWNrZ3JvdW5kXFxuICpcXG4gKiAgLm53LWJ1dHRvblxcbiAqICAgICYtLWFjdGl2ZVxcbiAqICAgICYtLXtidXR0b24gdHlwZX1cXG4gKlxcbiAqL1xcbi5udy1idXR0b24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgLW1vei1hcHBlYXJhbmNlOiAgICBub25lO1xcbiAgYXBwZWFyYW5jZTogICAgICAgICBub25lO1xcblxcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMzBweDtcXG4gIGhlaWdodDogMzBweDtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBvcGFjaXR5OiAwLjU7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcblxcbiAgZm9udC1zaXplOiAwO1xcblxcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ubnctYnV0dG9uOmJlZm9yZSB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBmb250LWZhbWlseTogRm9udEF3ZXNvbWU7XFxufVxcblxcbi5udy1idXR0b24uYm9sZDpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFxGMDMyJztcXG59XFxuXFxuLm53LWJ1dHRvbi5pdGFsaWM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdcXFxcRjAzMyc7XFxufVxcblxcbi5udy1idXR0b24ubGlzdC11bDpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFxGMENBJztcXG59XFxuXFxuLm53LWJ1dHRvbi5saXN0LW9sOmJlZm9yZSB7XFxuICBjb250ZW50OiAnXFxcXEYwQ0InO1xcbn1cXG5cXG4ubnctYnV0dG9uLmxpbms6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdcXFxcRjBDMSc7XFxufVxcblxcbi5udy1idXR0b24uZm9udC1jb2xvcjpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFxGMDMxJztcXG59XFxuXFxuLm53LWJ1dHRvbi5udy1idXR0b24tLXNvdXJjZTpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFxGMDQwJztcXG59XFxuXFxuLm53LWJ1dHRvbjpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG4ubnctYnV0dG9uOmhvdmVyLFxcbi5udy1idXR0b24ubnctYnV0dG9uLS1hY3RpdmUge1xcbiAgb3BhY2l0eTogMVxcbn1cXG5cXG4ubnctYnV0dG9uLS1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0VFRUVFRTtcXG59XFxuXFxuLm53LWJ1dHRvbjpkaXNhYmxlZCB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcbi5udy1idXR0b246ZGlzYWJsZWQ6aG92ZXIge1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG4vKipcXG4gKiAgc3R5bGluZyAmIGZvcm1hdHRpbmcgb2YgY29udGVudCBpbnNpZGUgY29udGVudGVkaXRhYmxlIGRpdlxcbiAqXFxuICogIC5udy1jb250ZW50XFxuICpcXG4gKi9cXG4ubnctY29udGVudCB7XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgbWFyZ2luOiAwO1xcblxcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG59XFxuXFxuLm53LXNlbGVjdCB7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBwYWRkaW5nOiA2cHg7XFxuICBjb2xvcjogIzU1NTtcXG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbi5udy1zZWxlY3Q6ZGlzYWJsZWQge1xcblxcdG9wYWNpdHk6IDAuNTtcXG59XFxuXFxuLm53LXNlbGVjdDpmb2N1cyB7IG91dGxpbmU6IG5vbmU7IH1cXG5cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jc3MtbG9hZGVyIS4vfi9uZy13aWcvZGlzdC9jc3Mvbmctd2lnLmNzc1xuICoqIG1vZHVsZSBpZCA9IDEzM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiB2ZXJzaW9uOiAyLjMuNFxuICovXG5hbmd1bGFyLm1vZHVsZSgnbmdXaWcnLCBbJ25nd2lnLWFwcC10ZW1wbGF0ZXMnXSk7XG5cbmFuZ3VsYXIubW9kdWxlKCduZ1dpZycpXG4gIC5kaXJlY3RpdmUoJ25nV2lnJywgW1wiJHdpbmRvd1wiLCBcIiRkb2N1bWVudFwiLCBcIm5nV2lnVG9vbGJhclwiLCBmdW5jdGlvbiAoJHdpbmRvdywgJGRvY3VtZW50LCBuZ1dpZ1Rvb2xiYXIpIHtcblxuICAgIHJldHVybiB7XG4gICAgICBzY29wZToge1xuICAgICAgICBjb250ZW50OiAnPW5nV2lnJyxcbiAgICAgICAgb25QYXN0ZTogJz0nXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICB0ZW1wbGF0ZVVybDogJ25nLXdpZy92aWV3cy9uZy13aWcuaHRtbCcsXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHNjb3BlLmZvcm1FbGVtZW50TmFtZSA9IGF0dHJzLm5hbWU7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cignbmFtZScpO1xuXG4gICAgICAgIHNjb3BlLmlzUmVxdWlyZWQgPSAhIWF0dHJzLnJlcXVpcmVkO1xuICAgICAgICBzY29wZS5pc1NvdXJjZU1vZGVBbGxvd2VkID0gT2JqZWN0LmtleXMoYXR0cnMpLmluZGV4T2YoJ3NvdXJjZU1vZGVBbGxvd2VkJykgIT09IC0xID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICBzY29wZS5lZGl0TW9kZSA9IGZhbHNlO1xuICAgICAgICBzY29wZS50b29sYmFyQnV0dG9ucyA9IG5nV2lnVG9vbGJhci5nZXRUb29sYmFyQnV0dG9ucyhhdHRycy5idXR0b25zICYmIHN0cmluZzJhcnJheShhdHRycy5idXR0b25zKSk7XG5cbiAgICAgICAgZnVuY3Rpb24gc3RyaW5nMmFycmF5KGtleXNTdHJpbmcpe1xuICAgICAgICAgIHJldHVybiBrZXlzU3RyaW5nLnNwbGl0KCcsJykubWFwKEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnRyaW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUudG9nZ2xlRWRpdE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2NvcGUuZWRpdE1vZGUgPSAhc2NvcGUuZWRpdE1vZGU7XG5cbiAgICAgICAgICBpZiAoJHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMpIHtcbiAgICAgICAgICAgICR3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLmV4ZWNDb21tYW5kID0gZnVuY3Rpb24gKGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZihzY29wZS5lZGl0TW9kZSApIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIGlmIChjb21tYW5kID09PSAnY3JlYXRlbGluaycpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBwcm9tcHQoJ1BsZWFzZSBlbnRlciB0aGUgVVJMJywgJ2h0dHA6Ly8nKTtcbiAgICAgICAgICAgIGlmKCFvcHRpb25zKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2NvcGUuJGJyb2FkY2FzdCgnZXhlY0NvbW1hbmQnLCB7Y29tbWFuZDogY29tbWFuZCwgb3B0aW9uczogb3B0aW9uc30pO1xuICAgICAgICB9O1xuXHRcdFxuXHRcdGlmIChhdHRycy5uZ0Rpc2FibGVkICE9IG51bGwgfHwgYXR0cnMuZGlzYWJsZWQgIT0gbnVsbCkge1xuXHRcdFx0c2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyByZXR1cm4gISFhdHRycy5kaXNhYmxlZDsgfSwgZnVuY3Rpb24oaXNEaXNhYmxlZCkge1xuXHRcdFx0XHRzY29wZS5pc0Rpc2FibGVkID0gaXNEaXNhYmxlZDtcblx0XHRcdFx0c2NvcGUuJGJyb2FkY2FzdCgnbnctZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcblx0XHRcdH0pO1x0XG5cdFx0fVxuICAgICAgfVxuICAgIH1cbiAgfV1cbik7XG5cblxuYW5ndWxhci5tb2R1bGUoJ25nV2lnJylcbiAgLmRpcmVjdGl2ZSgnbmdXaWdFZGl0YWJsZScsIFtcIiRkb2N1bWVudFwiLCBmdW5jdGlvbiAoJGRvY3VtZW50KSB7XG4gICAgZnVuY3Rpb24gaW5pdChzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsQ29udHJvbGxlcikge1xuXG4gICAgICAkZWxlbWVudC5hdHRyKCdjb250ZW50ZWRpdGFibGUnLCB0cnVlKTtcblxuICAgICAgLy9tb2RlbCAtLT4gdmlld1xuICAgICAgbmdNb2RlbENvbnRyb2xsZXIuJHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGVsZW1lbnQuaHRtbChuZ01vZGVsQ29udHJvbGxlci4kdmlld1ZhbHVlIHx8ICcnKTtcbiAgICAgIH07XG5cbiAgICAgIC8vdmlldyAtLT4gbW9kZWxcbiAgICAgIGZ1bmN0aW9uIHZpZXdUb01vZGVsKCkge1xuICAgICAgICBuZ01vZGVsQ29udHJvbGxlci4kc2V0Vmlld1ZhbHVlKCRlbGVtZW50Lmh0bWwoKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBldmVudHNUb0JpbmQgPSBbXG4gICAgICAgICdibHVyJyxcbiAgICAgICAgJ2tleXVwJyxcbiAgICAgICAgJ2NoYW5nZScsXG4gICAgICAgICdmb2N1cycsXG4gICAgICAgICdjbGljaydcbiAgICAgIF07XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oc2NvcGUub25QYXN0ZSkpIHtcbiAgICAgICAgJGVsZW1lbnQub24oJ3Bhc3RlJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHNjb3BlLm9uUGFzdGUoZSwgJGVsZW1lbnQuaHRtbCgpKS50aGVuKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgJGVsZW1lbnQuaHRtbCh2YWwpO1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGV2ZW50c1RvQmluZC5wdXNoKCdwYXN0ZScpO1xuICAgICAgfVxuXG4gICAgICAkZWxlbWVudC5iaW5kKGV2ZW50c1RvQmluZC5qb2luKCcgJyksIGZ1bmN0aW9uKCkge1xuICAgICAgICB2aWV3VG9Nb2RlbCgpO1xuICAgICAgICBzY29wZS4kYXBwbHlBc3luYygpO1xuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLmlzRWRpdG9yQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJGVsZW1lbnRbMF0gPT09ICRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50O1xuICAgICAgfTtcblxuICAgICAgc2NvcGUuJG9uKCdleGVjQ29tbWFuZCcsIGZ1bmN0aW9uIChldmVudCwgcGFyYW1zKSB7XG4gICAgICAgICRlbGVtZW50WzBdLmZvY3VzKCk7XG5cbiAgICAgICAgdmFyIGllU3R5bGVUZXh0U2VsZWN0aW9uID0gJGRvY3VtZW50WzBdLnNlbGVjdGlvbixcbiAgICAgICAgICBjb21tYW5kID0gcGFyYW1zLmNvbW1hbmQsXG4gICAgICAgICAgb3B0aW9ucyA9IHBhcmFtcy5vcHRpb25zO1xuXG4gICAgICAgIGlmIChpZVN0eWxlVGV4dFNlbGVjdGlvbikge1xuICAgICAgICAgIHZhciB0ZXh0UmFuZ2UgPSBpZVN0eWxlVGV4dFNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRkb2N1bWVudFswXS5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQgJiYgISRkb2N1bWVudFswXS5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQoY29tbWFuZCkpIHtcbiAgICAgICAgICB0aHJvdyAnVGhlIGNvbW1hbmQgXCInICsgY29tbWFuZCArICdcIiBpcyBub3Qgc3VwcG9ydGVkJztcbiAgICAgICAgfVxuXG4gICAgICAgICRkb2N1bWVudFswXS5leGVjQ29tbWFuZChjb21tYW5kLCBmYWxzZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKGllU3R5bGVUZXh0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgdGV4dFJhbmdlLmNvbGxhcHNlKGZhbHNlKTtcbiAgICAgICAgICB0ZXh0UmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2aWV3VG9Nb2RlbCgpO1xuICAgICAgfSk7XG5cdCAgXG5cdCAgc2NvcGUuJG9uKCdudy1kaXNhYmxlZCcsIGZ1bmN0aW9uKGV2ZW50LCBpc0Rpc2FibGVkKSB7XG5cdFx0ICAkZWxlbWVudC5hdHRyKCdjb250ZW50ZWRpdGFibGUnLCAhaXNEaXNhYmxlZCk7XG5cdCAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgbGluazogaW5pdFxuICAgIH1cbiAgfV1cbik7XG5cbmFuZ3VsYXIubW9kdWxlKCduZ1dpZycpXG4gICAgLmRpcmVjdGl2ZSgnbmdXaWdQbHVnaW4nLCBbXCIkY29tcGlsZVwiLCBmdW5jdGlvbiAoJGNvbXBpbGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICc8JyArIHNjb3BlLmJ1dHRvbi5wbHVnaW5OYW1lICsgJyAvPicsXG4gICAgICAgICAgICAgICAgICAgIGNvbXBpbGVkID0gJGNvbXBpbGUodGVtcGxhdGUpKHNjb3BlKTtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnQucmVwbGFjZVdpdGgoY29tcGlsZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnbmdXaWcnKS5wcm92aWRlcignbmdXaWdUb29sYmFyJywgZnVuY3Rpb24gKCkge1xuXG4gIHZhciBidXR0b25MaWJyYXJ5ID0ge1xuICAgIGxpc3QxOiB7dGl0bGU6ICdVbm9yZGVyZWQgTGlzdCcsIGNvbW1hbmQ6ICdpbnNlcnR1bm9yZGVyZWRsaXN0Jywgc3R5bGVDbGFzczogJ2xpc3QtdWwnfSxcbiAgICBsaXN0Mjoge3RpdGxlOiAnT3JkZXJlZCBMaXN0JywgY29tbWFuZDogJ2luc2VydG9yZGVyZWRsaXN0Jywgc3R5bGVDbGFzczogJ2xpc3Qtb2wnfSxcbiAgICBib2xkOiB7dGl0bGU6ICdCb2xkJywgY29tbWFuZDogJ2JvbGQnLCBzdHlsZUNsYXNzOiAnYm9sZCd9LFxuICAgIGl0YWxpYzoge3RpdGxlOiAnSXRhbGljJywgY29tbWFuZDogJ2l0YWxpYycsIHN0eWxlQ2xhc3M6ICdpdGFsaWMnfSxcbiAgICBsaW5rOiB7dGl0bGU6ICdMaW5rJywgY29tbWFuZDogJ2NyZWF0ZWxpbmsnLCBzdHlsZUNsYXNzOiAnbGluayd9XG4gIH07XG5cbiAgdmFyIGRlZmF1bHRCdXR0b25zTGlzdCA9IFsnbGlzdDEnLCAnbGlzdDInLCAnYm9sZCcsICdpdGFsaWMnLCAnbGluayddO1xuXG4gIHZhciBpc0J1dHRvbkFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21tYW5kICYmIGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKHRoaXMuY29tbWFuZCk7XG4gIH07XG5cbiAgdGhpcy5zZXRCdXR0b25zID0gZnVuY3Rpb24oYnV0dG9ucykge1xuICAgIGlmKCFhbmd1bGFyLmlzQXJyYXkoYnV0dG9ucykpIHtcbiAgICAgIHRocm93ICdBcmd1bWVudCBcImJ1dHRvbnNcIiBzaG91bGQgYmUgYW4gYXJyYXknO1xuICAgIH1cblxuICAgIGRlZmF1bHRCdXR0b25zTGlzdCA9IGJ1dHRvbnM7XG4gIH07XG5cbiAgdGhpcy5hZGRTdGFuZGFyZEJ1dHRvbiA9IGZ1bmN0aW9uIChuYW1lLCB0aXRsZSwgY29tbWFuZCwgc3R5bGVDbGFzcykge1xuICAgIGlmKCFuYW1lIHx8ICF0aXRsZSB8fCAhY29tbWFuZCkge1xuICAgICAgdGhyb3cgJ0FyZ3VtZW50cyBcIm5hbWVcIiwgXCJ0aXRsZVwiIGFuZCBcImNvbW1hbmRcIiBhcmUgcmVxdWlyZWQnO1xuICAgIH1cblxuICAgIHN0eWxlQ2xhc3MgPSBzdHlsZUNsYXNzIHx8ICcnO1xuICAgIGJ1dHRvbkxpYnJhcnlbbmFtZV0gPSB7dGl0bGU6IHRpdGxlLCBjb21tYW5kOiBjb21tYW5kLCBzdHlsZUNsYXNzOiBzdHlsZUNsYXNzfVxuICAgIGRlZmF1bHRCdXR0b25zTGlzdC5wdXNoKG5hbWUpO1xuICB9O1xuXG4gIHRoaXMuYWRkQ3VzdG9tQnV0dG9uID0gZnVuY3Rpb24gKG5hbWUsIHBsdWdpbk5hbWUpIHtcbiAgICBpZighbmFtZSB8fCAhcGx1Z2luTmFtZSkge1xuICAgICAgdGhyb3cgJ0FyZ3VtZW50cyBcIm5hbWVcIiBhbmQgXCJwbHVnaW5OYW1lXCIgYXJlIHJlcXVpcmVkJztcbiAgICB9XG5cbiAgICBidXR0b25MaWJyYXJ5W25hbWVdID0ge3BsdWdpbk5hbWU6IHBsdWdpbk5hbWUsIGlzQ29tcGxleDogdHJ1ZX07XG4gICAgZGVmYXVsdEJ1dHRvbnNMaXN0LnB1c2gobmFtZSk7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRUb29sYmFyQnV0dG9uczogZnVuY3Rpb24obGlzdCkge1xuICAgICAgICB2YXIgdG9vbGJhckJ1dHRvbnMgPSBbXTtcbiAgICAgICAgKGxpc3QgfHwgZGVmYXVsdEJ1dHRvbnNMaXN0KS5mb3JFYWNoKGZ1bmN0aW9uKGJ1dHRvbktleSkge1xuICAgICAgICAgIGlmKCFidXR0b25MaWJyYXJ5W2J1dHRvbktleV0pIHtcbiAgICAgICAgICAgIHRocm93ICdUaGVyZSBpcyBubyBcIicgKyBidXR0b25LZXkgKyAnXCIgaW4geW91ciBsaWJyYXJ5LiBQb3NzaWJsZSB2YXJpYW50czogJyArIE9iamVjdC5rZXlzKGJ1dHRvbkxpYnJhcnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBidXR0b24gPSBhbmd1bGFyLmNvcHkoYnV0dG9uTGlicmFyeVtidXR0b25LZXldKTtcblxuICAgICAgICAgIGlmKCFhbmd1bGFyLmlzRnVuY3Rpb24oYnV0dG9uLmlzQWN0aXZlKSkge1xuICAgICAgICAgICAgYnV0dG9uLmlzQWN0aXZlID0gaXNCdXR0b25BY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG9vbGJhckJ1dHRvbnMucHVzaChidXR0b24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvb2xiYXJCdXR0b25zO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cblxufSk7XG5hbmd1bGFyLm1vZHVsZSgnbmdXaWcnKVxuICAgIC5jb25maWcoWyduZ1dpZ1Rvb2xiYXJQcm92aWRlcicsIGZ1bmN0aW9uIChuZ1dpZ1Rvb2xiYXJQcm92aWRlcikge1xuICAgICAgIG5nV2lnVG9vbGJhclByb3ZpZGVyLmFkZEN1c3RvbUJ1dHRvbignZm9ybWF0cycsICdudy1mb3JtYXRzLWJ1dHRvbicpO1xuICAgIH1dKVxuICAgIC5kaXJlY3RpdmUoJ253Rm9ybWF0c0J1dHRvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxzZWxlY3QgY2xhc3M9XCJudy1zZWxlY3RcIiBuZy1tb2RlbD1cImZvcm1hdFwiIG5nLWNoYW5nZT1cImV4ZWNDb21tYW5kKFxcJ2Zvcm1hdGJsb2NrXFwnLCBmb3JtYXQudmFsdWUpXCIgbmctb3B0aW9ucz1cImZvcm1hdC5uYW1lIGZvciBmb3JtYXQgaW4gZm9ybWF0c1wiIG5nLWRpc2FibGVkPVwiZWRpdE1vZGUgfHwgaXNEaXNhYmxlZFwiPjwvc2VsZWN0PicsXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5mb3JtYXRzID0gW1xuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ05vcm1hbCB0ZXh0JywgdmFsdWU6ICdwJ30sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnSGVhZGVyIDEnLCB2YWx1ZTogJ2gxJ30sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnSGVhZGVyIDInLCB2YWx1ZTogJ2gyJ30sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnSGVhZGVyIDMnLCB2YWx1ZTogJ2gzJ31cbiAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgc2NvcGUuZm9ybWF0ID0gc2NvcGUuZm9ybWF0c1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcblxuXG5hbmd1bGFyLm1vZHVsZSgnbmd3aWctYXBwLXRlbXBsYXRlcycsIFsnbmctd2lnL3ZpZXdzL25nLXdpZy5odG1sJ10pO1xuXG5hbmd1bGFyLm1vZHVsZShcIm5nLXdpZy92aWV3cy9uZy13aWcuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcIm5nLXdpZy92aWV3cy9uZy13aWcuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwibmctd2lnXFxcIj5cXG5cIiArXG4gICAgXCIgIDx1bCBjbGFzcz1cXFwibnctdG9vbGJhclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxsaSBjbGFzcz1cXFwibnctdG9vbGJhcl9faXRlbVxcXCIgbmctcmVwZWF0PVxcXCJidXR0b24gaW4gdG9vbGJhckJ1dHRvbnNcXFwiID5cXG5cIiArXG4gICAgXCIgICAgICAgIDxkaXYgbmctaWY9XFxcIiFidXR0b24uaXNDb21wbGV4XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJudy1idXR0b24ge3tidXR0b24uc3R5bGVDbGFzc319XFxcIiB0aXRsZT1cXFwie3tidXR0b24udGl0bGV9fVxcXCIgbmctY2xpY2s9XFxcImV4ZWNDb21tYW5kKGJ1dHRvbi5jb21tYW5kKVxcXCIgbmctY2xhc3M9XFxcInsgJ253LWJ1dHRvbi0tYWN0aXZlJzogaXNFZGl0b3JBY3RpdmUoKSAmJiBidXR0b24uaXNBY3RpdmUoKSB9XFxcIiBuZy1kaXNhYmxlZD1cXFwiZWRpdE1vZGUgfHwgaXNEaXNhYmxlZFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAge3sgYnV0dG9uLnRpdGxlIH19XFxuXCIgK1xuICAgIFwiICAgICAgICAgIDwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICAgICAgICA8ZGl2IG5nLWlmPVxcXCJidXR0b24uaXNDb21wbGV4XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgPG5nLXdpZy1wbHVnaW4gcGx1Z2luPVxcXCJ7e2J1dHRvbn19XFxcIj48L25nLXdpZy1wbHVnaW4+XFxuXCIgK1xuICAgIFwiICAgICAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgPC9saT48IS0tXFxuXCIgK1xuICAgIFwiICAgIC0tPjxsaSBjbGFzcz1cXFwibnctdG9vbGJhcl9faXRlbVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJudy1idXR0b24gbnctYnV0dG9uLS1zb3VyY2VcXFwiIHRpdGxlPVxcXCJFZGl0IEhUTUxcXFwiIG5nLWNsYXNzPVxcXCJ7ICdudy1idXR0b24tLWFjdGl2ZSc6IGVkaXRNb2RlIH1cXFwiIG5nLXNob3c9XFxcImlzU291cmNlTW9kZUFsbG93ZWRcXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVFZGl0TW9kZSgpXFxcIiBuZy1kaXNhYmxlZD1cXFwiaXNEaXNhYmxlZFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICBFZGl0IEhUTUxcXG5cIiArXG4gICAgXCIgICAgICA8L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgPC9saT5cXG5cIiArXG4gICAgXCIgIDwvdWw+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJudy1lZGl0b3ItY29udGFpbmVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwibnctZWRpdG9yX19zcmMtY29udGFpbmVyXFxcIiBuZy1zaG93PVxcXCJlZGl0TW9kZVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRleHRhcmVhIG5nLXJlcXVpcmVkPVxcXCJpc1JlcXVpcmVkXFxcIiBuZy1kaXNhYmxlZD1cXFwiaXNEaXNhYmxlZFxcXCIgY2xhc3M9XFxcIm53LWVkaXRvcl9fc3JjXFxcIiBuZy1tb2RlbD1cXFwiY29udGVudFxcXCI+PC90ZXh0YXJlYT5cXG5cIiArXG4gICAgXCIgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcIm53LWVkaXRvclxcXCIgbmctY2xhc3M9XFxcInsgJ253LWRpc2FibGVkJzogaXNEaXNhYmxlZCB9XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8ZGl2IG5hbWU9XFxcInt7Zm9ybUVsZW1lbnROYW1lfX1cXFwiIG5nLXJlcXVpcmVkPVxcXCJpc1JlcXVpcmVkXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiIG5nLWNsYXNzPVxcXCJ7J253LWludmlzaWJsZSc6IGVkaXRNb2RlfVxcXCIgY2xhc3M9XFxcIm53LWVkaXRvcl9fcmVzXFxcIiBuZy1tb2RlbD1cXFwiY29udGVudFxcXCIgbmctd2lnLWVkaXRhYmxlIG9uLXBhc3RlPVxcXCJvblBhc3RlXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICA8L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9uZy13aWcvZGlzdC9uZy13aWcuanNcbiAqKiBtb2R1bGUgaWQgPSAxMzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZWRpdG9yQnV0dG9ucy5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZWRpdG9yQnV0dG9ucy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9lZGl0b3JCdXR0b25zLmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3JpY2hUZXh0RWRpdG9yL2VkaXRvckJ1dHRvbnMuY3NzXG4gKiogbW9kdWxlIGlkID0gMTM1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5udy1idXR0b24uaGVhZGVyOmJlZm9yZSB7XFxyXFxuICBjb250ZW50OiAnXFxcXEYxREMnOyAvKiBmYS1oZWFkZXIgKi9cXHJcXG59XFxyXFxuXFxyXFxuLm53LWJ1dHRvbi5wYXJhZ3JhcGg6YmVmb3JlIHtcXHJcXG4gIGNvbnRlbnQ6ICdcXFxcRjFERCc7IC8qIGZhLXBhcmFncmFwaCAqL1xcclxcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jc3MtbG9hZGVyIS4vc291cmNlL2NvbXBvbmVudHMvcmljaFRleHRFZGl0b3IvZWRpdG9yQnV0dG9ucy5jc3NcbiAqKiBtb2R1bGUgaWQgPSAxMzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxuZXhwb3J0cy5wcm92aWRlck5hbWUgPSAncmljaFRleHRFZGl0b3InO1xyXG5yaWNoVGV4dEVkaXRvclByb3ZpZGVyLiRpbmplY3QgPSBbJ25nV2lnVG9vbGJhclByb3ZpZGVyJ107XHJcbmZ1bmN0aW9uIHJpY2hUZXh0RWRpdG9yUHJvdmlkZXIobmdXaWdUb29sYmFyUHJvdmlkZXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWRkQ3VzdG9tQnV0dG9uOiBmdW5jdGlvbiAobmFtZSwgY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIG5nV2lnVG9vbGJhclByb3ZpZGVyLmFkZEN1c3RvbUJ1dHRvbihuYW1lLCBjb21wb25lbnQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWRkU3RhbmRhcmRCdXR0b246IGZ1bmN0aW9uIChuYW1lLCB0b29sdGlwLCBjb21tYW5kLCBpY29uKSB7XHJcbiAgICAgICAgICAgIG5nV2lnVG9vbGJhclByb3ZpZGVyLmFkZFN0YW5kYXJkQnV0dG9uKG5hbWUsIHRvb2xiYXIsIGNvbW1hbmQsICdmYS0nICsgaWNvbik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAkZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5nV2lnVG9vbGJhclByb3ZpZGVyLmFkZEN1c3RvbUJ1dHRvbigncGFyYWdyYXBoJywgJ3JsLXBhcmFncmFwaC1idXR0b24nKTtcclxuICAgICAgICAgICAgbmdXaWdUb29sYmFyUHJvdmlkZXIuYWRkQ3VzdG9tQnV0dG9uKCdoMScsICdybC1oZWFkZXItYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIG5nV2lnVG9vbGJhclByb3ZpZGVyLmFkZFN0YW5kYXJkQnV0dG9uKCd1bmRlcmxpbmUnLCAnVW5kZXJsaW5lJywgJ3VuZGVybGluZScsICdmYS11bmRlcmxpbmUnKTtcclxuICAgICAgICAgICAgbmdXaWdUb29sYmFyUHJvdmlkZXIuYWRkU3RhbmRhcmRCdXR0b24oJ2luZGVudCcsICdJbmRlbnQnLCAnaW5kZW50JywgJ2ZhLWluZGVudCcpO1xyXG4gICAgICAgICAgICBuZ1dpZ1Rvb2xiYXJQcm92aWRlci5hZGRTdGFuZGFyZEJ1dHRvbignb3V0ZGVudCcsICdPdXRkZW50JywgJ291dGRlbnQnLCAnZmEtb3V0ZGVudCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMucmljaFRleHRFZGl0b3JQcm92aWRlciA9IHJpY2hUZXh0RWRpdG9yUHJvdmlkZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJpY2hUZXh0RWRpdG9yLmNvbmZpZy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvcmljaFRleHRFZGl0b3IvcmljaFRleHRFZGl0b3IuY29uZmlnLmpzXG4gKiogbW9kdWxlIGlkID0gMTM3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxuZXhwb3J0cy5oZWFkZXJCdXR0b25EaXJlY3RpdmVOYW1lID0gJ3JsSGVhZGVyQnV0dG9uJztcclxuZnVuY3Rpb24gaGVhZGVyQnV0dG9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHRlbXBsYXRlOiBcIlxcblxcdFxcdFxcdDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwibnctYnV0dG9uIGhlYWRlclxcXCIgbmctY2xpY2s9XFxcInRyaWdnZXIoKVxcXCIgbmctZGlzYWJsZWQ9XFxcImVkaXRNb2RlIHx8IGlzRGlzYWJsZWRcXFwiIHRpdGxlPVxcXCJIZWFkZXIgMVxcXCI+PC9idXR0b24+XFxuXFx0XFx0XCIsXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLnRyaWdnZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5leGVjQ29tbWFuZCgnZm9ybWF0YmxvY2snLCAnaDEnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLmhlYWRlckJ1dHRvbiA9IGhlYWRlckJ1dHRvbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVhZGVyQnV0dG9uLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9yaWNoVGV4dEVkaXRvci9oZWFkZXJCdXR0b24uanNcbiAqKiBtb2R1bGUgaWQgPSAxMzhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3MvY29tbW9uanMuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG5leHBvcnRzLnBhcmFncmFwaEJ1dHRvbkRpcmVjdGl2ZU5hbWUgPSAncmxQYXJhZ3JhcGhCdXR0b24nO1xyXG5mdW5jdGlvbiBwYXJhZ3JhcGhCdXR0b24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiXFxuXFx0XFx0XFx0PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJudy1idXR0b24gcGFyYWdyYXBoXFxcIiBuZy1jbGljaz1cXFwidHJpZ2dlcigpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZWRpdE1vZGUgfHwgaXNEaXNhYmxlZFxcXCIgdGl0bGU9XFxcInBhcmFncmFwaFxcXCI+PC9idXR0b24+XFxuXFx0XFx0XCIsXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLnRyaWdnZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5leGVjQ29tbWFuZCgnZm9ybWF0YmxvY2snLCAncCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMucGFyYWdyYXBoQnV0dG9uID0gcGFyYWdyYXBoQnV0dG9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJhZ3JhcGhCdXR0b24uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3JpY2hUZXh0RWRpdG9yL3BhcmFncmFwaEJ1dHRvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDEzOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjx0ZXh0YXJlYSBjbGFzcz1cXFwicmljaC10ZXh0LWVkaXRvclxcXCIgbmctd2lnPVxcXCJlZGl0b3IubmdNb2RlbFxcXCIgYnV0dG9ucz1cXFwie3tlZGl0b3IudG9vbGJhcn19XFxcIiBuZy1kaXNhYmxlZD1cXFwiZWRpdG9yLm5nRGlzYWJsZWRcXFwiPjwvdGV4dGFyZWE+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvcmljaFRleHRFZGl0b3IvcmljaFRleHRFZGl0b3IuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDE0MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbnJlcXVpcmUoJ3VpLXNlbGVjdCcpO1xyXG5yZXF1aXJlKCd1aS1zZWxlY3QvZGlzdC9zZWxlY3QuY3NzJyk7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG52YXIgY29tcG9uZW50VmFsaWRhdG9yX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2NvbXBvbmVudFZhbGlkYXRvci9jb21wb25lbnRWYWxpZGF0b3Iuc2VydmljZScpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5zZWxlY3QnO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxTZWxlY3QnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ1NlbGVjdENvbnRyb2xsZXInO1xyXG52YXIgU2VsZWN0Q29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTZWxlY3RDb250cm9sbGVyKCRlbGVtZW50LCAkc2NvcGUsICRxLCBjb21wb25lbnRWYWxpZGF0b3JGYWN0b3J5LCBvYmplY3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuJHEgPSAkcTtcclxuICAgICAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcclxuICAgICAgICB0aGlzLl9udWxsT3B0aW9uID0ge1xyXG4gICAgICAgICAgICBfX2lzTnVsbE9wdGlvbjogdHJ1ZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubmdNb2RlbCA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcclxuICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZCh0aGlzLm9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZEl0ZW1zKCkudGhlbihmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5jb25maWd1cmVPcHRpb25zKHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghXy5pc1VuZGVmaW5lZCh0aGlzLnZhbGlkYXRvcikpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RWYWxpZGF0b3IgPSBjb21wb25lbnRWYWxpZGF0b3JGYWN0b3J5LmdldEluc3RhbmNlKHtcclxuICAgICAgICAgICAgICAgIG5nTW9kZWw6IHRoaXMubmdNb2RlbCxcclxuICAgICAgICAgICAgICAgICRzY29wZTogJHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yczogW3RoaXMudmFsaWRhdG9yXSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlbGVjdENvbnRyb2xsZXIucHJvdG90eXBlLCBcInNlbGVjdGlvblwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5nTW9kZWwuJHZpZXdWYWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5fX2lzTnVsbE9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uZ01vZGVsLiRzZXRWaWV3VmFsdWUobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5nTW9kZWwuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFNlbGVjdENvbnRyb2xsZXIucHJvdG90eXBlLmdldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpZiAoaXRlbSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5fX2lzTnVsbE9wdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udWxsT3B0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RvciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHRoaXMuc2VsZWN0b3IpXHJcbiAgICAgICAgICAgID8gdGhpcy5zZWxlY3RvcihpdGVtKVxyXG4gICAgICAgICAgICA6IGl0ZW1bdGhpcy5zZWxlY3Rvcl07XHJcbiAgICB9O1xyXG4gICAgU2VsZWN0Q29udHJvbGxlci5wcm90b3R5cGUubG9hZEl0ZW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2U7XHJcbiAgICAgICAgcHJvbWlzZSA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGlmIChwcm9taXNlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcHJvbWlzZSA9IHRoaXMuJHEud2hlbih0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybiBfdGhpcy5jb25maWd1cmVPcHRpb25zKG9wdGlvbnMpOyB9KTtcclxuICAgIH07XHJcbiAgICBTZWxlY3RDb250cm9sbGVyLnByb3RvdHlwZS5jb25maWd1cmVPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoIXRoaXMub2JqZWN0LmlzTnVsbE9yV2hpdGVzcGFjZSh0aGlzLm51bGxPcHRpb24pKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMudW5zaGlmdCh0aGlzLl9udWxsT3B0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICB9O1xyXG4gICAgU2VsZWN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCcsICckc2NvcGUnLCAnJHEnLCBjb21wb25lbnRWYWxpZGF0b3Jfc2VydmljZV8xLmZhY3RvcnlOYW1lLCBfX29iamVjdC5zZXJ2aWNlTmFtZV07XHJcbiAgICByZXR1cm4gU2VsZWN0Q29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5TZWxlY3RDb250cm9sbGVyID0gU2VsZWN0Q29udHJvbGxlcjtcclxuZnVuY3Rpb24gc2VsZWN0KCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zZWxlY3QuaHRtbCcpLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnc2VsZWN0JyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBvcHRpb25zOiAnPScsXHJcbiAgICAgICAgICAgIGdldE9wdGlvbnM6ICcmJyxcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICc9JyxcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiAnPScsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnQCcsXHJcbiAgICAgICAgICAgIG5nRGlzYWJsZWQ6ICc9JyxcclxuICAgICAgICAgICAgbnVsbE9wdGlvbjogJ0AnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuc2VsZWN0ID0gc2VsZWN0O1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFsndWkuc2VsZWN0JywgY29tcG9uZW50VmFsaWRhdG9yX3NlcnZpY2VfMS5tb2R1bGVOYW1lLCBfX29iamVjdC5tb2R1bGVOYW1lXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBzZWxlY3QpXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBTZWxlY3RDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9zZWxlY3Qvc2VsZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTQxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuL2Rpc3Qvc2VsZWN0LmpzJyk7XG5tb2R1bGUuZXhwb3J0cyA9ICd1aS5zZWxlY3QnO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vdWktc2VsZWN0L2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMTQyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKiFcbiAqIHVpLXNlbGVjdFxuICogaHR0cDovL2dpdGh1Yi5jb20vYW5ndWxhci11aS91aS1zZWxlY3RcbiAqIFZlcnNpb246IDAuMTQuNiAtIDIwMTYtMDItMThUMjE6MDE6MzYuODkzWlxuICogTGljZW5zZTogTUlUXG4gKi9cblxuXG4oZnVuY3Rpb24gKCkgeyBcblwidXNlIHN0cmljdFwiO1xudmFyIEtFWSA9IHtcbiAgICBUQUI6IDksXG4gICAgRU5URVI6IDEzLFxuICAgIEVTQzogMjcsXG4gICAgU1BBQ0U6IDMyLFxuICAgIExFRlQ6IDM3LFxuICAgIFVQOiAzOCxcbiAgICBSSUdIVDogMzksXG4gICAgRE9XTjogNDAsXG4gICAgU0hJRlQ6IDE2LFxuICAgIENUUkw6IDE3LFxuICAgIEFMVDogMTgsXG4gICAgUEFHRV9VUDogMzMsXG4gICAgUEFHRV9ET1dOOiAzNCxcbiAgICBIT01FOiAzNixcbiAgICBFTkQ6IDM1LFxuICAgIEJBQ0tTUEFDRTogOCxcbiAgICBERUxFVEU6IDQ2LFxuICAgIENPTU1BTkQ6IDkxLFxuXG4gICAgTUFQOiB7IDkxIDogXCJDT01NQU5EXCIsIDggOiBcIkJBQ0tTUEFDRVwiICwgOSA6IFwiVEFCXCIgLCAxMyA6IFwiRU5URVJcIiAsIDE2IDogXCJTSElGVFwiICwgMTcgOiBcIkNUUkxcIiAsIDE4IDogXCJBTFRcIiAsIDE5IDogXCJQQVVTRUJSRUFLXCIgLCAyMCA6IFwiQ0FQU0xPQ0tcIiAsIDI3IDogXCJFU0NcIiAsIDMyIDogXCJTUEFDRVwiICwgMzMgOiBcIlBBR0VfVVBcIiwgMzQgOiBcIlBBR0VfRE9XTlwiICwgMzUgOiBcIkVORFwiICwgMzYgOiBcIkhPTUVcIiAsIDM3IDogXCJMRUZUXCIgLCAzOCA6IFwiVVBcIiAsIDM5IDogXCJSSUdIVFwiICwgNDAgOiBcIkRPV05cIiAsIDQzIDogXCIrXCIgLCA0NCA6IFwiUFJJTlRTQ1JFRU5cIiAsIDQ1IDogXCJJTlNFUlRcIiAsIDQ2IDogXCJERUxFVEVcIiwgNDggOiBcIjBcIiAsIDQ5IDogXCIxXCIgLCA1MCA6IFwiMlwiICwgNTEgOiBcIjNcIiAsIDUyIDogXCI0XCIgLCA1MyA6IFwiNVwiICwgNTQgOiBcIjZcIiAsIDU1IDogXCI3XCIgLCA1NiA6IFwiOFwiICwgNTcgOiBcIjlcIiAsIDU5IDogXCI7XCIsIDYxIDogXCI9XCIgLCA2NSA6IFwiQVwiICwgNjYgOiBcIkJcIiAsIDY3IDogXCJDXCIgLCA2OCA6IFwiRFwiICwgNjkgOiBcIkVcIiAsIDcwIDogXCJGXCIgLCA3MSA6IFwiR1wiICwgNzIgOiBcIkhcIiAsIDczIDogXCJJXCIgLCA3NCA6IFwiSlwiICwgNzUgOiBcIktcIiAsIDc2IDogXCJMXCIsIDc3IDogXCJNXCIgLCA3OCA6IFwiTlwiICwgNzkgOiBcIk9cIiAsIDgwIDogXCJQXCIgLCA4MSA6IFwiUVwiICwgODIgOiBcIlJcIiAsIDgzIDogXCJTXCIgLCA4NCA6IFwiVFwiICwgODUgOiBcIlVcIiAsIDg2IDogXCJWXCIgLCA4NyA6IFwiV1wiICwgODggOiBcIlhcIiAsIDg5IDogXCJZXCIgLCA5MCA6IFwiWlwiLCA5NiA6IFwiMFwiICwgOTcgOiBcIjFcIiAsIDk4IDogXCIyXCIgLCA5OSA6IFwiM1wiICwgMTAwIDogXCI0XCIgLCAxMDEgOiBcIjVcIiAsIDEwMiA6IFwiNlwiICwgMTAzIDogXCI3XCIgLCAxMDQgOiBcIjhcIiAsIDEwNSA6IFwiOVwiLCAxMDYgOiBcIipcIiAsIDEwNyA6IFwiK1wiICwgMTA5IDogXCItXCIgLCAxMTAgOiBcIi5cIiAsIDExMSA6IFwiL1wiLCAxMTIgOiBcIkYxXCIgLCAxMTMgOiBcIkYyXCIgLCAxMTQgOiBcIkYzXCIgLCAxMTUgOiBcIkY0XCIgLCAxMTYgOiBcIkY1XCIgLCAxMTcgOiBcIkY2XCIgLCAxMTggOiBcIkY3XCIgLCAxMTkgOiBcIkY4XCIgLCAxMjAgOiBcIkY5XCIgLCAxMjEgOiBcIkYxMFwiICwgMTIyIDogXCJGMTFcIiAsIDEyMyA6IFwiRjEyXCIsIDE0NCA6IFwiTlVNTE9DS1wiICwgMTQ1IDogXCJTQ1JPTExMT0NLXCIgLCAxODYgOiBcIjtcIiAsIDE4NyA6IFwiPVwiICwgMTg4IDogXCIsXCIgLCAxODkgOiBcIi1cIiAsIDE5MCA6IFwiLlwiICwgMTkxIDogXCIvXCIgLCAxOTIgOiBcImBcIiAsIDIxOSA6IFwiW1wiICwgMjIwIDogXCJcXFxcXCIgLCAyMjEgOiBcIl1cIiAsIDIyMiA6IFwiJ1wiXG4gICAgfSxcblxuICAgIGlzQ29udHJvbDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGsgPSBlLndoaWNoO1xuICAgICAgICBzd2l0Y2ggKGspIHtcbiAgICAgICAgY2FzZSBLRVkuQ09NTUFORDpcbiAgICAgICAgY2FzZSBLRVkuU0hJRlQ6XG4gICAgICAgIGNhc2UgS0VZLkNUUkw6XG4gICAgICAgIGNhc2UgS0VZLkFMVDpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGUubWV0YUtleSkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgaXNGdW5jdGlvbktleTogZnVuY3Rpb24gKGspIHtcbiAgICAgICAgayA9IGsud2hpY2ggPyBrLndoaWNoIDogaztcbiAgICAgICAgcmV0dXJuIGsgPj0gMTEyICYmIGsgPD0gMTIzO1xuICAgIH0sXG4gICAgaXNWZXJ0aWNhbE1vdmVtZW50OiBmdW5jdGlvbiAoayl7XG4gICAgICByZXR1cm4gfltLRVkuVVAsIEtFWS5ET1dOXS5pbmRleE9mKGspO1xuICAgIH0sXG4gICAgaXNIb3Jpem9udGFsTW92ZW1lbnQ6IGZ1bmN0aW9uIChrKXtcbiAgICAgIHJldHVybiB+W0tFWS5MRUZULEtFWS5SSUdIVCxLRVkuQkFDS1NQQUNFLEtFWS5ERUxFVEVdLmluZGV4T2Yoayk7XG4gICAgfSxcbiAgICB0b1NlcGFyYXRvcjogZnVuY3Rpb24gKGspIHtcbiAgICAgIHZhciBzZXAgPSB7RU5URVI6XCJcXG5cIixUQUI6XCJcXHRcIixTUEFDRTpcIiBcIn1ba107XG4gICAgICBpZiAoc2VwKSByZXR1cm4gc2VwO1xuICAgICAgLy8gcmV0dXJuIHVuZGVmaW5lZCBmb3Igc3BlY2lhbCBrZXlzIG90aGVyIHRoYW4gZW50ZXIsIHRhYiBvciBzcGFjZS5cbiAgICAgIC8vIG5vIHdheSB0byB1c2UgdGhlbSB0byBjdXQgc3RyaW5ncy5cbiAgICAgIHJldHVybiBLRVlba10gPyB1bmRlZmluZWQgOiBrO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBZGQgcXVlcnlTZWxlY3RvckFsbCgpIHRvIGpxTGl0ZS5cbiAqXG4gKiBqcUxpdGUgZmluZCgpIGlzIGxpbWl0ZWQgdG8gbG9va3VwcyBieSB0YWcgbmFtZS5cbiAqIFRPRE8gVGhpcyB3aWxsIGNoYW5nZSB3aXRoIGZ1dHVyZSB2ZXJzaW9ucyBvZiBBbmd1bGFySlMsIHRvIGJlIHJlbW92ZWQgd2hlbiB0aGlzIGhhcHBlbnNcbiAqXG4gKiBTZWUganFMaXRlLmZpbmQgLSB3aHkgbm90IHVzZSBxdWVyeVNlbGVjdG9yQWxsPyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8zNTg2XG4gKiBTZWUgZmVhdChqcUxpdGUpOiB1c2UgcXVlcnlTZWxlY3RvckFsbCBpbnN0ZWFkIG9mIGdldEVsZW1lbnRzQnlUYWdOYW1lIGluIGpxTGl0ZS5maW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8zNTk4XG4gKi9cbmlmIChhbmd1bGFyLmVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwgPT09IHVuZGVmaW5lZCkge1xuICBhbmd1bGFyLmVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHJldHVybiBhbmd1bGFyLmVsZW1lbnQodGhpc1swXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gIH07XG59XG5cbi8qKlxuICogQWRkIGNsb3Nlc3QoKSB0byBqcUxpdGUuXG4gKi9cbmlmIChhbmd1bGFyLmVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPT09IHVuZGVmaW5lZCkge1xuICBhbmd1bGFyLmVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbiggc2VsZWN0b3IpIHtcbiAgICB2YXIgZWxlbSA9IHRoaXNbMF07XG4gICAgdmFyIG1hdGNoZXNTZWxlY3RvciA9IGVsZW0ubWF0Y2hlcyB8fCBlbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBlbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fCBlbGVtLm1zTWF0Y2hlc1NlbGVjdG9yO1xuXG4gICAgd2hpbGUgKGVsZW0pIHtcbiAgICAgIGlmIChtYXRjaGVzU2VsZWN0b3IuYmluZChlbGVtKShzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtID0gZWxlbS5wYXJlbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG5cbnZhciBsYXRlc3RJZCA9IDA7XG5cbnZhciB1aXMgPSBhbmd1bGFyLm1vZHVsZSgndWkuc2VsZWN0JywgW10pXG5cbi5jb25zdGFudCgndWlTZWxlY3RDb25maWcnLCB7XG4gIHRoZW1lOiAnYm9vdHN0cmFwJyxcbiAgc2VhcmNoRW5hYmxlZDogdHJ1ZSxcbiAgc29ydGFibGU6IGZhbHNlLFxuICBwbGFjZWhvbGRlcjogJycsIC8vIEVtcHR5IGJ5IGRlZmF1bHQsIGxpa2UgSFRNTCB0YWcgPHNlbGVjdD5cbiAgcmVmcmVzaERlbGF5OiAxMDAwLCAvLyBJbiBtaWxsaXNlY29uZHNcbiAgY2xvc2VPblNlbGVjdDogdHJ1ZSxcbiAgZHJvcGRvd25Qb3NpdGlvbjogJ2F1dG8nLFxuICBnZW5lcmF0ZUlkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGF0ZXN0SWQrKztcbiAgfSxcbiAgYXBwZW5kVG9Cb2R5OiBmYWxzZVxufSlcblxuLy8gU2VlIFJlbmFtZSBtaW5FcnIgYW5kIG1ha2UgaXQgYWNjZXNzaWJsZSBmcm9tIG91dHNpZGUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNjkxM1xuLnNlcnZpY2UoJ3VpU2VsZWN0TWluRXJyJywgZnVuY3Rpb24oKSB7XG4gIHZhciBtaW5FcnIgPSBhbmd1bGFyLiQkbWluRXJyKCd1aS5zZWxlY3QnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBlcnJvciA9IG1pbkVyci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHZhciBtZXNzYWdlID0gZXJyb3IubWVzc2FnZS5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcbmh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8uKicpLCAnJyk7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfTtcbn0pXG5cbi8vIFJlY3JlYXRlcyBvbGQgYmVoYXZpb3Igb2YgbmctdHJhbnNjbHVkZS4gVXNlZCBpbnRlcm5hbGx5LlxuLmRpcmVjdGl2ZSgndWlzVHJhbnNjbHVkZUFwcGVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsLCB0cmFuc2NsdWRlKSB7XG4gICAgICAgIHRyYW5zY2x1ZGUoc2NvcGUsIGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbn0pXG5cbi8qKlxuICogSGlnaGxpZ2h0cyB0ZXh0IHRoYXQgbWF0Y2hlcyAkc2VsZWN0LnNlYXJjaC5cbiAqXG4gKiBUYWtlbiBmcm9tIEFuZ3VsYXJVSSBCb290c3RyYXAgVHlwZWFoZWFkXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvYm9vdHN0cmFwL2Jsb2IvMC4xMC4wL3NyYy90eXBlYWhlYWQvdHlwZWFoZWFkLmpzI0wzNDBcbiAqL1xuLmZpbHRlcignaGlnaGxpZ2h0JywgZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIGVzY2FwZVJlZ2V4cChxdWVyeVRvRXNjYXBlKSB7XG4gICAgcmV0dXJuICgnJyArIHF1ZXJ5VG9Fc2NhcGUpLnJlcGxhY2UoLyhbLj8qK14kW1xcXVxcXFwoKXt9fC1dKS9nLCAnXFxcXCQxJyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24obWF0Y2hJdGVtLCBxdWVyeSkge1xuICAgIHJldHVybiBxdWVyeSAmJiBtYXRjaEl0ZW0gPyAoJycgKyBtYXRjaEl0ZW0pLnJlcGxhY2UobmV3IFJlZ0V4cChlc2NhcGVSZWdleHAocXVlcnkpLCAnZ2knKSwgJzxzcGFuIGNsYXNzPVwidWktc2VsZWN0LWhpZ2hsaWdodFwiPiQmPC9zcGFuPicpIDogbWF0Y2hJdGVtO1xuICB9O1xufSlcblxuLyoqXG4gKiBBIHJlYWQtb25seSBlcXVpdmFsZW50IG9mIGpRdWVyeSdzIG9mZnNldCBmdW5jdGlvbjogaHR0cDovL2FwaS5qcXVlcnkuY29tL29mZnNldC9cbiAqXG4gKiBUYWtlbiBmcm9tIEFuZ3VsYXJVSSBCb290c3RyYXAgUG9zaXRpb246XG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL3NyYy9wb3NpdGlvbi9wb3NpdGlvbi5qcyNMNzBcbiAqL1xuLmZhY3RvcnkoJ3Vpc09mZnNldCcsXG4gIFsnJGRvY3VtZW50JywgJyR3aW5kb3cnLFxuICBmdW5jdGlvbiAoJGRvY3VtZW50LCAkd2luZG93KSB7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IGJvdW5kaW5nQ2xpZW50UmVjdC53aWR0aCB8fCBlbGVtZW50LnByb3AoJ29mZnNldFdpZHRoJyksXG4gICAgICBoZWlnaHQ6IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQgfHwgZWxlbWVudC5wcm9wKCdvZmZzZXRIZWlnaHQnKSxcbiAgICAgIHRvcDogYm91bmRpbmdDbGllbnRSZWN0LnRvcCArICgkd2luZG93LnBhZ2VZT2Zmc2V0IHx8ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSxcbiAgICAgIGxlZnQ6IGJvdW5kaW5nQ2xpZW50UmVjdC5sZWZ0ICsgKCR3aW5kb3cucGFnZVhPZmZzZXQgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KVxuICAgIH07XG4gIH07XG59XSk7XG5cbnVpcy5kaXJlY3RpdmUoJ3VpU2VsZWN0Q2hvaWNlcycsXG4gIFsndWlTZWxlY3RDb25maWcnLCAndWlzUmVwZWF0UGFyc2VyJywgJ3VpU2VsZWN0TWluRXJyJywgJyRjb21waWxlJyxcbiAgZnVuY3Rpb24odWlTZWxlY3RDb25maWcsIFJlcGVhdFBhcnNlciwgdWlTZWxlY3RNaW5FcnIsICRjb21waWxlKSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICByZXF1aXJlOiAnXnVpU2VsZWN0JyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHRFbGVtZW50KSB7XG4gICAgICAvLyBOZWVkZWQgc28gdGhlIHVpU2VsZWN0IGNhbiBkZXRlY3QgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnRcbiAgICAgIHRFbGVtZW50LmFkZENsYXNzKCd1aS1zZWxlY3QtY2hvaWNlcycpO1xuXG4gICAgICAvLyBHZXRzIHRoZW1lIGF0dHJpYnV0ZSBmcm9tIHBhcmVudCAodWktc2VsZWN0KVxuICAgICAgdmFyIHRoZW1lID0gdEVsZW1lbnQucGFyZW50KCkuYXR0cigndGhlbWUnKSB8fCB1aVNlbGVjdENvbmZpZy50aGVtZTtcbiAgICAgIHJldHVybiB0aGVtZSArICcvY2hvaWNlcy50cGwuaHRtbCc7XG4gICAgfSxcblxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcblxuICAgICAgaWYgKCF0QXR0cnMucmVwZWF0KSB0aHJvdyB1aVNlbGVjdE1pbkVycigncmVwZWF0JywgXCJFeHBlY3RlZCAncmVwZWF0JyBleHByZXNzaW9uLlwiKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCAkc2VsZWN0LCB0cmFuc2NsdWRlRm4pIHtcblxuICAgICAgICAvLyB2YXIgcmVwZWF0ID0gUmVwZWF0UGFyc2VyLnBhcnNlKGF0dHJzLnJlcGVhdCk7XG4gICAgICAgIHZhciBncm91cEJ5RXhwID0gYXR0cnMuZ3JvdXBCeTtcbiAgICAgICAgdmFyIGdyb3VwRmlsdGVyRXhwID0gYXR0cnMuZ3JvdXBGaWx0ZXI7XG5cbiAgICAgICAgJHNlbGVjdC5wYXJzZVJlcGVhdEF0dHIoYXR0cnMucmVwZWF0LCBncm91cEJ5RXhwLCBncm91cEZpbHRlckV4cCk7IC8vUmVzdWx0IHJlYWR5IGF0ICRzZWxlY3QucGFyc2VyUmVzdWx0XG5cbiAgICAgICAgJHNlbGVjdC5kaXNhYmxlQ2hvaWNlRXhwcmVzc2lvbiA9IGF0dHJzLnVpRGlzYWJsZUNob2ljZTtcbiAgICAgICAgJHNlbGVjdC5vbkhpZ2hsaWdodENhbGxiYWNrID0gYXR0cnMub25IaWdobGlnaHQ7XG5cbiAgICAgICAgJHNlbGVjdC5kcm9wZG93blBvc2l0aW9uID0gYXR0cnMucG9zaXRpb24gPyBhdHRycy5wb3NpdGlvbi50b0xvd2VyQ2FzZSgpIDogdWlTZWxlY3RDb25maWcuZHJvcGRvd25Qb3NpdGlvbjtcblxuICAgICAgICBpZihncm91cEJ5RXhwKSB7XG4gICAgICAgICAgdmFyIGdyb3VwcyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnVpLXNlbGVjdC1jaG9pY2VzLWdyb3VwJyk7XG4gICAgICAgICAgaWYgKGdyb3Vwcy5sZW5ndGggIT09IDEpIHRocm93IHVpU2VsZWN0TWluRXJyKCdyb3dzJywgXCJFeHBlY3RlZCAxIC51aS1zZWxlY3QtY2hvaWNlcy1ncm91cCBidXQgZ290ICd7MH0nLlwiLCBncm91cHMubGVuZ3RoKTtcbiAgICAgICAgICBncm91cHMuYXR0cignbmctcmVwZWF0JywgUmVwZWF0UGFyc2VyLmdldEdyb3VwTmdSZXBlYXRFeHByZXNzaW9uKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNob2ljZXMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy51aS1zZWxlY3QtY2hvaWNlcy1yb3cnKTtcbiAgICAgICAgaWYgKGNob2ljZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgdWlTZWxlY3RNaW5FcnIoJ3Jvd3MnLCBcIkV4cGVjdGVkIDEgLnVpLXNlbGVjdC1jaG9pY2VzLXJvdyBidXQgZ290ICd7MH0nLlwiLCBjaG9pY2VzLmxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaG9pY2VzLmF0dHIoJ25nLXJlcGVhdCcsICRzZWxlY3QucGFyc2VyUmVzdWx0LnJlcGVhdEV4cHJlc3Npb24oZ3JvdXBCeUV4cCkpXG4gICAgICAgICAgICAuYXR0cignbmctaWYnLCAnJHNlbGVjdC5vcGVuJykgLy9QcmV2ZW50IHVubmVjZXNzYXJ5IHdhdGNoZXMgd2hlbiBkcm9wZG93biBpcyBjbG9zZWRcbiAgICAgICAgICAgIC5hdHRyKCduZy1jbGljaycsICckc2VsZWN0LnNlbGVjdCgnICsgJHNlbGVjdC5wYXJzZXJSZXN1bHQuaXRlbU5hbWUgKyAnLGZhbHNlLCRldmVudCknKTtcblxuICAgICAgICB2YXIgcm93c0lubmVyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudWktc2VsZWN0LWNob2ljZXMtcm93LWlubmVyJyk7XG4gICAgICAgIGlmIChyb3dzSW5uZXIubGVuZ3RoICE9PSAxKSB0aHJvdyB1aVNlbGVjdE1pbkVycigncm93cycsIFwiRXhwZWN0ZWQgMSAudWktc2VsZWN0LWNob2ljZXMtcm93LWlubmVyIGJ1dCBnb3QgJ3swfScuXCIsIHJvd3NJbm5lci5sZW5ndGgpO1xuICAgICAgICByb3dzSW5uZXIuYXR0cigndWlzLXRyYW5zY2x1ZGUtYXBwZW5kJywgJycpOyAvL0FkZGluZyB1aXNUcmFuc2NsdWRlQXBwZW5kIGRpcmVjdGl2ZSB0byByb3cgZWxlbWVudCBhZnRlciBjaG9pY2VzIGVsZW1lbnQgaGFzIG5nUmVwZWF0XG5cbiAgICAgICAgJGNvbXBpbGUoZWxlbWVudCwgdHJhbnNjbHVkZUZuKShzY29wZSk7IC8vUGFzc2luZyBjdXJyZW50IHRyYW5zY2x1ZGVGbiB0byBiZSBhYmxlIHRvIGFwcGVuZCBlbGVtZW50cyBjb3JyZWN0bHkgZnJvbSB1aXNUcmFuc2NsdWRlQXBwZW5kXG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKCckc2VsZWN0LnNlYXJjaCcsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgaWYobmV3VmFsdWUgJiYgISRzZWxlY3Qub3BlbiAmJiAkc2VsZWN0Lm11bHRpcGxlKSAkc2VsZWN0LmFjdGl2YXRlKGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAkc2VsZWN0LmFjdGl2ZUluZGV4ID0gJHNlbGVjdC50YWdnaW5nLmlzQWN0aXZhdGVkID8gLTEgOiAwO1xuICAgICAgICAgIGlmICghYXR0cnMubWluaW11bUlucHV0TGVuZ3RoIHx8ICRzZWxlY3Quc2VhcmNoLmxlbmd0aCA+PSBhdHRycy5taW5pbXVtSW5wdXRMZW5ndGgpIHtcbiAgICAgICAgICAgICRzZWxlY3QucmVmcmVzaChhdHRycy5yZWZyZXNoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHNlbGVjdC5pdGVtcyA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXR0cnMuJG9ic2VydmUoJ3JlZnJlc2hEZWxheScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vICRldmFsKCkgaXMgbmVlZGVkIG90aGVyd2lzZSB3ZSBnZXQgYSBzdHJpbmcgaW5zdGVhZCBvZiBhIG51bWJlclxuICAgICAgICAgIHZhciByZWZyZXNoRGVsYXkgPSBzY29wZS4kZXZhbChhdHRycy5yZWZyZXNoRGVsYXkpO1xuICAgICAgICAgICRzZWxlY3QucmVmcmVzaERlbGF5ID0gcmVmcmVzaERlbGF5ICE9PSB1bmRlZmluZWQgPyByZWZyZXNoRGVsYXkgOiB1aVNlbGVjdENvbmZpZy5yZWZyZXNoRGVsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XSk7XG5cbi8qKlxuICogQ29udGFpbnMgdWktc2VsZWN0IFwiaW50ZWxsaWdlbmNlXCIuXG4gKlxuICogVGhlIGdvYWwgaXMgdG8gbGltaXQgZGVwZW5kZW5jeSBvbiB0aGUgRE9NIHdoZW5ldmVyIHBvc3NpYmxlIGFuZFxuICogcHV0IGFzIG11Y2ggbG9naWMgaW4gdGhlIGNvbnRyb2xsZXIgKGluc3RlYWQgb2YgdGhlIGxpbmsgZnVuY3Rpb25zKSBhcyBwb3NzaWJsZSBzbyBpdCBjYW4gYmUgZWFzaWx5IHRlc3RlZC5cbiAqL1xudWlzLmNvbnRyb2xsZXIoJ3VpU2VsZWN0Q3RybCcsXG4gIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyR0aW1lb3V0JywgJyRmaWx0ZXInLCAndWlzUmVwZWF0UGFyc2VyJywgJ3VpU2VsZWN0TWluRXJyJywgJ3VpU2VsZWN0Q29uZmlnJywgJyRwYXJzZScsICckaW5qZWN0b3InLFxuICBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkdGltZW91dCwgJGZpbHRlciwgUmVwZWF0UGFyc2VyLCB1aVNlbGVjdE1pbkVyciwgdWlTZWxlY3RDb25maWcsICRwYXJzZSwgJGluamVjdG9yKSB7XG5cbiAgdmFyIGN0cmwgPSB0aGlzO1xuXG4gIHZhciBFTVBUWV9TRUFSQ0ggPSAnJztcblxuICBjdHJsLnBsYWNlaG9sZGVyID0gdWlTZWxlY3RDb25maWcucGxhY2Vob2xkZXI7XG4gIGN0cmwuc2VhcmNoRW5hYmxlZCA9IHVpU2VsZWN0Q29uZmlnLnNlYXJjaEVuYWJsZWQ7XG4gIGN0cmwuc29ydGFibGUgPSB1aVNlbGVjdENvbmZpZy5zb3J0YWJsZTtcbiAgY3RybC5yZWZyZXNoRGVsYXkgPSB1aVNlbGVjdENvbmZpZy5yZWZyZXNoRGVsYXk7XG4gIGN0cmwucGFzdGUgPSB1aVNlbGVjdENvbmZpZy5wYXN0ZTtcblxuICBjdHJsLnJlbW92ZVNlbGVjdGVkID0gZmFsc2U7IC8vSWYgc2VsZWN0ZWQgaXRlbShzKSBzaG91bGQgYmUgcmVtb3ZlZCBmcm9tIGRyb3Bkb3duIGxpc3RcbiAgY3RybC5jbG9zZU9uU2VsZWN0ID0gdHJ1ZTsgLy9Jbml0aWFsaXplZCBpbnNpZGUgdWlTZWxlY3QgZGlyZWN0aXZlIGxpbmsgZnVuY3Rpb25cbiAgY3RybC5zZWFyY2ggPSBFTVBUWV9TRUFSQ0g7XG5cbiAgY3RybC5hY3RpdmVJbmRleCA9IDA7IC8vRHJvcGRvd24gb2YgY2hvaWNlc1xuICBjdHJsLml0ZW1zID0gW107IC8vQWxsIGF2YWlsYWJsZSBjaG9pY2VzXG5cbiAgY3RybC5vcGVuID0gZmFsc2U7XG4gIGN0cmwuZm9jdXMgPSBmYWxzZTtcbiAgY3RybC5kaXNhYmxlZCA9IGZhbHNlO1xuICBjdHJsLnNlbGVjdGVkID0gdW5kZWZpbmVkO1xuXG4gIGN0cmwuZHJvcGRvd25Qb3NpdGlvbiA9ICdhdXRvJztcblxuICBjdHJsLmZvY3Vzc2VyID0gdW5kZWZpbmVkOyAvL1JlZmVyZW5jZSB0byBpbnB1dCBlbGVtZW50IHVzZWQgdG8gaGFuZGxlIGZvY3VzIGV2ZW50c1xuICBjdHJsLnJlc2V0U2VhcmNoSW5wdXQgPSB0cnVlO1xuICBjdHJsLm11bHRpcGxlID0gdW5kZWZpbmVkOyAvLyBJbml0aWFsaXplZCBpbnNpZGUgdWlTZWxlY3QgZGlyZWN0aXZlIGxpbmsgZnVuY3Rpb25cbiAgY3RybC5kaXNhYmxlQ2hvaWNlRXhwcmVzc2lvbiA9IHVuZGVmaW5lZDsgLy8gSW5pdGlhbGl6ZWQgaW5zaWRlIHVpU2VsZWN0Q2hvaWNlcyBkaXJlY3RpdmUgbGluayBmdW5jdGlvblxuICBjdHJsLnRhZ2dpbmcgPSB7aXNBY3RpdmF0ZWQ6IGZhbHNlLCBmY3Q6IHVuZGVmaW5lZH07XG4gIGN0cmwudGFnZ2luZ1Rva2VucyA9IHtpc0FjdGl2YXRlZDogZmFsc2UsIHRva2VuczogdW5kZWZpbmVkfTtcbiAgY3RybC5sb2NrQ2hvaWNlRXhwcmVzc2lvbiA9IHVuZGVmaW5lZDsgLy8gSW5pdGlhbGl6ZWQgaW5zaWRlIHVpU2VsZWN0TWF0Y2ggZGlyZWN0aXZlIGxpbmsgZnVuY3Rpb25cbiAgY3RybC5jbGlja1RyaWdnZXJlZFNlbGVjdCA9IGZhbHNlO1xuICBjdHJsLiRmaWx0ZXIgPSAkZmlsdGVyO1xuXG4gIC8vIFVzZSAkaW5qZWN0b3IgdG8gY2hlY2sgZm9yICRhbmltYXRlIGFuZCBzdG9yZSBhIHJlZmVyZW5jZSB0byBpdFxuICBjdHJsLiRhbmltYXRlID0gKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQoJyRhbmltYXRlJyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyAkYW5pbWF0ZSBkb2VzIG5vdCBleGlzdFxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9KSgpO1xuXG4gIGN0cmwuc2VhcmNoSW5wdXQgPSAkZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dC51aS1zZWxlY3Qtc2VhcmNoJyk7XG4gIGlmIChjdHJsLnNlYXJjaElucHV0Lmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IHVpU2VsZWN0TWluRXJyKCdzZWFyY2hJbnB1dCcsIFwiRXhwZWN0ZWQgMSBpbnB1dC51aS1zZWxlY3Qtc2VhcmNoIGJ1dCBnb3QgJ3swfScuXCIsIGN0cmwuc2VhcmNoSW5wdXQubGVuZ3RoKTtcbiAgfVxuXG4gIGN0cmwuaXNFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhbmd1bGFyLmlzVW5kZWZpbmVkKGN0cmwuc2VsZWN0ZWQpIHx8IGN0cmwuc2VsZWN0ZWQgPT09IG51bGwgfHwgY3RybC5zZWxlY3RlZCA9PT0gJycgfHwgKGN0cmwubXVsdGlwbGUgJiYgY3RybC5zZWxlY3RlZC5sZW5ndGggPT09IDApO1xuICB9O1xuXG4gIGZ1bmN0aW9uIF9maW5kSW5kZXgoY29sbGVjdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKXtcbiAgICBpZiAoY29sbGVjdGlvbi5maW5kSW5kZXgpe1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsaXN0ID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gbGlzdFtpXTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgLy8gTW9zdCBvZiB0aGUgdGltZSB0aGUgdXNlciBkb2VzIG5vdCB3YW50IHRvIGVtcHR5IHRoZSBzZWFyY2ggaW5wdXQgd2hlbiBpbiB0eXBlYWhlYWQgbW9kZVxuICBmdW5jdGlvbiBfcmVzZXRTZWFyY2hJbnB1dCgpIHtcbiAgICBpZiAoY3RybC5yZXNldFNlYXJjaElucHV0IHx8IChjdHJsLnJlc2V0U2VhcmNoSW5wdXQgPT09IHVuZGVmaW5lZCAmJiB1aVNlbGVjdENvbmZpZy5yZXNldFNlYXJjaElucHV0KSkge1xuICAgICAgY3RybC5zZWFyY2ggPSBFTVBUWV9TRUFSQ0g7XG4gICAgICAvL3Jlc2V0IGFjdGl2ZUluZGV4XG4gICAgICBpZiAoY3RybC5zZWxlY3RlZCAmJiBjdHJsLml0ZW1zLmxlbmd0aCAmJiAhY3RybC5tdWx0aXBsZSkge1xuICAgICAgICBjdHJsLmFjdGl2ZUluZGV4ID0gX2ZpbmRJbmRleChjdHJsLml0ZW1zLCBmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICByZXR1cm4gYW5ndWxhci5lcXVhbHModGhpcywgaXRlbSk7XG4gICAgICAgIH0sIGN0cmwuc2VsZWN0ZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICAgZnVuY3Rpb24gX2dyb3Vwc0ZpbHRlcihncm91cHMsIGdyb3VwTmFtZXMpIHtcbiAgICAgIHZhciBpLCBqLCByZXN1bHQgPSBbXTtcbiAgICAgIGZvcihpID0gMDsgaSA8IGdyb3VwTmFtZXMubGVuZ3RoIDtpKyspe1xuICAgICAgICBmb3IoaiA9IDA7IGogPCBncm91cHMubGVuZ3RoIDtqKyspe1xuICAgICAgICAgIGlmKGdyb3Vwc1tqXS5uYW1lID09IFtncm91cE5hbWVzW2ldXSl7XG4gICAgICAgICAgICByZXN1bHQucHVzaChncm91cHNbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgLy8gV2hlbiB0aGUgdXNlciBjbGlja3Mgb24gdWktc2VsZWN0LCBkaXNwbGF5cyB0aGUgZHJvcGRvd24gbGlzdFxuICBjdHJsLmFjdGl2YXRlID0gZnVuY3Rpb24oaW5pdFNlYXJjaFZhbHVlLCBhdm9pZFJlc2V0KSB7XG4gICAgaWYgKCFjdHJsLmRpc2FibGVkICAmJiAhY3RybC5vcGVuKSB7XG4gICAgICBpZighYXZvaWRSZXNldCkgX3Jlc2V0U2VhcmNoSW5wdXQoKTtcblxuICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3VpczphY3RpdmF0ZScpO1xuXG4gICAgICBjdHJsLm9wZW4gPSB0cnVlO1xuXG4gICAgICBjdHJsLmFjdGl2ZUluZGV4ID0gY3RybC5hY3RpdmVJbmRleCA+PSBjdHJsLml0ZW1zLmxlbmd0aCA/IDAgOiBjdHJsLmFjdGl2ZUluZGV4O1xuXG4gICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgaW5kZXggaXMgc2V0IHRvIHplcm8gZm9yIHRhZ2dpbmcgdmFyaWFudHNcbiAgICAgIC8vIHRoYXQgd2hlcmUgZmlyc3Qgb3B0aW9uIGlzIGF1dG8tc2VsZWN0ZWRcbiAgICAgIGlmICggY3RybC5hY3RpdmVJbmRleCA9PT0gLTEgJiYgY3RybC50YWdnaW5nTGFiZWwgIT09IGZhbHNlICkge1xuICAgICAgICBjdHJsLmFjdGl2ZUluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRhaW5lciA9ICRlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy51aS1zZWxlY3QtY2hvaWNlcy1jb250ZW50Jyk7XG4gICAgICBpZiAoY3RybC4kYW5pbWF0ZSAmJiBjdHJsLiRhbmltYXRlLmVuYWJsZWQoY29udGFpbmVyWzBdKSkge1xuICAgICAgICBjdHJsLiRhbmltYXRlLm9uKCdlbnRlcicsIGNvbnRhaW5lclswXSwgZnVuY3Rpb24gKGVsZW0sIHBoYXNlKSB7XG4gICAgICAgICAgaWYgKHBoYXNlID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGZvY3VzIGlucHV0IGFmdGVyIHRoZSBhbmltYXRpb24gaGFzIGZpbmlzaGVkXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGN0cmwuZm9jdXNTZWFyY2hJbnB1dChpbml0U2VhcmNoVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjdHJsLmZvY3VzU2VhcmNoSW5wdXQoaW5pdFNlYXJjaFZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGN0cmwuZm9jdXNTZWFyY2hJbnB1dCA9IGZ1bmN0aW9uIChpbml0U2VhcmNoVmFsdWUpIHtcbiAgICBjdHJsLnNlYXJjaCA9IGluaXRTZWFyY2hWYWx1ZSB8fCBjdHJsLnNlYXJjaDtcbiAgICBjdHJsLnNlYXJjaElucHV0WzBdLmZvY3VzKCk7XG4gICAgaWYoIWN0cmwudGFnZ2luZy5pc0FjdGl2YXRlZCAmJiBjdHJsLml0ZW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgX2Vuc3VyZUhpZ2hsaWdodFZpc2libGUoKTtcbiAgICB9XG4gIH07XG5cbiAgY3RybC5maW5kR3JvdXBCeU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIGN0cmwuZ3JvdXBzICYmIGN0cmwuZ3JvdXBzLmZpbHRlcihmdW5jdGlvbihncm91cCkge1xuICAgICAgcmV0dXJuIGdyb3VwLm5hbWUgPT09IG5hbWU7XG4gICAgfSlbMF07XG4gIH07XG5cbiAgY3RybC5wYXJzZVJlcGVhdEF0dHIgPSBmdW5jdGlvbihyZXBlYXRBdHRyLCBncm91cEJ5RXhwLCBncm91cEZpbHRlckV4cCkge1xuICAgIGZ1bmN0aW9uIHVwZGF0ZUdyb3VwcyhpdGVtcykge1xuICAgICAgdmFyIGdyb3VwRm4gPSAkc2NvcGUuJGV2YWwoZ3JvdXBCeUV4cCk7XG4gICAgICBjdHJsLmdyb3VwcyA9IFtdO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciBncm91cE5hbWUgPSBhbmd1bGFyLmlzRnVuY3Rpb24oZ3JvdXBGbikgPyBncm91cEZuKGl0ZW0pIDogaXRlbVtncm91cEZuXTtcbiAgICAgICAgdmFyIGdyb3VwID0gY3RybC5maW5kR3JvdXBCeU5hbWUoZ3JvdXBOYW1lKTtcbiAgICAgICAgaWYoZ3JvdXApIHtcbiAgICAgICAgICBncm91cC5pdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGN0cmwuZ3JvdXBzLnB1c2goe25hbWU6IGdyb3VwTmFtZSwgaXRlbXM6IFtpdGVtXX0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmKGdyb3VwRmlsdGVyRXhwKXtcbiAgICAgICAgdmFyIGdyb3VwRmlsdGVyRm4gPSAkc2NvcGUuJGV2YWwoZ3JvdXBGaWx0ZXJFeHApO1xuICAgICAgICBpZiggYW5ndWxhci5pc0Z1bmN0aW9uKGdyb3VwRmlsdGVyRm4pKXtcbiAgICAgICAgICBjdHJsLmdyb3VwcyA9IGdyb3VwRmlsdGVyRm4oY3RybC5ncm91cHMpO1xuICAgICAgICB9IGVsc2UgaWYoYW5ndWxhci5pc0FycmF5KGdyb3VwRmlsdGVyRm4pKXtcbiAgICAgICAgICBjdHJsLmdyb3VwcyA9IF9ncm91cHNGaWx0ZXIoY3RybC5ncm91cHMsIGdyb3VwRmlsdGVyRm4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHJsLml0ZW1zID0gW107XG4gICAgICBjdHJsLmdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGN0cmwuaXRlbXMgPSBjdHJsLml0ZW1zLmNvbmNhdChncm91cC5pdGVtcyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRQbGFpbkl0ZW1zKGl0ZW1zKSB7XG4gICAgICBjdHJsLml0ZW1zID0gaXRlbXM7XG4gICAgfVxuXG4gICAgY3RybC5zZXRJdGVtc0ZuID0gZ3JvdXBCeUV4cCA/IHVwZGF0ZUdyb3VwcyA6IHNldFBsYWluSXRlbXM7XG5cbiAgICBjdHJsLnBhcnNlclJlc3VsdCA9IFJlcGVhdFBhcnNlci5wYXJzZShyZXBlYXRBdHRyKTtcblxuICAgIGN0cmwuaXNHcm91cGVkID0gISFncm91cEJ5RXhwO1xuICAgIGN0cmwuaXRlbVByb3BlcnR5ID0gY3RybC5wYXJzZXJSZXN1bHQuaXRlbU5hbWU7XG5cbiAgICAvL0lmIGNvbGxlY3Rpb24gaXMgYW4gT2JqZWN0LCBjb252ZXJ0IGl0IHRvIEFycmF5XG5cbiAgICB2YXIgb3JpZ2luYWxTb3VyY2UgPSBjdHJsLnBhcnNlclJlc3VsdC5zb3VyY2U7XG5cbiAgICAvL1doZW4gYW4gb2JqZWN0IGlzIHVzZWQgYXMgc291cmNlLCB3ZSBiZXR0ZXIgY3JlYXRlIGFuIGFycmF5IGFuZCB1c2UgaXQgYXMgJ3NvdXJjZSdcbiAgICB2YXIgY3JlYXRlQXJyYXlGcm9tT2JqZWN0ID0gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBvcmlnU3JjID0gb3JpZ2luYWxTb3VyY2UoJHNjb3BlKTtcbiAgICAgICRzY29wZS4kdWlzU291cmNlID0gT2JqZWN0LmtleXMob3JpZ1NyYykubWFwKGZ1bmN0aW9uKHYpe1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIHJlc3VsdFtjdHJsLnBhcnNlclJlc3VsdC5rZXlOYW1lXSA9IHY7XG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IG9yaWdTcmNbdl07XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKGN0cmwucGFyc2VyUmVzdWx0LmtleU5hbWUpeyAvLyBDaGVjayBmb3IgKGtleSx2YWx1ZSkgc3ludGF4XG4gICAgICBjcmVhdGVBcnJheUZyb21PYmplY3QoKTtcbiAgICAgIGN0cmwucGFyc2VyUmVzdWx0LnNvdXJjZSA9ICRwYXJzZSgnJHVpc1NvdXJjZScgKyBjdHJsLnBhcnNlclJlc3VsdC5maWx0ZXJzKTtcbiAgICAgICRzY29wZS4kd2F0Y2gob3JpZ2luYWxTb3VyY2UsIGZ1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsKXtcbiAgICAgICAgaWYgKG5ld1ZhbCAhPT0gb2xkVmFsKSBjcmVhdGVBcnJheUZyb21PYmplY3QoKTtcbiAgICAgIH0sIHRydWUpO1xuICAgIH1cblxuICAgIGN0cmwucmVmcmVzaEl0ZW1zID0gZnVuY3Rpb24gKGRhdGEpe1xuICAgICAgZGF0YSA9IGRhdGEgfHwgY3RybC5wYXJzZXJSZXN1bHQuc291cmNlKCRzY29wZSk7XG4gICAgICB2YXIgc2VsZWN0ZWRJdGVtcyA9IGN0cmwuc2VsZWN0ZWQ7XG4gICAgICAvL1RPRE8gc2hvdWxkIGltcGxlbWVudCBmb3Igc2luZ2xlIG1vZGUgcmVtb3ZlU2VsZWN0ZWRcbiAgICAgIGlmIChjdHJsLmlzRW1wdHkoKSB8fCAoYW5ndWxhci5pc0FycmF5KHNlbGVjdGVkSXRlbXMpICYmICFzZWxlY3RlZEl0ZW1zLmxlbmd0aCkgfHwgIWN0cmwucmVtb3ZlU2VsZWN0ZWQpIHtcbiAgICAgICAgY3RybC5zZXRJdGVtc0ZuKGRhdGEpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgIHZhciBmaWx0ZXJlZEl0ZW1zID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24oaSkge3JldHVybiBzZWxlY3RlZEl0ZW1zICYmIHNlbGVjdGVkSXRlbXMuaW5kZXhPZihpKSA8IDA7fSk7XG4gICAgICAgICAgY3RybC5zZXRJdGVtc0ZuKGZpbHRlcmVkSXRlbXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3RybC5kcm9wZG93blBvc2l0aW9uID09PSAnYXV0bycgfHwgY3RybC5kcm9wZG93blBvc2l0aW9uID09PSAndXAnKXtcbiAgICAgICAgJHNjb3BlLmNhbGN1bGF0ZURyb3Bkb3duUG9zKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2Jsb2IvdjEuMi4xNS9zcmMvbmcvZGlyZWN0aXZlL25nUmVwZWF0LmpzI0wyNTlcbiAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihjdHJsLnBhcnNlclJlc3VsdC5zb3VyY2UsIGZ1bmN0aW9uKGl0ZW1zKSB7XG4gICAgICBpZiAoaXRlbXMgPT09IHVuZGVmaW5lZCB8fCBpdGVtcyA9PT0gbnVsbCkge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBzcGVjaWZpZXMgdW5kZWZpbmVkIG9yIG51bGwgPT4gcmVzZXQgdGhlIGNvbGxlY3Rpb25cbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBpdGVtcyBjYW4gYmUgdW5kZWZpbmVkIGlmIHRoZSB1c2VyIGRpZCBub3QgaW5pdGlhbGl6ZWQgdGhlIGNvbGxlY3Rpb24gb24gdGhlIHNjb3BlXG4gICAgICAgIC8vIGkuZSAkc2NvcGUuYWRkcmVzc2VzID0gW10gaXMgbWlzc2luZ1xuICAgICAgICBjdHJsLml0ZW1zID0gW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWFuZ3VsYXIuaXNBcnJheShpdGVtcykpIHtcbiAgICAgICAgICB0aHJvdyB1aVNlbGVjdE1pbkVycignaXRlbXMnLCBcIkV4cGVjdGVkIGFuIGFycmF5IGJ1dCBnb3QgJ3swfScuXCIsIGl0ZW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL1JlbW92ZSBhbHJlYWR5IHNlbGVjdGVkIGl0ZW1zIChleDogd2hpbGUgc2VhcmNoaW5nKVxuICAgICAgICAgIC8vVE9ETyBTaG91bGQgYWRkIGEgdGVzdFxuICAgICAgICAgIGN0cmwucmVmcmVzaEl0ZW1zKGl0ZW1zKTtcbiAgICAgICAgICBjdHJsLm5nTW9kZWwuJG1vZGVsVmFsdWUgPSBudWxsOyAvL0ZvcmNlIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIHRvIGJlIG91dCBvZiBzeW5jIHRvIHJlLXJ1biBmb3JtYXR0ZXJzXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICB9O1xuXG4gIHZhciBfcmVmcmVzaERlbGF5UHJvbWlzZTtcblxuICAvKipcbiAgICogVHlwZWFoZWFkIG1vZGU6IGxldHMgdGhlIHVzZXIgcmVmcmVzaCB0aGUgY29sbGVjdGlvbiB1c2luZyBoaXMgb3duIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBTZWUgRXhwb3NlICRzZWxlY3Quc2VhcmNoIGZvciBleHRlcm5hbCAvIHJlbW90ZSBmaWx0ZXJpbmcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvdWktc2VsZWN0L3B1bGwvMzFcbiAgICovXG4gIGN0cmwucmVmcmVzaCA9IGZ1bmN0aW9uKHJlZnJlc2hBdHRyKSB7XG4gICAgaWYgKHJlZnJlc2hBdHRyICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgLy8gRGVib3VuY2VcbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci11aS9ib290c3RyYXAvYmxvYi8wLjEwLjAvc3JjL3R5cGVhaGVhZC90eXBlYWhlYWQuanMjTDE1NVxuICAgICAgLy8gRllJIEFuZ3VsYXJTdHJhcCB0eXBlYWhlYWQgZG9lcyBub3QgaGF2ZSBkZWJvdW5jaW5nOiBodHRwczovL2dpdGh1Yi5jb20vbWdjcmVhL2FuZ3VsYXItc3RyYXAvYmxvYi92Mi4wLjAtcmMuNC9zcmMvdHlwZWFoZWFkL3R5cGVhaGVhZC5qcyNMMTc3XG4gICAgICBpZiAoX3JlZnJlc2hEZWxheVByb21pc2UpIHtcbiAgICAgICAgJHRpbWVvdXQuY2FuY2VsKF9yZWZyZXNoRGVsYXlQcm9taXNlKTtcbiAgICAgIH1cbiAgICAgIF9yZWZyZXNoRGVsYXlQcm9taXNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS4kZXZhbChyZWZyZXNoQXR0cik7XG4gICAgICB9LCBjdHJsLnJlZnJlc2hEZWxheSk7XG4gICAgfVxuICB9O1xuXG4gIGN0cmwuaXNBY3RpdmUgPSBmdW5jdGlvbihpdGVtU2NvcGUpIHtcbiAgICBpZiAoICFjdHJsLm9wZW4gKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpdGVtSW5kZXggPSBjdHJsLml0ZW1zLmluZGV4T2YoaXRlbVNjb3BlW2N0cmwuaXRlbVByb3BlcnR5XSk7XG4gICAgdmFyIGlzQWN0aXZlID0gIGl0ZW1JbmRleCA9PSBjdHJsLmFjdGl2ZUluZGV4O1xuXG4gICAgaWYgKCAhaXNBY3RpdmUgfHwgKCBpdGVtSW5kZXggPCAwICYmIGN0cmwudGFnZ2luZ0xhYmVsICE9PSBmYWxzZSApIHx8KCBpdGVtSW5kZXggPCAwICYmIGN0cmwudGFnZ2luZ0xhYmVsID09PSBmYWxzZSkgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzQWN0aXZlICYmICFhbmd1bGFyLmlzVW5kZWZpbmVkKGN0cmwub25IaWdobGlnaHRDYWxsYmFjaykpIHtcbiAgICAgIGl0ZW1TY29wZS4kZXZhbChjdHJsLm9uSGlnaGxpZ2h0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBpc0FjdGl2ZTtcbiAgfTtcblxuICBjdHJsLmlzRGlzYWJsZWQgPSBmdW5jdGlvbihpdGVtU2NvcGUpIHtcblxuICAgIGlmICghY3RybC5vcGVuKSByZXR1cm47XG5cbiAgICB2YXIgaXRlbUluZGV4ID0gY3RybC5pdGVtcy5pbmRleE9mKGl0ZW1TY29wZVtjdHJsLml0ZW1Qcm9wZXJ0eV0pO1xuICAgIHZhciBpc0Rpc2FibGVkID0gZmFsc2U7XG4gICAgdmFyIGl0ZW07XG5cbiAgICBpZiAoaXRlbUluZGV4ID49IDAgJiYgIWFuZ3VsYXIuaXNVbmRlZmluZWQoY3RybC5kaXNhYmxlQ2hvaWNlRXhwcmVzc2lvbikpIHtcbiAgICAgIGl0ZW0gPSBjdHJsLml0ZW1zW2l0ZW1JbmRleF07XG4gICAgICBpc0Rpc2FibGVkID0gISEoaXRlbVNjb3BlLiRldmFsKGN0cmwuZGlzYWJsZUNob2ljZUV4cHJlc3Npb24pKTsgLy8gZm9yY2UgdGhlIGJvb2xlYW4gdmFsdWVcbiAgICAgIGl0ZW0uX3VpU2VsZWN0Q2hvaWNlRGlzYWJsZWQgPSBpc0Rpc2FibGVkOyAvLyBzdG9yZSB0aGlzIGZvciBsYXRlciByZWZlcmVuY2VcbiAgICB9XG5cbiAgICByZXR1cm4gaXNEaXNhYmxlZDtcbiAgfTtcblxuXG4gIC8vIFdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhbiBpdGVtIHdpdGggRU5URVIgb3IgY2xpY2tzIHRoZSBkcm9wZG93blxuICBjdHJsLnNlbGVjdCA9IGZ1bmN0aW9uKGl0ZW0sIHNraXBGb2N1c3NlciwgJGV2ZW50KSB7XG4gICAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCB8fCAhaXRlbS5fdWlTZWxlY3RDaG9pY2VEaXNhYmxlZCkge1xuXG4gICAgICBpZiAoICEgY3RybC5pdGVtcyAmJiAhIGN0cmwuc2VhcmNoICYmICEgY3RybC50YWdnaW5nLmlzQWN0aXZhdGVkKSByZXR1cm47XG5cbiAgICAgIGlmICghaXRlbSB8fCAhaXRlbS5fdWlTZWxlY3RDaG9pY2VEaXNhYmxlZCkge1xuICAgICAgICBpZihjdHJsLnRhZ2dpbmcuaXNBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAvLyBpZiB0YWdnaW5nTGFiZWwgaXMgZGlzYWJsZWQsIHdlIHB1bGwgZnJvbSBjdHJsLnNlYXJjaCB2YWxcbiAgICAgICAgICBpZiAoIGN0cmwudGFnZ2luZ0xhYmVsID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgIGlmICggY3RybC5hY3RpdmVJbmRleCA8IDAgKSB7XG4gICAgICAgICAgICAgIGl0ZW0gPSBjdHJsLnRhZ2dpbmcuZmN0ICE9PSB1bmRlZmluZWQgPyBjdHJsLnRhZ2dpbmcuZmN0KGN0cmwuc2VhcmNoKSA6IGN0cmwuc2VhcmNoO1xuICAgICAgICAgICAgICBpZiAoIWl0ZW0gfHwgYW5ndWxhci5lcXVhbHMoIGN0cmwuaXRlbXNbMF0sIGl0ZW0gKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGtleWJvYXJkIG5hdiBoYXBwZW5lZCBmaXJzdCwgdXNlciBzZWxlY3RlZCBmcm9tIGRyb3Bkb3duXG4gICAgICAgICAgICAgIGl0ZW0gPSBjdHJsLml0ZW1zW2N0cmwuYWN0aXZlSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0YWdnaW5nIGFsd2F5cyBvcGVyYXRlcyBhdCBpbmRleCB6ZXJvLCB0YWdnaW5nTGFiZWwgPT09IGZhbHNlIHB1c2hlc1xuICAgICAgICAgICAgLy8gdGhlIGN0cmwuc2VhcmNoIHZhbHVlIHdpdGhvdXQgaGF2aW5nIGl0IGluamVjdGVkXG4gICAgICAgICAgICBpZiAoIGN0cmwuYWN0aXZlSW5kZXggPT09IDAgKSB7XG4gICAgICAgICAgICAgIC8vIGN0cmwudGFnZ2luZyBwdXNoZXMgaXRlbXMgdG8gY3RybC5pdGVtcywgc28gd2Ugb25seSBoYXZlIGVtcHR5IHZhbFxuICAgICAgICAgICAgICAvLyBmb3IgYGl0ZW1gIGlmIGl0IGlzIGEgZGV0ZWN0ZWQgZHVwbGljYXRlXG4gICAgICAgICAgICAgIGlmICggaXRlbSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgaXRlbSBvbiB0aGUgZmx5IGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBvbmU7XG4gICAgICAgICAgICAgIC8vIHVzZSB0YWdnaW5nIGZ1bmN0aW9uIGlmIHdlIGhhdmUgb25lXG4gICAgICAgICAgICAgIGlmICggY3RybC50YWdnaW5nLmZjdCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyApIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gY3RybC50YWdnaW5nLmZjdChpdGVtKTtcbiAgICAgICAgICAgICAgICBpZiAoIWl0ZW0pIHJldHVybjtcbiAgICAgICAgICAgICAgLy8gaWYgaXRlbSB0eXBlIGlzICdzdHJpbmcnLCBhcHBseSB0aGUgdGFnZ2luZyBsYWJlbFxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJpbSB0aGUgdHJhaWxpbmcgc3BhY2VcbiAgICAgICAgICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKGN0cmwudGFnZ2luZ0xhYmVsLCcnKS50cmltKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2VhcmNoIGN0cmwuc2VsZWN0ZWQgZm9yIGR1cGVzIHBvdGVudGlhbGx5IGNhdXNlZCBieSB0YWdnaW5nIGFuZCByZXR1cm4gZWFybHkgaWYgZm91bmRcbiAgICAgICAgICBpZiAoIGN0cmwuc2VsZWN0ZWQgJiYgYW5ndWxhci5pc0FycmF5KGN0cmwuc2VsZWN0ZWQpICYmIGN0cmwuc2VsZWN0ZWQuZmlsdGVyKCBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7IHJldHVybiBhbmd1bGFyLmVxdWFscyhzZWxlY3Rpb24sIGl0ZW0pOyB9KS5sZW5ndGggPiAwICkge1xuICAgICAgICAgICAgY3RybC5jbG9zZShza2lwRm9jdXNzZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCd1aXM6c2VsZWN0JywgaXRlbSk7XG5cbiAgICAgICAgdmFyIGxvY2FscyA9IHt9O1xuICAgICAgICBsb2NhbHNbY3RybC5wYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gaXRlbTtcblxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgIGN0cmwub25TZWxlY3RDYWxsYmFjaygkc2NvcGUsIHtcbiAgICAgICAgICAgICRpdGVtOiBpdGVtLFxuICAgICAgICAgICAgJG1vZGVsOiBjdHJsLnBhcnNlclJlc3VsdC5tb2RlbE1hcHBlcigkc2NvcGUsIGxvY2FscylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGN0cmwuY2xvc2VPblNlbGVjdCkge1xuICAgICAgICAgIGN0cmwuY2xvc2Uoc2tpcEZvY3Vzc2VyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJGV2ZW50ICYmICRldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgY3RybC5jbGlja1RyaWdnZXJlZFNlbGVjdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQ2xvc2VzIHRoZSBkcm9wZG93blxuICBjdHJsLmNsb3NlID0gZnVuY3Rpb24oc2tpcEZvY3Vzc2VyKSB7XG4gICAgaWYgKCFjdHJsLm9wZW4pIHJldHVybjtcbiAgICBpZiAoY3RybC5uZ01vZGVsICYmIGN0cmwubmdNb2RlbC4kc2V0VG91Y2hlZCkgY3RybC5uZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG4gICAgX3Jlc2V0U2VhcmNoSW5wdXQoKTtcbiAgICBjdHJsLm9wZW4gPSBmYWxzZTtcblxuICAgICRzY29wZS4kYnJvYWRjYXN0KCd1aXM6Y2xvc2UnLCBza2lwRm9jdXNzZXIpO1xuXG4gIH07XG5cbiAgY3RybC5zZXRGb2N1cyA9IGZ1bmN0aW9uKCl7XG4gICAgaWYgKCFjdHJsLmZvY3VzKSBjdHJsLmZvY3VzSW5wdXRbMF0uZm9jdXMoKTtcbiAgfTtcblxuICBjdHJsLmNsZWFyID0gZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgY3RybC5zZWxlY3QodW5kZWZpbmVkKTtcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBjdHJsLmZvY3Vzc2VyWzBdLmZvY3VzKCk7XG4gICAgfSwgMCwgZmFsc2UpO1xuICB9O1xuXG4gIC8vIFRvZ2dsZSBkcm9wZG93blxuICBjdHJsLnRvZ2dsZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoY3RybC5vcGVuKSB7XG4gICAgICBjdHJsLmNsb3NlKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHJsLmFjdGl2YXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIGN0cmwuaXNMb2NrZWQgPSBmdW5jdGlvbihpdGVtU2NvcGUsIGl0ZW1JbmRleCkge1xuICAgICAgdmFyIGlzTG9ja2VkLCBpdGVtID0gY3RybC5zZWxlY3RlZFtpdGVtSW5kZXhdO1xuXG4gICAgICBpZiAoaXRlbSAmJiAhYW5ndWxhci5pc1VuZGVmaW5lZChjdHJsLmxvY2tDaG9pY2VFeHByZXNzaW9uKSkge1xuICAgICAgICAgIGlzTG9ja2VkID0gISEoaXRlbVNjb3BlLiRldmFsKGN0cmwubG9ja0Nob2ljZUV4cHJlc3Npb24pKTsgLy8gZm9yY2UgdGhlIGJvb2xlYW4gdmFsdWVcbiAgICAgICAgICBpdGVtLl91aVNlbGVjdENob2ljZUxvY2tlZCA9IGlzTG9ja2VkOyAvLyBzdG9yZSB0aGlzIGZvciBsYXRlciByZWZlcmVuY2VcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzTG9ja2VkO1xuICB9O1xuXG4gIHZhciBzaXplV2F0Y2ggPSBudWxsO1xuICBjdHJsLnNpemVTZWFyY2hJbnB1dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGlucHV0ID0gY3RybC5zZWFyY2hJbnB1dFswXSxcbiAgICAgICAgY29udGFpbmVyID0gY3RybC5zZWFyY2hJbnB1dC5wYXJlbnQoKS5wYXJlbnQoKVswXSxcbiAgICAgICAgY2FsY3VsYXRlQ29udGFpbmVyV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBSZXR1cm4gdGhlIGNvbnRhaW5lciB3aWR0aCBvbmx5IGlmIHRoZSBzZWFyY2ggaW5wdXQgaXMgdmlzaWJsZVxuICAgICAgICAgIHJldHVybiBjb250YWluZXIuY2xpZW50V2lkdGggKiAhIWlucHV0Lm9mZnNldFBhcmVudDtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlSWZWaXNpYmxlID0gZnVuY3Rpb24oY29udGFpbmVyV2lkdGgpIHtcbiAgICAgICAgICBpZiAoY29udGFpbmVyV2lkdGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGlucHV0V2lkdGggPSBjb250YWluZXJXaWR0aCAtIGlucHV0Lm9mZnNldExlZnQgLSAxMDtcbiAgICAgICAgICBpZiAoaW5wdXRXaWR0aCA8IDUwKSBpbnB1dFdpZHRoID0gY29udGFpbmVyV2lkdGg7XG4gICAgICAgICAgY3RybC5zZWFyY2hJbnB1dC5jc3MoJ3dpZHRoJywgaW5wdXRXaWR0aCsncHgnKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgIGN0cmwuc2VhcmNoSW5wdXQuY3NzKCd3aWR0aCcsICcxMHB4Jyk7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7IC8vR2l2ZSB0YWdzIHRpbWUgdG8gcmVuZGVyIGNvcnJlY3RseVxuICAgICAgaWYgKHNpemVXYXRjaCA9PT0gbnVsbCAmJiAhdXBkYXRlSWZWaXNpYmxlKGNhbGN1bGF0ZUNvbnRhaW5lcldpZHRoKCkpKSB7XG4gICAgICAgIHNpemVXYXRjaCA9ICRzY29wZS4kd2F0Y2goY2FsY3VsYXRlQ29udGFpbmVyV2lkdGgsIGZ1bmN0aW9uKGNvbnRhaW5lcldpZHRoKSB7XG4gICAgICAgICAgaWYgKHVwZGF0ZUlmVmlzaWJsZShjb250YWluZXJXaWR0aCkpIHtcbiAgICAgICAgICAgIHNpemVXYXRjaCgpO1xuICAgICAgICAgICAgc2l6ZVdhdGNoID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIF9oYW5kbGVEcm9wRG93blNlbGVjdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSBLRVkuRE9XTjpcbiAgICAgICAgaWYgKCFjdHJsLm9wZW4gJiYgY3RybC5tdWx0aXBsZSkgY3RybC5hY3RpdmF0ZShmYWxzZSwgdHJ1ZSk7IC8vSW4gY2FzZSBpdHMgdGhlIHNlYXJjaCBpbnB1dCBpbiAnbXVsdGlwbGUnIG1vZGVcbiAgICAgICAgZWxzZSBpZiAoY3RybC5hY3RpdmVJbmRleCA8IGN0cmwuaXRlbXMubGVuZ3RoIC0gMSkgeyBjdHJsLmFjdGl2ZUluZGV4Kys7IH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtFWS5VUDpcbiAgICAgICAgaWYgKCFjdHJsLm9wZW4gJiYgY3RybC5tdWx0aXBsZSkgY3RybC5hY3RpdmF0ZShmYWxzZSwgdHJ1ZSk7IC8vSW4gY2FzZSBpdHMgdGhlIHNlYXJjaCBpbnB1dCBpbiAnbXVsdGlwbGUnIG1vZGVcbiAgICAgICAgZWxzZSBpZiAoY3RybC5hY3RpdmVJbmRleCA+IDAgfHwgKGN0cmwuc2VhcmNoLmxlbmd0aCA9PT0gMCAmJiBjdHJsLnRhZ2dpbmcuaXNBY3RpdmF0ZWQgJiYgY3RybC5hY3RpdmVJbmRleCA+IC0xKSkgeyBjdHJsLmFjdGl2ZUluZGV4LS07IH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtFWS5UQUI6XG4gICAgICAgIGlmICghY3RybC5tdWx0aXBsZSB8fCBjdHJsLm9wZW4pIGN0cmwuc2VsZWN0KGN0cmwuaXRlbXNbY3RybC5hY3RpdmVJbmRleF0sIHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgS0VZLkVOVEVSOlxuICAgICAgICBpZihjdHJsLm9wZW4gJiYgKGN0cmwudGFnZ2luZy5pc0FjdGl2YXRlZCB8fCBjdHJsLmFjdGl2ZUluZGV4ID49IDApKXtcbiAgICAgICAgICBjdHJsLnNlbGVjdChjdHJsLml0ZW1zW2N0cmwuYWN0aXZlSW5kZXhdKTsgLy8gTWFrZSBzdXJlIGF0IGxlYXN0IG9uZSBkcm9wZG93biBpdGVtIGlzIGhpZ2hsaWdodGVkIGJlZm9yZSBhZGRpbmcgaWYgbm90IGluIHRhZ2dpbmcgbW9kZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0cmwuYWN0aXZhdGUoZmFsc2UsIHRydWUpOyAvL0luIGNhc2UgaXRzIHRoZSBzZWFyY2ggaW5wdXQgaW4gJ211bHRpcGxlJyBtb2RlXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtFWS5FU0M6XG4gICAgICAgIGN0cmwuY2xvc2UoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfVxuXG4gIC8vIEJpbmQgdG8ga2V5Ym9hcmQgc2hvcnRjdXRzXG4gIGN0cmwuc2VhcmNoSW5wdXQub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG5cbiAgICB2YXIga2V5ID0gZS53aGljaDtcblxuICAgIC8vIGlmKH5bS0VZLkVTQyxLRVkuVEFCXS5pbmRleE9mKGtleSkpe1xuICAgIC8vICAgLy9UT0RPOiBTRUdVUk8/XG4gICAgLy8gICBjdHJsLmNsb3NlKCk7XG4gICAgLy8gfVxuXG4gICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcblxuICAgICAgdmFyIHRhZ2dlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoY3RybC5pdGVtcy5sZW5ndGggPiAwIHx8IGN0cmwudGFnZ2luZy5pc0FjdGl2YXRlZCkge1xuICAgICAgICBfaGFuZGxlRHJvcERvd25TZWxlY3Rpb24oa2V5KTtcbiAgICAgICAgaWYgKCBjdHJsLnRhZ2dpbmdUb2tlbnMuaXNBY3RpdmF0ZWQgKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLnRhZ2dpbmdUb2tlbnMudG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIGN0cmwudGFnZ2luZ1Rva2Vucy50b2tlbnNbaV0gPT09IEtFWS5NQVBbZS5rZXlDb2RlXSApIHtcbiAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZXJlIGlzIGEgbmV3IHZhbHVlIHRvIHB1c2ggdmlhIHRhZ2dpbmdcbiAgICAgICAgICAgICAgaWYgKCBjdHJsLnNlYXJjaC5sZW5ndGggPiAwICkge1xuICAgICAgICAgICAgICAgIHRhZ2dlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCB0YWdnZWQgKSB7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgY3RybC5zZWFyY2hJbnB1dC50cmlnZ2VySGFuZGxlcigndGFnZ2VkJyk7XG4gICAgICAgICAgICAgIHZhciBuZXdJdGVtID0gY3RybC5zZWFyY2gucmVwbGFjZShLRVkuTUFQW2Uua2V5Q29kZV0sJycpLnRyaW0oKTtcbiAgICAgICAgICAgICAgaWYgKCBjdHJsLnRhZ2dpbmcuZmN0ICkge1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBjdHJsLnRhZ2dpbmcuZmN0KCBuZXdJdGVtICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG5ld0l0ZW0pIGN0cmwuc2VsZWN0KG5ld0l0ZW0sIHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIGlmKEtFWS5pc1ZlcnRpY2FsTW92ZW1lbnQoa2V5KSAmJiBjdHJsLml0ZW1zLmxlbmd0aCA+IDApe1xuICAgICAgX2Vuc3VyZUhpZ2hsaWdodFZpc2libGUoKTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSBLRVkuRU5URVIgfHwga2V5ID09PSBLRVkuRVNDKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICB9KTtcblxuICBjdHJsLnNlYXJjaElucHV0Lm9uKCdwYXN0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGRhdGE7XG5cbiAgICBpZiAod2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkgeyAvLyBJRVxuICAgICAgZGF0YSA9IHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoJ1RleHQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IChlLm9yaWdpbmFsRXZlbnQgfHwgZSkuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG4gICAgfVxuXG4gICAgLy8gUHJlcGVuZCB0aGUgY3VycmVudCBpbnB1dCBmaWVsZCB0ZXh0IHRvIHRoZSBwYXN0ZSBidWZmZXIuXG4gICAgZGF0YSA9IGN0cmwuc2VhcmNoICsgZGF0YTtcblxuICAgIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgLy8gSWYgdGFnZ2luZyB0cnkgdG8gc3BsaXQgYnkgdG9rZW5zIGFuZCBhZGQgaXRlbXNcbiAgICAgIGlmIChjdHJsLnRhZ2dpbmdUb2tlbnMuaXNBY3RpdmF0ZWQpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9IEtFWS50b1NlcGFyYXRvcihjdHJsLnRhZ2dpbmdUb2tlbnMudG9rZW5zWzBdKTtcbiAgICAgICAgdmFyIGl0ZW1zID0gZGF0YS5zcGxpdChzZXBhcmF0b3IgfHwgY3RybC50YWdnaW5nVG9rZW5zLnRva2Vuc1swXSk7IC8vIHNwbGl0IGJ5IGZpcnN0IHRva2VuIG9ubHlcbiAgICAgICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIG9sZHNlYXJjaCA9IGN0cmwuc2VhcmNoO1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciBuZXdJdGVtID0gY3RybC50YWdnaW5nLmZjdCA/IGN0cmwudGFnZ2luZy5mY3QoaXRlbSkgOiBpdGVtO1xuICAgICAgICAgICAgaWYgKG5ld0l0ZW0pIHtcbiAgICAgICAgICAgICAgY3RybC5zZWxlY3QobmV3SXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY3RybC5zZWFyY2ggPSBvbGRzZWFyY2ggfHwgRU1QVFlfU0VBUkNIO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGN0cmwucGFzdGUpIHtcbiAgICAgICAgY3RybC5wYXN0ZShkYXRhKTtcbiAgICAgICAgY3RybC5zZWFyY2ggPSBFTVBUWV9TRUFSQ0g7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGN0cmwuc2VhcmNoSW5wdXQub24oJ3RhZ2dlZCcsIGZ1bmN0aW9uKCkge1xuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgX3Jlc2V0U2VhcmNoSW5wdXQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pdmF5bmJlcmcvc2VsZWN0Mi9ibG9iLzMuNC42L3NlbGVjdDIuanMjTDE0MzFcbiAgZnVuY3Rpb24gX2Vuc3VyZUhpZ2hsaWdodFZpc2libGUoKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9ICRlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy51aS1zZWxlY3QtY2hvaWNlcy1jb250ZW50Jyk7XG4gICAgdmFyIGNob2ljZXMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnVpLXNlbGVjdC1jaG9pY2VzLXJvdycpO1xuICAgIGlmIChjaG9pY2VzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93IHVpU2VsZWN0TWluRXJyKCdjaG9pY2VzJywgXCJFeHBlY3RlZCBtdWx0aXBsZSAudWktc2VsZWN0LWNob2ljZXMtcm93IGJ1dCBnb3QgJ3swfScuXCIsIGNob2ljZXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBpZiAoY3RybC5hY3RpdmVJbmRleCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaGlnaGxpZ2h0ZWQgPSBjaG9pY2VzW2N0cmwuYWN0aXZlSW5kZXhdO1xuICAgIHZhciBwb3NZID0gaGlnaGxpZ2h0ZWQub2Zmc2V0VG9wICsgaGlnaGxpZ2h0ZWQuY2xpZW50SGVpZ2h0IC0gY29udGFpbmVyWzBdLnNjcm9sbFRvcDtcbiAgICB2YXIgaGVpZ2h0ID0gY29udGFpbmVyWzBdLm9mZnNldEhlaWdodDtcblxuICAgIGlmIChwb3NZID4gaGVpZ2h0KSB7XG4gICAgICBjb250YWluZXJbMF0uc2Nyb2xsVG9wICs9IHBvc1kgLSBoZWlnaHQ7XG4gICAgfSBlbHNlIGlmIChwb3NZIDwgaGlnaGxpZ2h0ZWQuY2xpZW50SGVpZ2h0KSB7XG4gICAgICBpZiAoY3RybC5pc0dyb3VwZWQgJiYgY3RybC5hY3RpdmVJbmRleCA9PT0gMClcbiAgICAgICAgY29udGFpbmVyWzBdLnNjcm9sbFRvcCA9IDA7IC8vVG8gbWFrZSBncm91cCBoZWFkZXIgdmlzaWJsZSB3aGVuIGdvaW5nIGFsbCB0aGUgd2F5IHVwXG4gICAgICBlbHNlXG4gICAgICAgIGNvbnRhaW5lclswXS5zY3JvbGxUb3AgLT0gaGlnaGxpZ2h0ZWQuY2xpZW50SGVpZ2h0IC0gcG9zWTtcbiAgICB9XG4gIH1cblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuc2VhcmNoSW5wdXQub2ZmKCdrZXl1cCBrZXlkb3duIHRhZ2dlZCBibHVyIHBhc3RlJyk7XG4gIH0pO1xuXG59XSk7XG5cbnVpcy5kaXJlY3RpdmUoJ3VpU2VsZWN0JyxcbiAgWyckZG9jdW1lbnQnLCAndWlTZWxlY3RDb25maWcnLCAndWlTZWxlY3RNaW5FcnInLCAndWlzT2Zmc2V0JywgJyRjb21waWxlJywgJyRwYXJzZScsICckdGltZW91dCcsXG4gIGZ1bmN0aW9uKCRkb2N1bWVudCwgdWlTZWxlY3RDb25maWcsIHVpU2VsZWN0TWluRXJyLCB1aXNPZmZzZXQsICRjb21waWxlLCAkcGFyc2UsICR0aW1lb3V0KSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykge1xuICAgICAgdmFyIHRoZW1lID0gdEF0dHJzLnRoZW1lIHx8IHVpU2VsZWN0Q29uZmlnLnRoZW1lO1xuICAgICAgcmV0dXJuIHRoZW1lICsgKGFuZ3VsYXIuaXNEZWZpbmVkKHRBdHRycy5tdWx0aXBsZSkgPyAnL3NlbGVjdC1tdWx0aXBsZS50cGwuaHRtbCcgOiAnL3NlbGVjdC50cGwuaHRtbCcpO1xuICAgIH0sXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHJlcXVpcmU6IFsndWlTZWxlY3QnLCAnXm5nTW9kZWwnXSxcbiAgICBzY29wZTogdHJ1ZSxcblxuICAgIGNvbnRyb2xsZXI6ICd1aVNlbGVjdEN0cmwnLFxuICAgIGNvbnRyb2xsZXJBczogJyRzZWxlY3QnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcblxuICAgICAgLy8gQWxsb3cgc2V0dGluZyBuZ0NsYXNzIG9uIHVpU2VsZWN0XG4gICAgICB2YXIgbWF0Y2ggPSAveyguKil9XFxzKnsoLiopfS8uZXhlYyh0QXR0cnMubmdDbGFzcyk7XG4gICAgICBpZihtYXRjaCkge1xuICAgICAgICB2YXIgY29tYmluZWQgPSAneycrIG1hdGNoWzFdICsnLCAnKyBtYXRjaFsyXSArJ30nO1xuICAgICAgICB0QXR0cnMubmdDbGFzcyA9IGNvbWJpbmVkO1xuICAgICAgICB0RWxlbWVudC5hdHRyKCduZy1jbGFzcycsIGNvbWJpbmVkKTtcbiAgICAgIH1cblxuICAgICAgLy9NdWx0aXBsZSBvciBTaW5nbGUgZGVwZW5kaW5nIGlmIG11bHRpcGxlIGF0dHJpYnV0ZSBwcmVzZW5jZVxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHRBdHRycy5tdWx0aXBsZSkpXG4gICAgICAgIHRFbGVtZW50LmFwcGVuZCgnPHVpLXNlbGVjdC1tdWx0aXBsZS8+JykucmVtb3ZlQXR0cignbXVsdGlwbGUnKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdEVsZW1lbnQuYXBwZW5kKCc8dWktc2VsZWN0LXNpbmdsZS8+Jyk7XG5cbiAgICAgIGlmICh0QXR0cnMuaW5wdXRJZClcbiAgICAgICAgdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQudWktc2VsZWN0LXNlYXJjaCcpWzBdLmlkID0gdEF0dHJzLmlucHV0SWQ7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzLCB0cmFuc2NsdWRlRm4pIHtcblxuICAgICAgICB2YXIgJHNlbGVjdCA9IGN0cmxzWzBdO1xuICAgICAgICB2YXIgbmdNb2RlbCA9IGN0cmxzWzFdO1xuXG4gICAgICAgICRzZWxlY3QuZ2VuZXJhdGVkSWQgPSB1aVNlbGVjdENvbmZpZy5nZW5lcmF0ZUlkKCk7XG4gICAgICAgICRzZWxlY3QuYmFzZVRpdGxlID0gYXR0cnMudGl0bGUgfHwgJ1NlbGVjdCBib3gnO1xuICAgICAgICAkc2VsZWN0LmZvY3Vzc2VyVGl0bGUgPSAkc2VsZWN0LmJhc2VUaXRsZSArICcgZm9jdXMnO1xuICAgICAgICAkc2VsZWN0LmZvY3Vzc2VySWQgPSAnZm9jdXNzZXItJyArICRzZWxlY3QuZ2VuZXJhdGVkSWQ7XG5cbiAgICAgICAgJHNlbGVjdC5jbG9zZU9uU2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLmNsb3NlT25TZWxlY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gJHBhcnNlKGF0dHJzLmNsb3NlT25TZWxlY3QpKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1aVNlbGVjdENvbmZpZy5jbG9zZU9uU2VsZWN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSgpO1xuXG4gICAgICAgICRzZWxlY3Qub25TZWxlY3RDYWxsYmFjayA9ICRwYXJzZShhdHRycy5vblNlbGVjdCk7XG4gICAgICAgICRzZWxlY3Qub25SZW1vdmVDYWxsYmFjayA9ICRwYXJzZShhdHRycy5vblJlbW92ZSk7XG5cbiAgICAgICAgLy9MaW1pdCB0aGUgbnVtYmVyIG9mIHNlbGVjdGlvbnMgYWxsb3dlZFxuICAgICAgICAkc2VsZWN0LmxpbWl0ID0gKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLmxpbWl0KSkgPyBwYXJzZUludChhdHRycy5saW1pdCwgMTApIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vU2V0IHJlZmVyZW5jZSB0byBuZ01vZGVsIGZyb20gdWlTZWxlY3RDdHJsXG4gICAgICAgICRzZWxlY3QubmdNb2RlbCA9IG5nTW9kZWw7XG5cbiAgICAgICAgJHNlbGVjdC5jaG9pY2VHcm91cGVkID0gZnVuY3Rpb24oZ3JvdXApe1xuICAgICAgICAgIHJldHVybiAkc2VsZWN0LmlzR3JvdXBlZCAmJiBncm91cCAmJiBncm91cC5uYW1lO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmKGF0dHJzLnRhYmluZGV4KXtcbiAgICAgICAgICBhdHRycy4kb2JzZXJ2ZSgndGFiaW5kZXgnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgJHNlbGVjdC5mb2N1c0lucHV0LmF0dHIoJ3RhYmluZGV4JywgdmFsdWUpO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKCdzZWFyY2hFbmFibGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VhcmNoRW5hYmxlZCA9IHNjb3BlLiRldmFsKGF0dHJzLnNlYXJjaEVuYWJsZWQpO1xuICAgICAgICAgICAgJHNlbGVjdC5zZWFyY2hFbmFibGVkID0gc2VhcmNoRW5hYmxlZCAhPT0gdW5kZWZpbmVkID8gc2VhcmNoRW5hYmxlZCA6IHVpU2VsZWN0Q29uZmlnLnNlYXJjaEVuYWJsZWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaCgnc29ydGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzb3J0YWJsZSA9IHNjb3BlLiRldmFsKGF0dHJzLnNvcnRhYmxlKTtcbiAgICAgICAgICAgICRzZWxlY3Quc29ydGFibGUgPSBzb3J0YWJsZSAhPT0gdW5kZWZpbmVkID8gc29ydGFibGUgOiB1aVNlbGVjdENvbmZpZy5zb3J0YWJsZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXR0cnMuJG9ic2VydmUoJ2Rpc2FibGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gTm8gbmVlZCB0byB1c2UgJGV2YWwoKSAodGhhbmtzIHRvIG5nLWRpc2FibGVkKSBzaW5jZSB3ZSBhbHJlYWR5IGdldCBhIGJvb2xlYW4gaW5zdGVhZCBvZiBhIHN0cmluZ1xuICAgICAgICAgICRzZWxlY3QuZGlzYWJsZWQgPSBhdHRycy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkID8gYXR0cnMuZGlzYWJsZWQgOiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXR0cnMuJG9ic2VydmUoJ3Jlc2V0U2VhcmNoSW5wdXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyAkZXZhbCgpIGlzIG5lZWRlZCBvdGhlcndpc2Ugd2UgZ2V0IGEgc3RyaW5nIGluc3RlYWQgb2YgYSBib29sZWFuXG4gICAgICAgICAgdmFyIHJlc2V0U2VhcmNoSW5wdXQgPSBzY29wZS4kZXZhbChhdHRycy5yZXNldFNlYXJjaElucHV0KTtcbiAgICAgICAgICAkc2VsZWN0LnJlc2V0U2VhcmNoSW5wdXQgPSByZXNldFNlYXJjaElucHV0ICE9PSB1bmRlZmluZWQgPyByZXNldFNlYXJjaElucHV0IDogdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXR0cnMuJG9ic2VydmUoJ3Bhc3RlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNlbGVjdC5wYXN0ZSA9IHNjb3BlLiRldmFsKGF0dHJzLnBhc3RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXR0cnMuJG9ic2VydmUoJ3RhZ2dpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZihhdHRycy50YWdnaW5nICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gJGV2YWwoKSBpcyBuZWVkZWQgb3RoZXJ3aXNlIHdlIGdldCBhIHN0cmluZyBpbnN0ZWFkIG9mIGEgYm9vbGVhblxuICAgICAgICAgICAgdmFyIHRhZ2dpbmdFdmFsID0gc2NvcGUuJGV2YWwoYXR0cnMudGFnZ2luZyk7XG4gICAgICAgICAgICAkc2VsZWN0LnRhZ2dpbmcgPSB7aXNBY3RpdmF0ZWQ6IHRydWUsIGZjdDogdGFnZ2luZ0V2YWwgIT09IHRydWUgPyB0YWdnaW5nRXZhbCA6IHVuZGVmaW5lZH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICB7XG4gICAgICAgICAgICAkc2VsZWN0LnRhZ2dpbmcgPSB7aXNBY3RpdmF0ZWQ6IGZhbHNlLCBmY3Q6IHVuZGVmaW5lZH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhdHRycy4kb2JzZXJ2ZSgndGFnZ2luZ0xhYmVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYoYXR0cnMudGFnZ2luZyAhPT0gdW5kZWZpbmVkIClcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyBjaGVjayBldmFsIGZvciBGQUxTRSwgaW4gdGhpcyBjYXNlLCB3ZSBkaXNhYmxlIHRoZSBsYWJlbHNcbiAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgd2l0aCB0YWdnaW5nXG4gICAgICAgICAgICBpZiAoIGF0dHJzLnRhZ2dpbmdMYWJlbCA9PT0gJ2ZhbHNlJyApIHtcbiAgICAgICAgICAgICAgJHNlbGVjdC50YWdnaW5nTGFiZWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJHNlbGVjdC50YWdnaW5nTGFiZWwgPSBhdHRycy50YWdnaW5nTGFiZWwgIT09IHVuZGVmaW5lZCA/IGF0dHJzLnRhZ2dpbmdMYWJlbCA6ICcobmV3KSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhdHRycy4kb2JzZXJ2ZSgndGFnZ2luZ1Rva2VucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChhdHRycy50YWdnaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbnMgPSBhdHRycy50YWdnaW5nVG9rZW5zICE9PSB1bmRlZmluZWQgPyBhdHRycy50YWdnaW5nVG9rZW5zLnNwbGl0KCd8JykgOiBbJywnLCdFTlRFUiddO1xuICAgICAgICAgICAgJHNlbGVjdC50YWdnaW5nVG9rZW5zID0ge2lzQWN0aXZhdGVkOiB0cnVlLCB0b2tlbnM6IHRva2VucyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9BdXRvbWF0aWNhbGx5IGdldHMgZm9jdXMgd2hlbiBsb2FkZWRcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLmF1dG9mb2N1cykpe1xuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkc2VsZWN0LnNldEZvY3VzKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL0dldHMgZm9jdXMgYmFzZWQgb24gc2NvcGUgZXZlbnQgbmFtZSAoZS5nLiBmb2N1cy1vbj0nU29tZUV2ZW50TmFtZScpXG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5mb2N1c09uKSl7XG4gICAgICAgICAgc2NvcGUuJG9uKGF0dHJzLmZvY3VzT24sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICRzZWxlY3Quc2V0Rm9jdXMoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvbkRvY3VtZW50Q2xpY2soZSkge1xuICAgICAgICAgIGlmICghJHNlbGVjdC5vcGVuKSByZXR1cm47IC8vU2tpcCBpdCBpZiBkcm9wZG93biBpcyBjbG9zZVxuXG4gICAgICAgICAgdmFyIGNvbnRhaW5zID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAod2luZG93LmpRdWVyeSkge1xuICAgICAgICAgICAgLy8gRmlyZWZveCAzLjYgZG9lcyBub3Qgc3VwcG9ydCBlbGVtZW50LmNvbnRhaW5zKClcbiAgICAgICAgICAgIC8vIFNlZSBOb2RlLmNvbnRhaW5zIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Ob2RlLmNvbnRhaW5zXG4gICAgICAgICAgICBjb250YWlucyA9IHdpbmRvdy5qUXVlcnkuY29udGFpbnMoZWxlbWVudFswXSwgZS50YXJnZXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWlucyA9IGVsZW1lbnRbMF0uY29udGFpbnMoZS50YXJnZXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghY29udGFpbnMgJiYgISRzZWxlY3QuY2xpY2tUcmlnZ2VyZWRTZWxlY3QpIHtcbiAgICAgICAgICAgIC8vV2lsbCBsb3NlIGZvY3VzIG9ubHkgd2l0aCBjZXJ0YWluIHRhcmdldHNcbiAgICAgICAgICAgIHZhciBmb2N1c2FibGVDb250cm9scyA9IFsnaW5wdXQnLCdidXR0b24nLCd0ZXh0YXJlYScsJ3NlbGVjdCddO1xuICAgICAgICAgICAgdmFyIHRhcmdldENvbnRyb2xsZXIgPSBhbmd1bGFyLmVsZW1lbnQoZS50YXJnZXQpLmNvbnRyb2xsZXIoJ3VpU2VsZWN0Jyk7IC8vVG8gY2hlY2sgaWYgdGFyZ2V0IGlzIG90aGVyIHVpLXNlbGVjdFxuICAgICAgICAgICAgdmFyIHNraXBGb2N1c3NlciA9IHRhcmdldENvbnRyb2xsZXIgJiYgdGFyZ2V0Q29udHJvbGxlciAhPT0gJHNlbGVjdDsgLy9UbyBjaGVjayBpZiB0YXJnZXQgaXMgb3RoZXIgdWktc2VsZWN0XG4gICAgICAgICAgICBpZiAoIXNraXBGb2N1c3Nlcikgc2tpcEZvY3Vzc2VyID0gIH5mb2N1c2FibGVDb250cm9scy5pbmRleE9mKGUudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSk7IC8vQ2hlY2sgaWYgdGFyZ2V0IGlzIGlucHV0LCBidXR0b24gb3IgdGV4dGFyZWFcbiAgICAgICAgICAgICRzZWxlY3QuY2xvc2Uoc2tpcEZvY3Vzc2VyKTtcbiAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgJHNlbGVjdC5jbGlja1RyaWdnZXJlZFNlbGVjdCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VlIENsaWNrIGV2ZXJ5d2hlcmUgYnV0IGhlcmUgZXZlbnQgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjkzMTM2OVxuICAgICAgICAkZG9jdW1lbnQub24oJ2NsaWNrJywgb25Eb2N1bWVudENsaWNrKTtcblxuICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGRvY3VtZW50Lm9mZignY2xpY2snLCBvbkRvY3VtZW50Q2xpY2spO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBNb3ZlIHRyYW5zY2x1ZGVkIGVsZW1lbnRzIHRvIHRoZWlyIGNvcnJlY3QgcG9zaXRpb24gaW4gbWFpbiB0ZW1wbGF0ZVxuICAgICAgICB0cmFuc2NsdWRlRm4oc2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgLy8gU2VlIFRyYW5zY2x1ZGUgaW4gQW5ndWxhckpTIGh0dHA6Ly9ibG9nLm9ta2FycGF0aWwuY29tLzIwMTIvMTEvdHJhbnNjbHVkZS1pbi1hbmd1bGFyanMuaHRtbFxuXG4gICAgICAgICAgLy8gT25lIGRheSBqcUxpdGUgd2lsbCBiZSByZXBsYWNlZCBieSBqUXVlcnkgYW5kIHdlIHdpbGwgYmUgYWJsZSB0byB3cml0ZTpcbiAgICAgICAgICAvLyB2YXIgdHJhbnNjbHVkZWRFbGVtZW50ID0gY2xvbmUuZmlsdGVyKCcubXktY2xhc3MnKVxuICAgICAgICAgIC8vIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBoYWNraXNoIERPTSBlbGVtZW50OlxuICAgICAgICAgIHZhciB0cmFuc2NsdWRlZCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdj4nKS5hcHBlbmQoY2xvbmUpO1xuXG4gICAgICAgICAgdmFyIHRyYW5zY2x1ZGVkTWF0Y2ggPSB0cmFuc2NsdWRlZC5xdWVyeVNlbGVjdG9yQWxsKCcudWktc2VsZWN0LW1hdGNoJyk7XG4gICAgICAgICAgdHJhbnNjbHVkZWRNYXRjaC5yZW1vdmVBdHRyKCd1aS1zZWxlY3QtbWF0Y2gnKTsgLy9UbyBhdm9pZCBsb29wIGluIGNhc2UgZGlyZWN0aXZlIGFzIGF0dHJcbiAgICAgICAgICB0cmFuc2NsdWRlZE1hdGNoLnJlbW92ZUF0dHIoJ2RhdGEtdWktc2VsZWN0LW1hdGNoJyk7IC8vIFByb3Blcmx5IGhhbmRsZSBIVE1MNSBkYXRhLWF0dHJpYnV0ZXNcbiAgICAgICAgICBpZiAodHJhbnNjbHVkZWRNYXRjaC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IHVpU2VsZWN0TWluRXJyKCd0cmFuc2NsdWRlZCcsIFwiRXhwZWN0ZWQgMSAudWktc2VsZWN0LW1hdGNoIGJ1dCBnb3QgJ3swfScuXCIsIHRyYW5zY2x1ZGVkTWF0Y2gubGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudWktc2VsZWN0LW1hdGNoJykucmVwbGFjZVdpdGgodHJhbnNjbHVkZWRNYXRjaCk7XG5cbiAgICAgICAgICB2YXIgdHJhbnNjbHVkZWRDaG9pY2VzID0gdHJhbnNjbHVkZWQucXVlcnlTZWxlY3RvckFsbCgnLnVpLXNlbGVjdC1jaG9pY2VzJyk7XG4gICAgICAgICAgdHJhbnNjbHVkZWRDaG9pY2VzLnJlbW92ZUF0dHIoJ3VpLXNlbGVjdC1jaG9pY2VzJyk7IC8vVG8gYXZvaWQgbG9vcCBpbiBjYXNlIGRpcmVjdGl2ZSBhcyBhdHRyXG4gICAgICAgICAgdHJhbnNjbHVkZWRDaG9pY2VzLnJlbW92ZUF0dHIoJ2RhdGEtdWktc2VsZWN0LWNob2ljZXMnKTsgLy8gUHJvcGVybHkgaGFuZGxlIEhUTUw1IGRhdGEtYXR0cmlidXRlc1xuICAgICAgICAgIGlmICh0cmFuc2NsdWRlZENob2ljZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICB0aHJvdyB1aVNlbGVjdE1pbkVycigndHJhbnNjbHVkZWQnLCBcIkV4cGVjdGVkIDEgLnVpLXNlbGVjdC1jaG9pY2VzIGJ1dCBnb3QgJ3swfScuXCIsIHRyYW5zY2x1ZGVkQ2hvaWNlcy5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy51aS1zZWxlY3QtY2hvaWNlcycpLnJlcGxhY2VXaXRoKHRyYW5zY2x1ZGVkQ2hvaWNlcyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIGFwcGVuZGluZyB0aGUgc2VsZWN0IGZpZWxkIHRvIHRoZSBib2R5IHdoZW4gaXRzIG9wZW5cbiAgICAgICAgdmFyIGFwcGVuZFRvQm9keSA9IHNjb3BlLiRldmFsKGF0dHJzLmFwcGVuZFRvQm9keSk7XG4gICAgICAgIGlmIChhcHBlbmRUb0JvZHkgIT09IHVuZGVmaW5lZCA/IGFwcGVuZFRvQm9keSA6IHVpU2VsZWN0Q29uZmlnLmFwcGVuZFRvQm9keSkge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaCgnJHNlbGVjdC5vcGVuJywgZnVuY3Rpb24oaXNPcGVuKSB7XG4gICAgICAgICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uRHJvcGRvd24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc2V0RHJvcGRvd24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIE1vdmUgdGhlIGRyb3Bkb3duIGJhY2sgdG8gaXRzIG9yaWdpbmFsIGxvY2F0aW9uIHdoZW4gdGhlIHNjb3BlIGlzIGRlc3Ryb3llZC4gT3RoZXJ3aXNlXG4gICAgICAgICAgLy8gaXQgbWlnaHQgc3RpY2sgYXJvdW5kIHdoZW4gdGhlIHVzZXIgcm91dGVzIGF3YXkgb3IgdGhlIHNlbGVjdCBmaWVsZCBpcyBvdGhlcndpc2UgcmVtb3ZlZFxuICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlc2V0RHJvcGRvd24oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhvbGQgb24gdG8gYSByZWZlcmVuY2UgdG8gdGhlIC51aS1zZWxlY3QtY29udGFpbmVyIGVsZW1lbnQgZm9yIGFwcGVuZFRvQm9keSBzdXBwb3J0XG4gICAgICAgIHZhciBwbGFjZWhvbGRlciA9IG51bGwsXG4gICAgICAgICAgICBvcmlnaW5hbFdpZHRoID0gJyc7XG5cbiAgICAgICAgZnVuY3Rpb24gcG9zaXRpb25Ecm9wZG93bigpIHtcbiAgICAgICAgICAvLyBSZW1lbWJlciB0aGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnRcbiAgICAgICAgICB2YXIgb2Zmc2V0ID0gdWlzT2Zmc2V0KGVsZW1lbnQpO1xuXG4gICAgICAgICAgLy8gQ2xvbmUgdGhlIGVsZW1lbnQgaW50byBhIHBsYWNlaG9sZGVyIGVsZW1lbnQgdG8gdGFrZSBpdHMgb3JpZ2luYWwgcGxhY2UgaW4gdGhlIERPTVxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwidWktc2VsZWN0LXBsYWNlaG9sZGVyXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgcGxhY2Vob2xkZXJbMF0uc3R5bGUud2lkdGggPSBvZmZzZXQud2lkdGggKyAncHgnO1xuICAgICAgICAgIHBsYWNlaG9sZGVyWzBdLnN0eWxlLmhlaWdodCA9IG9mZnNldC5oZWlnaHQgKyAncHgnO1xuICAgICAgICAgIGVsZW1lbnQuYWZ0ZXIocGxhY2Vob2xkZXIpO1xuXG4gICAgICAgICAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlIG9mIHRoZSBlbGVtZW50IHdpZHRoIGlubGluZSBzdHlsZSwgc28gaXQgY2FuIGJlIHJlc3RvcmVkXG4gICAgICAgICAgLy8gd2hlbiB0aGUgZHJvcGRvd24gaXMgY2xvc2VkXG4gICAgICAgICAgb3JpZ2luYWxXaWR0aCA9IGVsZW1lbnRbMF0uc3R5bGUud2lkdGg7XG5cbiAgICAgICAgICAvLyBOb3cgbW92ZSB0aGUgYWN0dWFsIGRyb3Bkb3duIGVsZW1lbnQgdG8gdGhlIGVuZCBvZiB0aGUgYm9keVxuICAgICAgICAgICRkb2N1bWVudC5maW5kKCdib2R5JykuYXBwZW5kKGVsZW1lbnQpO1xuXG4gICAgICAgICAgZWxlbWVudFswXS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgZWxlbWVudFswXS5zdHlsZS5sZWZ0ID0gb2Zmc2V0LmxlZnQgKyAncHgnO1xuICAgICAgICAgIGVsZW1lbnRbMF0uc3R5bGUudG9wID0gb2Zmc2V0LnRvcCArICdweCc7XG4gICAgICAgICAgZWxlbWVudFswXS5zdHlsZS53aWR0aCA9IG9mZnNldC53aWR0aCArICdweCc7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNldERyb3Bkb3duKCkge1xuICAgICAgICAgIGlmIChwbGFjZWhvbGRlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVGhlIGRyb3Bkb3duIGhhcyBub3QgYWN0dWFsbHkgYmVlbiBkaXNwbGF5IHlldCwgc28gdGhlcmUncyBub3RoaW5nIHRvIHJlc2V0XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTW92ZSB0aGUgZHJvcGRvd24gZWxlbWVudCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBsb2NhdGlvbiBpbiB0aGUgRE9NXG4gICAgICAgICAgcGxhY2Vob2xkZXIucmVwbGFjZVdpdGgoZWxlbWVudCk7XG4gICAgICAgICAgcGxhY2Vob2xkZXIgPSBudWxsO1xuXG4gICAgICAgICAgZWxlbWVudFswXS5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgICAgICAgIGVsZW1lbnRbMF0uc3R5bGUubGVmdCA9ICcnO1xuICAgICAgICAgIGVsZW1lbnRbMF0uc3R5bGUudG9wID0gJyc7XG4gICAgICAgICAgZWxlbWVudFswXS5zdHlsZS53aWR0aCA9IG9yaWdpbmFsV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIb2xkIG9uIHRvIGEgcmVmZXJlbmNlIHRvIHRoZSAudWktc2VsZWN0LWRyb3Bkb3duIGVsZW1lbnQgZm9yIGRpcmVjdGlvbiBzdXBwb3J0LlxuICAgICAgICB2YXIgZHJvcGRvd24gPSBudWxsLFxuICAgICAgICAgICAgZGlyZWN0aW9uVXBDbGFzc05hbWUgPSAnZGlyZWN0aW9uLXVwJztcblxuICAgICAgICAvLyBTdXBwb3J0IGNoYW5naW5nIHRoZSBkaXJlY3Rpb24gb2YgdGhlIGRyb3Bkb3duIGlmIHRoZXJlIGlzbid0IGVub3VnaCBzcGFjZSB0byByZW5kZXIgaXQuXG4gICAgICAgIHNjb3BlLiR3YXRjaCgnJHNlbGVjdC5vcGVuJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICBpZiAoJHNlbGVjdC5kcm9wZG93blBvc2l0aW9uID09PSAnYXV0bycgfHwgJHNlbGVjdC5kcm9wZG93blBvc2l0aW9uID09PSAndXAnKXtcbiAgICAgICAgICAgIHNjb3BlLmNhbGN1bGF0ZURyb3Bkb3duUG9zKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBzZXREcm9wZG93blBvc1VwID0gZnVuY3Rpb24ob2Zmc2V0LCBvZmZzZXREcm9wZG93bil7XG5cbiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgdWlzT2Zmc2V0KGVsZW1lbnQpO1xuICAgICAgICAgIG9mZnNldERyb3Bkb3duID0gb2Zmc2V0RHJvcGRvd24gfHwgdWlzT2Zmc2V0KGRyb3Bkb3duKTtcblxuICAgICAgICAgIGRyb3Bkb3duWzBdLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICBkcm9wZG93blswXS5zdHlsZS50b3AgPSAob2Zmc2V0RHJvcGRvd24uaGVpZ2h0ICogLTEpICsgJ3B4JztcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKGRpcmVjdGlvblVwQ2xhc3NOYW1lKTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzZXREcm9wZG93blBvc0Rvd24gPSBmdW5jdGlvbihvZmZzZXQsIG9mZnNldERyb3Bkb3duKXtcblxuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoZGlyZWN0aW9uVXBDbGFzc05hbWUpO1xuXG4gICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IHVpc09mZnNldChlbGVtZW50KTtcbiAgICAgICAgICBvZmZzZXREcm9wZG93biA9IG9mZnNldERyb3Bkb3duIHx8IHVpc09mZnNldChkcm9wZG93bik7XG5cbiAgICAgICAgICBkcm9wZG93blswXS5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgICAgICAgIGRyb3Bkb3duWzBdLnN0eWxlLnRvcCA9ICcnO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuY2FsY3VsYXRlRHJvcGRvd25Qb3MgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgaWYgKCRzZWxlY3Qub3Blbikge1xuICAgICAgICAgICAgZHJvcGRvd24gPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCkucXVlcnlTZWxlY3RvckFsbCgnLnVpLXNlbGVjdC1kcm9wZG93bicpO1xuICAgICAgICAgICAgaWYgKGRyb3Bkb3duLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIGRyb3Bkb3duIHNvIHRoZXJlIGlzIG5vIGZsaWNrZXIgdW50aWwgJHRpbWVvdXQgaXMgZG9uZSBleGVjdXRpbmcuXG4gICAgICAgICAgICBkcm9wZG93blswXS5zdHlsZS5vcGFjaXR5ID0gMDtcblxuICAgICAgICAgICAgLy8gRGVsYXkgcG9zaXRpb25pbmcgdGhlIGRyb3Bkb3duIHVudGlsIGFsbCBjaG9pY2VzIGhhdmUgYmVlbiBhZGRlZCBzbyBpdHMgaGVpZ2h0IGlzIGNvcnJlY3QuXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgIGlmICgkc2VsZWN0LmRyb3Bkb3duUG9zaXRpb24gPT09ICd1cCcpe1xuICAgICAgICAgICAgICAgICAgLy9HbyBVUFxuICAgICAgICAgICAgICAgICAgc2V0RHJvcGRvd25Qb3NVcCgpO1xuXG4gICAgICAgICAgICAgIH1lbHNleyAvL0FVVE9cblxuICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoZGlyZWN0aW9uVXBDbGFzc05hbWUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHVpc09mZnNldChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0RHJvcGRvd24gPSB1aXNPZmZzZXQoZHJvcGRvd24pO1xuXG4gICAgICAgICAgICAgICAgLy9odHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzQyMzA3I2M0XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8ICRkb2N1bWVudFswXS5ib2R5LnNjcm9sbFRvcDsgLy9UbyBtYWtlIGl0IGNyb3NzIGJyb3dzZXIgKGJsaW5rLCB3ZWJraXQsIElFLCBGaXJlZm94KS5cblxuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSBpZiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBkcm9wZG93biBuZWVkcyB0byBiZSBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQudG9wICsgb2Zmc2V0LmhlaWdodCArIG9mZnNldERyb3Bkb3duLmhlaWdodCA+IHNjcm9sbFRvcCArICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAvL0dvIFVQXG4gICAgICAgICAgICAgICAgICBzZXREcm9wZG93blBvc1VwKG9mZnNldCwgb2Zmc2V0RHJvcGRvd24pO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgLy9HbyBET1dOXG4gICAgICAgICAgICAgICAgICBzZXREcm9wZG93blBvc0Rvd24ob2Zmc2V0LCBvZmZzZXREcm9wZG93bik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBEaXNwbGF5IHRoZSBkcm9wZG93biBvbmNlIGl0IGhhcyBiZWVuIHBvc2l0aW9uZWQuXG4gICAgICAgICAgICAgIGRyb3Bkb3duWzBdLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGRyb3Bkb3duID09PSBudWxsIHx8IGRyb3Bkb3duLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgZHJvcGRvd24uXG4gICAgICAgICAgICAgIGRyb3Bkb3duWzBdLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgICAgICAgICAgIGRyb3Bkb3duWzBdLnN0eWxlLnRvcCA9ICcnO1xuICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGRpcmVjdGlvblVwQ2xhc3NOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dKTtcblxudWlzLmRpcmVjdGl2ZSgndWlTZWxlY3RNYXRjaCcsIFsndWlTZWxlY3RDb25maWcnLCBmdW5jdGlvbih1aVNlbGVjdENvbmZpZykge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcXVpcmU6ICdedWlTZWxlY3QnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24odEVsZW1lbnQpIHtcbiAgICAgIC8vIE5lZWRlZCBzbyB0aGUgdWlTZWxlY3QgY2FuIGRldGVjdCB0aGUgdHJhbnNjbHVkZWQgY29udGVudFxuICAgICAgdEVsZW1lbnQuYWRkQ2xhc3MoJ3VpLXNlbGVjdC1tYXRjaCcpO1xuXG4gICAgICAvLyBHZXRzIHRoZW1lIGF0dHJpYnV0ZSBmcm9tIHBhcmVudCAodWktc2VsZWN0KVxuICAgICAgdmFyIHRoZW1lID0gdEVsZW1lbnQucGFyZW50KCkuYXR0cigndGhlbWUnKSB8fCB1aVNlbGVjdENvbmZpZy50aGVtZTtcbiAgICAgIHZhciBtdWx0aSA9IHRFbGVtZW50LnBhcmVudCgpLmF0dHIoJ211bHRpcGxlJyk7XG4gICAgICByZXR1cm4gdGhlbWUgKyAobXVsdGkgPyAnL21hdGNoLW11bHRpcGxlLnRwbC5odG1sJyA6ICcvbWF0Y2gudHBsLmh0bWwnKTtcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgJHNlbGVjdCkge1xuICAgICAgJHNlbGVjdC5sb2NrQ2hvaWNlRXhwcmVzc2lvbiA9IGF0dHJzLnVpTG9ja0Nob2ljZTtcbiAgICAgIGF0dHJzLiRvYnNlcnZlKCdwbGFjZWhvbGRlcicsIGZ1bmN0aW9uKHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICRzZWxlY3QucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkID8gcGxhY2Vob2xkZXIgOiB1aVNlbGVjdENvbmZpZy5wbGFjZWhvbGRlcjtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBzZXRBbGxvd0NsZWFyKGFsbG93KSB7XG4gICAgICAgICRzZWxlY3QuYWxsb3dDbGVhciA9IChhbmd1bGFyLmlzRGVmaW5lZChhbGxvdykpID8gKGFsbG93ID09PSAnJykgPyB0cnVlIDogKGFsbG93LnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJykgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgYXR0cnMuJG9ic2VydmUoJ2FsbG93Q2xlYXInLCBzZXRBbGxvd0NsZWFyKTtcbiAgICAgIHNldEFsbG93Q2xlYXIoYXR0cnMuYWxsb3dDbGVhcik7XG5cbiAgICAgIGlmKCRzZWxlY3QubXVsdGlwbGUpe1xuICAgICAgICAkc2VsZWN0LnNpemVTZWFyY2hJbnB1dCgpO1xuICAgICAgfVxuXG4gICAgfVxuICB9O1xufV0pO1xuXG51aXMuZGlyZWN0aXZlKCd1aVNlbGVjdE11bHRpcGxlJywgWyd1aVNlbGVjdE1pbkVycicsJyR0aW1lb3V0JywgZnVuY3Rpb24odWlTZWxlY3RNaW5FcnIsICR0aW1lb3V0KSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVxdWlyZTogWydedWlTZWxlY3QnLCAnXm5nTW9kZWwnXSxcblxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywnJHRpbWVvdXQnLCBmdW5jdGlvbigkc2NvcGUsICR0aW1lb3V0KXtcblxuICAgICAgdmFyIGN0cmwgPSB0aGlzLFxuICAgICAgICAgICRzZWxlY3QgPSAkc2NvcGUuJHNlbGVjdCxcbiAgICAgICAgICBuZ01vZGVsO1xuXG4gICAgICAvL1dhaXQgZm9yIGxpbmsgZm4gdG8gaW5qZWN0IGl0IFxuICAgICAgJHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKXsgbmdNb2RlbCA9ICRzY29wZS5uZ01vZGVsOyB9KTtcblxuICAgICAgY3RybC5hY3RpdmVNYXRjaEluZGV4ID0gLTE7XG5cbiAgICAgIGN0cmwudXBkYXRlTW9kZWwgPSBmdW5jdGlvbigpe1xuICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoRGF0ZS5ub3coKSk7IC8vU2V0IHRpbWVzdGFtcCBhcyBhIHVuaXF1ZSBzdHJpbmcgdG8gZm9yY2UgY2hhbmdlc1xuICAgICAgICBjdHJsLnJlZnJlc2hDb21wb25lbnQoKTtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwucmVmcmVzaENvbXBvbmVudCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vUmVtb3ZlIGFscmVhZHkgc2VsZWN0ZWQgaXRlbXNcbiAgICAgICAgLy9lLmcuIFdoZW4gdXNlciBjbGlja3Mgb24gYSBzZWxlY3Rpb24sIHRoZSBzZWxlY3RlZCBhcnJheSBjaGFuZ2VzIGFuZCBcbiAgICAgICAgLy90aGUgZHJvcGRvd24gc2hvdWxkIHJlbW92ZSB0aGF0IGl0ZW1cbiAgICAgICAgJHNlbGVjdC5yZWZyZXNoSXRlbXMoKTtcbiAgICAgICAgJHNlbGVjdC5zaXplU2VhcmNoSW5wdXQoKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFJlbW92ZSBpdGVtIGZyb20gbXVsdGlwbGUgc2VsZWN0XG4gICAgICBjdHJsLnJlbW92ZUNob2ljZSA9IGZ1bmN0aW9uKGluZGV4KXtcblxuICAgICAgICB2YXIgcmVtb3ZlZENob2ljZSA9ICRzZWxlY3Quc2VsZWN0ZWRbaW5kZXhdO1xuXG4gICAgICAgIC8vIGlmIHRoZSBjaG9pY2UgaXMgbG9ja2VkLCBjYW4ndCByZW1vdmUgaXRcbiAgICAgICAgaWYocmVtb3ZlZENob2ljZS5fdWlTZWxlY3RDaG9pY2VMb2NrZWQpIHJldHVybjtcblxuICAgICAgICB2YXIgbG9jYWxzID0ge307XG4gICAgICAgIGxvY2Fsc1skc2VsZWN0LnBhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSByZW1vdmVkQ2hvaWNlO1xuXG4gICAgICAgICRzZWxlY3Quc2VsZWN0ZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgY3RybC5hY3RpdmVNYXRjaEluZGV4ID0gLTE7XG4gICAgICAgICRzZWxlY3Quc2l6ZVNlYXJjaElucHV0KCk7XG5cbiAgICAgICAgLy8gR2l2ZSBzb21lIHRpbWUgZm9yIHNjb3BlIHByb3BhZ2F0aW9uLlxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICRzZWxlY3Qub25SZW1vdmVDYWxsYmFjaygkc2NvcGUsIHtcbiAgICAgICAgICAgICRpdGVtOiByZW1vdmVkQ2hvaWNlLFxuICAgICAgICAgICAgJG1vZGVsOiAkc2VsZWN0LnBhcnNlclJlc3VsdC5tb2RlbE1hcHBlcigkc2NvcGUsIGxvY2FscylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3RybC51cGRhdGVNb2RlbCgpO1xuXG4gICAgICB9O1xuXG4gICAgICBjdHJsLmdldFBsYWNlaG9sZGVyID0gZnVuY3Rpb24oKXtcbiAgICAgICAgLy9SZWZhY3RvciBzaW5nbGU/XG4gICAgICAgIGlmKCRzZWxlY3Quc2VsZWN0ZWQgJiYgJHNlbGVjdC5zZWxlY3RlZC5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgcmV0dXJuICRzZWxlY3QucGxhY2Vob2xkZXI7XG4gICAgICB9O1xuXG5cbiAgICB9XSxcbiAgICBjb250cm9sbGVyQXM6ICckc2VsZWN0TXVsdGlwbGUnLFxuXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuXG4gICAgICB2YXIgJHNlbGVjdCA9IGN0cmxzWzBdO1xuICAgICAgdmFyIG5nTW9kZWwgPSBzY29wZS5uZ01vZGVsID0gY3RybHNbMV07XG4gICAgICB2YXIgJHNlbGVjdE11bHRpcGxlID0gc2NvcGUuJHNlbGVjdE11bHRpcGxlO1xuXG4gICAgICAvLyRzZWxlY3Quc2VsZWN0ZWQgPSByYXcgc2VsZWN0ZWQgb2JqZWN0cyAoaWdub3JpbmcgYW55IHByb3BlcnR5IGJpbmRpbmcpXG5cbiAgICAgICRzZWxlY3QubXVsdGlwbGUgPSB0cnVlO1xuICAgICAgJHNlbGVjdC5yZW1vdmVTZWxlY3RlZCA9IHRydWU7XG5cbiAgICAgIC8vSW5wdXQgdGhhdCB3aWxsIGhhbmRsZSBmb2N1c1xuICAgICAgJHNlbGVjdC5mb2N1c0lucHV0ID0gJHNlbGVjdC5zZWFyY2hJbnB1dDtcblxuICAgICAgLy9Gcm9tIHZpZXcgLS0+IG1vZGVsXG4gICAgICBuZ01vZGVsLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbG9jYWxzID0ge30sXG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICByZXN1bHRNdWx0aXBsZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBqID0gJHNlbGVjdC5zZWxlY3RlZC5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIGxvY2FscyA9IHt9O1xuICAgICAgICAgIGxvY2Fsc1skc2VsZWN0LnBhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSAkc2VsZWN0LnNlbGVjdGVkW2pdO1xuICAgICAgICAgIHJlc3VsdCA9ICRzZWxlY3QucGFyc2VyUmVzdWx0Lm1vZGVsTWFwcGVyKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHJlc3VsdE11bHRpcGxlLnVuc2hpZnQocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0TXVsdGlwbGU7XG4gICAgICB9KTtcblxuICAgICAgLy8gRnJvbSBtb2RlbCAtLT4gdmlld1xuICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy51bnNoaWZ0KGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XG4gICAgICAgIHZhciBkYXRhID0gJHNlbGVjdC5wYXJzZXJSZXN1bHQuc291cmNlIChzY29wZSwgeyAkc2VsZWN0IDoge3NlYXJjaDonJ319KSwgLy9PdmVyd3JpdGUgJHNlYXJjaFxuICAgICAgICAgICAgbG9jYWxzID0ge30sXG4gICAgICAgICAgICByZXN1bHQ7XG4gICAgICAgIGlmICghZGF0YSkgcmV0dXJuIGlucHV0VmFsdWU7XG4gICAgICAgIHZhciByZXN1bHRNdWx0aXBsZSA9IFtdO1xuICAgICAgICB2YXIgY2hlY2tGbk11bHRpcGxlID0gZnVuY3Rpb24obGlzdCwgdmFsdWUpe1xuICAgICAgICAgIGlmICghbGlzdCB8fCAhbGlzdC5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICBmb3IgKHZhciBwID0gbGlzdC5sZW5ndGggLSAxOyBwID49IDA7IHAtLSkge1xuICAgICAgICAgICAgbG9jYWxzWyRzZWxlY3QucGFyc2VyUmVzdWx0Lml0ZW1OYW1lXSA9IGxpc3RbcF07XG4gICAgICAgICAgICByZXN1bHQgPSAkc2VsZWN0LnBhcnNlclJlc3VsdC5tb2RlbE1hcHBlcihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgIGlmKCRzZWxlY3QucGFyc2VyUmVzdWx0LnRyYWNrQnlFeHApe1xuICAgICAgICAgICAgICAgIHZhciBwcm9wc0l0ZW1OYW1lTWF0Y2hlcyA9IC8oXFx3KilcXC4vLmV4ZWMoJHNlbGVjdC5wYXJzZXJSZXN1bHQudHJhY2tCeUV4cCk7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSAvXFwuKFteXFxzXSspLy5leGVjKCRzZWxlY3QucGFyc2VyUmVzdWx0LnRyYWNrQnlFeHApO1xuICAgICAgICAgICAgICAgIGlmKHByb3BzSXRlbU5hbWVNYXRjaGVzICYmIHByb3BzSXRlbU5hbWVNYXRjaGVzLmxlbmd0aCA+IDAgJiYgcHJvcHNJdGVtTmFtZU1hdGNoZXNbMV0gPT0gJHNlbGVjdC5wYXJzZXJSZXN1bHQuaXRlbU5hbWUpe1xuICAgICAgICAgICAgICAgICAgaWYobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aD4wICYmIHJlc3VsdFttYXRjaGVzWzFdXSA9PSB2YWx1ZVttYXRjaGVzWzFdXSl7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0TXVsdGlwbGUudW5zaGlmdChsaXN0W3BdKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHMocmVzdWx0LHZhbHVlKSl7XG4gICAgICAgICAgICAgIHJlc3VsdE11bHRpcGxlLnVuc2hpZnQobGlzdFtwXSk7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghaW5wdXRWYWx1ZSkgcmV0dXJuIHJlc3VsdE11bHRpcGxlOyAvL0lmIG5nTW9kZWwgd2FzIHVuZGVmaW5lZFxuICAgICAgICBmb3IgKHZhciBrID0gaW5wdXRWYWx1ZS5sZW5ndGggLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgICAgIC8vQ2hlY2sgbW9kZWwgYXJyYXkgb2YgY3VycmVudGx5IHNlbGVjdGVkIGl0ZW1zIFxuICAgICAgICAgIGlmICghY2hlY2tGbk11bHRpcGxlKCRzZWxlY3Quc2VsZWN0ZWQsIGlucHV0VmFsdWVba10pKXtcbiAgICAgICAgICAgIC8vQ2hlY2sgbW9kZWwgYXJyYXkgb2YgYWxsIGl0ZW1zIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKCFjaGVja0ZuTXVsdGlwbGUoZGF0YSwgaW5wdXRWYWx1ZVtrXSkpe1xuICAgICAgICAgICAgICAvL0lmIG5vdCBmb3VuZCBvbiBwcmV2aW91cyBsaXN0cywganVzdCBhZGQgaXQgZGlyZWN0bHkgdG8gcmVzdWx0TXVsdGlwbGVcbiAgICAgICAgICAgICAgcmVzdWx0TXVsdGlwbGUudW5zaGlmdChpbnB1dFZhbHVlW2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdE11bHRpcGxlO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vV2F0Y2ggZm9yIGV4dGVybmFsIG1vZGVsIGNoYW5nZXMgXG4gICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCl7IHJldHVybiBuZ01vZGVsLiRtb2RlbFZhbHVlOyB9LCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9IG5ld1ZhbHVlKXtcbiAgICAgICAgICBuZ01vZGVsLiRtb2RlbFZhbHVlID0gbnVsbDsgLy9Gb3JjZSBzY29wZSBtb2RlbCB2YWx1ZSBhbmQgbmdNb2RlbCB2YWx1ZSB0byBiZSBvdXQgb2Ygc3luYyB0byByZS1ydW4gZm9ybWF0dGVyc1xuICAgICAgICAgICRzZWxlY3RNdWx0aXBsZS5yZWZyZXNoQ29tcG9uZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgbW9kZWwgdmFsdWUgaXMgYXJyYXlcbiAgICAgICAgaWYoIWFuZ3VsYXIuaXNBcnJheShuZ01vZGVsLiR2aWV3VmFsdWUpKXtcbiAgICAgICAgICAvLyBIYXZlIHRvbGVyYW5jZSBmb3IgbnVsbCBvciB1bmRlZmluZWQgdmFsdWVzXG4gICAgICAgICAgaWYoYW5ndWxhci5pc1VuZGVmaW5lZChuZ01vZGVsLiR2aWV3VmFsdWUpIHx8IG5nTW9kZWwuJHZpZXdWYWx1ZSA9PT0gbnVsbCl7XG4gICAgICAgICAgICAkc2VsZWN0LnNlbGVjdGVkID0gW107XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IHVpU2VsZWN0TWluRXJyKCdtdWx0aWFycicsIFwiRXhwZWN0ZWQgbW9kZWwgdmFsdWUgdG8gYmUgYXJyYXkgYnV0IGdvdCAnezB9J1wiLCBuZ01vZGVsLiR2aWV3VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAkc2VsZWN0LnNlbGVjdGVkID0gbmdNb2RlbC4kdmlld1ZhbHVlO1xuICAgICAgICBzY29wZS4kZXZhbEFzeW5jKCk7IC8vVG8gZm9yY2UgJGRpZ2VzdFxuICAgICAgfTtcblxuICAgICAgc2NvcGUuJG9uKCd1aXM6c2VsZWN0JywgZnVuY3Rpb24gKGV2ZW50LCBpdGVtKSB7XG4gICAgICAgIGlmKCRzZWxlY3Quc2VsZWN0ZWQubGVuZ3RoID49ICRzZWxlY3QubGltaXQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgJHNlbGVjdC5zZWxlY3RlZC5wdXNoKGl0ZW0pO1xuICAgICAgICAkc2VsZWN0TXVsdGlwbGUudXBkYXRlTW9kZWwoKTtcbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kb24oJ3VpczphY3RpdmF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNlbGVjdE11bHRpcGxlLmFjdGl2ZU1hdGNoSW5kZXggPSAtMTtcbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kd2F0Y2goJyRzZWxlY3QuZGlzYWJsZWQnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgLy8gQXMgdGhlIHNlYXJjaCBpbnB1dCBmaWVsZCBtYXkgbm93IGJlY29tZSB2aXNpYmxlLCBpdCBtYXkgYmUgbmVjZXNzYXJ5IHRvIHJlY29tcHV0ZSBpdHMgc2l6ZVxuICAgICAgICBpZiAob2xkVmFsdWUgJiYgIW5ld1ZhbHVlKSAkc2VsZWN0LnNpemVTZWFyY2hJbnB1dCgpO1xuICAgICAgfSk7XG5cbiAgICAgICRzZWxlY3Quc2VhcmNoSW5wdXQub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBrZXkgPSBlLndoaWNoO1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHByb2Nlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgIC8vIHZhciB0YWdnZWQgPSBmYWxzZTsgLy9DaGVja21lXG4gICAgICAgICAgaWYoS0VZLmlzSG9yaXpvbnRhbE1vdmVtZW50KGtleSkpe1xuICAgICAgICAgICAgcHJvY2Vzc2VkID0gX2hhbmRsZU1hdGNoU2VsZWN0aW9uKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcm9jZXNzZWQgICYmIGtleSAhPSBLRVkuVEFCKSB7XG4gICAgICAgICAgICAvL1RPRE8gQ2hlY2sgc2kgZWwgdGFiIHNlbGVjY2lvbmEgYXVuIGNvcnJlY3RhbWVudGVcbiAgICAgICAgICAgIC8vQ3JlYXIgdGVzdFxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBmdW5jdGlvbiBfZ2V0Q2FyZXRQb3NpdGlvbihlbCkge1xuICAgICAgICBpZihhbmd1bGFyLmlzTnVtYmVyKGVsLnNlbGVjdGlvblN0YXJ0KSkgcmV0dXJuIGVsLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAvLyBzZWxlY3Rpb25TdGFydCBpcyBub3Qgc3VwcG9ydGVkIGluIElFOCBhbmQgd2UgZG9uJ3Qgd2FudCBoYWNreSB3b3JrYXJvdW5kcyBzbyB3ZSBjb21wcm9taXNlXG4gICAgICAgIGVsc2UgcmV0dXJuIGVsLnZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIC8vIEhhbmRsZXMgc2VsZWN0ZWQgb3B0aW9ucyBpbiBcIm11bHRpcGxlXCIgbW9kZVxuICAgICAgZnVuY3Rpb24gX2hhbmRsZU1hdGNoU2VsZWN0aW9uKGtleSl7XG4gICAgICAgIHZhciBjYXJldFBvc2l0aW9uID0gX2dldENhcmV0UG9zaXRpb24oJHNlbGVjdC5zZWFyY2hJbnB1dFswXSksXG4gICAgICAgICAgICBsZW5ndGggPSAkc2VsZWN0LnNlbGVjdGVkLmxlbmd0aCxcbiAgICAgICAgICAgIC8vIG5vbmUgID0gLTEsXG4gICAgICAgICAgICBmaXJzdCA9IDAsXG4gICAgICAgICAgICBsYXN0ICA9IGxlbmd0aC0xLFxuICAgICAgICAgICAgY3VyciAgPSAkc2VsZWN0TXVsdGlwbGUuYWN0aXZlTWF0Y2hJbmRleCxcbiAgICAgICAgICAgIG5leHQgID0gJHNlbGVjdE11bHRpcGxlLmFjdGl2ZU1hdGNoSW5kZXgrMSxcbiAgICAgICAgICAgIHByZXYgID0gJHNlbGVjdE11bHRpcGxlLmFjdGl2ZU1hdGNoSW5kZXgtMSxcbiAgICAgICAgICAgIG5ld0luZGV4ID0gY3VycjtcblxuICAgICAgICBpZihjYXJldFBvc2l0aW9uID4gMCB8fCAoJHNlbGVjdC5zZWFyY2gubGVuZ3RoICYmIGtleSA9PSBLRVkuUklHSFQpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgJHNlbGVjdC5jbG9zZSgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5ld0FjdGl2ZU1hdGNoSW5kZXgoKXtcbiAgICAgICAgICBzd2l0Y2goa2V5KXtcbiAgICAgICAgICAgIGNhc2UgS0VZLkxFRlQ6XG4gICAgICAgICAgICAgIC8vIFNlbGVjdCBwcmV2aW91cy9maXJzdCBpdGVtXG4gICAgICAgICAgICAgIGlmKH4kc2VsZWN0TXVsdGlwbGUuYWN0aXZlTWF0Y2hJbmRleCkgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICAgIC8vIFNlbGVjdCBsYXN0IGl0ZW1cbiAgICAgICAgICAgICAgZWxzZSByZXR1cm4gbGFzdDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEtFWS5SSUdIVDpcbiAgICAgICAgICAgICAgLy8gT3BlbiBkcm9wLWRvd25cbiAgICAgICAgICAgICAgaWYoIX4kc2VsZWN0TXVsdGlwbGUuYWN0aXZlTWF0Y2hJbmRleCB8fCBjdXJyID09PSBsYXN0KXtcbiAgICAgICAgICAgICAgICAkc2VsZWN0LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIFNlbGVjdCBuZXh0L2xhc3QgaXRlbVxuICAgICAgICAgICAgICBlbHNlIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgS0VZLkJBQ0tTUEFDRTpcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHNlbGVjdGVkIGl0ZW0gYW5kIHNlbGVjdCBwcmV2aW91cy9maXJzdFxuICAgICAgICAgICAgICBpZih+JHNlbGVjdE11bHRpcGxlLmFjdGl2ZU1hdGNoSW5kZXgpe1xuICAgICAgICAgICAgICAgICRzZWxlY3RNdWx0aXBsZS5yZW1vdmVDaG9pY2UoY3Vycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gU2VsZWN0IGxhc3QgaXRlbVxuICAgICAgICAgICAgICBlbHNlIHJldHVybiBsYXN0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgS0VZLkRFTEVURTpcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHNlbGVjdGVkIGl0ZW0gYW5kIHNlbGVjdCBuZXh0IGl0ZW1cbiAgICAgICAgICAgICAgaWYofiRzZWxlY3RNdWx0aXBsZS5hY3RpdmVNYXRjaEluZGV4KXtcbiAgICAgICAgICAgICAgICAkc2VsZWN0TXVsdGlwbGUucmVtb3ZlQ2hvaWNlKCRzZWxlY3RNdWx0aXBsZS5hY3RpdmVNYXRjaEluZGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXdJbmRleCA9IGdldE5ld0FjdGl2ZU1hdGNoSW5kZXgoKTtcblxuICAgICAgICBpZighJHNlbGVjdC5zZWxlY3RlZC5sZW5ndGggfHwgbmV3SW5kZXggPT09IGZhbHNlKSAkc2VsZWN0TXVsdGlwbGUuYWN0aXZlTWF0Y2hJbmRleCA9IC0xO1xuICAgICAgICBlbHNlICRzZWxlY3RNdWx0aXBsZS5hY3RpdmVNYXRjaEluZGV4ID0gTWF0aC5taW4obGFzdCxNYXRoLm1heChmaXJzdCxuZXdJbmRleCkpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAkc2VsZWN0LnNlYXJjaElucHV0Lm9uKCdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICBpZiAoICEgS0VZLmlzVmVydGljYWxNb3ZlbWVudChlLndoaWNoKSApIHtcbiAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2VsZWN0LmFjdGl2ZUluZGV4ID0gJHNlbGVjdC50YWdnaW5nTGFiZWwgPT09IGZhbHNlID8gLTEgOiAwO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFB1c2ggYSBcImNyZWF0ZSBuZXdcIiBpdGVtIGludG8gYXJyYXkgaWYgdGhlcmUgaXMgYSBzZWFyY2ggc3RyaW5nXG4gICAgICAgIGlmICggJHNlbGVjdC50YWdnaW5nLmlzQWN0aXZhdGVkICYmICRzZWxlY3Quc2VhcmNoLmxlbmd0aCA+IDAgKSB7XG5cbiAgICAgICAgICAvLyByZXR1cm4gZWFybHkgd2l0aCB0aGVzZSBrZXlzXG4gICAgICAgICAgaWYgKGUud2hpY2ggPT09IEtFWS5UQUIgfHwgS0VZLmlzQ29udHJvbChlKSB8fCBLRVkuaXNGdW5jdGlvbktleShlKSB8fCBlLndoaWNoID09PSBLRVkuRVNDIHx8IEtFWS5pc1ZlcnRpY2FsTW92ZW1lbnQoZS53aGljaCkgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGFsd2F5cyByZXNldCB0aGUgYWN0aXZlSW5kZXggdG8gdGhlIGZpcnN0IGl0ZW0gd2hlbiB0YWdnaW5nXG4gICAgICAgICAgJHNlbGVjdC5hY3RpdmVJbmRleCA9ICRzZWxlY3QudGFnZ2luZ0xhYmVsID09PSBmYWxzZSA/IC0xIDogMDtcbiAgICAgICAgICAvLyB0YWdnaW5nTGFiZWwgPT09IGZhbHNlIGJ5cGFzc2VzIGFsbCBvZiB0aGlzXG4gICAgICAgICAgaWYgKCRzZWxlY3QudGFnZ2luZ0xhYmVsID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgICAgICAgdmFyIGl0ZW1zID0gYW5ndWxhci5jb3B5KCAkc2VsZWN0Lml0ZW1zICk7XG4gICAgICAgICAgdmFyIHN0YXNoQXJyID0gYW5ndWxhci5jb3B5KCAkc2VsZWN0Lml0ZW1zICk7XG4gICAgICAgICAgdmFyIG5ld0l0ZW07XG4gICAgICAgICAgdmFyIGl0ZW07XG4gICAgICAgICAgdmFyIGhhc1RhZyA9IGZhbHNlO1xuICAgICAgICAgIHZhciBkdXBlSW5kZXggPSAtMTtcbiAgICAgICAgICB2YXIgdGFnSXRlbXM7XG4gICAgICAgICAgdmFyIHRhZ0l0ZW07XG5cbiAgICAgICAgICAvLyBjYXNlIGZvciBvYmplY3QgdGFnZ2luZyB2aWEgdHJhbnNmb3JtIGAkc2VsZWN0LnRhZ2dpbmcuZmN0YCBmdW5jdGlvblxuICAgICAgICAgIGlmICggJHNlbGVjdC50YWdnaW5nLmZjdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0YWdJdGVtcyA9ICRzZWxlY3QuJGZpbHRlcignZmlsdGVyJykoaXRlbXMseydpc1RhZyc6IHRydWV9KTtcbiAgICAgICAgICAgIGlmICggdGFnSXRlbXMubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICAgICAgdGFnSXRlbSA9IHRhZ0l0ZW1zWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50LCBpZiBpdCBoYXMgdGhlIGBpc1RhZ2AgcHJvcCB3ZSBnZW5lcmF0ZSBhIG5ldyBvbmUgd2l0aCBlYWNoIGtleXVwLCBzaGF2aW5nIHRoZSBwcmV2aW91c1xuICAgICAgICAgICAgaWYgKCBpdGVtcy5sZW5ndGggPiAwICYmIHRhZ0l0ZW0gKSB7XG4gICAgICAgICAgICAgIGhhc1RhZyA9IHRydWU7XG4gICAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuc2xpY2UoMSxpdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgICBzdGFzaEFyciA9IHN0YXNoQXJyLnNsaWNlKDEsc3Rhc2hBcnIubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0l0ZW0gPSAkc2VsZWN0LnRhZ2dpbmcuZmN0KCRzZWxlY3Quc2VhcmNoKTtcbiAgICAgICAgICAgIG5ld0l0ZW0uaXNUYWcgPSB0cnVlO1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHRoZSB0aGUgdGFnIGRvZXNuJ3QgbWF0Y2ggdGhlIHZhbHVlIG9mIGFuIGV4aXN0aW5nIGl0ZW1cbiAgICAgICAgICAgIGlmICggc3Rhc2hBcnIuZmlsdGVyKCBmdW5jdGlvbiAob3JpZ0l0ZW0pIHsgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKCBvcmlnSXRlbSwgJHNlbGVjdC50YWdnaW5nLmZjdCgkc2VsZWN0LnNlYXJjaCkgKTsgfSApLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0l0ZW0uaXNUYWcgPSB0cnVlO1xuICAgICAgICAgIC8vIGhhbmRsZSBuZXdJdGVtIHN0cmluZyBhbmQgc3RyaXBwaW5nIGR1cGVzIGluIHRhZ2dpbmcgc3RyaW5nIGNvbnRleHRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZmluZCBhbnkgdGFnZ2luZyBpdGVtcyBhbHJlYWR5IGluIHRoZSAkc2VsZWN0Lml0ZW1zIGFycmF5IGFuZCBzdG9yZSB0aGVtXG4gICAgICAgICAgICB0YWdJdGVtcyA9ICRzZWxlY3QuJGZpbHRlcignZmlsdGVyJykoaXRlbXMsZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubWF0Y2goJHNlbGVjdC50YWdnaW5nTGFiZWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIHRhZ0l0ZW1zLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgIHRhZ0l0ZW0gPSB0YWdJdGVtc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1swXTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGlzdGluZyB0YWcgaXRlbSBpZiBmb3VuZCAoc2hvdWxkIG9ubHkgZXZlciBiZSBvbmUgdGFnIGl0ZW0pXG4gICAgICAgICAgICBpZiAoIGl0ZW0gIT09IHVuZGVmaW5lZCAmJiBpdGVtcy5sZW5ndGggPiAwICYmIHRhZ0l0ZW0gKSB7XG4gICAgICAgICAgICAgIGhhc1RhZyA9IHRydWU7XG4gICAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuc2xpY2UoMSxpdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgICBzdGFzaEFyciA9IHN0YXNoQXJyLnNsaWNlKDEsc3Rhc2hBcnIubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0l0ZW0gPSAkc2VsZWN0LnNlYXJjaCsnICcrJHNlbGVjdC50YWdnaW5nTGFiZWw7XG4gICAgICAgICAgICBpZiAoIF9maW5kQXBwcm94RHVwZSgkc2VsZWN0LnNlbGVjdGVkLCAkc2VsZWN0LnNlYXJjaCkgPiAtMSApIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHRoZSB0aGUgdGFnIGRvZXNuJ3QgbWF0Y2ggdGhlIHZhbHVlIG9mIGFuIGV4aXN0aW5nIGl0ZW0gZnJvbVxuICAgICAgICAgICAgLy8gdGhlIHNlYXJjaGVkIGRhdGEgc2V0IG9yIHRoZSBpdGVtcyBhbHJlYWR5IHNlbGVjdGVkXG4gICAgICAgICAgICBpZiAoIF9maW5kQ2FzZUluc2Vuc2l0aXZlRHVwZShzdGFzaEFyci5jb25jYXQoJHNlbGVjdC5zZWxlY3RlZCkpICkge1xuICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIHRhZyBmcm9tIHByZXYgaXRlcmF0aW9uLCBzdHJpcCBpdCAvIHF1ZXVlIHRoZSBjaGFuZ2VcbiAgICAgICAgICAgICAgLy8gYW5kIHJldHVybiBlYXJseVxuICAgICAgICAgICAgICBpZiAoIGhhc1RhZyApIHtcbiAgICAgICAgICAgICAgICBpdGVtcyA9IHN0YXNoQXJyO1xuICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICRzZWxlY3QuYWN0aXZlSW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgJHNlbGVjdC5pdGVtcyA9IGl0ZW1zO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggX2ZpbmRDYXNlSW5zZW5zaXRpdmVEdXBlKHN0YXNoQXJyKSApIHtcbiAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSB0YWcgZnJvbSBwcmV2IGl0ZXJhdGlvbiwgc3RyaXAgaXRcbiAgICAgICAgICAgICAgaWYgKCBoYXNUYWcgKSB7XG4gICAgICAgICAgICAgICAgJHNlbGVjdC5pdGVtcyA9IHN0YXNoQXJyLnNsaWNlKDEsc3Rhc2hBcnIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICggaGFzVGFnICkgZHVwZUluZGV4ID0gX2ZpbmRBcHByb3hEdXBlKCRzZWxlY3Quc2VsZWN0ZWQsIG5ld0l0ZW0pO1xuICAgICAgICAgIC8vIGR1cGUgZm91bmQsIHNoYXZlIHRoZSBmaXJzdCBpdGVtXG4gICAgICAgICAgaWYgKCBkdXBlSW5kZXggPiAtMSApIHtcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuc2xpY2UoZHVwZUluZGV4KzEsaXRlbXMubGVuZ3RoLTEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICAgICAgaXRlbXMucHVzaChuZXdJdGVtKTtcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuY29uY2F0KHN0YXNoQXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNlbGVjdC5hY3RpdmVJbmRleCA9IDA7XG4gICAgICAgICAgICAkc2VsZWN0Lml0ZW1zID0gaXRlbXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZnVuY3Rpb24gX2ZpbmRDYXNlSW5zZW5zaXRpdmVEdXBlKGFycikge1xuICAgICAgICBpZiAoIGFyciA9PT0gdW5kZWZpbmVkIHx8ICRzZWxlY3Quc2VhcmNoID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoYXNEdXBlID0gYXJyLmZpbHRlciggZnVuY3Rpb24gKG9yaWdJdGVtKSB7XG4gICAgICAgICAgaWYgKCAkc2VsZWN0LnNlYXJjaC50b1VwcGVyQ2FzZSgpID09PSB1bmRlZmluZWQgfHwgb3JpZ0l0ZW0gPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9yaWdJdGVtLnRvVXBwZXJDYXNlKCkgPT09ICRzZWxlY3Quc2VhcmNoLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0pLmxlbmd0aCA+IDA7XG5cbiAgICAgICAgcmV0dXJuIGhhc0R1cGU7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBfZmluZEFwcHJveER1cGUoaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgICAgICB2YXIgZHVwZUluZGV4ID0gLTE7XG4gICAgICAgIGlmKGFuZ3VsYXIuaXNBcnJheShoYXlzdGFjaykpIHtcbiAgICAgICAgICB2YXIgdGVtcEFyciA9IGFuZ3VsYXIuY29weShoYXlzdGFjayk7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPHRlbXBBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgc2ltcGxlIHN0cmluZyB2ZXJzaW9uIG9mIHRhZ2dpbmdcbiAgICAgICAgICAgIGlmICggJHNlbGVjdC50YWdnaW5nLmZjdCA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgICAvLyBzZWFyY2ggdGhlIGFycmF5IGZvciB0aGUgbWF0Y2hcbiAgICAgICAgICAgICAgaWYgKCB0ZW1wQXJyW2ldKycgJyskc2VsZWN0LnRhZ2dpbmdMYWJlbCA9PT0gbmVlZGxlICkge1xuICAgICAgICAgICAgICBkdXBlSW5kZXggPSBpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBoYW5kbGUgdGhlIG9iamVjdCB0YWdnaW5nIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgbW9ja09iaiA9IHRlbXBBcnJbaV07XG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzT2JqZWN0KG1vY2tPYmopKSB7XG4gICAgICAgICAgICAgICAgbW9ja09iai5pc1RhZyA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCBhbmd1bGFyLmVxdWFscyhtb2NrT2JqLCBuZWVkbGUpICkge1xuICAgICAgICAgICAgICAgIGR1cGVJbmRleCA9IGk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGR1cGVJbmRleDtcbiAgICAgIH1cblxuICAgICAgJHNlbGVjdC5zZWFyY2hJbnB1dC5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2VsZWN0TXVsdGlwbGUuYWN0aXZlTWF0Y2hJbmRleCA9IC0xO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgfVxuICB9O1xufV0pO1xuXG51aXMuZGlyZWN0aXZlKCd1aVNlbGVjdFNpbmdsZScsIFsnJHRpbWVvdXQnLCckY29tcGlsZScsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcXVpcmU6IFsnXnVpU2VsZWN0JywgJ15uZ01vZGVsJ10sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuXG4gICAgICB2YXIgJHNlbGVjdCA9IGN0cmxzWzBdO1xuICAgICAgdmFyIG5nTW9kZWwgPSBjdHJsc1sxXTtcblxuICAgICAgLy9Gcm9tIHZpZXcgLS0+IG1vZGVsXG4gICAgICBuZ01vZGVsLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24gKGlucHV0VmFsdWUpIHtcbiAgICAgICAgdmFyIGxvY2FscyA9IHt9LFxuICAgICAgICAgICAgcmVzdWx0O1xuICAgICAgICBsb2NhbHNbJHNlbGVjdC5wYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgcmVzdWx0ID0gJHNlbGVjdC5wYXJzZXJSZXN1bHQubW9kZWxNYXBwZXIoc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcblxuICAgICAgLy9Gcm9tIG1vZGVsIC0tPiB2aWV3XG4gICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnVuc2hpZnQoZnVuY3Rpb24gKGlucHV0VmFsdWUpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkc2VsZWN0LnBhcnNlclJlc3VsdC5zb3VyY2UgKHNjb3BlLCB7ICRzZWxlY3QgOiB7c2VhcmNoOicnfX0pLCAvL092ZXJ3cml0ZSAkc2VhcmNoXG4gICAgICAgICAgICBsb2NhbHMgPSB7fSxcbiAgICAgICAgICAgIHJlc3VsdDtcbiAgICAgICAgaWYgKGRhdGEpe1xuICAgICAgICAgIHZhciBjaGVja0ZuU2luZ2xlID0gZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBsb2NhbHNbJHNlbGVjdC5wYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gZDtcbiAgICAgICAgICAgIHJlc3VsdCA9ICRzZWxlY3QucGFyc2VyUmVzdWx0Lm1vZGVsTWFwcGVyKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9PSBpbnB1dFZhbHVlO1xuICAgICAgICAgIH07XG4gICAgICAgICAgLy9JZiBwb3NzaWJsZSBwYXNzIHNhbWUgb2JqZWN0IHN0b3JlZCBpbiAkc2VsZWN0LnNlbGVjdGVkXG4gICAgICAgICAgaWYgKCRzZWxlY3Quc2VsZWN0ZWQgJiYgY2hlY2tGblNpbmdsZSgkc2VsZWN0LnNlbGVjdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuICRzZWxlY3Quc2VsZWN0ZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tGblNpbmdsZShkYXRhW2ldKSkgcmV0dXJuIGRhdGFbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vVXBkYXRlIHZpZXdWYWx1ZSBpZiBtb2RlbCBjaGFuZ2VcbiAgICAgIHNjb3BlLiR3YXRjaCgnJHNlbGVjdC5zZWxlY3RlZCcsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChuZ01vZGVsLiR2aWV3VmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2VsZWN0LnNlbGVjdGVkID0gbmdNb2RlbC4kdmlld1ZhbHVlO1xuICAgICAgfTtcblxuICAgICAgc2NvcGUuJG9uKCd1aXM6c2VsZWN0JywgZnVuY3Rpb24gKGV2ZW50LCBpdGVtKSB7XG4gICAgICAgICRzZWxlY3Quc2VsZWN0ZWQgPSBpdGVtO1xuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiRvbigndWlzOmNsb3NlJywgZnVuY3Rpb24gKGV2ZW50LCBza2lwRm9jdXNzZXIpIHtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAkc2VsZWN0LmZvY3Vzc2VyLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgIGlmICghc2tpcEZvY3Vzc2VyKSAkc2VsZWN0LmZvY3Vzc2VyWzBdLmZvY3VzKCk7XG4gICAgICAgIH0sMCxmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJG9uKCd1aXM6YWN0aXZhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvY3Vzc2VyLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7IC8vV2lsbCByZWFjdGl2YXRlIGl0IG9uIC5jbG9zZSgpXG4gICAgICB9KTtcblxuICAgICAgLy9JZGVhIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9pdmF5bmJlcmcvc2VsZWN0Mi9ibG9iLzc5YjViZjZkYjkxOGQ3NTYwYmRkOTU5MTA5YjdiY2ZiNDdlZGFmNDMvc2VsZWN0Mi5qcyNMMTk1NFxuICAgICAgdmFyIGZvY3Vzc2VyID0gYW5ndWxhci5lbGVtZW50KFwiPGlucHV0IG5nLWRpc2FibGVkPSckc2VsZWN0LmRpc2FibGVkJyBjbGFzcz0ndWktc2VsZWN0LWZvY3Vzc2VyIHVpLXNlbGVjdC1vZmZzY3JlZW4nIHR5cGU9J3RleHQnIGlkPSd7eyAkc2VsZWN0LmZvY3Vzc2VySWQgfX0nIGFyaWEtbGFiZWw9J3t7ICRzZWxlY3QuZm9jdXNzZXJUaXRsZSB9fScgYXJpYS1oYXNwb3B1cD0ndHJ1ZScgcm9sZT0nYnV0dG9uJyAvPlwiKTtcbiAgICAgICRjb21waWxlKGZvY3Vzc2VyKShzY29wZSk7XG4gICAgICAkc2VsZWN0LmZvY3Vzc2VyID0gZm9jdXNzZXI7XG5cbiAgICAgIC8vSW5wdXQgdGhhdCB3aWxsIGhhbmRsZSBmb2N1c1xuICAgICAgJHNlbGVjdC5mb2N1c0lucHV0ID0gZm9jdXNzZXI7XG5cbiAgICAgIGVsZW1lbnQucGFyZW50KCkuYXBwZW5kKGZvY3Vzc2VyKTtcbiAgICAgIGZvY3Vzc2VyLmJpbmQoXCJmb2N1c1wiLCBmdW5jdGlvbigpe1xuICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgJHNlbGVjdC5mb2N1cyA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBmb2N1c3Nlci5iaW5kKFwiYmx1clwiLCBmdW5jdGlvbigpe1xuICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgJHNlbGVjdC5mb2N1cyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZm9jdXNzZXIuYmluZChcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cbiAgICAgICAgaWYgKGUud2hpY2ggPT09IEtFWS5CQUNLU1BBQ0UpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAkc2VsZWN0LnNlbGVjdCh1bmRlZmluZWQpO1xuICAgICAgICAgIHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLndoaWNoID09PSBLRVkuVEFCIHx8IEtFWS5pc0NvbnRyb2woZSkgfHwgS0VZLmlzRnVuY3Rpb25LZXkoZSkgfHwgZS53aGljaCA9PT0gS0VZLkVTQykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLndoaWNoID09IEtFWS5ET1dOICB8fCBlLndoaWNoID09IEtFWS5VUCB8fCBlLndoaWNoID09IEtFWS5FTlRFUiB8fCBlLndoaWNoID09IEtFWS5TUEFDRSl7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgJHNlbGVjdC5hY3RpdmF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvY3Vzc2VyLmJpbmQoXCJrZXl1cCBpbnB1dFwiLCBmdW5jdGlvbihlKXtcblxuICAgICAgICBpZiAoZS53aGljaCA9PT0gS0VZLlRBQiB8fCBLRVkuaXNDb250cm9sKGUpIHx8IEtFWS5pc0Z1bmN0aW9uS2V5KGUpIHx8IGUud2hpY2ggPT09IEtFWS5FU0MgfHwgZS53aGljaCA9PSBLRVkuRU5URVIgfHwgZS53aGljaCA9PT0gS0VZLkJBQ0tTUEFDRSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICRzZWxlY3QuYWN0aXZhdGUoZm9jdXNzZXIudmFsKCkpOyAvL1VzZXIgcHJlc3NlZCBzb21lIHJlZ3VsYXIga2V5LCBzbyB3ZSBwYXNzIGl0IHRvIHRoZSBzZWFyY2ggaW5wdXRcbiAgICAgICAgZm9jdXNzZXIudmFsKCcnKTtcbiAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuXG4gICAgICB9KTtcblxuXG4gICAgfVxuICB9O1xufV0pO1xuLy8gTWFrZSBtdWx0aXBsZSBtYXRjaGVzIHNvcnRhYmxlXG51aXMuZGlyZWN0aXZlKCd1aVNlbGVjdFNvcnQnLCBbJyR0aW1lb3V0JywgJ3VpU2VsZWN0Q29uZmlnJywgJ3VpU2VsZWN0TWluRXJyJywgZnVuY3Rpb24oJHRpbWVvdXQsIHVpU2VsZWN0Q29uZmlnLCB1aVNlbGVjdE1pbkVycikge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICdeXnVpU2VsZWN0JyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsICRzZWxlY3QpIHtcbiAgICAgIGlmIChzY29wZVthdHRycy51aVNlbGVjdFNvcnRdID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IHVpU2VsZWN0TWluRXJyKCdzb3J0JywgJ0V4cGVjdGVkIGEgbGlzdCB0byBzb3J0Jyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe1xuICAgICAgICAgIGF4aXM6ICdob3Jpem9udGFsJ1xuICAgICAgICB9LFxuICAgICAgICBzY29wZS4kZXZhbChhdHRycy51aVNlbGVjdFNvcnRPcHRpb25zKSk7XG5cbiAgICAgIHZhciBheGlzID0gb3B0aW9ucy5heGlzO1xuICAgICAgdmFyIGRyYWdnaW5nQ2xhc3NOYW1lID0gJ2RyYWdnaW5nJztcbiAgICAgIHZhciBkcm9wcGluZ0NsYXNzTmFtZSA9ICdkcm9wcGluZyc7XG4gICAgICB2YXIgZHJvcHBpbmdCZWZvcmVDbGFzc05hbWUgPSAnZHJvcHBpbmctYmVmb3JlJztcbiAgICAgIHZhciBkcm9wcGluZ0FmdGVyQ2xhc3NOYW1lID0gJ2Ryb3BwaW5nLWFmdGVyJztcblxuICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiAkc2VsZWN0LnNvcnRhYmxlO1xuICAgICAgfSwgZnVuY3Rpb24obmV3VmFsdWUpe1xuICAgICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50LmF0dHIoJ2RyYWdnYWJsZScsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cignZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBlbGVtZW50Lm9uKCdkcmFnc3RhcnQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKGRyYWdnaW5nQ2xhc3NOYW1lKTtcblxuICAgICAgICAoZXZlbnQuZGF0YVRyYW5zZmVyIHx8IGV2ZW50Lm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyKS5zZXREYXRhKCd0ZXh0L3BsYWluJywgc2NvcGUuJGluZGV4KTtcbiAgICAgIH0pO1xuXG4gICAgICBlbGVtZW50Lm9uKCdkcmFnZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoZHJhZ2dpbmdDbGFzc05hbWUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBtb3ZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHRoaXMuc3BsaWNlKHRvLCAwLCB0aGlzLnNwbGljZShmcm9tLCAxKVswXSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZHJhZ092ZXJIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gYXhpcyA9PT0gJ3ZlcnRpY2FsJyA/IGV2ZW50Lm9mZnNldFkgfHwgZXZlbnQubGF5ZXJZIHx8IChldmVudC5vcmlnaW5hbEV2ZW50ID8gZXZlbnQub3JpZ2luYWxFdmVudC5vZmZzZXRZIDogMCkgOiBldmVudC5vZmZzZXRYIHx8IGV2ZW50LmxheWVyWCB8fCAoZXZlbnQub3JpZ2luYWxFdmVudCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQub2Zmc2V0WCA6IDApO1xuXG4gICAgICAgIGlmIChvZmZzZXQgPCAodGhpc1theGlzID09PSAndmVydGljYWwnID8gJ29mZnNldEhlaWdodCcgOiAnb2Zmc2V0V2lkdGgnXSAvIDIpKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhkcm9wcGluZ0FmdGVyQ2xhc3NOYW1lKTtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKGRyb3BwaW5nQmVmb3JlQ2xhc3NOYW1lKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoZHJvcHBpbmdCZWZvcmVDbGFzc05hbWUpO1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoZHJvcHBpbmdBZnRlckNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBkcm9wVGltZW91dDtcblxuICAgICAgdmFyIGRyb3BIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB2YXIgZHJvcHBlZEl0ZW1JbmRleCA9IHBhcnNlSW50KChldmVudC5kYXRhVHJhbnNmZXIgfHwgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIpLmdldERhdGEoJ3RleHQvcGxhaW4nKSwgMTApO1xuXG4gICAgICAgIC8vIHByZXZlbnQgZXZlbnQgZmlyaW5nIG11bHRpcGxlIHRpbWVzIGluIGZpcmVmb3hcbiAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGRyb3BUaW1lb3V0KTtcbiAgICAgICAgZHJvcFRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBfZHJvcEhhbmRsZXIoZHJvcHBlZEl0ZW1JbmRleCk7XG4gICAgICAgIH0sIDIwKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBfZHJvcEhhbmRsZXIgPSBmdW5jdGlvbihkcm9wcGVkSXRlbUluZGV4KSB7XG4gICAgICAgIHZhciB0aGVMaXN0ID0gc2NvcGUuJGV2YWwoYXR0cnMudWlTZWxlY3RTb3J0KTtcbiAgICAgICAgdmFyIGl0ZW1Ub01vdmUgPSB0aGVMaXN0W2Ryb3BwZWRJdGVtSW5kZXhdO1xuICAgICAgICB2YXIgbmV3SW5kZXggPSBudWxsO1xuXG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKGRyb3BwaW5nQmVmb3JlQ2xhc3NOYW1lKSkge1xuICAgICAgICAgIGlmIChkcm9wcGVkSXRlbUluZGV4IDwgc2NvcGUuJGluZGV4KSB7XG4gICAgICAgICAgICBuZXdJbmRleCA9IHNjb3BlLiRpbmRleCAtIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gc2NvcGUuJGluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZHJvcHBlZEl0ZW1JbmRleCA8IHNjb3BlLiRpbmRleCkge1xuICAgICAgICAgICAgbmV3SW5kZXggPSBzY29wZS4kaW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gc2NvcGUuJGluZGV4ICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBtb3ZlLmFwcGx5KHRoZUxpc3QsIFtkcm9wcGVkSXRlbUluZGV4LCBuZXdJbmRleF0pO1xuXG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBzY29wZS4kZW1pdCgndWlTZWxlY3RTb3J0OmNoYW5nZScsIHtcbiAgICAgICAgICAgIGFycmF5OiB0aGVMaXN0LFxuICAgICAgICAgICAgaXRlbTogaXRlbVRvTW92ZSxcbiAgICAgICAgICAgIGZyb206IGRyb3BwZWRJdGVtSW5kZXgsXG4gICAgICAgICAgICB0bzogbmV3SW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhkcm9wcGluZ0NsYXNzTmFtZSk7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoZHJvcHBpbmdCZWZvcmVDbGFzc05hbWUpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGRyb3BwaW5nQWZ0ZXJDbGFzc05hbWUpO1xuXG4gICAgICAgIGVsZW1lbnQub2ZmKCdkcm9wJywgZHJvcEhhbmRsZXIpO1xuICAgICAgfTtcblxuICAgICAgZWxlbWVudC5vbignZHJhZ2VudGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKGRyYWdnaW5nQ2xhc3NOYW1lKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoZHJvcHBpbmdDbGFzc05hbWUpO1xuXG4gICAgICAgIGVsZW1lbnQub24oJ2RyYWdvdmVyJywgZHJhZ092ZXJIYW5kbGVyKTtcbiAgICAgICAgZWxlbWVudC5vbignZHJvcCcsIGRyb3BIYW5kbGVyKTtcbiAgICAgIH0pO1xuXG4gICAgICBlbGVtZW50Lm9uKCdkcmFnbGVhdmUnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9IGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhkcm9wcGluZ0NsYXNzTmFtZSk7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoZHJvcHBpbmdCZWZvcmVDbGFzc05hbWUpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGRyb3BwaW5nQWZ0ZXJDbGFzc05hbWUpO1xuXG4gICAgICAgIGVsZW1lbnQub2ZmKCdkcmFnb3ZlcicsIGRyYWdPdmVySGFuZGxlcik7XG4gICAgICAgIGVsZW1lbnQub2ZmKCdkcm9wJywgZHJvcEhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV0pO1xuXG4vKipcbiAqIFBhcnNlcyBcInJlcGVhdFwiIGF0dHJpYnV0ZS5cbiAqXG4gKiBUYWtlbiBmcm9tIEFuZ3VsYXJKUyBuZ1JlcGVhdCBzb3VyY2UgY29kZVxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvYmxvYi92MS4yLjE1L3NyYy9uZy9kaXJlY3RpdmUvbmdSZXBlYXQuanMjTDIxMVxuICpcbiAqIE9yaWdpbmFsIGRpc2N1c3Npb24gYWJvdXQgcGFyc2luZyBcInJlcGVhdFwiIGF0dHJpYnV0ZSBpbnN0ZWFkIG9mIGZ1bGx5IHJlbHlpbmcgb24gbmctcmVwZWF0OlxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvdWktc2VsZWN0L2NvbW1pdC81ZGQ2M2FkI2NvbW1pdGNvbW1lbnQtNTUwNDY5N1xuICovXG5cbnVpcy5zZXJ2aWNlKCd1aXNSZXBlYXRQYXJzZXInLCBbJ3VpU2VsZWN0TWluRXJyJywnJHBhcnNlJywgZnVuY3Rpb24odWlTZWxlY3RNaW5FcnIsICRwYXJzZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLyoqXG4gICAqIEV4YW1wbGU6XG4gICAqIGV4cHJlc3Npb24gPSBcImFkZHJlc3MgaW4gYWRkcmVzc2VzIHwgZmlsdGVyOiB7c3RyZWV0OiAkc2VsZWN0LnNlYXJjaH0gdHJhY2sgYnkgJGluZGV4XCJcbiAgICogaXRlbU5hbWUgPSBcImFkZHJlc3NcIixcbiAgICogc291cmNlID0gXCJhZGRyZXNzZXMgfCBmaWx0ZXI6IHtzdHJlZXQ6ICRzZWxlY3Quc2VhcmNofVwiLFxuICAgKiB0cmFja0J5RXhwID0gXCIkaW5kZXhcIixcbiAgICovXG4gIHNlbGYucGFyc2UgPSBmdW5jdGlvbihleHByZXNzaW9uKSB7XG5cblxuICAgIHZhciBtYXRjaDtcbiAgICB2YXIgaXNPYmplY3RDb2xsZWN0aW9uID0gL1xcKFxccyooW1xcJFxcd11bXFwkXFx3XSopXFxzKixcXHMqKFtcXCRcXHddW1xcJFxcd10qKVxccypcXCkvLnRlc3QoZXhwcmVzc2lvbik7XG4gICAgLy8gSWYgYW4gYXJyYXkgaXMgdXNlZCBhcyBjb2xsZWN0aW9uXG5cbiAgICAvLyBpZiAoaXNPYmplY3RDb2xsZWN0aW9uKXtcbiAgICAgIC8vMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTExMTEwMDAwMDAwMDAwMDAwMDAyMjIyMjIyMjIyMjIyMjAwMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzAwMDA0NDQ0NDQ0NDQ0NDQ0NDQ0NDQwMDAwMDAwMDAwMDAwMDA1NTY2NjY2NjAwMDAwNzc3Nzc3Nzc3Nzc3NTUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODg4ODg4ODAwMDAwMDBcbiAgICBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goL15cXHMqKD86KFtcXHNcXFNdKz8pXFxzK2FzXFxzKyk/KD86KFtcXCRcXHddW1xcJFxcd10qKXwoPzpcXChcXHMqKFtcXCRcXHddW1xcJFxcd10qKVxccyosXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqXFwpKSlcXHMraW5cXHMrKChbXFx3XFwuXSspP1xccyoofFxccypbXFxzXFxTXSs/KSk/KD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/XFxzKiQvKTsgICAgICBcblxuICAgIC8vIDEgQWxpYXNcbiAgICAvLyAyIEl0ZW1cbiAgICAvLyAzIEtleSBvbiAoa2V5LHZhbHVlKVxuICAgIC8vIDQgVmFsdWUgb24gKGtleSx2YWx1ZSlcbiAgICAvLyA1IENvbGxlY3Rpb24gZXhwcmVzaW9uIChvbmx5IHVzZWQgd2hlbiB1c2luZyBhbiBhcnJheSBjb2xsZWN0aW9uKVxuICAgIC8vIDYgT2JqZWN0IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gQXJyYXkgd2hlbiB1c2luZyAoa2V5LHZhbHVlKSBzeW50YXhcbiAgICAvLyA3IEZpbHRlcnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gIzYgd2hlbiB1c2luZyAoa2V5LHZhbHVlKSBzeW50YXhcbiAgICAvLyA4IFRyYWNrIGJ5XG5cbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICB0aHJvdyB1aVNlbGVjdE1pbkVycignaWV4cCcsIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fWyB0cmFjayBieSBfaWRfXScgYnV0IGdvdCAnezB9Jy5cIixcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbik7XG4gICAgfVxuICAgIGlmICghbWF0Y2hbNl0gJiYgaXNPYmplY3RDb2xsZWN0aW9uKSB7XG4gICAgICB0aHJvdyB1aVNlbGVjdE1pbkVycignaWV4cCcsIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICdfaXRlbV8gYXMgKF9rZXlfLCBfaXRlbV8pIGluIF9PYmpDb2xsZWN0aW9uXyBbIHRyYWNrIGJ5IF9pZF9dJyBidXQgZ290ICd7MH0nLlwiLFxuICAgICAgICAgICAgICBleHByZXNzaW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXRlbU5hbWU6IG1hdGNoWzRdIHx8IG1hdGNoWzJdLCAvLyAobGhzKSBMZWZ0LWhhbmQgc2lkZSxcbiAgICAgIGtleU5hbWU6IG1hdGNoWzNdLCAvL2ZvciAoa2V5LCB2YWx1ZSkgc3ludGF4XG4gICAgICBzb3VyY2U6ICRwYXJzZSghbWF0Y2hbM10gPyBtYXRjaFs1XSA6IG1hdGNoWzZdKSxcbiAgICAgIHNvdXJjZU5hbWU6IG1hdGNoWzZdLFxuICAgICAgZmlsdGVyczogbWF0Y2hbN10sXG4gICAgICB0cmFja0J5RXhwOiBtYXRjaFs4XSxcbiAgICAgIG1vZGVsTWFwcGVyOiAkcGFyc2UobWF0Y2hbMV0gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbMl0pLFxuICAgICAgcmVwZWF0RXhwcmVzc2lvbjogZnVuY3Rpb24gKGdyb3VwZWQpIHtcbiAgICAgICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLml0ZW1OYW1lICsgJyBpbiAnICsgKGdyb3VwZWQgPyAnJGdyb3VwLml0ZW1zJyA6ICckc2VsZWN0Lml0ZW1zJyk7XG4gICAgICAgIGlmICh0aGlzLnRyYWNrQnlFeHApIHtcbiAgICAgICAgICBleHByZXNzaW9uICs9ICcgdHJhY2sgYnkgJyArIHRoaXMudHJhY2tCeUV4cDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcbiAgICAgIH0gXG4gICAgfTtcblxuICB9O1xuXG4gIHNlbGYuZ2V0R3JvdXBOZ1JlcGVhdEV4cHJlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJyRncm91cCBpbiAkc2VsZWN0Lmdyb3Vwcyc7XG4gIH07XG5cbn1dKTtcblxufSgpKTtcbmFuZ3VsYXIubW9kdWxlKFwidWkuc2VsZWN0XCIpLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgeyR0ZW1wbGF0ZUNhY2hlLnB1dChcImJvb3RzdHJhcC9jaG9pY2VzLnRwbC5odG1sXCIsXCI8dWwgY2xhc3M9XFxcInVpLXNlbGVjdC1jaG9pY2VzIHVpLXNlbGVjdC1jaG9pY2VzLWNvbnRlbnQgdWktc2VsZWN0LWRyb3Bkb3duIGRyb3Bkb3duLW1lbnVcXFwiIHJvbGU9XFxcImxpc3Rib3hcXFwiIG5nLXNob3c9XFxcIiRzZWxlY3QuaXRlbXMubGVuZ3RoID4gMFxcXCI+PGxpIGNsYXNzPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy1ncm91cFxcXCIgaWQ9XFxcInVpLXNlbGVjdC1jaG9pY2VzLXt7ICRzZWxlY3QuZ2VuZXJhdGVkSWQgfX1cXFwiPjxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiIG5nLXNob3c9XFxcIiRzZWxlY3QuaXNHcm91cGVkICYmICRpbmRleCA+IDBcXFwiPjwvZGl2PjxkaXYgbmctc2hvdz1cXFwiJHNlbGVjdC5pc0dyb3VwZWRcXFwiIGNsYXNzPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy1ncm91cC1sYWJlbCBkcm9wZG93bi1oZWFkZXJcXFwiIG5nLWJpbmQ9XFxcIiRncm91cC5uYW1lXFxcIj48L2Rpdj48ZGl2IGlkPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy1yb3cte3sgJHNlbGVjdC5nZW5lcmF0ZWRJZCB9fS17eyRpbmRleH19XFxcIiBjbGFzcz1cXFwidWktc2VsZWN0LWNob2ljZXMtcm93XFxcIiBuZy1jbGFzcz1cXFwie2FjdGl2ZTogJHNlbGVjdC5pc0FjdGl2ZSh0aGlzKSwgZGlzYWJsZWQ6ICRzZWxlY3QuaXNEaXNhYmxlZCh0aGlzKX1cXFwiIHJvbGU9XFxcIm9wdGlvblxcXCI+PGEgaHJlZj1cXFwiXFxcIiBjbGFzcz1cXFwidWktc2VsZWN0LWNob2ljZXMtcm93LWlubmVyXFxcIj48L2E+PC9kaXY+PC9saT48L3VsPlwiKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dChcImJvb3RzdHJhcC9tYXRjaC1tdWx0aXBsZS50cGwuaHRtbFwiLFwiPHNwYW4gY2xhc3M9XFxcInVpLXNlbGVjdC1tYXRjaFxcXCI+PHNwYW4gbmctcmVwZWF0PVxcXCIkaXRlbSBpbiAkc2VsZWN0LnNlbGVjdGVkXFxcIj48c3BhbiBjbGFzcz1cXFwidWktc2VsZWN0LW1hdGNoLWl0ZW0gYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1xcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIG5nLWRpc2FibGVkPVxcXCIkc2VsZWN0LmRpc2FibGVkXFxcIiBuZy1jbGljaz1cXFwiJHNlbGVjdE11bHRpcGxlLmFjdGl2ZU1hdGNoSW5kZXggPSAkaW5kZXg7XFxcIiBuZy1jbGFzcz1cXFwie1xcJ2J0bi1wcmltYXJ5XFwnOiRzZWxlY3RNdWx0aXBsZS5hY3RpdmVNYXRjaEluZGV4ID09PSAkaW5kZXgsIFxcJ3NlbGVjdC1sb2NrZWRcXCc6JHNlbGVjdC5pc0xvY2tlZCh0aGlzLCAkaW5kZXgpfVxcXCIgdWktc2VsZWN0LXNvcnQ9XFxcIiRzZWxlY3Quc2VsZWN0ZWRcXFwiPjxzcGFuIGNsYXNzPVxcXCJjbG9zZSB1aS1zZWxlY3QtbWF0Y2gtY2xvc2VcXFwiIG5nLWhpZGU9XFxcIiRzZWxlY3QuZGlzYWJsZWRcXFwiIG5nLWNsaWNrPVxcXCIkc2VsZWN0TXVsdGlwbGUucmVtb3ZlQ2hvaWNlKCRpbmRleClcXFwiPiZuYnNwOyZ0aW1lczs8L3NwYW4+IDxzcGFuIHVpcy10cmFuc2NsdWRlLWFwcGVuZD1cXFwiXFxcIj48L3NwYW4+PC9zcGFuPjwvc3Bhbj48L3NwYW4+XCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwiYm9vdHN0cmFwL21hdGNoLnRwbC5odG1sXCIsXCI8ZGl2IGNsYXNzPVxcXCJ1aS1zZWxlY3QtbWF0Y2hcXFwiIG5nLWhpZGU9XFxcIiRzZWxlY3Qub3BlblxcXCIgbmctZGlzYWJsZWQ9XFxcIiRzZWxlY3QuZGlzYWJsZWRcXFwiIG5nLWNsYXNzPVxcXCJ7XFwnYnRuLWRlZmF1bHQtZm9jdXNcXCc6JHNlbGVjdC5mb2N1c31cXFwiPjxzcGFuIHRhYmluZGV4PVxcXCItMVxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBmb3JtLWNvbnRyb2wgdWktc2VsZWN0LXRvZ2dsZVxcXCIgYXJpYS1sYWJlbD1cXFwie3sgJHNlbGVjdC5iYXNlVGl0bGUgfX0gYWN0aXZhdGVcXFwiIG5nLWRpc2FibGVkPVxcXCIkc2VsZWN0LmRpc2FibGVkXFxcIiBuZy1jbGljaz1cXFwiJHNlbGVjdC5hY3RpdmF0ZSgpXFxcIiBzdHlsZT1cXFwib3V0bGluZTogMDtcXFwiPjxzcGFuIG5nLXNob3c9XFxcIiRzZWxlY3QuaXNFbXB0eSgpXFxcIiBjbGFzcz1cXFwidWktc2VsZWN0LXBsYWNlaG9sZGVyIHRleHQtbXV0ZWRcXFwiPnt7JHNlbGVjdC5wbGFjZWhvbGRlcn19PC9zcGFuPiA8c3BhbiBuZy1oaWRlPVxcXCIkc2VsZWN0LmlzRW1wdHkoKVxcXCIgY2xhc3M9XFxcInVpLXNlbGVjdC1tYXRjaC10ZXh0IHB1bGwtbGVmdFxcXCIgbmctY2xhc3M9XFxcIntcXCd1aS1zZWxlY3QtYWxsb3ctY2xlYXJcXCc6ICRzZWxlY3QuYWxsb3dDbGVhciAmJiAhJHNlbGVjdC5pc0VtcHR5KCl9XFxcIiBuZy10cmFuc2NsdWRlPVxcXCJcXFwiPjwvc3Bhbj4gPGkgY2xhc3M9XFxcImNhcmV0IHB1bGwtcmlnaHRcXFwiIG5nLWNsaWNrPVxcXCIkc2VsZWN0LnRvZ2dsZSgkZXZlbnQpXFxcIj48L2k+IDxhIG5nLXNob3c9XFxcIiRzZWxlY3QuYWxsb3dDbGVhciAmJiAhJHNlbGVjdC5pc0VtcHR5KClcXFwiIGFyaWEtbGFiZWw9XFxcInt7ICRzZWxlY3QuYmFzZVRpdGxlIH19IGNsZWFyXFxcIiBzdHlsZT1cXFwibWFyZ2luLXJpZ2h0OiAxMHB4XFxcIiBuZy1jbGljaz1cXFwiJHNlbGVjdC5jbGVhcigkZXZlbnQpXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi14cyBidG4tbGluayBwdWxsLXJpZ2h0XFxcIj48aSBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48L2k+PC9hPjwvc3Bhbj48L2Rpdj5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJib290c3RyYXAvc2VsZWN0LW11bHRpcGxlLnRwbC5odG1sXCIsXCI8ZGl2IGNsYXNzPVxcXCJ1aS1zZWxlY3QtY29udGFpbmVyIHVpLXNlbGVjdC1tdWx0aXBsZSB1aS1zZWxlY3QtYm9vdHN0cmFwIGRyb3Bkb3duIGZvcm0tY29udHJvbFxcXCIgbmctY2xhc3M9XFxcIntvcGVuOiAkc2VsZWN0Lm9wZW59XFxcIj48ZGl2PjxkaXYgY2xhc3M9XFxcInVpLXNlbGVjdC1tYXRjaFxcXCI+PC9kaXY+PGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGF1dG9jb21wbGV0ZT1cXFwiZmFsc2VcXFwiIGF1dG9jb3JyZWN0PVxcXCJvZmZcXFwiIGF1dG9jYXBpdGFsaXplPVxcXCJvZmZcXFwiIHNwZWxsY2hlY2s9XFxcImZhbHNlXFxcIiBjbGFzcz1cXFwidWktc2VsZWN0LXNlYXJjaCBpbnB1dC14c1xcXCIgcGxhY2Vob2xkZXI9XFxcInt7JHNlbGVjdE11bHRpcGxlLmdldFBsYWNlaG9sZGVyKCl9fVxcXCIgbmctZGlzYWJsZWQ9XFxcIiRzZWxlY3QuZGlzYWJsZWRcXFwiIG5nLWhpZGU9XFxcIiRzZWxlY3QuZGlzYWJsZWRcXFwiIG5nLWNsaWNrPVxcXCIkc2VsZWN0LmFjdGl2YXRlKClcXFwiIG5nLW1vZGVsPVxcXCIkc2VsZWN0LnNlYXJjaFxcXCIgcm9sZT1cXFwiY29tYm9ib3hcXFwiIGFyaWEtbGFiZWw9XFxcInt7ICRzZWxlY3QuYmFzZVRpdGxlIH19XFxcIiBvbmRyb3A9XFxcInJldHVybiBmYWxzZTtcXFwiPjwvZGl2PjxkaXYgY2xhc3M9XFxcInVpLXNlbGVjdC1jaG9pY2VzXFxcIj48L2Rpdj48L2Rpdj5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJib290c3RyYXAvc2VsZWN0LnRwbC5odG1sXCIsXCI8ZGl2IGNsYXNzPVxcXCJ1aS1zZWxlY3QtY29udGFpbmVyIHVpLXNlbGVjdC1ib290c3RyYXAgZHJvcGRvd25cXFwiIG5nLWNsYXNzPVxcXCJ7b3BlbjogJHNlbGVjdC5vcGVufVxcXCI+PGRpdiBjbGFzcz1cXFwidWktc2VsZWN0LW1hdGNoXFxcIj48L2Rpdj48aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgYXV0b2NvbXBsZXRlPVxcXCJmYWxzZVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIiBhcmlhLWV4cGFuZGVkPVxcXCJ0cnVlXFxcIiBhcmlhLWxhYmVsPVxcXCJ7eyAkc2VsZWN0LmJhc2VUaXRsZSB9fVxcXCIgYXJpYS1vd25zPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy17eyAkc2VsZWN0LmdlbmVyYXRlZElkIH19XFxcIiBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQ9XFxcInVpLXNlbGVjdC1jaG9pY2VzLXJvdy17eyAkc2VsZWN0LmdlbmVyYXRlZElkIH19LXt7ICRzZWxlY3QuYWN0aXZlSW5kZXggfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdWktc2VsZWN0LXNlYXJjaFxcXCIgcGxhY2Vob2xkZXI9XFxcInt7JHNlbGVjdC5wbGFjZWhvbGRlcn19XFxcIiBuZy1tb2RlbD1cXFwiJHNlbGVjdC5zZWFyY2hcXFwiIG5nLXNob3c9XFxcIiRzZWxlY3Quc2VhcmNoRW5hYmxlZCAmJiAkc2VsZWN0Lm9wZW5cXFwiPjxkaXYgY2xhc3M9XFxcInVpLXNlbGVjdC1jaG9pY2VzXFxcIj48L2Rpdj48L2Rpdj5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJzZWxlY3QyL2Nob2ljZXMudHBsLmh0bWxcIixcIjx1bCBjbGFzcz1cXFwidWktc2VsZWN0LWNob2ljZXMgdWktc2VsZWN0LWNob2ljZXMtY29udGVudCBzZWxlY3QyLXJlc3VsdHNcXFwiPjxsaSBjbGFzcz1cXFwidWktc2VsZWN0LWNob2ljZXMtZ3JvdXBcXFwiIG5nLWNsYXNzPVxcXCJ7XFwnc2VsZWN0Mi1yZXN1bHQtd2l0aC1jaGlsZHJlblxcJzogJHNlbGVjdC5jaG9pY2VHcm91cGVkKCRncm91cCkgfVxcXCI+PGRpdiBuZy1zaG93PVxcXCIkc2VsZWN0LmNob2ljZUdyb3VwZWQoJGdyb3VwKVxcXCIgY2xhc3M9XFxcInVpLXNlbGVjdC1jaG9pY2VzLWdyb3VwLWxhYmVsIHNlbGVjdDItcmVzdWx0LWxhYmVsXFxcIiBuZy1iaW5kPVxcXCIkZ3JvdXAubmFtZVxcXCI+PC9kaXY+PHVsIHJvbGU9XFxcImxpc3Rib3hcXFwiIGlkPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy17eyAkc2VsZWN0LmdlbmVyYXRlZElkIH19XFxcIiBuZy1jbGFzcz1cXFwie1xcJ3NlbGVjdDItcmVzdWx0LXN1YlxcJzogJHNlbGVjdC5jaG9pY2VHcm91cGVkKCRncm91cCksIFxcJ3NlbGVjdDItcmVzdWx0LXNpbmdsZVxcJzogISRzZWxlY3QuY2hvaWNlR3JvdXBlZCgkZ3JvdXApIH1cXFwiPjxsaSByb2xlPVxcXCJvcHRpb25cXFwiIGlkPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy1yb3cte3sgJHNlbGVjdC5nZW5lcmF0ZWRJZCB9fS17eyRpbmRleH19XFxcIiBjbGFzcz1cXFwidWktc2VsZWN0LWNob2ljZXMtcm93XFxcIiBuZy1jbGFzcz1cXFwie1xcJ3NlbGVjdDItaGlnaGxpZ2h0ZWRcXCc6ICRzZWxlY3QuaXNBY3RpdmUodGhpcyksIFxcJ3NlbGVjdDItZGlzYWJsZWRcXCc6ICRzZWxlY3QuaXNEaXNhYmxlZCh0aGlzKX1cXFwiPjxkaXYgY2xhc3M9XFxcInNlbGVjdDItcmVzdWx0LWxhYmVsIHVpLXNlbGVjdC1jaG9pY2VzLXJvdy1pbm5lclxcXCI+PC9kaXY+PC9saT48L3VsPjwvbGk+PC91bD5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJzZWxlY3QyL21hdGNoLW11bHRpcGxlLnRwbC5odG1sXCIsXCI8c3BhbiBjbGFzcz1cXFwidWktc2VsZWN0LW1hdGNoXFxcIj48bGkgY2xhc3M9XFxcInVpLXNlbGVjdC1tYXRjaC1pdGVtIHNlbGVjdDItc2VhcmNoLWNob2ljZVxcXCIgbmctcmVwZWF0PVxcXCIkaXRlbSBpbiAkc2VsZWN0LnNlbGVjdGVkXFxcIiBuZy1jbGFzcz1cXFwie1xcJ3NlbGVjdDItc2VhcmNoLWNob2ljZS1mb2N1c1xcJzokc2VsZWN0TXVsdGlwbGUuYWN0aXZlTWF0Y2hJbmRleCA9PT0gJGluZGV4LCBcXCdzZWxlY3QyLWxvY2tlZFxcJzokc2VsZWN0LmlzTG9ja2VkKHRoaXMsICRpbmRleCl9XFxcIiB1aS1zZWxlY3Qtc29ydD1cXFwiJHNlbGVjdC5zZWxlY3RlZFxcXCI+PHNwYW4gdWlzLXRyYW5zY2x1ZGUtYXBwZW5kPVxcXCJcXFwiPjwvc3Bhbj4gPGEgaHJlZj1cXFwiamF2YXNjcmlwdDo7XFxcIiBjbGFzcz1cXFwidWktc2VsZWN0LW1hdGNoLWNsb3NlIHNlbGVjdDItc2VhcmNoLWNob2ljZS1jbG9zZVxcXCIgbmctY2xpY2s9XFxcIiRzZWxlY3RNdWx0aXBsZS5yZW1vdmVDaG9pY2UoJGluZGV4KVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48L2E+PC9saT48L3NwYW4+XCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwic2VsZWN0Mi9tYXRjaC50cGwuaHRtbFwiLFwiPGEgY2xhc3M9XFxcInNlbGVjdDItY2hvaWNlIHVpLXNlbGVjdC1tYXRjaFxcXCIgbmctY2xhc3M9XFxcIntcXCdzZWxlY3QyLWRlZmF1bHRcXCc6ICRzZWxlY3QuaXNFbXB0eSgpfVxcXCIgbmctY2xpY2s9XFxcIiRzZWxlY3QudG9nZ2xlKCRldmVudClcXFwiIGFyaWEtbGFiZWw9XFxcInt7ICRzZWxlY3QuYmFzZVRpdGxlIH19IHNlbGVjdFxcXCI+PHNwYW4gbmctc2hvdz1cXFwiJHNlbGVjdC5pc0VtcHR5KClcXFwiIGNsYXNzPVxcXCJzZWxlY3QyLWNob3NlblxcXCI+e3skc2VsZWN0LnBsYWNlaG9sZGVyfX08L3NwYW4+IDxzcGFuIG5nLWhpZGU9XFxcIiRzZWxlY3QuaXNFbXB0eSgpXFxcIiBjbGFzcz1cXFwic2VsZWN0Mi1jaG9zZW5cXFwiIG5nLXRyYW5zY2x1ZGU9XFxcIlxcXCI+PC9zcGFuPiA8YWJiciBuZy1pZj1cXFwiJHNlbGVjdC5hbGxvd0NsZWFyICYmICEkc2VsZWN0LmlzRW1wdHkoKVxcXCIgY2xhc3M9XFxcInNlbGVjdDItc2VhcmNoLWNob2ljZS1jbG9zZVxcXCIgbmctY2xpY2s9XFxcIiRzZWxlY3QuY2xlYXIoJGV2ZW50KVxcXCI+PC9hYmJyPiA8c3BhbiBjbGFzcz1cXFwic2VsZWN0Mi1hcnJvdyB1aS1zZWxlY3QtdG9nZ2xlXFxcIj48Yj48L2I+PC9zcGFuPjwvYT5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJzZWxlY3QyL3NlbGVjdC1tdWx0aXBsZS50cGwuaHRtbFwiLFwiPGRpdiBjbGFzcz1cXFwidWktc2VsZWN0LWNvbnRhaW5lciB1aS1zZWxlY3QtbXVsdGlwbGUgc2VsZWN0MiBzZWxlY3QyLWNvbnRhaW5lciBzZWxlY3QyLWNvbnRhaW5lci1tdWx0aVxcXCIgbmctY2xhc3M9XFxcIntcXCdzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUgc2VsZWN0Mi1kcm9wZG93bi1vcGVuIG9wZW5cXCc6ICRzZWxlY3Qub3BlbiwgXFwnc2VsZWN0Mi1jb250YWluZXItZGlzYWJsZWRcXCc6ICRzZWxlY3QuZGlzYWJsZWR9XFxcIj48dWwgY2xhc3M9XFxcInNlbGVjdDItY2hvaWNlc1xcXCI+PHNwYW4gY2xhc3M9XFxcInVpLXNlbGVjdC1tYXRjaFxcXCI+PC9zcGFuPjxsaSBjbGFzcz1cXFwic2VsZWN0Mi1zZWFyY2gtZmllbGRcXFwiPjxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBhdXRvY29tcGxldGU9XFxcImZhbHNlXFxcIiBhdXRvY29ycmVjdD1cXFwib2ZmXFxcIiBhdXRvY2FwaXRhbGl6ZT1cXFwib2ZmXFxcIiBzcGVsbGNoZWNrPVxcXCJmYWxzZVxcXCIgcm9sZT1cXFwiY29tYm9ib3hcXFwiIGFyaWEtZXhwYW5kZWQ9XFxcInRydWVcXFwiIGFyaWEtb3ducz1cXFwidWktc2VsZWN0LWNob2ljZXMte3sgJHNlbGVjdC5nZW5lcmF0ZWRJZCB9fVxcXCIgYXJpYS1sYWJlbD1cXFwie3sgJHNlbGVjdC5iYXNlVGl0bGUgfX1cXFwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cXFwidWktc2VsZWN0LWNob2ljZXMtcm93LXt7ICRzZWxlY3QuZ2VuZXJhdGVkSWQgfX0te3sgJHNlbGVjdC5hY3RpdmVJbmRleCB9fVxcXCIgY2xhc3M9XFxcInNlbGVjdDItaW5wdXQgdWktc2VsZWN0LXNlYXJjaFxcXCIgcGxhY2Vob2xkZXI9XFxcInt7JHNlbGVjdE11bHRpcGxlLmdldFBsYWNlaG9sZGVyKCl9fVxcXCIgbmctZGlzYWJsZWQ9XFxcIiRzZWxlY3QuZGlzYWJsZWRcXFwiIG5nLWhpZGU9XFxcIiRzZWxlY3QuZGlzYWJsZWRcXFwiIG5nLW1vZGVsPVxcXCIkc2VsZWN0LnNlYXJjaFxcXCIgbmctY2xpY2s9XFxcIiRzZWxlY3QuYWN0aXZhdGUoKVxcXCIgc3R5bGU9XFxcIndpZHRoOiAzNHB4O1xcXCIgb25kcm9wPVxcXCJyZXR1cm4gZmFsc2U7XFxcIj48L2xpPjwvdWw+PGRpdiBjbGFzcz1cXFwidWktc2VsZWN0LWRyb3Bkb3duIHNlbGVjdDItZHJvcCBzZWxlY3QyLXdpdGgtc2VhcmNoYm94IHNlbGVjdDItZHJvcC1hY3RpdmVcXFwiIG5nLWNsYXNzPVxcXCJ7XFwnc2VsZWN0Mi1kaXNwbGF5LW5vbmVcXCc6ICEkc2VsZWN0Lm9wZW59XFxcIj48ZGl2IGNsYXNzPVxcXCJ1aS1zZWxlY3QtY2hvaWNlc1xcXCI+PC9kaXY+PC9kaXY+PC9kaXY+XCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwic2VsZWN0Mi9zZWxlY3QudHBsLmh0bWxcIixcIjxkaXYgY2xhc3M9XFxcInVpLXNlbGVjdC1jb250YWluZXIgc2VsZWN0MiBzZWxlY3QyLWNvbnRhaW5lclxcXCIgbmctY2xhc3M9XFxcIntcXCdzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUgc2VsZWN0Mi1kcm9wZG93bi1vcGVuIG9wZW5cXCc6ICRzZWxlY3Qub3BlbiwgXFwnc2VsZWN0Mi1jb250YWluZXItZGlzYWJsZWRcXCc6ICRzZWxlY3QuZGlzYWJsZWQsIFxcJ3NlbGVjdDItY29udGFpbmVyLWFjdGl2ZVxcJzogJHNlbGVjdC5mb2N1cywgXFwnc2VsZWN0Mi1hbGxvd2NsZWFyXFwnOiAkc2VsZWN0LmFsbG93Q2xlYXIgJiYgISRzZWxlY3QuaXNFbXB0eSgpfVxcXCI+PGRpdiBjbGFzcz1cXFwidWktc2VsZWN0LW1hdGNoXFxcIj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ1aS1zZWxlY3QtZHJvcGRvd24gc2VsZWN0Mi1kcm9wIHNlbGVjdDItd2l0aC1zZWFyY2hib3ggc2VsZWN0Mi1kcm9wLWFjdGl2ZVxcXCIgbmctY2xhc3M9XFxcIntcXCdzZWxlY3QyLWRpc3BsYXktbm9uZVxcJzogISRzZWxlY3Qub3Blbn1cXFwiPjxkaXYgY2xhc3M9XFxcInNlbGVjdDItc2VhcmNoXFxcIiBuZy1zaG93PVxcXCIkc2VsZWN0LnNlYXJjaEVuYWJsZWRcXFwiPjxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBhdXRvY29tcGxldGU9XFxcImZhbHNlXFxcIiBhdXRvY29ycmVjdD1cXFwiZmFsc2VcXFwiIGF1dG9jYXBpdGFsaXplPVxcXCJvZmZcXFwiIHNwZWxsY2hlY2s9XFxcImZhbHNlXFxcIiByb2xlPVxcXCJjb21ib2JveFxcXCIgYXJpYS1leHBhbmRlZD1cXFwidHJ1ZVxcXCIgYXJpYS1vd25zPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy17eyAkc2VsZWN0LmdlbmVyYXRlZElkIH19XFxcIiBhcmlhLWxhYmVsPVxcXCJ7eyAkc2VsZWN0LmJhc2VUaXRsZSB9fVxcXCIgYXJpYS1hY3RpdmVkZXNjZW5kYW50PVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy1yb3cte3sgJHNlbGVjdC5nZW5lcmF0ZWRJZCB9fS17eyAkc2VsZWN0LmFjdGl2ZUluZGV4IH19XFxcIiBjbGFzcz1cXFwidWktc2VsZWN0LXNlYXJjaCBzZWxlY3QyLWlucHV0XFxcIiBuZy1tb2RlbD1cXFwiJHNlbGVjdC5zZWFyY2hcXFwiPjwvZGl2PjxkaXYgY2xhc3M9XFxcInVpLXNlbGVjdC1jaG9pY2VzXFxcIj48L2Rpdj48L2Rpdj48L2Rpdj5cIik7XG4kdGVtcGxhdGVDYWNoZS5wdXQoXCJzZWxlY3RpemUvY2hvaWNlcy50cGwuaHRtbFwiLFwiPGRpdiBuZy1zaG93PVxcXCIkc2VsZWN0Lm9wZW5cXFwiIGNsYXNzPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcyB1aS1zZWxlY3QtZHJvcGRvd24gc2VsZWN0aXplLWRyb3Bkb3duIHNpbmdsZVxcXCI+PGRpdiBjbGFzcz1cXFwidWktc2VsZWN0LWNob2ljZXMtY29udGVudCBzZWxlY3RpemUtZHJvcGRvd24tY29udGVudFxcXCI+PGRpdiBjbGFzcz1cXFwidWktc2VsZWN0LWNob2ljZXMtZ3JvdXAgb3B0Z3JvdXBcXFwiIHJvbGU9XFxcImxpc3Rib3hcXFwiPjxkaXYgbmctc2hvdz1cXFwiJHNlbGVjdC5pc0dyb3VwZWRcXFwiIGNsYXNzPVxcXCJ1aS1zZWxlY3QtY2hvaWNlcy1ncm91cC1sYWJlbCBvcHRncm91cC1oZWFkZXJcXFwiIG5nLWJpbmQ9XFxcIiRncm91cC5uYW1lXFxcIj48L2Rpdj48ZGl2IHJvbGU9XFxcIm9wdGlvblxcXCIgY2xhc3M9XFxcInVpLXNlbGVjdC1jaG9pY2VzLXJvd1xcXCIgbmctY2xhc3M9XFxcInthY3RpdmU6ICRzZWxlY3QuaXNBY3RpdmUodGhpcyksIGRpc2FibGVkOiAkc2VsZWN0LmlzRGlzYWJsZWQodGhpcyl9XFxcIj48ZGl2IGNsYXNzPVxcXCJvcHRpb24gdWktc2VsZWN0LWNob2ljZXMtcm93LWlubmVyXFxcIiBkYXRhLXNlbGVjdGFibGU9XFxcIlxcXCI+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+XCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwic2VsZWN0aXplL21hdGNoLnRwbC5odG1sXCIsXCI8ZGl2IG5nLWhpZGU9XFxcIigkc2VsZWN0Lm9wZW4gfHwgJHNlbGVjdC5pc0VtcHR5KCkpXFxcIiBjbGFzcz1cXFwidWktc2VsZWN0LW1hdGNoXFxcIiBuZy10cmFuc2NsdWRlPVxcXCJcXFwiPjwvZGl2PlwiKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dChcInNlbGVjdGl6ZS9zZWxlY3QudHBsLmh0bWxcIixcIjxkaXYgY2xhc3M9XFxcInVpLXNlbGVjdC1jb250YWluZXIgc2VsZWN0aXplLWNvbnRyb2wgc2luZ2xlXFxcIiBuZy1jbGFzcz1cXFwie1xcJ29wZW5cXCc6ICRzZWxlY3Qub3Blbn1cXFwiPjxkaXYgY2xhc3M9XFxcInNlbGVjdGl6ZS1pbnB1dFxcXCIgbmctY2xhc3M9XFxcIntcXCdmb2N1c1xcJzogJHNlbGVjdC5vcGVuLCBcXCdkaXNhYmxlZFxcJzogJHNlbGVjdC5kaXNhYmxlZCwgXFwnc2VsZWN0aXplLWZvY3VzXFwnIDogJHNlbGVjdC5mb2N1c31cXFwiIG5nLWNsaWNrPVxcXCIkc2VsZWN0Lm9wZW4gJiYgISRzZWxlY3Quc2VhcmNoRW5hYmxlZCA/ICRzZWxlY3QudG9nZ2xlKCRldmVudCkgOiAkc2VsZWN0LmFjdGl2YXRlKClcXFwiPjxkaXYgY2xhc3M9XFxcInVpLXNlbGVjdC1tYXRjaFxcXCI+PC9kaXY+PGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGF1dG9jb21wbGV0ZT1cXFwiZmFsc2VcXFwiIHRhYmluZGV4PVxcXCItMVxcXCIgY2xhc3M9XFxcInVpLXNlbGVjdC1zZWFyY2ggdWktc2VsZWN0LXRvZ2dsZVxcXCIgbmctY2xpY2s9XFxcIiRzZWxlY3QudG9nZ2xlKCRldmVudClcXFwiIHBsYWNlaG9sZGVyPVxcXCJ7eyRzZWxlY3QucGxhY2Vob2xkZXJ9fVxcXCIgbmctbW9kZWw9XFxcIiRzZWxlY3Quc2VhcmNoXFxcIiBuZy1oaWRlPVxcXCIhJHNlbGVjdC5zZWFyY2hFbmFibGVkIHx8ICgkc2VsZWN0LnNlbGVjdGVkICYmICEkc2VsZWN0Lm9wZW4pXFxcIiBuZy1kaXNhYmxlZD1cXFwiJHNlbGVjdC5kaXNhYmxlZFxcXCIgYXJpYS1sYWJlbD1cXFwie3sgJHNlbGVjdC5iYXNlVGl0bGUgfX1cXFwiPjwvZGl2PjxkaXYgY2xhc3M9XFxcInVpLXNlbGVjdC1jaG9pY2VzXFxcIj48L2Rpdj48L2Rpdj5cIik7fV0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3VpLXNlbGVjdC9kaXN0L3NlbGVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL3NlbGVjdC5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL3NlbGVjdC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL3NlbGVjdC5jc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3VpLXNlbGVjdC9kaXN0L3NlbGVjdC5jc3NcbiAqKiBtb2R1bGUgaWQgPSAxNDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiFcXG4gKiB1aS1zZWxlY3RcXG4gKiBodHRwOi8vZ2l0aHViLmNvbS9hbmd1bGFyLXVpL3VpLXNlbGVjdFxcbiAqIFZlcnNpb246IDAuMTQuNiAtIDIwMTYtMDItMThUMjE6MDE6MzYuOTcyWlxcbiAqIExpY2Vuc2U6IE1JVFxcbiAqL1xcblxcblxcbi8qIFN0eWxlIHdoZW4gaGlnaGxpZ2h0aW5nIGEgc2VhcmNoLiAqL1xcbi51aS1zZWxlY3QtaGlnaGxpZ2h0IHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4udWktc2VsZWN0LW9mZnNjcmVlbiB7XFxuICBjbGlwOiByZWN0KDAgMCAwIDApICFpbXBvcnRhbnQ7XFxuICB3aWR0aDogMXB4ICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDFweCAhaW1wb3J0YW50O1xcbiAgYm9yZGVyOiAwICFpbXBvcnRhbnQ7XFxuICBtYXJnaW46IDAgIWltcG9ydGFudDtcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcXG4gIG92ZXJmbG93OiBoaWRkZW4gIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50O1xcbiAgb3V0bGluZTogMCAhaW1wb3J0YW50O1xcbiAgbGVmdDogMHB4ICFpbXBvcnRhbnQ7XFxuICB0b3A6IDBweCAhaW1wb3J0YW50O1xcbn1cXG5cXG5cXG4udWktc2VsZWN0LWNob2ljZXMtcm93OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxufVxcblxcbi8qIFNlbGVjdDIgdGhlbWUgKi9cXG5cXG4vKiBNYXJrIGludmFsaWQgU2VsZWN0MiAqL1xcbi5uZy1kaXJ0eS5uZy1pbnZhbGlkID4gYS5zZWxlY3QyLWNob2ljZSB7XFxuICAgIGJvcmRlci1jb2xvcjogI0Q0NDk1MDtcXG59XFxuXFxuLnNlbGVjdDItcmVzdWx0LXNpbmdsZSB7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxufVxcblxcbi5zZWxlY3QyLWxvY2tlZCA+IC5zZWxlY3QyLXNlYXJjaC1jaG9pY2UtY2xvc2V7XFxuICBkaXNwbGF5Om5vbmU7XFxufVxcblxcbi5zZWxlY3QtbG9ja2VkID4gLnVpLXNlbGVjdC1tYXRjaC1jbG9zZXtcXG4gICAgZGlzcGxheTpub25lO1xcbn1cXG5cXG5ib2R5ID4gLnNlbGVjdDItY29udGFpbmVyLm9wZW4ge1xcbiAgei1pbmRleDogOTk5OTsgLyogVGhlIHotaW5kZXggU2VsZWN0MiBhcHBsaWVzIHRvIHRoZSBzZWxlY3QyLWRyb3AgKi9cXG59XFxuXFxuLyogSGFuZGxlIHVwIGRpcmVjdGlvbiBTZWxlY3QyICovXFxuLnVpLXNlbGVjdC1jb250YWluZXJbdGhlbWU9XFxcInNlbGVjdDJcXFwiXS5kaXJlY3Rpb24tdXAgLnVpLXNlbGVjdC1tYXRjaCB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDsgLyogRklYTUUgaGFyZGNvZGVkIHZhbHVlIDotLyAqL1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG59XFxuLnVpLXNlbGVjdC1jb250YWluZXJbdGhlbWU9XFxcInNlbGVjdDJcXFwiXS5kaXJlY3Rpb24tdXAgLnVpLXNlbGVjdC1kcm9wZG93biB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDsgLyogRklYTUUgaGFyZGNvZGVkIHZhbHVlIDotLyAqL1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG5cXG4gICAgYm9yZGVyLXRvcC13aWR0aDogMXB4OyAgLyogRklYTUUgaGFyZGNvZGVkIHZhbHVlIDotLyAqL1xcbiAgICBib3JkZXItdG9wLXN0eWxlOiBzb2xpZDtcXG5cXG4gICAgYm94LXNoYWRvdzogMCAtNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcblxcbiAgICBtYXJnaW4tdG9wOiAtNHB4OyAvKiBGSVhNRSBoYXJkY29kZWQgdmFsdWUgOi0vICovXFxufVxcbi51aS1zZWxlY3QtY29udGFpbmVyW3RoZW1lPVxcXCJzZWxlY3QyXFxcIl0uZGlyZWN0aW9uLXVwIC51aS1zZWxlY3QtZHJvcGRvd24gLnNlbGVjdDItc2VhcmNoIHtcXG4gICAgbWFyZ2luLXRvcDogNHB4OyAvKiBGSVhNRSBoYXJkY29kZWQgdmFsdWUgOi0vICovXFxufVxcbi51aS1zZWxlY3QtY29udGFpbmVyW3RoZW1lPVxcXCJzZWxlY3QyXFxcIl0uZGlyZWN0aW9uLXVwLnNlbGVjdDItZHJvcGRvd24tb3BlbiAudWktc2VsZWN0LW1hdGNoIHtcXG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzU4OTdmYjtcXG59XFxuXFxuLyogU2VsZWN0aXplIHRoZW1lICovXFxuXFxuLyogSGVscGVyIGNsYXNzIHRvIHNob3cgc3R5bGVzIHdoZW4gZm9jdXMgKi9cXG4uc2VsZWN0aXplLWlucHV0LnNlbGVjdGl6ZS1mb2N1c3tcXG4gIGJvcmRlci1jb2xvcjogIzAwN0ZCQiAhaW1wb3J0YW50O1xcbn1cXG5cXG4vKiBGaXggaW5wdXQgd2lkdGggZm9yIFNlbGVjdGl6ZSB0aGVtZSAqL1xcbi5zZWxlY3RpemUtY29udHJvbCA+IC5zZWxlY3RpemUtaW5wdXQgPiBpbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLyogRml4IGRyb3Bkb3duIHdpZHRoIGZvciBTZWxlY3RpemUgdGhlbWUgKi9cXG4uc2VsZWN0aXplLWNvbnRyb2wgPiAuc2VsZWN0aXplLWRyb3Bkb3duIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4vKiBNYXJrIGludmFsaWQgU2VsZWN0aXplICovXFxuLm5nLWRpcnR5Lm5nLWludmFsaWQgPiBkaXYuc2VsZWN0aXplLWlucHV0IHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjRDQ0OTUwO1xcbn1cXG5cXG4vKiBIYW5kbGUgdXAgZGlyZWN0aW9uIFNlbGVjdGl6ZSAqL1xcbi51aS1zZWxlY3QtY29udGFpbmVyW3RoZW1lPVxcXCJzZWxlY3RpemVcXFwiXS5kaXJlY3Rpb24tdXAgLnVpLXNlbGVjdC1kcm9wZG93biB7XFxuICAgIGJveC1zaGFkb3c6IDAgLTRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG5cXG4gICAgbWFyZ2luLXRvcDogLTJweDsgLyogRklYTUUgaGFyZGNvZGVkIHZhbHVlIDotLyAqL1xcbn1cXG5cXG4vKiBCb290c3RyYXAgdGhlbWUgKi9cXG5cXG4vKiBIZWxwZXIgY2xhc3MgdG8gc2hvdyBzdHlsZXMgd2hlbiBmb2N1cyAqL1xcbi5idG4tZGVmYXVsdC1mb2N1cyB7XFxuICBjb2xvcjogIzMzMztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNFQkVCRUI7XFxuICBib3JkZXItY29sb3I6ICNBREFEQUQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBvdXRsaW5lOiA1cHggYXV0byAtd2Via2l0LWZvY3VzLXJpbmctY29sb3I7XFxuICBvdXRsaW5lLW9mZnNldDogLTJweDtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KSwgMCAwIDhweCByZ2JhKDEwMiwgMTc1LCAyMzMsIDAuNik7XFxufVxcblxcbi51aS1zZWxlY3QtYm9vdHN0cmFwIC51aS1zZWxlY3QtdG9nZ2xlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLnVpLXNlbGVjdC1ib290c3RyYXAgLnVpLXNlbGVjdC10b2dnbGUgPiAuY2FyZXQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgdG9wOiA1MCU7XFxuICByaWdodDogMTBweDtcXG4gIG1hcmdpbi10b3A6IC0ycHg7XFxufVxcblxcbi8qIEZpeCBCb290c3RyYXAgZHJvcGRvd24gcG9zaXRpb24gd2hlbiBpbnNpZGUgYSBpbnB1dC1ncm91cCAqL1xcbi5pbnB1dC1ncm91cCA+IC51aS1zZWxlY3QtYm9vdHN0cmFwLmRyb3Bkb3duIHtcXG4gIC8qIEluc3RlYWQgb2YgcmVsYXRpdmUgKi9cXG4gIHBvc2l0aW9uOiBzdGF0aWM7XFxufVxcblxcbi5pbnB1dC1ncm91cCA+IC51aS1zZWxlY3QtYm9vdHN0cmFwID4gaW5wdXQudWktc2VsZWN0LXNlYXJjaC5mb3JtLWNvbnRyb2wge1xcbiAgYm9yZGVyLXJhZGl1czogNHB4OyAvKiBGSVhNRSBoYXJkY29kZWQgdmFsdWUgOi0vICovXFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbn1cXG4uaW5wdXQtZ3JvdXAgPiAudWktc2VsZWN0LWJvb3RzdHJhcCA+IGlucHV0LnVpLXNlbGVjdC1zZWFyY2guZm9ybS1jb250cm9sLmRpcmVjdGlvbi11cCB7XFxuICBib3JkZXItcmFkaXVzOiA0cHggIWltcG9ydGFudDsgLyogRklYTUUgaGFyZGNvZGVkIHZhbHVlIDotLyAqL1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAgIWltcG9ydGFudDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi51aS1zZWxlY3QtYm9vdHN0cmFwID4gLnVpLXNlbGVjdC1tYXRjaCA+IC5idG57XFxuICAvKiBJbnN0ZWFkIG9mIGNlbnRlciBiZWNhdXNlIG9mIC5idG4gKi9cXG4gIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDtcXG59XFxuXFxuLnVpLXNlbGVjdC1ib290c3RyYXAgPiAudWktc2VsZWN0LW1hdGNoID4gLmNhcmV0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNDUlO1xcbiAgcmlnaHQ6IDE1cHg7XFxufVxcblxcbi8qIFNlZSBTY3JvbGxhYmxlIE1lbnUgd2l0aCBCb290c3RyYXAgMyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5MjI3NDk2ICovXFxuLnVpLXNlbGVjdC1ib290c3RyYXAgPiAudWktc2VsZWN0LWNob2ljZXMge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBtYXgtaGVpZ2h0OiAyMDBweDtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIG1hcmdpbi10b3A6IC0xcHg7XFxufVxcblxcbmJvZHkgPiAudWktc2VsZWN0LWJvb3RzdHJhcC5vcGVuIHtcXG4gIHotaW5kZXg6IDEwMDA7IC8qIFN0YW5kYXJkIEJvb3RzdHJhcCBkcm9wZG93biB6LWluZGV4ICovXFxufVxcblxcbi51aS1zZWxlY3QtbXVsdGlwbGUudWktc2VsZWN0LWJvb3RzdHJhcCB7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBwYWRkaW5nOiAzcHggM3B4IDAgM3B4O1xcbn1cXG5cXG4udWktc2VsZWN0LW11bHRpcGxlLnVpLXNlbGVjdC1ib290c3RyYXAgaW5wdXQudWktc2VsZWN0LXNlYXJjaCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50OyAvKiBUbyBwcmV2ZW50IGRvdWJsZSBiYWNrZ3JvdW5kIHdoZW4gZGlzYWJsZWQgKi9cXG4gIGJvcmRlcjogbm9uZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBoZWlnaHQ6IDEuNjY2NjY2ZW07XFxuICBtYXJnaW4tYm90dG9tOiAzcHg7XFxufVxcblxcbi51aS1zZWxlY3QtbXVsdGlwbGUudWktc2VsZWN0LWJvb3RzdHJhcCAudWktc2VsZWN0LW1hdGNoIC5jbG9zZSB7XFxuICBmb250LXNpemU6IDEuNmVtO1xcbiAgbGluZS1oZWlnaHQ6IDAuNzU7XFxufVxcblxcbi51aS1zZWxlY3QtbXVsdGlwbGUudWktc2VsZWN0LWJvb3RzdHJhcCAudWktc2VsZWN0LW1hdGNoLWl0ZW0ge1xcbiAgb3V0bGluZTogMDtcXG4gIG1hcmdpbjogMCAzcHggM3B4IDA7XFxufVxcblxcbi51aS1zZWxlY3QtbXVsdGlwbGUgLnVpLXNlbGVjdC1tYXRjaC1pdGVtIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLnVpLXNlbGVjdC1tdWx0aXBsZSAudWktc2VsZWN0LW1hdGNoLWl0ZW0uZHJvcHBpbmctYmVmb3JlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgbWFyZ2luLXJpZ2h0OiAycHg7XFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICM0MjhiY2E7XFxufVxcblxcbi51aS1zZWxlY3QtbXVsdGlwbGUgLnVpLXNlbGVjdC1tYXRjaC1pdGVtLmRyb3BwaW5nLWFmdGVyOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbi1sZWZ0OiAycHg7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjNDI4YmNhO1xcbn1cXG5cXG4udWktc2VsZWN0LWJvb3RzdHJhcCAudWktc2VsZWN0LWNob2ljZXMtcm93PmEge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgcGFkZGluZzogM3B4IDIwcHg7XFxuICAgIGNsZWFyOiBib3RoO1xcbiAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MztcXG4gICAgY29sb3I6ICMzMzM7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcblxcbi51aS1zZWxlY3QtYm9vdHN0cmFwIC51aS1zZWxlY3QtY2hvaWNlcy1yb3c+YTpob3ZlciwgLnVpLXNlbGVjdC1ib290c3RyYXAgLnVpLXNlbGVjdC1jaG9pY2VzLXJvdz5hOmZvY3VzIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICBjb2xvcjogIzI2MjYyNjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcXG59XFxuXFxuLnVpLXNlbGVjdC1ib290c3RyYXAgLnVpLXNlbGVjdC1jaG9pY2VzLXJvdy5hY3RpdmU+YSB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIG91dGxpbmU6IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM0MjhiY2E7XFxufVxcblxcbi51aS1zZWxlY3QtYm9vdHN0cmFwIC51aS1zZWxlY3QtY2hvaWNlcy1yb3cuZGlzYWJsZWQ+YSxcXG4udWktc2VsZWN0LWJvb3RzdHJhcCAudWktc2VsZWN0LWNob2ljZXMtcm93LmFjdGl2ZS5kaXNhYmxlZD5hIHtcXG4gICAgY29sb3I6ICM3Nzc7XFxuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcblxcbi8qIGZpeCBoaWRlL3Nob3cgYW5ndWxhciBhbmltYXRpb24gKi9cXG4udWktc2VsZWN0LW1hdGNoLm5nLWhpZGUtYWRkLFxcbi51aS1zZWxlY3Qtc2VhcmNoLm5nLWhpZGUtYWRkIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4vKiBNYXJrIGludmFsaWQgQm9vdHN0cmFwICovXFxuLnVpLXNlbGVjdC1ib290c3RyYXAubmctZGlydHkubmctaW52YWxpZCA+IGJ1dHRvbi5idG4udWktc2VsZWN0LW1hdGNoIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjRDQ0OTUwO1xcbn1cXG5cXG4vKiBIYW5kbGUgdXAgZGlyZWN0aW9uIEJvb3RzdHJhcCAqL1xcbi51aS1zZWxlY3QtY29udGFpbmVyW3RoZW1lPVxcXCJib290c3RyYXBcXFwiXS5kaXJlY3Rpb24tdXAgLnVpLXNlbGVjdC1kcm9wZG93biB7XFxuICAgIGJveC1zaGFkb3c6IDAgLTRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL34vdWktc2VsZWN0L2Rpc3Qvc2VsZWN0LmNzc1xuICoqIG1vZHVsZSBpZCA9IDE0NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInZhbGlkYXRpb24taW5wdXQtZ3JvdXBcXFwiPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImZpZWxkIHZhbGlkYXRpb24taW5wdXRcXFwiIG5nLWNsYXNzPVxcXCJ7ICdoYXMtZXJyb3InOiBzZWxlY3QubmdNb2RlbC4kaW52YWxpZCwgJ3JlcXVpcmVkLWVycm9yJzogc2VsZWN0Lm5nTW9kZWwuJGVycm9yLnJlcXVpcmVkIH1cXFwiPlxcclxcblxcdFxcdDxsYWJlbCBuZy1zaG93PVxcXCJzZWxlY3Quc2VsZWN0aW9uXFxcIiBjbGFzcz1cXFwic2hvdy1oaWRlIGFuZ3VsYXItYW5pbWF0ZVxcXCI+XFxyXFxuXFx0XFx0XFx0e3tzZWxlY3QubGFiZWx9fVxcclxcblxcdFxcdDwvbGFiZWw+XFxyXFxuXFx0XFx0PHVpLXNlbGVjdCBuZy1tb2RlbD1cXFwic2VsZWN0LnNlbGVjdGlvblxcXCIgc2VhcmNoLWVuYWJsZWQ9XFxcImZhbHNlXFxcIiB0aGVtZT1cXFwiYm9vdHN0cmFwXFxcIiBuZy1kaXNhYmxlZD1cXFwic2VsZWN0Lm5nRGlzYWJsZWRcXFwiPlxcclxcblxcdFxcdFxcdDx1aS1zZWxlY3QtbWF0Y2ggcGxhY2Vob2xkZXI9XFxcInt7c2VsZWN0LmxhYmVsfX1cXFwiPnt7c2VsZWN0LmdldERpc3BsYXlOYW1lKCRzZWxlY3Quc2VsZWN0ZWQpfX08L3VpLXNlbGVjdC1tYXRjaD5cXHJcXG5cXHRcXHRcXHQ8dWktc2VsZWN0LWNob2ljZXMgcmVwZWF0PVxcXCJvcHRpb24gaW4gc2VsZWN0Lm9wdGlvbnNcXFwiPlxcclxcblxcdFxcdFxcdFxcdHt7c2VsZWN0LmdldERpc3BsYXlOYW1lKG9wdGlvbil9fVxcclxcblxcdFxcdFxcdDwvdWktc2VsZWN0LWNob2ljZXM+XFxyXFxuXFx0XFx0PC91aS1zZWxlY3Q+XFxyXFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZXJyb3Itc3RyaW5nXFxcIiBuZy1zaG93PVxcXCJzZWxlY3Quc2VsZWN0VmFsaWRhdG9yLmVycm9yXFxcIj57e3NlbGVjdC5zZWxlY3RWYWxpZGF0b3IuZXJyb3J9fTwvc3Bhbj5cXHJcXG5cXHRcXHQ8cmwtYnVzeSBsb2FkaW5nPVxcXCJzZWxlY3QubG9hZGluZ1xcXCI+PC9ybC1idXN5PlxcclxcblxcdDwvZGl2PlxcclxcbjwvZGl2PlwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDE0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIFNpZ25hdHVyZVBhZCA9IHJlcXVpcmUoJ3NpZ25hdHVyZV9wYWQnKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMuc2lnbmF0dXJlUGFkJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsU2lnbmF0dXJlUGFkJztcclxuZnVuY3Rpb24gc2lnbmF0dXJlUGFkKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICB0ZW1wbGF0ZTogXCJcXG5cXHRcXHRcXHQ8Y2FudmFzIGNsYXNzPVxcXCJzaWduYXR1cmUtcGFkXFxcIiBuZy1pZj1cXFwiIW5nRGlzYWJsZWRcXFwiPjwvY2FudmFzPlxcblxcdFxcdFxcdDxpbWcgbmctc3JjPVxcXCJ7e25nTW9kZWwuJHZpZXdWYWx1ZX19XFxcIiBuZy1zdHlsZT1cXFwic3R5bGVcXFwiIG5nLWlmPVxcXCJuZ0Rpc2FibGVkXFxcIiAvPlxcblxcdFxcdFwiLFxyXG4gICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgIHBhZDogJz0nLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICc9JyxcclxuICAgICAgICAgICAgd2lkdGg6ICc9JyxcclxuICAgICAgICAgICAgbmdEaXNhYmxlZDogJz0nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25nRGlzYWJsZWQnLCBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlLm5nTW9kZWwgPSBuZ01vZGVsO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3R5bGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogc2NvcGUuaGVpZ2h0ICE9IG51bGwgPyBzY29wZS5oZWlnaHQgOiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzY29wZS53aWR0aCAhPSBudWxsID8gc2NvcGUud2lkdGggOiAyMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYW52YXMgPSBlbGVtZW50LmZpbmQoJy5zaWduYXR1cmUtcGFkJykuZ2V0KDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjU1LCAyNTUsIDI1NSknLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFkID0gbmV3IFNpZ25hdHVyZVBhZChjYW52YXMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzY29wZS5oZWlnaHQgIT0gbnVsbCA/IHNjb3BlLmhlaWdodCA6IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBzY29wZS53aWR0aCAhPSBudWxsID8gc2NvcGUud2lkdGggOiAyMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5nTW9kZWwuJHZpZXdWYWx1ZTsgfSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5wYWQuZnJvbURhdGFVUkwodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNjb3BlLnBhZC50b0RhdGFVUkwoKTsgfSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuc2lnbmF0dXJlUGFkID0gc2lnbmF0dXJlUGFkO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIHNpZ25hdHVyZVBhZCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hdHVyZVBhZC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvc2lnbmF0dXJlUGFkL3NpZ25hdHVyZVBhZC5qc1xuICoqIG1vZHVsZSBpZCA9IDE0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fb2JzZXJ2YWJsZSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYnNlcnZhYmxlO1xyXG52YXIgX19wYXJlbnRDaGlsZCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5wYXJlbnRDaGlsZEJlaGF2aW9yO1xyXG52YXIgY2FyZCA9IHJlcXVpcmUoJy4vc2ltcGxlQ2FyZCcpO1xyXG5leHBvcnRzLnNpbXBsZUNhcmQgPSBjYXJkO1xyXG52YXIgbGlzdCA9IHJlcXVpcmUoJy4vc2ltcGxlQ2FyZExpc3QnKTtcclxuZXhwb3J0cy5zaW1wbGVDYXJkTGlzdCA9IGxpc3Q7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLnNpbXBsZUNhcmRMaXN0JztcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbX19vYnNlcnZhYmxlLm1vZHVsZU5hbWUsIF9fcGFyZW50Q2hpbGQubW9kdWxlTmFtZV0pXHJcbiAgICAuZGlyZWN0aXZlKGxpc3QuZGlyZWN0aXZlTmFtZSwgbGlzdC5zaW1wbGVDYXJkTGlzdClcclxuICAgIC5jb250cm9sbGVyKGxpc3QuY29udHJvbGxlck5hbWUsIGxpc3QuU2ltcGxlQ2FyZExpc3RDb250cm9sbGVyKVxyXG4gICAgLmRpcmVjdGl2ZShjYXJkLmRpcmVjdGl2ZU5hbWUsIGNhcmQuc2ltcGxlQ2FyZClcclxuICAgIC5jb250cm9sbGVyKGNhcmQuY29udHJvbGxlck5hbWUsIGNhcmQuU2ltcGxlQ2FyZENvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW1wbGVDYXJkTGlzdC5tb2R1bGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3NpbXBsZUNhcmRMaXN0L3NpbXBsZUNhcmRMaXN0Lm1vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4vLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2pxdWVyeS9qcXVlcnkuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19wYXJlbnRDaGlsZCA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5wYXJlbnRDaGlsZEJlaGF2aW9yO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxTaW1wbGVDYXJkJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdTaW1wbGVDYXJkQ29udHJvbGxlcic7XHJcbnZhciBTaW1wbGVDYXJkQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTaW1wbGVDYXJkQ29udHJvbGxlcigkc2NvcGUsICRlbGVtZW50LCBwYXJlbnRDaGlsZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDaGlsZCA9IHBhcmVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuc2hvd0NvbnRlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmF1dG9zYXZlTGluayA9IHt9O1xyXG4gICAgICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5zaG93Q29udGVudCA9PT0gZmFsc2UgfHwgX3RoaXMuYWx3YXlzT3Blbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmF1dG9zYXZlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodGhpcy5jYW5PcGVuID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jYW5PcGVuID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saXN0Q29udHJvbGxlciA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ3JsU2ltcGxlQ2FyZExpc3QnKTtcclxuICAgICAgICBpZiAodGhpcy5saXN0Q29udHJvbGxlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdENvbnRyb2xsZXIgPSB0aGlzLm5vTGlzdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYmVoYXZpb3IgPSB7XHJcbiAgICAgICAgICAgIGF1dG9zYXZlOiB0aGlzLmF1dG9zYXZlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIGNsb3NlOiB0aGlzLmNsb3NlLFxyXG4gICAgICAgICAgICBzZXRBbHdheXNPcGVuOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmFsd2F5c09wZW4gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubGlzdENvbnRyb2xsZXIucmVnaXN0ZXJDYXJkKGJlaGF2aW9yKTtcclxuICAgICAgICBwYXJlbnRDaGlsZC5yZWdpc3RlckNoaWxkQmVoYXZpb3IodGhpcy5jaGlsZExpbmssIGJlaGF2aW9yKTtcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmFsd2F5c09wZW47IH0sIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNob3dDb250ZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFNpbXBsZUNhcmRDb250cm9sbGVyLnByb3RvdHlwZS50b2dnbGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTaW1wbGVDYXJkQ29udHJvbGxlci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW5PcGVuICYmIHRoaXMubGlzdENvbnRyb2xsZXIub3BlbkNhcmQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dDb250ZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5vbk9wZW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU2ltcGxlQ2FyZENvbnRyb2xsZXIucHJvdG90eXBlLmF1dG9zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Q2hpbGQudHJpZ2dlckNoaWxkQmVoYXZpb3IodGhpcy5hdXRvc2F2ZUxpbmssIGZ1bmN0aW9uIChiZWhhdmlvcikge1xyXG4gICAgICAgICAgICB2YXIgY2FuQ2xvc2UgPSBiZWhhdmlvci5hdXRvc2F2ZSgpO1xyXG4gICAgICAgICAgICBpZiAoY2FuQ2xvc2UpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNob3dDb250ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNhbkNsb3NlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNpbXBsZUNhcmRDb250cm9sbGVyLnByb3RvdHlwZS5ub0xpc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb3BlbkNhcmQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWdpc3RlckNhcmQ6IGZ1bmN0aW9uIChiZWhhdmlvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBTaW1wbGVDYXJkQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGVsZW1lbnQnLCBfX3BhcmVudENoaWxkLnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBTaW1wbGVDYXJkQ29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5TaW1wbGVDYXJkQ29udHJvbGxlciA9IFNpbXBsZUNhcmRDb250cm9sbGVyO1xyXG5mdW5jdGlvbiBzaW1wbGVDYXJkKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICAgICAgcmVxdWlyZTogJz9eXnJsU2ltcGxlQ2FyZExpc3QnLFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3NpbXBsZUNhcmQuaHRtbCcpLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnY2FyZCcsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgb25PcGVuOiAnJicsXHJcbiAgICAgICAgICAgIGNhbk9wZW46ICc9PycsXHJcbiAgICAgICAgICAgIGFsd2F5c09wZW46ICc9PycsXHJcbiAgICAgICAgICAgIGNoaWxkTGluazogJz0/JyxcclxuICAgICAgICAgICAgdmFsaWRhdGU6ICcmJyxcclxuICAgICAgICAgICAgc2F2ZTogJyYnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlciwgdHJhbnNjbHVkZSkge1xyXG4gICAgICAgICAgICB0cmFuc2NsdWRlKGZ1bmN0aW9uIChjbG9uZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlciA9IGNsb25lLmZpbHRlcigncmwtY2FyZC1oZWFkZXInKTtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gY2xvbmUuZmlsdGVyKCdybC1jYXJkLWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgICAgIHZhciBmb290ZXIgPSBjbG9uZS5maWx0ZXIoJ3JsLWNhcmQtZm9vdGVyJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyQXJlYSA9IGVsZW1lbnQuZmluZCgnLmhlYWRlci10ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyQXJlYS5hcHBlbmQoaGVhZGVyKTtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50QXJlYSA9IGVsZW1lbnQuZmluZCgnLmNvbnRlbnQtdGVtcGxhdGUnKTtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRBcmVhLmFwcGVuZChjb250ZW50KTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLmhhc0Zvb3RlciA9IChmb290ZXIubGVuZ3RoID4gMCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuaGFzRm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvb3RlckFyZWEgPSBlbGVtZW50LmZpbmQoJy5mb290ZXItdGVtcGxhdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBmb290ZXJBcmVhLmFwcGVuZChmb290ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnNpbXBsZUNhcmQgPSBzaW1wbGVDYXJkO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW1wbGVDYXJkLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9zaW1wbGVDYXJkTGlzdC9zaW1wbGVDYXJkLmpzXG4gKiogbW9kdWxlIGlkID0gMTQ5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiY2FyZCBjb2wteHMtMTJcXFwiPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImhlYWRlciByb3dcXFwiIG5nLWNsYXNzPVxcXCJ7ICdhY3RpdmUnOiBjYXJkLmNhbk9wZW4gJiYgIWNhcmQuYWx3YXlzT3BlbiwgJ2Vycm9yJzogY2FyZEZvcm0uJGludmFsaWQgfVxcXCIgbmctY2xpY2s9XFxcImNhcmQudG9nZ2xlQ29udGVudCgpXFxcIj5cXHJcXG5cXHRcXHQ8ZGl2IGNsYXNzPVxcXCJoZWFkZXItdGVtcGxhdGVcXFwiPjwvZGl2PlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG5cXHQ8L2Rpdj5cXHJcXG5cXHJcXG5cXHQ8bmctZm9ybSBuYW1lPVxcXCJjYXJkRm9ybVxcXCIgcmwtYXV0b3NhdmU9XFxcImNhcmQuYXV0b3NhdmVMaW5rXFxcIiB2YWxpZGF0ZT1cXFwiY2FyZC52YWxpZGF0ZSgpXFxcIiBzYXZlPVxcXCJjYXJkLnNhdmUoKVxcXCI+XFxyXFxuXFx0XFx0PGRpdiBuZy1zaG93PVxcXCJjYXJkLnNob3dDb250ZW50IHx8IGNhcmQuYWx3YXlzT3BlblxcXCI+XFxyXFxuXFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiYm9keSByb3dcXFwiPlxcclxcblxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImNvbnRlbnQtdGVtcGxhdGVcXFwiPjwvZGl2PlxcclxcblxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG5cXHRcXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHQ8L2Rpdj5cXHJcXG5cXHQ8L25nLWZvcm0+XFxyXFxuXFx0PGRpdiBuZy1zaG93PVxcXCJoYXNGb290ZXIgJiYgY2FyZC5zaG93Q29udGVudFxcXCI+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcz1cXFwiZm9vdGVyIHJvd1xcXCI+XFxyXFxuXFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiZm9vdGVyLXRlbXBsYXRlXFxcIj48L2Rpdj5cXHJcXG5cXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+XFxyXFxuXFx0XFx0PC9kaXY+XFxyXFxuXFx0PC9kaXY+XFxyXFxuPC9kaXY+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvc2ltcGxlQ2FyZExpc3Qvc2ltcGxlQ2FyZC5odG1sXG4gKiogbW9kdWxlIGlkID0gMTUwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX29ic2VydmFibGUgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JzZXJ2YWJsZTtcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsU2ltcGxlQ2FyZExpc3QnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ1NpbXBsZUNhcmRMaXN0Q29udHJvbGxlcic7XHJcbnZhciBTaW1wbGVDYXJkTGlzdENvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2ltcGxlQ2FyZExpc3RDb250cm9sbGVyKCRzY29wZSwgJGF0dHJzLCAkcGFyc2UsIG9ic2VydmFibGVGYWN0b3J5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJHBhcnNlKCRhdHRycy5hbHdheXNPcGVuKSgkc2NvcGUpOyB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgX3RoaXMuYWx3YXlzT3BlbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICBfdGhpcy5vYnNlcnZhYmxlLmZpcmUoJ2Fsd2F5c09wZW4nLCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBTaW1wbGVDYXJkTGlzdENvbnRyb2xsZXIucHJvdG90eXBlLnJlZ2lzdGVyQ2FyZCA9IGZ1bmN0aW9uIChiZWhhdmlvcikge1xyXG4gICAgICAgIGJlaGF2aW9yLnNldEFsd2F5c09wZW4odGhpcy5hbHdheXNPcGVuKTtcclxuICAgICAgICB2YXIgdW5yZWdpc3RlckZ1bmN0aW9ucyA9IFtdO1xyXG4gICAgICAgIHVucmVnaXN0ZXJGdW5jdGlvbnMucHVzaCh0aGlzLm9ic2VydmFibGUucmVnaXN0ZXIoYmVoYXZpb3IuY2xvc2UsICdjbG9zZScpKTtcclxuICAgICAgICB1bnJlZ2lzdGVyRnVuY3Rpb25zLnB1c2godGhpcy5vYnNlcnZhYmxlLnJlZ2lzdGVyKGJlaGF2aW9yLnNldEFsd2F5c09wZW4sICdhbHdheXNPcGVuJykpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF8uZWFjaCh1bnJlZ2lzdGVyRnVuY3Rpb25zLCBmdW5jdGlvbiAodW5yZWdpc3Rlcikge1xyXG4gICAgICAgICAgICAgICAgdW5yZWdpc3RlcigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFNpbXBsZUNhcmRMaXN0Q29udHJvbGxlci5wcm90b3R5cGUub3BlbkNhcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF8uZXZlcnkodGhpcy5vYnNlcnZhYmxlLmZpcmUoJ2Nsb3NlJykpO1xyXG4gICAgfTtcclxuICAgIFNpbXBsZUNhcmRMaXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGF0dHJzJywgJyRwYXJzZScsIF9fb2JzZXJ2YWJsZS5mYWN0b3J5TmFtZV07XHJcbiAgICByZXR1cm4gU2ltcGxlQ2FyZExpc3RDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLlNpbXBsZUNhcmRMaXN0Q29udHJvbGxlciA9IFNpbXBsZUNhcmRMaXN0Q29udHJvbGxlcjtcclxuZnVuY3Rpb24gc2ltcGxlQ2FyZExpc3QoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnQUUnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuc2ltcGxlQ2FyZExpc3QgPSBzaW1wbGVDYXJkTGlzdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2ltcGxlQ2FyZExpc3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3NpbXBsZUNhcmRMaXN0L3NpbXBsZUNhcmRMaXN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTUxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2Jvb3RzdHJhcC10b3VjaHNwaW4vYm9vdHN0cmFwLXRvdWNoc3Bpbi5kLnRzJyAvPlxyXG4vLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2pxdWVyeS9qcXVlcnkuZC50cycgLz5cclxuLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbnJlcXVpcmUoJy4uLy4uLy4uL2xpYnJhcmllcy9ib290c3RyYXAtdG91Y2hzcGluL2luZGV4Jyk7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19zdHJpbmcgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuc3RyaW5nO1xyXG52YXIgX19udW1iZXIgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMubnVtYmVyO1xyXG52YXIgY29tcG9uZW50VmFsaWRhdG9yX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2NvbXBvbmVudFZhbGlkYXRvci9jb21wb25lbnRWYWxpZGF0b3Iuc2VydmljZScpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5zcGlubmVyJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsU3Bpbm5lcic7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnU3Bpbm5lckNvbnRyb2xsZXInO1xyXG5leHBvcnRzLmRlZmF1bHRNYXhWYWx1ZSA9IDEwMDAwMDAwMDAwMDAwMDAwMDAwMDtcclxudmFyIFNwaW5uZXJDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNwaW5uZXJDb250cm9sbGVyKCRzY29wZSwgY29tcG9uZW50VmFsaWRhdG9yRmFjdG9yeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHVucmVnaXN0ZXIgPSAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm5nTW9kZWw7IH0sIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoX3RoaXMudmFsaWRhdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc3Bpbm5lclZhbGlkYXRvciA9IGNvbXBvbmVudFZhbGlkYXRvckZhY3RvcnkuZ2V0SW5zdGFuY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIG5nTW9kZWw6IF90aGlzLm5nTW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlOiAkc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczogW190aGlzLnZhbGlkYXRvcl0sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1bnJlZ2lzdGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBTcGlubmVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCBjb21wb25lbnRWYWxpZGF0b3Jfc2VydmljZV8xLmZhY3RvcnlOYW1lXTtcclxuICAgIHJldHVybiBTcGlubmVyQ29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5TcGlubmVyQ29udHJvbGxlciA9IFNwaW5uZXJDb250cm9sbGVyO1xyXG5zcGlubmVyLiRpbmplY3QgPSBbJyR0aW1lb3V0JywgX19zdHJpbmcuc2VydmljZU5hbWUsIF9fbnVtYmVyLnNlcnZpY2VOYW1lXTtcclxuZnVuY3Rpb24gc3Bpbm5lcigkdGltZW91dCwgc3RyaW5nVXRpbGl0eSwgbnVtYmVyVXRpbGl0eSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3NwaW5uZXIuaHRtbCcpLFxyXG4gICAgICAgIHJlcXVpcmU6ICc/Xm5nTW9kZWwnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnc3Bpbm5lcicsXHJcbiAgICAgICAgc2NvcGU6IHt9LFxyXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgbWluOiAnPScsXHJcbiAgICAgICAgICAgIG1heDogJz0nLFxyXG4gICAgICAgICAgICBzdGVwOiAnPScsXHJcbiAgICAgICAgICAgIGRlY2ltYWxzOiAnPScsXHJcbiAgICAgICAgICAgIHByZWZpeDogJ0AnLFxyXG4gICAgICAgICAgICBwb3N0Zml4OiAnQCcsXHJcbiAgICAgICAgICAgIHJvdW5kVG9TdGVwOiAnPScsXHJcbiAgICAgICAgICAgIG5nRGlzYWJsZWQ6ICc9JyxcclxuICAgICAgICAgICAgc3Bpbm5lcklkOiAnQCcsXHJcbiAgICAgICAgICAgIG5hbWU6ICdAJyxcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiAnPScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XHJcbiAgICAgICAgICAgIHZhciBzcGlubmVyID0gc2NvcGUuc3Bpbm5lcjtcclxuICAgICAgICAgICAgc3Bpbm5lci5uZ01vZGVsID0gbmdNb2RlbDtcclxuICAgICAgICAgICAgdmFyIHVuYmluZFdhdGNoZXM7XHJcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaCgnc3Bpbm5lci5uZ0Rpc2FibGVkJywgZnVuY3Rpb24gKGRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKHVuYmluZFdhdGNoZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuYmluZFdhdGNoZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBzcGlubmVyIGFmdGVyICR0aW1lb3V0IHRvIGdpdmUgYW5ndWxhciBhIGNoYW5jZSBpbml0aWFsaXplIG5nTW9kZWxcclxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaHNwaW4gPSBlbGVtZW50LmZpbmQoJ2lucHV0LnNwaW5uZXInKS5Ub3VjaFNwaW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAoc3Bpbm5lci5taW4gIT0gbnVsbCA/IHNwaW5uZXIubWluIDogMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IChzcGlubmVyLm1heCAhPSBudWxsID8gc3Bpbm5lci5tYXggOiBleHBvcnRzLmRlZmF1bHRNYXhWYWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwOiBzcGlubmVyLnN0ZXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXg6IHNwaW5uZXIucHJlZml4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGZpeDogc3Bpbm5lci5wb3N0Zml4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbHM6IHNwaW5uZXIuZGVjaW1hbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0dmFsOiBuZ01vZGVsLiR2aWV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZXN0ZXBkaXZpc2liaWxpdHk6IHNwaW5uZXIucm91bmRUb1N0ZXAgPyAncm91bmQnIDogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hzcGluLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGluVmFsdWUgPSB0b3VjaHNwaW4udmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHN0cmluZ1V0aWxpdHkudG9OdW1iZXIoc3BpblZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmJpbmRWaWV3V2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5nTW9kZWwuJHZpZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3VjaHNwaW4udmFsKG5ld1ZhbHVlICE9IG51bGwgPyBuZXdWYWx1ZS50b1N0cmluZygpIDogJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuYmluZE1vZGVsV2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5nTW9kZWwuJG1vZGVsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChuZXdNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdNb2RlbC4kbW9kZWxWYWx1ZSA9IHJvdW5kKG5ld01vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuYmluZFdhdGNoZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmJpbmRWaWV3V2F0Y2goKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuYmluZE1vZGVsV2F0Y2goKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJvdW5kKG51bSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG51bSAhPSBudWxsICYmIHNwaW5uZXIucm91bmRUb1N0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICBudW0gPSBudW1iZXJVdGlsaXR5LnJvdW5kVG9TdGVwKG51bSwgc3Bpbm5lci5zdGVwKTtcclxuICAgICAgICAgICAgICAgICAgICBudW0gPSBudW1iZXJVdGlsaXR5LnByZWNpc2VSb3VuZChudW0sIHNwaW5uZXIuZGVjaW1hbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbX19zdHJpbmcubW9kdWxlTmFtZSwgY29tcG9uZW50VmFsaWRhdG9yX3NlcnZpY2VfMS5tb2R1bGVOYW1lLCBfX251bWJlci5tb2R1bGVOYW1lXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCBzcGlubmVyKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgU3Bpbm5lckNvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGlubmVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy9zcGlubmVyL3NwaW5uZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxNTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG5cclxucmVxdWlyZSgnLi9qcXVlcnkuYm9vdHN0cmFwLXRvdWNoc3Bpbi5jc3MnKTtcclxucmVxdWlyZSgnLi9qcXVlcnkuYm9vdHN0cmFwLXRvdWNoc3BpbicpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9saWJyYXJpZXMvYm9vdHN0cmFwLXRvdWNoc3Bpbi9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDE1M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9qcXVlcnkuYm9vdHN0cmFwLXRvdWNoc3Bpbi5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vanF1ZXJ5LmJvb3RzdHJhcC10b3VjaHNwaW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vanF1ZXJ5LmJvb3RzdHJhcC10b3VjaHNwaW4uY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vbGlicmFyaWVzL2Jvb3RzdHJhcC10b3VjaHNwaW4vanF1ZXJ5LmJvb3RzdHJhcC10b3VjaHNwaW4uY3NzXG4gKiogbW9kdWxlIGlkID0gMTU0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qXFxyXFxuICogIEJvb3RzdHJhcCBUb3VjaFNwaW4gLSB2My4wLjFcXHJcXG4gKiAgQSBtb2JpbGUgYW5kIHRvdWNoIGZyaWVuZGx5IGlucHV0IHNwaW5uZXIgY29tcG9uZW50IGZvciBCb290c3RyYXAgMy5cXHJcXG4gKiAgaHR0cDovL3d3dy52aXJ0dW9zb2Z0LmV1L2NvZGUvYm9vdHN0cmFwLXRvdWNoc3Bpbi9cXHJcXG4gKlxcclxcbiAqICBNYWRlIGJ5IElzdHbDoW4gVWpqLU3DqXN6w6Fyb3NcXHJcXG4gKiAgVW5kZXIgQXBhY2hlIExpY2Vuc2UgdjIuMCBMaWNlbnNlXFxyXFxuICovXFxyXFxuXFxyXFxuLmJvb3RzdHJhcC10b3VjaHNwaW4gLmlucHV0LWdyb3VwLWJ0bi12ZXJ0aWNhbCB7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcbiAgd2lkdGg6IDElO1xcclxcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gIGRpc3BsYXk6IHRhYmxlLWNlbGw7XFxyXFxufVxcclxcblxcclxcbi5ib290c3RyYXAtdG91Y2hzcGluIC5pbnB1dC1ncm91cC1idG4tdmVydGljYWwgPiAuYnRuIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgZmxvYXQ6IG5vbmU7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG4gIHBhZGRpbmc6IDhweCAxMHB4O1xcclxcbiAgbWFyZ2luLWxlZnQ6IC0xcHg7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxufVxcclxcblxcclxcbi5ib290c3RyYXAtdG91Y2hzcGluIC5pbnB1dC1ncm91cC1idG4tdmVydGljYWwgLmJvb3RzdHJhcC10b3VjaHNwaW4tdXAge1xcclxcbiAgYm9yZGVyLXJhZGl1czogMDtcXHJcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XFxyXFxufVxcclxcblxcclxcbi5ib290c3RyYXAtdG91Y2hzcGluIC5pbnB1dC1ncm91cC1idG4tdmVydGljYWwgLmJvb3RzdHJhcC10b3VjaHNwaW4tZG93biB7XFxyXFxuICBtYXJnaW4tdG9wOiAtMnB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMDtcXHJcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHg7XFxyXFxufVxcclxcblxcclxcbi5ib290c3RyYXAtdG91Y2hzcGluIC5pbnB1dC1ncm91cC1idG4tdmVydGljYWwgaSB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDNweDtcXHJcXG4gIGxlZnQ6IDVweDtcXHJcXG4gIGZvbnQtc2l6ZTogOXB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL2xpYnJhcmllcy9ib290c3RyYXAtdG91Y2hzcGluL2pxdWVyeS5ib290c3RyYXAtdG91Y2hzcGluLmNzc1xuICoqIG1vZHVsZSBpZCA9IDE1NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLypcclxuICogIEJvb3RzdHJhcCBUb3VjaFNwaW4gLSB2My4wLjFcclxuICogIEEgbW9iaWxlIGFuZCB0b3VjaCBmcmllbmRseSBpbnB1dCBzcGlubmVyIGNvbXBvbmVudCBmb3IgQm9vdHN0cmFwIDMuXHJcbiAqICBodHRwOi8vd3d3LnZpcnR1b3NvZnQuZXUvY29kZS9ib290c3RyYXAtdG91Y2hzcGluL1xyXG4gKlxyXG4gKiAgTWFkZSBieSBJc3R2w6FuIFVqai1Nw6lzesOhcm9zXHJcbiAqICBVbmRlciBBcGFjaGUgTGljZW5zZSB2Mi4wIExpY2Vuc2VcclxuICovXHJcbihmdW5jdGlvbigkKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXIgX2N1cnJlbnRTcGlubmVySWQgPSAwO1xyXG5cclxuICBmdW5jdGlvbiBfc2NvcGVkRXZlbnROYW1lKG5hbWUsIGlkKSB7XHJcbiAgICByZXR1cm4gbmFtZSArICcudG91Y2hzcGluXycgKyBpZDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9zY29wZUV2ZW50TmFtZXMobmFtZXMsIGlkKSB7XHJcbiAgICByZXR1cm4gJC5tYXAobmFtZXMsIGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgcmV0dXJuIF9zY29wZWRFdmVudE5hbWUobmFtZSwgaWQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAkLmZuLlRvdWNoU3BpbiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuXHJcbiAgICBpZiAob3B0aW9ucyA9PT0gJ2Rlc3Ryb3knKSB7XHJcbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxpbnB1dCA9ICQodGhpcyksXHJcbiAgICAgICAgICAgIG9yaWdpbmFsaW5wdXRfZGF0YSA9IG9yaWdpbmFsaW5wdXQuZGF0YSgpO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfc2NvcGVFdmVudE5hbWVzKFtcclxuICAgICAgICAgICdtb3VzZXVwJyxcclxuICAgICAgICAgICd0b3VjaGVuZCcsXHJcbiAgICAgICAgICAndG91Y2hjYW5jZWwnLFxyXG4gICAgICAgICAgJ21vdXNlbW92ZScsXHJcbiAgICAgICAgICAndG91Y2htb3ZlJyxcclxuICAgICAgICAgICdzY3JvbGwnLFxyXG4gICAgICAgICAgJ3Njcm9sbHN0YXJ0J10sIG9yaWdpbmFsaW5wdXRfZGF0YS5zcGlubmVyaWQpLmpvaW4oJyAnKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICBtaW46IDAsXHJcbiAgICAgIG1heDogMTAwLFxyXG4gICAgICBpbml0dmFsOiAnJyxcclxuICAgICAgc3RlcDogMSxcclxuICAgICAgZGVjaW1hbHM6IDAsXHJcbiAgICAgIHN0ZXBpbnRlcnZhbDogMTAwLFxyXG4gICAgICBmb3JjZXN0ZXBkaXZpc2liaWxpdHk6ICdyb3VuZCcsIC8vIG5vbmUgfCBmbG9vciB8IHJvdW5kIHwgY2VpbFxyXG4gICAgICBzdGVwaW50ZXJ2YWxkZWxheTogNTAwLFxyXG4gICAgICB2ZXJ0aWNhbGJ1dHRvbnM6IGZhbHNlLFxyXG4gICAgICB2ZXJ0aWNhbHVwY2xhc3M6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAnLFxyXG4gICAgICB2ZXJ0aWNhbGRvd25jbGFzczogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duJyxcclxuICAgICAgcHJlZml4OiAnJyxcclxuICAgICAgcG9zdGZpeDogJycsXHJcbiAgICAgIHByZWZpeF9leHRyYWNsYXNzOiAnJyxcclxuICAgICAgcG9zdGZpeF9leHRyYWNsYXNzOiAnJyxcclxuICAgICAgYm9vc3RlcjogdHJ1ZSxcclxuICAgICAgYm9vc3RhdDogMTAsXHJcbiAgICAgIG1heGJvb3N0ZWRzdGVwOiBmYWxzZSxcclxuICAgICAgbW91c2V3aGVlbDogdHJ1ZSxcclxuICAgICAgYnV0dG9uZG93bl9jbGFzczogJ2J0biBidG4tZGVmYXVsdCcsXHJcbiAgICAgIGJ1dHRvbnVwX2NsYXNzOiAnYnRuIGJ0bi1kZWZhdWx0JyxcclxuXHQgIGJ1dHRvbmRvd25fdHh0OiAnLScsXHJcblx0ICBidXR0b251cF90eHQ6ICcrJ1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgYXR0cmlidXRlTWFwID0ge1xyXG4gICAgICBtaW46ICdtaW4nLFxyXG4gICAgICBtYXg6ICdtYXgnLFxyXG4gICAgICBpbml0dmFsOiAnaW5pdC12YWwnLFxyXG4gICAgICBzdGVwOiAnc3RlcCcsXHJcbiAgICAgIGRlY2ltYWxzOiAnZGVjaW1hbHMnLFxyXG4gICAgICBzdGVwaW50ZXJ2YWw6ICdzdGVwLWludGVydmFsJyxcclxuICAgICAgdmVydGljYWxidXR0b25zOiAndmVydGljYWwtYnV0dG9ucycsXHJcbiAgICAgIHZlcnRpY2FsdXBjbGFzczogJ3ZlcnRpY2FsLXVwLWNsYXNzJyxcclxuICAgICAgdmVydGljYWxkb3duY2xhc3M6ICd2ZXJ0aWNhbC1kb3duLWNsYXNzJyxcclxuICAgICAgZm9yY2VzdGVwZGl2aXNpYmlsaXR5OiAnZm9yY2Utc3RlcC1kaXZpc2liaWxpdHknLFxyXG4gICAgICBzdGVwaW50ZXJ2YWxkZWxheTogJ3N0ZXAtaW50ZXJ2YWwtZGVsYXknLFxyXG4gICAgICBwcmVmaXg6ICdwcmVmaXgnLFxyXG4gICAgICBwb3N0Zml4OiAncG9zdGZpeCcsXHJcbiAgICAgIHByZWZpeF9leHRyYWNsYXNzOiAncHJlZml4LWV4dHJhLWNsYXNzJyxcclxuICAgICAgcG9zdGZpeF9leHRyYWNsYXNzOiAncG9zdGZpeC1leHRyYS1jbGFzcycsXHJcbiAgICAgIGJvb3N0ZXI6ICdib29zdGVyJyxcclxuICAgICAgYm9vc3RhdDogJ2Jvb3N0YXQnLFxyXG4gICAgICBtYXhib29zdGVkc3RlcDogJ21heC1ib29zdGVkLXN0ZXAnLFxyXG4gICAgICBtb3VzZXdoZWVsOiAnbW91c2Utd2hlZWwnLFxyXG4gICAgICBidXR0b25kb3duX2NsYXNzOiAnYnV0dG9uLWRvd24tY2xhc3MnLFxyXG4gICAgICBidXR0b251cF9jbGFzczogJ2J1dHRvbi11cC1jbGFzcycsXHJcblx0ICBidXR0b25kb3duX3R4dDogJ2J1dHRvbi1kb3duLXR4dCcsXHJcblx0ICBidXR0b251cF90eHQ6ICdidXR0b24tdXAtdHh0J1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgdmFyIHNldHRpbmdzLFxyXG4gICAgICAgICAgb3JpZ2luYWxpbnB1dCA9ICQodGhpcyksXHJcbiAgICAgICAgICBvcmlnaW5hbGlucHV0X2RhdGEgPSBvcmlnaW5hbGlucHV0LmRhdGEoKSxcclxuICAgICAgICAgIGNvbnRhaW5lcixcclxuICAgICAgICAgIGVsZW1lbnRzLFxyXG4gICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICBkb3duU3BpblRpbWVyLFxyXG4gICAgICAgICAgdXBTcGluVGltZXIsXHJcbiAgICAgICAgICBkb3duRGVsYXlUaW1lb3V0LFxyXG4gICAgICAgICAgdXBEZWxheVRpbWVvdXQsXHJcbiAgICAgICAgICBzcGluY291bnQgPSAwLFxyXG4gICAgICAgICAgc3Bpbm5pbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgIGluaXQoKTtcclxuXHJcblxyXG4gICAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgIGlmIChvcmlnaW5hbGlucHV0LmRhdGEoJ2FscmVhZHlpbml0aWFsaXplZCcpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcmlnaW5hbGlucHV0LmRhdGEoJ2FscmVhZHlpbml0aWFsaXplZCcsIHRydWUpO1xyXG4gICAgICAgIF9jdXJyZW50U3Bpbm5lcklkICs9IDE7XHJcbiAgICAgICAgb3JpZ2luYWxpbnB1dC5kYXRhKCdzcGlubmVyaWQnLCBfY3VycmVudFNwaW5uZXJJZCk7XHJcblxyXG5cclxuICAgICAgICBpZiAoIW9yaWdpbmFsaW5wdXQuaXMoJ2lucHV0JykpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdNdXN0IGJlIGFuIGlucHV0LicpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX2luaXRTZXR0aW5ncygpO1xyXG4gICAgICAgIF9zZXRJbml0dmFsKCk7XHJcbiAgICAgICAgX2NoZWNrVmFsdWUoKTtcclxuICAgICAgICBfYnVpbGRIdG1sKCk7XHJcbiAgICAgICAgX2luaXRFbGVtZW50cygpO1xyXG4gICAgICAgIF9oaWRlRW1wdHlQcmVmaXhQb3N0Zml4KCk7XHJcbiAgICAgICAgX2JpbmRFdmVudHMoKTtcclxuICAgICAgICBfYmluZEV2ZW50c0ludGVyZmFjZSgpO1xyXG4gICAgICAgIGVsZW1lbnRzLmlucHV0LmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBfc2V0SW5pdHZhbCgpIHtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuaW5pdHZhbCAhPT0gJycgJiYgb3JpZ2luYWxpbnB1dC52YWwoKSA9PT0gJycpIHtcclxuICAgICAgICAgIG9yaWdpbmFsaW5wdXQudmFsKHNldHRpbmdzLmluaXR2YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gY2hhbmdlU2V0dGluZ3MobmV3c2V0dGluZ3MpIHtcclxuICAgICAgICBfdXBkYXRlU2V0dGluZ3MobmV3c2V0dGluZ3MpO1xyXG4gICAgICAgIF9jaGVja1ZhbHVlKCk7XHJcblxyXG4gICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnRzLmlucHV0LnZhbCgpO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IE51bWJlcihlbGVtZW50cy5pbnB1dC52YWwoKSk7XHJcbiAgICAgICAgICBlbGVtZW50cy5pbnB1dC52YWwodmFsdWUudG9GaXhlZChzZXR0aW5ncy5kZWNpbWFscykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gX2luaXRTZXR0aW5ncygpIHtcclxuICAgICAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3JpZ2luYWxpbnB1dF9kYXRhLCBfcGFyc2VBdHRyaWJ1dGVzKCksIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBfcGFyc2VBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIHZhciBkYXRhID0ge307XHJcbiAgICAgICAgJC5lYWNoKGF0dHJpYnV0ZU1hcCwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgdmFyIGF0dHJOYW1lID0gJ2J0cy0nICsgdmFsdWUgKyAnJztcclxuICAgICAgICAgIGlmIChvcmlnaW5hbGlucHV0LmlzKCdbZGF0YS0nICsgYXR0ck5hbWUgKyAnXScpKSB7XHJcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IG9yaWdpbmFsaW5wdXQuZGF0YShhdHRyTmFtZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIF91cGRhdGVTZXR0aW5ncyhuZXdzZXR0aW5ncykge1xyXG4gICAgICAgIHNldHRpbmdzID0gJC5leHRlbmQoe30sIHNldHRpbmdzLCBuZXdzZXR0aW5ncyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIF9idWlsZEh0bWwoKSB7XHJcbiAgICAgICAgdmFyIGluaXR2YWwgPSBvcmlnaW5hbGlucHV0LnZhbCgpLFxyXG4gICAgICAgICAgICBwYXJlbnRlbGVtZW50ID0gb3JpZ2luYWxpbnB1dC5wYXJlbnQoKTtcclxuXHJcbiAgICAgICAgaWYgKGluaXR2YWwgIT09ICcnKSB7XHJcbiAgICAgICAgICBpbml0dmFsID0gTnVtYmVyKGluaXR2YWwpLnRvRml4ZWQoc2V0dGluZ3MuZGVjaW1hbHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3JpZ2luYWxpbnB1dC5kYXRhKCdpbml0dmFsdWUnLCBpbml0dmFsKS52YWwoaW5pdHZhbCk7XHJcbiAgICAgICAgb3JpZ2luYWxpbnB1dC5hZGRDbGFzcygnZm9ybS1jb250cm9sJyk7XHJcblxyXG4gICAgICAgIGlmIChwYXJlbnRlbGVtZW50Lmhhc0NsYXNzKCdpbnB1dC1ncm91cCcpKSB7XHJcbiAgICAgICAgICBfYWR2YW5jZUlucHV0R3JvdXAocGFyZW50ZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgX2J1aWxkSW5wdXRHcm91cCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gX2FkdmFuY2VJbnB1dEdyb3VwKHBhcmVudGVsZW1lbnQpIHtcclxuICAgICAgICBwYXJlbnRlbGVtZW50LmFkZENsYXNzKCdib290c3RyYXAtdG91Y2hzcGluJyk7XHJcblxyXG4gICAgICAgIHZhciBwcmV2ID0gb3JpZ2luYWxpbnB1dC5wcmV2KCksXHJcbiAgICAgICAgICAgIG5leHQgPSBvcmlnaW5hbGlucHV0Lm5leHQoKTtcclxuXHJcbiAgICAgICAgdmFyIGRvd25odG1sLFxyXG4gICAgICAgICAgICB1cGh0bWwsXHJcbiAgICAgICAgICAgIHByZWZpeGh0bWwgPSAnPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvbiBib290c3RyYXAtdG91Y2hzcGluLXByZWZpeFwiPicgKyBzZXR0aW5ncy5wcmVmaXggKyAnPC9zcGFuPicsXHJcbiAgICAgICAgICAgIHBvc3RmaXhodG1sID0gJzxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb24gYm9vdHN0cmFwLXRvdWNoc3Bpbi1wb3N0Zml4XCI+JyArIHNldHRpbmdzLnBvc3RmaXggKyAnPC9zcGFuPic7XHJcblxyXG4gICAgICAgIGlmIChwcmV2Lmhhc0NsYXNzKCdpbnB1dC1ncm91cC1idG4nKSkge1xyXG4gICAgICAgICAgZG93bmh0bWwgPSAnPGJ1dHRvbiBjbGFzcz1cIicgKyBzZXR0aW5ncy5idXR0b25kb3duX2NsYXNzICsgJyBib290c3RyYXAtdG91Y2hzcGluLWRvd25cIiB0eXBlPVwiYnV0dG9uXCI+JyArIHNldHRpbmdzLmJ1dHRvbmRvd25fdHh0ICsgJzwvYnV0dG9uPic7XHJcbiAgICAgICAgICBwcmV2LmFwcGVuZChkb3duaHRtbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgZG93bmh0bWwgPSAnPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1idG5cIj48YnV0dG9uIGNsYXNzPVwiJyArIHNldHRpbmdzLmJ1dHRvbmRvd25fY2xhc3MgKyAnIGJvb3RzdHJhcC10b3VjaHNwaW4tZG93blwiIHR5cGU9XCJidXR0b25cIj4nICsgc2V0dGluZ3MuYnV0dG9uZG93bl90eHQgKyAnPC9idXR0b24+PC9zcGFuPic7XHJcbiAgICAgICAgICAkKGRvd25odG1sKS5pbnNlcnRCZWZvcmUob3JpZ2luYWxpbnB1dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobmV4dC5oYXNDbGFzcygnaW5wdXQtZ3JvdXAtYnRuJykpIHtcclxuICAgICAgICAgIHVwaHRtbCA9ICc8YnV0dG9uIGNsYXNzPVwiJyArIHNldHRpbmdzLmJ1dHRvbnVwX2NsYXNzICsgJyBib290c3RyYXAtdG91Y2hzcGluLXVwXCIgdHlwZT1cImJ1dHRvblwiPicgKyBzZXR0aW5ncy5idXR0b251cF90eHQgKyAnPC9idXR0b24+JztcclxuICAgICAgICAgIG5leHQucHJlcGVuZCh1cGh0bWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHVwaHRtbCA9ICc8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWJ0blwiPjxidXR0b24gY2xhc3M9XCInICsgc2V0dGluZ3MuYnV0dG9udXBfY2xhc3MgKyAnIGJvb3RzdHJhcC10b3VjaHNwaW4tdXBcIiB0eXBlPVwiYnV0dG9uXCI+JyArIHNldHRpbmdzLmJ1dHRvbnVwX3R4dCArICc8L2J1dHRvbj48L3NwYW4+JztcclxuICAgICAgICAgICQodXBodG1sKS5pbnNlcnRBZnRlcihvcmlnaW5hbGlucHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQocHJlZml4aHRtbCkuaW5zZXJ0QmVmb3JlKG9yaWdpbmFsaW5wdXQpO1xyXG4gICAgICAgICQocG9zdGZpeGh0bWwpLmluc2VydEFmdGVyKG9yaWdpbmFsaW5wdXQpO1xyXG5cclxuICAgICAgICBjb250YWluZXIgPSBwYXJlbnRlbGVtZW50O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBfYnVpbGRJbnB1dEdyb3VwKCkge1xyXG4gICAgICAgIHZhciBodG1sO1xyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MudmVydGljYWxidXR0b25zKSB7XHJcbiAgICAgICAgICBodG1sID0gJzxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBib290c3RyYXAtdG91Y2hzcGluXCI+PHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvbiBib290c3RyYXAtdG91Y2hzcGluLXByZWZpeFwiPicgKyBzZXR0aW5ncy5wcmVmaXggKyAnPC9zcGFuPjxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb24gYm9vdHN0cmFwLXRvdWNoc3Bpbi1wb3N0Zml4XCI+JyArIHNldHRpbmdzLnBvc3RmaXggKyAnPC9zcGFuPjxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYnRuLXZlcnRpY2FsXCI+PGJ1dHRvbiBjbGFzcz1cIicgKyBzZXR0aW5ncy5idXR0b25kb3duX2NsYXNzICsgJyBib290c3RyYXAtdG91Y2hzcGluLXVwXCIgdHlwZT1cImJ1dHRvblwiPjxpIGNsYXNzPVwiJyArIHNldHRpbmdzLnZlcnRpY2FsdXBjbGFzcyArICdcIj48L2k+PC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cIicgKyBzZXR0aW5ncy5idXR0b251cF9jbGFzcyArICcgYm9vdHN0cmFwLXRvdWNoc3Bpbi1kb3duXCIgdHlwZT1cImJ1dHRvblwiPjxpIGNsYXNzPVwiJyArIHNldHRpbmdzLnZlcnRpY2FsZG93bmNsYXNzICsgJ1wiPjwvaT48L2J1dHRvbj48L3NwYW4+PC9kaXY+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBodG1sID0gJzxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBib290c3RyYXAtdG91Y2hzcGluXCI+PHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1idG5cIj48YnV0dG9uIGNsYXNzPVwiJyArIHNldHRpbmdzLmJ1dHRvbmRvd25fY2xhc3MgKyAnIGJvb3RzdHJhcC10b3VjaHNwaW4tZG93blwiIHR5cGU9XCJidXR0b25cIj4nICsgc2V0dGluZ3MuYnV0dG9uZG93bl90eHQgKyAnPC9idXR0b24+PC9zcGFuPjxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb24gYm9vdHN0cmFwLXRvdWNoc3Bpbi1wcmVmaXhcIj4nICsgc2V0dGluZ3MucHJlZml4ICsgJzwvc3Bhbj48c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uIGJvb3RzdHJhcC10b3VjaHNwaW4tcG9zdGZpeFwiPicgKyBzZXR0aW5ncy5wb3N0Zml4ICsgJzwvc3Bhbj48c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWJ0blwiPjxidXR0b24gY2xhc3M9XCInICsgc2V0dGluZ3MuYnV0dG9udXBfY2xhc3MgKyAnIGJvb3RzdHJhcC10b3VjaHNwaW4tdXBcIiB0eXBlPVwiYnV0dG9uXCI+JyArIHNldHRpbmdzLmJ1dHRvbnVwX3R4dCArICc8L2J1dHRvbj48L3NwYW4+PC9kaXY+JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRhaW5lciA9ICQoaHRtbCkuaW5zZXJ0QmVmb3JlKG9yaWdpbmFsaW5wdXQpO1xyXG5cclxuICAgICAgICAkKCcuYm9vdHN0cmFwLXRvdWNoc3Bpbi1wcmVmaXgnLCBjb250YWluZXIpLmFmdGVyKG9yaWdpbmFsaW5wdXQpO1xyXG5cclxuICAgICAgICBpZiAob3JpZ2luYWxpbnB1dC5oYXNDbGFzcygnaW5wdXQtc20nKSkge1xyXG4gICAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKCdpbnB1dC1ncm91cC1zbScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvcmlnaW5hbGlucHV0Lmhhc0NsYXNzKCdpbnB1dC1sZycpKSB7XHJcbiAgICAgICAgICBjb250YWluZXIuYWRkQ2xhc3MoJ2lucHV0LWdyb3VwLWxnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBfaW5pdEVsZW1lbnRzKCkge1xyXG4gICAgICAgIGVsZW1lbnRzID0ge1xyXG4gICAgICAgICAgZG93bjogJCgnLmJvb3RzdHJhcC10b3VjaHNwaW4tZG93bicsIGNvbnRhaW5lciksXHJcbiAgICAgICAgICB1cDogJCgnLmJvb3RzdHJhcC10b3VjaHNwaW4tdXAnLCBjb250YWluZXIpLFxyXG4gICAgICAgICAgaW5wdXQ6ICQoJ2lucHV0JywgY29udGFpbmVyKSxcclxuICAgICAgICAgIHByZWZpeDogJCgnLmJvb3RzdHJhcC10b3VjaHNwaW4tcHJlZml4JywgY29udGFpbmVyKS5hZGRDbGFzcyhzZXR0aW5ncy5wcmVmaXhfZXh0cmFjbGFzcyksXHJcbiAgICAgICAgICBwb3N0Zml4OiAkKCcuYm9vdHN0cmFwLXRvdWNoc3Bpbi1wb3N0Zml4JywgY29udGFpbmVyKS5hZGRDbGFzcyhzZXR0aW5ncy5wb3N0Zml4X2V4dHJhY2xhc3MpXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gX2hpZGVFbXB0eVByZWZpeFBvc3RmaXgoKSB7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLnByZWZpeCA9PT0gJycpIHtcclxuICAgICAgICAgIGVsZW1lbnRzLnByZWZpeC5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MucG9zdGZpeCA9PT0gJycpIHtcclxuICAgICAgICAgIGVsZW1lbnRzLnBvc3RmaXguaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gX2JpbmRFdmVudHMoKSB7XHJcbiAgICAgICAgb3JpZ2luYWxpbnB1dC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2KSB7XHJcbiAgICAgICAgICB2YXIgY29kZSA9IGV2LmtleUNvZGUgfHwgZXYud2hpY2g7XHJcblxyXG4gICAgICAgICAgaWYgKGNvZGUgPT09IDM4KSB7XHJcbiAgICAgICAgICAgIGlmIChzcGlubmluZyAhPT0gJ3VwJykge1xyXG4gICAgICAgICAgICAgIHVwT25jZSgpO1xyXG4gICAgICAgICAgICAgIHN0YXJ0VXBTcGluKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IDQwKSB7XHJcbiAgICAgICAgICAgIGlmIChzcGlubmluZyAhPT0gJ2Rvd24nKSB7XHJcbiAgICAgICAgICAgICAgZG93bk9uY2UoKTtcclxuICAgICAgICAgICAgICBzdGFydERvd25TcGluKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgb3JpZ2luYWxpbnB1dC5vbigna2V5dXAnLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgdmFyIGNvZGUgPSBldi5rZXlDb2RlIHx8IGV2LndoaWNoO1xyXG5cclxuICAgICAgICAgIGlmIChjb2RlID09PSAzOCkge1xyXG4gICAgICAgICAgICBzdG9wU3BpbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZiAoY29kZSA9PT0gNDApIHtcclxuICAgICAgICAgICAgc3RvcFNwaW4oKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgb3JpZ2luYWxpbnB1dC5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgX2NoZWNrVmFsdWUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxlbWVudHMuZG93bi5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2KSB7XHJcbiAgICAgICAgICB2YXIgY29kZSA9IGV2LmtleUNvZGUgfHwgZXYud2hpY2g7XHJcblxyXG4gICAgICAgICAgaWYgKGNvZGUgPT09IDMyIHx8IGNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgIGlmIChzcGlubmluZyAhPT0gJ2Rvd24nKSB7XHJcbiAgICAgICAgICAgICAgZG93bk9uY2UoKTtcclxuICAgICAgICAgICAgICBzdGFydERvd25TcGluKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxlbWVudHMuZG93bi5vbigna2V5dXAnLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgdmFyIGNvZGUgPSBldi5rZXlDb2RlIHx8IGV2LndoaWNoO1xyXG5cclxuICAgICAgICAgIGlmIChjb2RlID09PSAzMiB8fCBjb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICBzdG9wU3BpbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBlbGVtZW50cy51cC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2KSB7XHJcbiAgICAgICAgICB2YXIgY29kZSA9IGV2LmtleUNvZGUgfHwgZXYud2hpY2g7XHJcblxyXG4gICAgICAgICAgaWYgKGNvZGUgPT09IDMyIHx8IGNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgIGlmIChzcGlubmluZyAhPT0gJ3VwJykge1xyXG4gICAgICAgICAgICAgIHVwT25jZSgpO1xyXG4gICAgICAgICAgICAgIHN0YXJ0VXBTcGluKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxlbWVudHMudXAub24oJ2tleXVwJywgZnVuY3Rpb24oZXYpIHtcclxuICAgICAgICAgIHZhciBjb2RlID0gZXYua2V5Q29kZSB8fCBldi53aGljaDtcclxuXHJcbiAgICAgICAgICBpZiAoY29kZSA9PT0gMzIgfHwgY29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgc3RvcFNwaW4oKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxlbWVudHMuZG93bi5vbignbW91c2Vkb3duLnRvdWNoc3BpbicsIGZ1bmN0aW9uKGV2KSB7XHJcbiAgICAgICAgICBlbGVtZW50cy5kb3duLm9mZigndG91Y2hzdGFydC50b3VjaHNwaW4nKTsgIC8vIGFuZHJvaWQgNCB3b3JrYXJvdW5kXHJcblxyXG4gICAgICAgICAgaWYgKG9yaWdpbmFsaW5wdXQuaXMoJzpkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBkb3duT25jZSgpO1xyXG4gICAgICAgICAgc3RhcnREb3duU3BpbigpO1xyXG5cclxuICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxlbWVudHMuZG93bi5vbigndG91Y2hzdGFydC50b3VjaHNwaW4nLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgZWxlbWVudHMuZG93bi5vZmYoJ21vdXNlZG93bi50b3VjaHNwaW4nKTsgIC8vIGFuZHJvaWQgNCB3b3JrYXJvdW5kXHJcblxyXG4gICAgICAgICAgaWYgKG9yaWdpbmFsaW5wdXQuaXMoJzpkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBkb3duT25jZSgpO1xyXG4gICAgICAgICAgc3RhcnREb3duU3BpbigpO1xyXG5cclxuICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxlbWVudHMudXAub24oJ21vdXNlZG93bi50b3VjaHNwaW4nLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgZWxlbWVudHMudXAub2ZmKCd0b3VjaHN0YXJ0LnRvdWNoc3BpbicpOyAgLy8gYW5kcm9pZCA0IHdvcmthcm91bmRcclxuXHJcbiAgICAgICAgICBpZiAob3JpZ2luYWxpbnB1dC5pcygnOmRpc2FibGVkJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHVwT25jZSgpO1xyXG4gICAgICAgICAgc3RhcnRVcFNwaW4oKTtcclxuXHJcbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGVsZW1lbnRzLnVwLm9uKCd0b3VjaHN0YXJ0LnRvdWNoc3BpbicsIGZ1bmN0aW9uKGV2KSB7XHJcbiAgICAgICAgICBlbGVtZW50cy51cC5vZmYoJ21vdXNlZG93bi50b3VjaHNwaW4nKTsgIC8vIGFuZHJvaWQgNCB3b3JrYXJvdW5kXHJcblxyXG4gICAgICAgICAgaWYgKG9yaWdpbmFsaW5wdXQuaXMoJzpkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB1cE9uY2UoKTtcclxuICAgICAgICAgIHN0YXJ0VXBTcGluKCk7XHJcblxyXG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBlbGVtZW50cy51cC5vbignbW91c2VvdXQgdG91Y2hsZWF2ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uKGV2KSB7XHJcbiAgICAgICAgICBpZiAoIXNwaW5uaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgIHN0b3BTcGluKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGVsZW1lbnRzLmRvd24ub24oJ21vdXNlb3V0IHRvdWNobGVhdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgaWYgKCFzcGlubmluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICBzdG9wU3BpbigpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBlbGVtZW50cy5kb3duLm9uKCdtb3VzZW1vdmUgdG91Y2htb3ZlJywgZnVuY3Rpb24oZXYpIHtcclxuICAgICAgICAgIGlmICghc3Bpbm5pbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxlbWVudHMudXAub24oJ21vdXNlbW92ZSB0b3VjaG1vdmUnLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgaWYgKCFzcGlubmluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5vbihfc2NvcGVFdmVudE5hbWVzKFsnbW91c2V1cCcsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCddLCBfY3VycmVudFNwaW5uZXJJZCkuam9pbignICcpLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgaWYgKCFzcGlubmluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIHN0b3BTcGluKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKF9zY29wZUV2ZW50TmFtZXMoWydtb3VzZW1vdmUnLCAndG91Y2htb3ZlJywgJ3Njcm9sbCcsICdzY3JvbGxzdGFydCddLCBfY3VycmVudFNwaW5uZXJJZCkuam9pbignICcpLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgaWYgKCFzcGlubmluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIHN0b3BTcGluKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG9yaWdpbmFsaW5wdXQub24oJ21vdXNld2hlZWwgRE9NTW91c2VTY3JvbGwnLCBmdW5jdGlvbihldikge1xyXG4gICAgICAgICAgaWYgKCFzZXR0aW5ncy5tb3VzZXdoZWVsIHx8ICFvcmlnaW5hbGlucHV0LmlzKCc6Zm9jdXMnKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIGRlbHRhID0gZXYub3JpZ2luYWxFdmVudC53aGVlbERlbHRhIHx8IC1ldi5vcmlnaW5hbEV2ZW50LmRlbHRhWSB8fCAtZXYub3JpZ2luYWxFdmVudC5kZXRhaWw7XHJcblxyXG4gICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIGlmIChkZWx0YSA8IDApIHtcclxuICAgICAgICAgICAgZG93bk9uY2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1cE9uY2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gX2JpbmRFdmVudHNJbnRlcmZhY2UoKSB7XHJcbiAgICAgICAgb3JpZ2luYWxpbnB1dC5vbigndG91Y2hzcGluLnVwb25jZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc3RvcFNwaW4oKTtcclxuICAgICAgICAgIHVwT25jZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBvcmlnaW5hbGlucHV0Lm9uKCd0b3VjaHNwaW4uZG93bm9uY2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHN0b3BTcGluKCk7XHJcbiAgICAgICAgICBkb3duT25jZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBvcmlnaW5hbGlucHV0Lm9uKCd0b3VjaHNwaW4uc3RhcnR1cHNwaW4nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHN0YXJ0VXBTcGluKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG9yaWdpbmFsaW5wdXQub24oJ3RvdWNoc3Bpbi5zdGFydGRvd25zcGluJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzdGFydERvd25TcGluKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG9yaWdpbmFsaW5wdXQub24oJ3RvdWNoc3Bpbi5zdG9wc3BpbicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc3RvcFNwaW4oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgb3JpZ2luYWxpbnB1dC5vbigndG91Y2hzcGluLnVwZGF0ZXNldHRpbmdzJywgZnVuY3Rpb24oZSwgbmV3c2V0dGluZ3MpIHtcclxuICAgICAgICAgIGNoYW5nZVNldHRpbmdzKG5ld3NldHRpbmdzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gX2ZvcmNlc3RlcGRpdmlzaWJpbGl0eSh2YWx1ZSkge1xyXG4gICAgICAgIHN3aXRjaCAoc2V0dGluZ3MuZm9yY2VzdGVwZGl2aXNpYmlsaXR5KSB7XHJcbiAgICAgICAgICBjYXNlICdyb3VuZCc6XHJcbiAgICAgICAgICAgIHJldHVybiAoTWF0aC5yb3VuZCh2YWx1ZSAvIHNldHRpbmdzLnN0ZXApICogc2V0dGluZ3Muc3RlcCkudG9GaXhlZChzZXR0aW5ncy5kZWNpbWFscyk7XHJcbiAgICAgICAgICBjYXNlICdmbG9vcic6XHJcbiAgICAgICAgICAgIHJldHVybiAoTWF0aC5mbG9vcih2YWx1ZSAvIHNldHRpbmdzLnN0ZXApICogc2V0dGluZ3Muc3RlcCkudG9GaXhlZChzZXR0aW5ncy5kZWNpbWFscyk7XHJcbiAgICAgICAgICBjYXNlICdjZWlsJzpcclxuICAgICAgICAgICAgcmV0dXJuIChNYXRoLmNlaWwodmFsdWUgLyBzZXR0aW5ncy5zdGVwKSAqIHNldHRpbmdzLnN0ZXApLnRvRml4ZWQoc2V0dGluZ3MuZGVjaW1hbHMpO1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gX2NoZWNrVmFsdWUoKSB7XHJcbiAgICAgICAgdmFyIHZhbCwgcGFyc2VkdmFsLCByZXR1cm52YWw7XHJcblxyXG4gICAgICAgIHZhbCA9IG9yaWdpbmFsaW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgIGlmICh2YWwgPT09ICcnKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MuZGVjaW1hbHMgPiAwICYmIHZhbCA9PT0gJy4nKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYXJzZWR2YWwgPSBwYXJzZUZsb2F0KHZhbCk7XHJcblxyXG4gICAgICAgIGlmIChpc05hTihwYXJzZWR2YWwpKSB7XHJcbiAgICAgICAgICBwYXJzZWR2YWwgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJudmFsID0gcGFyc2VkdmFsO1xyXG5cclxuICAgICAgICBpZiAocGFyc2VkdmFsLnRvU3RyaW5nKCkgIT09IHZhbCkge1xyXG4gICAgICAgICAgcmV0dXJudmFsID0gcGFyc2VkdmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhcnNlZHZhbCA8IHNldHRpbmdzLm1pbikge1xyXG4gICAgICAgICAgcmV0dXJudmFsID0gc2V0dGluZ3MubWluO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhcnNlZHZhbCA+IHNldHRpbmdzLm1heCkge1xyXG4gICAgICAgICAgcmV0dXJudmFsID0gc2V0dGluZ3MubWF4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJudmFsID0gX2ZvcmNlc3RlcGRpdmlzaWJpbGl0eShyZXR1cm52YWwpO1xyXG5cclxuICAgICAgICBpZiAoTnVtYmVyKHZhbCkudG9TdHJpbmcoKSAhPT0gcmV0dXJudmFsLnRvU3RyaW5nKCkpIHtcclxuICAgICAgICAgIG9yaWdpbmFsaW5wdXQudmFsKHJldHVybnZhbCk7XHJcbiAgICAgICAgICBvcmlnaW5hbGlucHV0LnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gX2dldEJvb3N0ZWRTdGVwKCkge1xyXG4gICAgICAgIGlmICghc2V0dGluZ3MuYm9vc3Rlcikge1xyXG4gICAgICAgICAgcmV0dXJuIHNldHRpbmdzLnN0ZXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdmFyIGJvb3N0ZWQgPSBNYXRoLnBvdygyLCBNYXRoLmZsb29yKHNwaW5jb3VudCAvIHNldHRpbmdzLmJvb3N0YXQpKSAqIHNldHRpbmdzLnN0ZXA7XHJcblxyXG4gICAgICAgICAgaWYgKHNldHRpbmdzLm1heGJvb3N0ZWRzdGVwKSB7XHJcbiAgICAgICAgICAgIGlmIChib29zdGVkID4gc2V0dGluZ3MubWF4Ym9vc3RlZHN0ZXApIHtcclxuICAgICAgICAgICAgICBib29zdGVkID0gc2V0dGluZ3MubWF4Ym9vc3RlZHN0ZXA7XHJcbiAgICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKCh2YWx1ZSAvIGJvb3N0ZWQpKSAqIGJvb3N0ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoc2V0dGluZ3Muc3RlcCwgYm9vc3RlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiB1cE9uY2UoKSB7XHJcbiAgICAgICAgX2NoZWNrVmFsdWUoKTtcclxuXHJcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KGVsZW1lbnRzLmlucHV0LnZhbCgpKTtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaW5pdHZhbHVlID0gdmFsdWUsXHJcbiAgICAgICAgICAgIGJvb3N0ZWRzdGVwID0gX2dldEJvb3N0ZWRTdGVwKCk7XHJcblxyXG4gICAgICAgIHZhbHVlID0gdmFsdWUgKyBib29zdGVkc3RlcDtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlID4gc2V0dGluZ3MubWF4KSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IHNldHRpbmdzLm1heDtcclxuICAgICAgICAgIG9yaWdpbmFsaW5wdXQudHJpZ2dlcigndG91Y2hzcGluLm9uLm1heCcpO1xyXG4gICAgICAgICAgc3RvcFNwaW4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsZW1lbnRzLmlucHV0LnZhbChOdW1iZXIodmFsdWUpLnRvRml4ZWQoc2V0dGluZ3MuZGVjaW1hbHMpKTtcclxuXHJcbiAgICAgICAgaWYgKGluaXR2YWx1ZSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgIG9yaWdpbmFsaW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBkb3duT25jZSgpIHtcclxuICAgICAgICBfY2hlY2tWYWx1ZSgpO1xyXG5cclxuICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQoZWxlbWVudHMuaW5wdXQudmFsKCkpO1xyXG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcclxuICAgICAgICAgIHZhbHVlID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpbml0dmFsdWUgPSB2YWx1ZSxcclxuICAgICAgICAgICAgYm9vc3RlZHN0ZXAgPSBfZ2V0Qm9vc3RlZFN0ZXAoKTtcclxuXHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAtIGJvb3N0ZWRzdGVwO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgPCBzZXR0aW5ncy5taW4pIHtcclxuICAgICAgICAgIHZhbHVlID0gc2V0dGluZ3MubWluO1xyXG4gICAgICAgICAgb3JpZ2luYWxpbnB1dC50cmlnZ2VyKCd0b3VjaHNwaW4ub24ubWluJyk7XHJcbiAgICAgICAgICBzdG9wU3BpbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWxlbWVudHMuaW5wdXQudmFsKHZhbHVlLnRvRml4ZWQoc2V0dGluZ3MuZGVjaW1hbHMpKTtcclxuXHJcbiAgICAgICAgaWYgKGluaXR2YWx1ZSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgIG9yaWdpbmFsaW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBzdGFydERvd25TcGluKCkge1xyXG4gICAgICAgIHN0b3BTcGluKCk7XHJcblxyXG4gICAgICAgIHNwaW5jb3VudCA9IDA7XHJcbiAgICAgICAgc3Bpbm5pbmcgPSAnZG93bic7XHJcblxyXG4gICAgICAgIG9yaWdpbmFsaW5wdXQudHJpZ2dlcigndG91Y2hzcGluLm9uLnN0YXJ0c3BpbicpO1xyXG4gICAgICAgIG9yaWdpbmFsaW5wdXQudHJpZ2dlcigndG91Y2hzcGluLm9uLnN0YXJ0ZG93bnNwaW4nKTtcclxuXHJcbiAgICAgICAgZG93bkRlbGF5VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBkb3duU3BpblRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNwaW5jb3VudCsrO1xyXG4gICAgICAgICAgICBkb3duT25jZSgpO1xyXG4gICAgICAgICAgfSwgc2V0dGluZ3Muc3RlcGludGVydmFsKTtcclxuICAgICAgICB9LCBzZXR0aW5ncy5zdGVwaW50ZXJ2YWxkZWxheSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHN0YXJ0VXBTcGluKCkge1xyXG4gICAgICAgIHN0b3BTcGluKCk7XHJcblxyXG4gICAgICAgIHNwaW5jb3VudCA9IDA7XHJcbiAgICAgICAgc3Bpbm5pbmcgPSAndXAnO1xyXG5cclxuICAgICAgICBvcmlnaW5hbGlucHV0LnRyaWdnZXIoJ3RvdWNoc3Bpbi5vbi5zdGFydHNwaW4nKTtcclxuICAgICAgICBvcmlnaW5hbGlucHV0LnRyaWdnZXIoJ3RvdWNoc3Bpbi5vbi5zdGFydHVwc3BpbicpO1xyXG5cclxuICAgICAgICB1cERlbGF5VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB1cFNwaW5UaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzcGluY291bnQrKztcclxuICAgICAgICAgICAgdXBPbmNlKCk7XHJcbiAgICAgICAgICB9LCBzZXR0aW5ncy5zdGVwaW50ZXJ2YWwpO1xyXG4gICAgICAgIH0sIHNldHRpbmdzLnN0ZXBpbnRlcnZhbGRlbGF5KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gc3RvcFNwaW4oKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRvd25EZWxheVRpbWVvdXQpO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh1cERlbGF5VGltZW91dCk7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChkb3duU3BpblRpbWVyKTtcclxuICAgICAgICBjbGVhckludGVydmFsKHVwU3BpblRpbWVyKTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChzcGlubmluZykge1xyXG4gICAgICAgICAgY2FzZSAndXAnOlxyXG4gICAgICAgICAgICBvcmlnaW5hbGlucHV0LnRyaWdnZXIoJ3RvdWNoc3Bpbi5vbi5zdG9wdXBzcGluJyk7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsaW5wdXQudHJpZ2dlcigndG91Y2hzcGluLm9uLnN0b3BzcGluJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnZG93bic6XHJcbiAgICAgICAgICAgIG9yaWdpbmFsaW5wdXQudHJpZ2dlcigndG91Y2hzcGluLm9uLnN0b3Bkb3duc3BpbicpO1xyXG4gICAgICAgICAgICBvcmlnaW5hbGlucHV0LnRyaWdnZXIoJ3RvdWNoc3Bpbi5vbi5zdG9wc3BpbicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNwaW5jb3VudCA9IDA7XHJcbiAgICAgICAgc3Bpbm5pbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuICB9O1xyXG5cclxufSkoalF1ZXJ5KTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2xpYnJhcmllcy9ib290c3RyYXAtdG91Y2hzcGluL2pxdWVyeS5ib290c3RyYXAtdG91Y2hzcGluLmpzXG4gKiogbW9kdWxlIGlkID0gMTU2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHJsLWdlbmVyaWMtY29udGFpbmVyIHNlbGVjdG9yPVxcXCJzcGlubmVyLm5nRGlzYWJsZWRcXFwiPlxcclxcblxcdDx0ZW1wbGF0ZSBkZWZhdWx0PlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcInZhbGlkYXRpb24taW5wdXQtZ3JvdXBcXFwiPlxcclxcblxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcInZhbGlkYXRpb24taW5wdXRcXFwiIG5nLWNsYXNzPVxcXCJ7ICdlcnJvcic6IHNwaW5uZXIubmdNb2RlbC4kaW52YWxpZCwgJ3JlcXVpcmVkLWVycm9yJzogc3Bpbm5lci5uZ01vZGVsLiRlcnJvci5yZXF1aXJlZCB9XFxcIj5cXHJcXG5cXHRcXHRcXHRcXHQ8aW5wdXQgbmFtZT1cXFwie3tzcGlubmVyLm5hbWV9fVxcXCIgY2xhc3M9XFxcInNwaW5uZXJcXFwiIGlkPVxcXCJ7e3NwaW5uZXIuc3Bpbm5lcklkfX1cXFwiIHR5cGU9XFxcInRleHRcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJlcnJvci1zdHJpbmdcXFwiIG5nLWhpZGU9XFxcInNwaW5uZXIuc3Bpbm5lclZhbGlkYXRvci5lcnJvciB8IGlzRW1wdHlcXFwiPnt7c3Bpbm5lci5zcGlubmVyVmFsaWRhdG9yLmVycm9yfX08L3NwYW4+XFxyXFxuXFx0XFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0PC9kaXY+XFxyXFxuXFx0PC90ZW1wbGF0ZT5cXHJcXG5cXHQ8dGVtcGxhdGUgd2hlbi1zZWxlY3Rvcj1cXFwidHJ1ZVxcXCI+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiIG5nLXNob3c9XFxcInNwaW5uZXIucHJlZml4ICE9IG51bGwgJiYgc3Bpbm5lci5wb3N0Zml4ICE9IG51bGxcXFwiPlxcclxcblxcdFxcdFxcdDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1hZGRvblxcXCI+e3tzcGlubmVyLnByZWZpeH19PC9zcGFuPlxcclxcblxcdFxcdFxcdDxpbnB1dCBkaXNhYmxlZD1cXFwidHJ1ZVxcXCIgdHlwZT1cXFwidGV4dFxcXCIgbmctbW9kZWw9XFxcInNwaW5uZXIubmdNb2RlbC4kdmlld1ZhbHVlXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiAvPlxcclxcblxcdFxcdFxcdDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1hZGRvblxcXCI+e3tzcGlubmVyLnBvc3RmaXh9fTwvc3Bhbj5cXHJcXG5cXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHQ8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCIgbmctc2hvdz1cXFwic3Bpbm5lci5wcmVmaXggIT0gbnVsbCAmJiBzcGlubmVyLnBvc3RmaXggPT0gbnVsbFxcXCI+XFxyXFxuXFx0XFx0XFx0PHNwYW4gY2xhc3M9XFxcImlucHV0LWdyb3VwLWFkZG9uXFxcIj57e3NwaW5uZXIucHJlZml4fX08L3NwYW4+XFxyXFxuXFx0XFx0XFx0PGlucHV0IGRpc2FibGVkPVxcXCJ0cnVlXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuZy1tb2RlbD1cXFwic3Bpbm5lci5uZ01vZGVsLiR2aWV3VmFsdWVcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIC8+XFxyXFxuXFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiIG5nLXNob3c9XFxcInNwaW5uZXIucHJlZml4ID09IG51bGwgJiYgc3Bpbm5lci5wb3N0Zml4ICE9IG51bGxcXFwiPlxcclxcblxcdFxcdFxcdDxpbnB1dCBkaXNhYmxlZD1cXFwidHJ1ZVxcXCIgdHlwZT1cXFwidGV4dFxcXCIgbmctbW9kZWw9XFxcInNwaW5uZXIubmdNb2RlbC4kdmlld1ZhbHVlXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiAvPlxcclxcblxcdFxcdFxcdDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1hZGRvblxcXCI+e3tzcGlubmVyLnBvc3RmaXh9fTwvc3Bhbj5cXHJcXG5cXHRcXHQ8L2Rpdj5cXHJcXG5cXHRcXHQ8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCIgbmctc2hvdz1cXFwic3Bpbm5lci5wcmVmaXggPT0gbnVsbCAmJiBzcGlubmVyLnBvc3RmaXggPT0gbnVsbFxcXCI+XFxyXFxuXFx0XFx0XFx0PGlucHV0IGRpc2FibGVkPVxcXCJ0cnVlXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuZy1tb2RlbD1cXFwic3Bpbm5lci5uZ01vZGVsLiR2aWV3VmFsdWVcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIC8+XFxyXFxuXFx0XFx0PC9kaXY+XFxyXFxuXFx0PC90ZW1wbGF0ZT5cXHJcXG48L3JsLWdlbmVyaWMtY29udGFpbmVyPlwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3NwaW5uZXIvc3Bpbm5lci5odG1sXG4gKiogbW9kdWxlIGlkID0gMTU3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xID0gcmVxdWlyZSgndHlwZXNjcmlwdC1hbmd1bGFyLXV0aWxpdGllcycpO1xyXG52YXIgX19vYmplY3QgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JqZWN0O1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy5zdHJpbmdXaXRoV2F0ZXJtYXJrJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsU3RyaW5nV2l0aFdhdGVybWFyayc7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnU3RyaW5nV2l0aFdhdGVybWFya0NvbnRyb2xsZXInO1xyXG52YXIgU3RyaW5nV2l0aFdhdGVybWFya0NvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3RyaW5nV2l0aFdhdGVybWFya0NvbnRyb2xsZXIoJHNjb3BlLCBvYmplY3RVdGlsaXR5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnN0cmluZzsgfSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmhhc1N0cmluZyA9IG9iamVjdFV0aWxpdHkuaXNOdWxsT3JFbXB0eSh2YWx1ZSkgPT09IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgU3RyaW5nV2l0aFdhdGVybWFya0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgX19vYmplY3Quc2VydmljZU5hbWVdO1xyXG4gICAgcmV0dXJuIFN0cmluZ1dpdGhXYXRlcm1hcmtDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLlN0cmluZ1dpdGhXYXRlcm1hcmtDb250cm9sbGVyID0gU3RyaW5nV2l0aFdhdGVybWFya0NvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIHN0cmluZ1dpdGhXYXRlcm1hcmsoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiXFxuXFx0XFx0XFx0PHNwYW4+XFxuXFx0XFx0XFx0XFx0PHNwYW4gbmctc2hvdz1cXFwiY29udHJvbGxlci5oYXNTdHJpbmdcXFwiPnt7Y29udHJvbGxlci5zdHJpbmd9fTwvc3Bhbj5cXG5cXHRcXHRcXHRcXHQ8c3BhbiBuZy1oaWRlPVxcXCJjb250cm9sbGVyLmhhc1N0cmluZ1xcXCIgY2xhc3M9XFxcIndhdGVybWFya1xcXCI+e3tjb250cm9sbGVyLndhdGVybWFya319PC9zcGFuPlxcblxcdFxcdFxcdDwvc3Bhbj5cXG5cXHRcXHRcIixcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2NvbnRyb2xsZXInLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIHN0cmluZzogJ0AnLFxyXG4gICAgICAgICAgICB3YXRlcm1hcms6ICdAJyxcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuc3RyaW5nV2l0aFdhdGVybWFyayA9IHN0cmluZ1dpdGhXYXRlcm1hcms7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fb2JqZWN0Lm1vZHVsZU5hbWVdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIHN0cmluZ1dpdGhXYXRlcm1hcmspXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBTdHJpbmdXaXRoV2F0ZXJtYXJrQ29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ1dpdGhXYXRlcm1hcmsuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3N0cmluZ1dpdGhXYXRlcm1hcmsvc3RyaW5nV2l0aFdhdGVybWFyay5qc1xuICoqIG1vZHVsZSBpZCA9IDE1OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHRhYl8xID0gcmVxdWlyZSgnLi90YWInKTtcclxuZXhwb3J0cy50YWJEaXJlY3RpdmVOYW1lID0gdGFiXzEuZGlyZWN0aXZlTmFtZTtcclxuZXhwb3J0cy50YWIgPSB0YWJfMS50YWI7XHJcbmV4cG9ydHMudGFiQ29udHJvbGxlck5hbWUgPSB0YWJfMS5jb250cm9sbGVyTmFtZTtcclxuZXhwb3J0cy5UYWJDb250cm9sbGVyID0gdGFiXzEuVGFiQ29udHJvbGxlcjtcclxudmFyIHRhYnNldF8xID0gcmVxdWlyZSgnLi90YWJzZXQnKTtcclxuZXhwb3J0cy50YWJzZXREaXJlY3RpdmVOYW1lID0gdGFic2V0XzEuZGlyZWN0aXZlTmFtZTtcclxuZXhwb3J0cy50YWJzZXQgPSB0YWJzZXRfMS50YWJzZXQ7XHJcbmV4cG9ydHMudGFic2V0Q29udHJvbGxlck5hbWUgPSB0YWJzZXRfMS5jb250cm9sbGVyTmFtZTtcclxuZXhwb3J0cy5UYWJzZXRDb250cm9sbGVyID0gdGFic2V0XzEuVGFic2V0Q29udHJvbGxlcjtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMudGFicyc7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW10pXHJcbiAgICAuZGlyZWN0aXZlKHRhYl8xLmRpcmVjdGl2ZU5hbWUsIHRhYl8xLnRhYilcclxuICAgIC5jb250cm9sbGVyKHRhYl8xLmNvbnRyb2xsZXJOYW1lLCB0YWJfMS5UYWJDb250cm9sbGVyKVxyXG4gICAgLmRpcmVjdGl2ZSh0YWJzZXRfMS5kaXJlY3RpdmVOYW1lLCB0YWJzZXRfMS50YWJzZXQpXHJcbiAgICAuY29udHJvbGxlcih0YWJzZXRfMS5jb250cm9sbGVyTmFtZSwgdGFic2V0XzEuVGFic2V0Q29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhYnMubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy90YWJzL3RhYnMubW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gMTU5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsVGFiJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdybFRhYkNvbnRyb2xsZXInO1xyXG52YXIgVGFiQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUYWJDb250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgndGFiRm9ybS4kdmFsaWQnLCBmdW5jdGlvbiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICBfdGhpcy5oZWFkZXIuaXNWYWxpZCA9IGlzVmFsaWQgIT0gbnVsbCA/IGlzVmFsaWQgOiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgVGFiQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuICAgIHJldHVybiBUYWJDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLlRhYkNvbnRyb2xsZXIgPSBUYWJDb250cm9sbGVyO1xyXG5mdW5jdGlvbiB0YWIoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuICAgICAgICByZXF1aXJlOiBbJ15ecmxUYWJzZXQnLCAncmxUYWInXSxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi90YWIuaHRtbCcpLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndGFiJyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGUpIHtcclxuICAgICAgICAgICAgdHJhbnNjbHVkZShmdW5jdGlvbiAoY2xvbmUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXIgPSBjbG9uZS5maWx0ZXIoJ3JsLXRhYi1oZWFkZXInKTtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gY2xvbmUuZmlsdGVyKCdybC10YWItY29udGVudCcpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvb3RlciA9IGNsb25lLmZpbHRlcigncmwtdGFiLWZvb3RlcicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhYnNldCA9IGNvbnRyb2xsZXJzWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhYiA9IGNvbnRyb2xsZXJzWzFdO1xyXG4gICAgICAgICAgICAgICAgdGFiLmhlYWRlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogaGVhZGVyLmh0bWwoKSxcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRhYnNldC5yZWdpc3RlclRhYihlbGVtZW50LCB0YWIuaGVhZGVyKTtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50QXJlYSA9IGVsZW1lbnQuZmluZCgnLmNvbnRlbnQtdGVtcGxhdGUnKTtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRBcmVhLmFwcGVuZChjb250ZW50KTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLmhhc0Zvb3RlciA9IChmb290ZXIubGVuZ3RoID4gMCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuaGFzRm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvb3RlckFyZWEgPSBlbGVtZW50LmZpbmQoJy5mb290ZXItdGVtcGxhdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBmb290ZXJBcmVhLmFwcGVuZChmb290ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnRhYiA9IHRhYjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFiLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy90YWJzL3RhYi5qc1xuICoqIG1vZHVsZSBpZCA9IDE2MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInRhYi1wYW5lXFxcIiBuZy1jbGFzcz1cXFwieyAnYWN0aXZlJzogdGFiLmhlYWRlci5pc1Zpc2libGUgfVxcXCI+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwidGFiLWJvZHlcXFwiPlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcImNvbnRlbnQtdGVtcGxhdGVcXFwiIG5nLWZvcm09XFxcInRhYkZvcm1cXFwiPjwvZGl2PlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG5cXHQ8L2Rpdj5cXHJcXG5cXHQ8ZGl2IGNsYXNzPVxcXCJ0YWItZm9vdGVyXFxcIiBuZy1zaG93PVxcXCJoYXNGb290ZXJcXFwiPlxcclxcblxcdFxcdDxkaXYgY2xhc3M9XFxcImZvb3Rlci10ZW1wbGF0ZVxcXCI+PC9kaXY+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcblxcdDwvZGl2PlxcclxcbjwvZGl2PlwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3RhYnMvdGFiLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSAxNjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3MvY29tbW9uanMuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxUYWJzZXQnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ3JsVGFic2V0Q29udHJvbGxlcic7XHJcbnZhciBUYWJzZXRDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRhYnNldENvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdGhpcy50YWJIZWFkZXJzID0gW107XHJcbiAgICB9XHJcbiAgICBUYWJzZXRDb250cm9sbGVyLnByb3RvdHlwZS5yZWdpc3RlclRhYiA9IGZ1bmN0aW9uIChlbGVtZW50LCBoZWFkZXIpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmZpbmRQb3NpdGlvbihlbGVtZW50KTtcclxuICAgICAgICB0aGlzLnRhYkhlYWRlcnNbaW5kZXhdID0gaGVhZGVyO1xyXG4gICAgICAgIGhlYWRlci5pc1Zpc2libGUgPSAoaW5kZXggPT09IDApO1xyXG4gICAgfTtcclxuICAgIFRhYnNldENvbnRyb2xsZXIucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uICh0YWIpIHtcclxuICAgICAgICBfLmVhY2godGhpcy50YWJIZWFkZXJzLCBmdW5jdGlvbiAob3RoZXJUYWIpIHtcclxuICAgICAgICAgICAgb3RoZXJUYWIuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGFiLmlzVmlzaWJsZSA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRhYnNldENvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuVGFic2V0Q29udHJvbGxlciA9IFRhYnNldENvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIHRhYnNldCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3RhYnNldC5odG1sJyksXHJcbiAgICAgICAgY29udHJvbGxlcjogZXhwb3J0cy5jb250cm9sbGVyTmFtZSxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd0YWJzZXQnLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBsaW5rOiB7XHJcbiAgICAgICAgICAgIHByZTogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgdGFic2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0YWJzZXQuZmluZFBvc2l0aW9uID0gZnVuY3Rpb24gKHRhYkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBwb3NpdGlvbiBvZiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQgYnkgaXRlcmF0aW5nIG92ZXIgdGhlIHRhYnMgYW5kIGZpbmRpbmcgYSBtYXRjaGluZyBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYnMgPSBlbGVtZW50LmZpbmQoJ3JsLXRhYicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBudW07XHJcbiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKHRhYnMsIGZ1bmN0aW9uIChlbGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiRWxlbWVudFswXSA9PT0gZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnRhYnNldCA9IHRhYnNldDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFic2V0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy90YWJzL3RhYnNldC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcIm5hdi10YWJzLWRyb3BzaGFkb3dcXFwiPlxcclxcblxcdDx1bCBjbGFzcz1cXFwibmF2IG5hdi10YWJzXFxcIj5cXHJcXG5cXHRcXHQ8bGkgbmctcmVwZWF0PVxcXCJ0YWJIZWFkZXIgaW4gdGFic2V0LnRhYkhlYWRlcnNcXFwiIG5nLWNsaWNrPVxcXCJ0YWJzZXQuc2VsZWN0KHRhYkhlYWRlcilcXFwiXFxyXFxuXFx0XFx0XFx0bmctY2xhc3M9XFxcInsgJ2FjdGl2ZSc6IHRhYkhlYWRlci5pc1Zpc2libGUsICdlcnJvcic6ICF0YWJIZWFkZXIuaXNWYWxpZCB9XFxcIj5cXHJcXG5cXHRcXHRcXHQ8YT48c3BhbiBuZy1iaW5kLWh0bWw9XFxcInRhYkhlYWRlci50ZW1wbGF0ZVxcXCI+PC9zcGFuPjwvYT5cXHJcXG5cXHRcXHQ8L2xpPlxcclxcblxcdDwvdWw+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwidGFiLWNvbnRlbnRcXFwiPlxcclxcblxcdFxcdDxkaXYgbmctdHJhbnNjbHVkZT48L2Rpdj5cXHJcXG5cXHQ8L2Rpdj5cXHJcXG48L2Rpdj5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy90YWJzL3RhYnNldC5odG1sXG4gKiogbW9kdWxlIGlkID0gMTYzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL2NvbW1vbmpzLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBjb21wb25lbnRWYWxpZGF0b3Jfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvY29tcG9uZW50VmFsaWRhdG9yL2NvbXBvbmVudFZhbGlkYXRvci5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5jb21wb25lbnRzLnRleHRhcmVhJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsVGV4dGFyZWEnO1xyXG5leHBvcnRzLmNvbnRyb2xsZXJOYW1lID0gJ1RleHRhcmVhQ29udHJvbGxlcic7XHJcbnZhciBUZXh0YXJlYUNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGV4dGFyZWFDb250cm9sbGVyKCRlbGVtZW50LCAkc2NvcGUsIGNvbXBvbmVudFZhbGlkYXRvckZhY3RvcnkpIHtcclxuICAgICAgICB0aGlzLm5nTW9kZWwgPSAkZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XHJcbiAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHRoaXMudmFsaWRhdG9yKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRleHRhcmVhVmFsaWRhdG9yID0gY29tcG9uZW50VmFsaWRhdG9yRmFjdG9yeS5nZXRJbnN0YW5jZSh7XHJcbiAgICAgICAgICAgICAgICBuZ01vZGVsOiB0aGlzLm5nTW9kZWwsXHJcbiAgICAgICAgICAgICAgICAkc2NvcGU6ICRzY29wZSxcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IFt0aGlzLnZhbGlkYXRvcl0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZXh0YXJlYUNvbnRyb2xsZXIucHJvdG90eXBlLCBcInRleHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZ01vZGVsLiR2aWV3VmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm5nTW9kZWwuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBUZXh0YXJlYUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgY29tcG9uZW50VmFsaWRhdG9yX3NlcnZpY2VfMS5mYWN0b3J5TmFtZV07XHJcbiAgICByZXR1cm4gVGV4dGFyZWFDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLlRleHRhcmVhQ29udHJvbGxlciA9IFRleHRhcmVhQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gdGV4dGFyZWEoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3RleHRhcmVhLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3RleHRhcmVhJyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBuYW1lOiAnQCcsXHJcbiAgICAgICAgICAgIHJvd3M6ICc9JyxcclxuICAgICAgICAgICAgbmdEaXNhYmxlZDogJz0nLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0AnLFxyXG4gICAgICAgICAgICB2YWxpZGF0b3I6ICc9JyxcclxuICAgICAgICAgICAgbWF4bGVuZ3RoOiAnPScsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy50ZXh0YXJlYSA9IHRleHRhcmVhO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtjb21wb25lbnRWYWxpZGF0b3Jfc2VydmljZV8xLm1vZHVsZU5hbWVdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIHRleHRhcmVhKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgVGV4dGFyZWFDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dGFyZWEuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3RleHRhcmVhL3RleHRhcmVhLmpzXG4gKiogbW9kdWxlIGlkID0gMTY0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwidmFsaWRhdGlvbi1pbnB1dC1ncm91cFxcXCI+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwiZmllbGQgdmFsaWRhdGlvbi1pbnB1dFxcXCIgbmctY2xhc3M9XFxcInsgJ2Vycm9yJzogdGV4dGFyZWEubmdNb2RlbC4kaW52YWxpZCwgJ3JlcXVpcmVkLWVycm9yJzogdGV4dGFyZWEubmdNb2RlbC4kZXJyb3IucmVxdWlyZWQgfVxcXCI+XFxyXFxuXFx0XFx0PGxhYmVsIG5nLXNob3c9XFxcInRleHRhcmVhLnRleHQgJiYgdGV4dGFyZWEubGFiZWxcXFwiIGNsYXNzPVxcXCJzaG93LWhpZGUgYW5ndWxhci1hbmltYXRlXFxcIj57e3RleHRhcmVhLmxhYmVsfX08L2xhYmVsPlxcclxcblxcdFxcdDx0ZXh0YXJlYSBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBuZy1tb2RlbD1cXFwidGV4dGFyZWEudGV4dFxcXCIgbmFtZT1cXFwie3t0ZXh0YXJlYS5uYW1lfX1cXFwiIHJvd3M9XFxcInt7dGV4dGFyZWEucm93c319XFxcIiBtYXhsZW5ndGg9XFxcInt7dGV4dGFyZWEubWF4bGVuZ3RofX1cXFwiIG5nLWRpc2FibGVkPVxcXCJ0ZXh0YXJlYS5uZ0Rpc2FibGVkXFxcIiBwbGFjZWhvbGRlcj1cXFwie3t0ZXh0YXJlYS5sYWJlbH19XFxcIj48L3RleHRhcmVhPlxcclxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImVycm9yLXN0cmluZ1xcXCIgbmctaGlkZT1cXFwidGV4dGFyZWEudGV4dGFyZWFWYWxpZGF0b3IuZXJyb3IgfCBpc0VtcHR5XFxcIj57e3RleHRhcmVhLnRleHRhcmVhVmFsaWRhdG9yLmVycm9yfX08L3NwYW4+XFxyXFxuXFx0PC9kaXY+XFxyXFxuPC9kaXY+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvdGV4dGFyZWEvdGV4dGFyZWEuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDE2NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vLi4vLi4vdHlwaW5ncy9jb21tb25qcy5kLnRzJyAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgY29tcG9uZW50VmFsaWRhdG9yX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2NvbXBvbmVudFZhbGlkYXRvci9jb21wb25lbnRWYWxpZGF0b3Iuc2VydmljZScpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuY29tcG9uZW50cy50ZXh0Ym94JztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsVGV4dGJveCc7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnVGV4dGJveENvbnRyb2xsZXInO1xyXG52YXIgVGV4dGJveENvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGV4dGJveENvbnRyb2xsZXIoJGVsZW1lbnQsICRzY29wZSwgY29tcG9uZW50VmFsaWRhdG9yRmFjdG9yeSkge1xyXG4gICAgICAgIHRoaXMubmdNb2RlbCA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcclxuICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQodGhpcy52YWxpZGF0b3IpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dGJveFZhbGlkYXRvciA9IGNvbXBvbmVudFZhbGlkYXRvckZhY3RvcnkuZ2V0SW5zdGFuY2Uoe1xyXG4gICAgICAgICAgICAgICAgbmdNb2RlbDogdGhpcy5uZ01vZGVsLFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlOiAkc2NvcGUsXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiBbdGhpcy52YWxpZGF0b3JdLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGV4dGJveENvbnRyb2xsZXIucHJvdG90eXBlLCBcInRleHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZ01vZGVsLiR2aWV3VmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm5nTW9kZWwuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBUZXh0Ym94Q29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCcsICckc2NvcGUnLCBjb21wb25lbnRWYWxpZGF0b3Jfc2VydmljZV8xLmZhY3RvcnlOYW1lXTtcclxuICAgIHJldHVybiBUZXh0Ym94Q29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5UZXh0Ym94Q29udHJvbGxlciA9IFRleHRib3hDb250cm9sbGVyO1xyXG5mdW5jdGlvbiB0ZXh0Ym94KCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi90ZXh0Ym94Lmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3RleHRib3gnLFxyXG4gICAgICAgIHNjb3BlOiB7fSxcclxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvcjogJz0nLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0AnLFxyXG4gICAgICAgICAgICBtYXhsZW5ndGg6ICc9JyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnRleHRib3ggPSB0ZXh0Ym94O1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtjb21wb25lbnRWYWxpZGF0b3Jfc2VydmljZV8xLm1vZHVsZU5hbWVdKVxyXG4gICAgLmRpcmVjdGl2ZShleHBvcnRzLmRpcmVjdGl2ZU5hbWUsIHRleHRib3gpXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBUZXh0Ym94Q29udHJvbGxlcik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHRib3guanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9jb21wb25lbnRzL3RleHRib3gvdGV4dGJveC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInZhbGlkYXRpb24taW5wdXQtZ3JvdXBcXFwiPlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImZpZWxkIHZhbGlkYXRpb24taW5wdXRcXFwiIG5nLWNsYXNzPVxcXCJ7ICdlcnJvcic6IHRleHRib3gubmdNb2RlbC4kaW52YWxpZCwgJ3JlcXVpcmVkLWVycm9yJzogdGV4dGJveC5uZ01vZGVsLiRlcnJvci5yZXF1aXJlZCB9XFxcIj5cXHJcXG5cXHRcXHQ8bGFiZWwgbmctc2hvdz1cXFwidGV4dGJveC50ZXh0ICYmIHRleHRib3gubGFiZWxcXFwiIGNsYXNzPVxcXCJzaG93LWhpZGUgYW5ndWxhci1hbmltYXRlXFxcIj57e3RleHRib3gubGFiZWx9fTwvbGFiZWw+XFxyXFxuXFx0XFx0PGlucHV0ICB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIGFuZ3VsYXItYW5pbWF0ZVxcXCIgbmctbW9kZWw9XFxcInRleHRib3gudGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcInt7dGV4dGJveC5sYWJlbH19XFxcIiBtYXhsZW5ndGg9XFxcInt7dGV4dGJveC5tYXhsZW5ndGh9fVxcXCIgLz5cXHJcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJlcnJvci1zdHJpbmdcXFwiIG5nLWhpZGU9XFxcInRleHRib3gudGV4dGJveFZhbGlkYXRvci5lcnJvciB8IGlzRW1wdHlcXFwiPnt7dGV4dGJveC50ZXh0Ym94VmFsaWRhdG9yLmVycm9yfX08L3NwYW4+XFxyXFxuXFx0PC9kaXY+XFxyXFxuPC9kaXY+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL2NvbXBvbmVudHMvdGV4dGJveC90ZXh0Ym94Lmh0bWxcbiAqKiBtb2R1bGUgaWQgPSAxNjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX3BhcmVudENoaWxkID0gdHlwZXNjcmlwdF9hbmd1bGFyX3V0aWxpdGllc18xLnNlcnZpY2VzLnBhcmVudENoaWxkQmVoYXZpb3I7XHJcbnZhciBfX2dlbmVyaWNTZWFyY2ggPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMuZ2VuZXJpY1NlYXJjaEZpbHRlcjtcclxudmFyIF9fb2JqZWN0VXRpbGl0eSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYmplY3Q7XHJcbnZhciBfX2FycmF5VXRpbGl0eSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5hcnJheTtcclxudmFyIF9fcHJvbWlzZVV0aWxpdHkgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMucHJvbWlzZTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMudHlwZWFoZWFkJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsVHlwZWFoZWFkJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdUeXBlYWhlYWRDb250cm9sbGVyJztcclxudmFyIFR5cGVhaGVhZENvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVHlwZWFoZWFkQ29udHJvbGxlcigkc2NvcGUsICRhdHRycywgJHEsIHBhcmVudENoaWxkLCBnZW5lcmljU2VhcmNoRmFjdG9yeSwgb2JqZWN0LCBhcnJheSwgcHJvbWlzZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgdGhpcy4kcSA9ICRxO1xyXG4gICAgICAgIHRoaXMucGFyZW50Q2hpbGQgPSBwYXJlbnRDaGlsZDtcclxuICAgICAgICB0aGlzLmFycmF5ID0gYXJyYXk7XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmFkZEl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuY2FjaGVkSXRlbXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2FjaGVkSXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5yZW1vdmVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmNhY2hlZEl0ZW1zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmFycmF5LnJlbW92ZShfdGhpcy5jYWNoZWRJdGVtcywgaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2VhcmNoRmlsdGVyID0gZ2VuZXJpY1NlYXJjaEZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICB0aGlzLmxvYWREZWxheSA9IHRoaXMudXNlQ2xpZW50U2VhcmNoaW5nID8gMTAwIDogNTAwO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb25CaW5kaW5nO1xyXG4gICAgICAgIGlmICh0aGlzLmhhc1NlbGVjdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzU2VsZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9ICdTZWFyY2gnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zaG93U2VhcmNoID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93U2VhcmNoID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51c2VTY29wZVNlbGVjdGlvbiA9IG9iamVjdC5pc051bGxPckVtcHR5KCRhdHRycy5zZWxlY3Rpb24pID09PSBmYWxzZTtcclxuICAgICAgICB0aGlzLmhhc1RyYW5zZm9ybSA9IG9iamVjdC5pc051bGxPckVtcHR5KCRhdHRycy50cmFuc2Zvcm0pID09PSBmYWxzZTtcclxuICAgICAgICB0aGlzLnVzZUFwcGx5ID0gb2JqZWN0LmlzTnVsbE9yRW1wdHkoJGF0dHJzLmFwcGx5KSA9PT0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDaGlsZC5yZWdpc3RlckNoaWxkQmVoYXZpb3IodGhpcy5jaGlsZExpbmssIHtcclxuICAgICAgICAgICAgYWRkOiB0aGlzLmFkZEl0ZW0sXHJcbiAgICAgICAgICAgIHJlbW92ZTogdGhpcy5yZW1vdmVJdGVtLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0aW9uOyB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgX3RoaXMuaGFzU2VsZWN0aW9uID0gXy5pc09iamVjdCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIF90aGlzLnNldFNlbGVjdGlvbih2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZWxlY3Rpb25CaW5kaW5nOyB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFR5cGVhaGVhZENvbnRyb2xsZXIucHJvdG90eXBlLnNldFNlbGVjdGlvbiA9IGZ1bmN0aW9uIChvYmplY3QpIHtcclxuICAgICAgICBpZiAodGhpcy51c2VTY29wZVNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IG9iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0aGlzLnNlbGVjdCkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3QoeyB2YWx1ZTogb2JqZWN0LCBoYXNTZWxlY3Rpb246IHRoaXMuaGFzU2VsZWN0aW9uIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBUeXBlYWhlYWRDb250cm9sbGVyLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzVHJhbnNmb3JtICYmIG9iamVjdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybUluUGFyZW50KHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBvYmplY3QsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgfTtcclxuICAgIFR5cGVhaGVhZENvbnRyb2xsZXIucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24gKHNlYXJjaCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnVzZUNsaWVudFNlYXJjaGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRJdGVtc0luUGFyZW50KHtcclxuICAgICAgICAgICAgICAgIHNlYXJjaDogc2VhcmNoLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoRmlsdGVyLnNlYXJjaFRleHQgPSBzZWFyY2g7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlZEl0ZW1zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRxLndoZW4odGhpcy5maWx0ZXIodGhpcy5jYWNoZWRJdGVtcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHEud2hlbih0aGlzLmdldEl0ZW1zSW5QYXJlbnQoKSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNhY2hlZEl0ZW1zID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZmlsdGVyKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVHlwZWFoZWFkQ29udHJvbGxlci5wcm90b3R5cGUuYXBwbHlJdGVtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlQXBwbHkgJiYgdGhpcy5oYXNTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSB0aGlzLmFwcGx5KHsgdmFsdWU6IHRoaXMuc2VsZWN0aW9uIH0pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9taXNlLmlzUHJvbWlzZShyZXF1ZXN0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlSXRlbShfdGhpcy5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghXy5pc1VuZGVmaW5lZChyZXF1ZXN0KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKHRoaXMuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy4kcS53aGVuKCk7XHJcbiAgICB9O1xyXG4gICAgVHlwZWFoZWFkQ29udHJvbGxlci5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfLmZpbHRlcihsaXN0LCBmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gX3RoaXMuc2VhcmNoRmlsdGVyLmZpbHRlcihpdGVtKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgVHlwZWFoZWFkQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLFxyXG4gICAgICAgICckYXR0cnMnLFxyXG4gICAgICAgICckcScsXHJcbiAgICAgICAgX19wYXJlbnRDaGlsZC5zZXJ2aWNlTmFtZSxcclxuICAgICAgICBfX2dlbmVyaWNTZWFyY2guZmFjdG9yeU5hbWUsXHJcbiAgICAgICAgX19vYmplY3RVdGlsaXR5LnNlcnZpY2VOYW1lLFxyXG4gICAgICAgIF9fYXJyYXlVdGlsaXR5LnNlcnZpY2VOYW1lLFxyXG4gICAgICAgIF9fcHJvbWlzZVV0aWxpdHkuc2VydmljZU5hbWVdO1xyXG4gICAgcmV0dXJuIFR5cGVhaGVhZENvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuVHlwZWFoZWFkQ29udHJvbGxlciA9IFR5cGVhaGVhZENvbnRyb2xsZXI7XHJcbmZ1bmN0aW9uIHR5cGVhaGVhZCgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi90eXBlYWhlYWQuaHRtbCcpLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndHlwZWFoZWFkJyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICBjaGlsZExpbms6ICc9PycsXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbkJpbmRpbmc6ICc9P3NlbGVjdGlvbicsXHJcbiAgICAgICAgICAgIGhhc1NlbGVjdGlvbjogJz0/JyxcclxuICAgICAgICAgICAgc2VsZWN0OiAnJicsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybUluUGFyZW50OiAnJnRyYW5zZm9ybScsXHJcbiAgICAgICAgICAgIGdldEl0ZW1zSW5QYXJlbnQ6ICcmZ2V0SXRlbXMnLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0AnLFxyXG4gICAgICAgICAgICB1c2VDbGllbnRTZWFyY2hpbmc6ICc9PycsXHJcbiAgICAgICAgICAgIGhhc0Vycm9yOiAnPT8nLFxyXG4gICAgICAgICAgICBzaG93U2VhcmNoOiAnPT8nLFxyXG4gICAgICAgICAgICBhcHBseTogJyYnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMudHlwZWFoZWFkID0gdHlwZWFoZWFkO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtcclxuICAgIF9fcGFyZW50Q2hpbGQubW9kdWxlTmFtZSxcclxuICAgIF9fZ2VuZXJpY1NlYXJjaC5tb2R1bGVOYW1lLFxyXG4gICAgX19vYmplY3RVdGlsaXR5Lm1vZHVsZU5hbWUsXHJcbiAgICBfX2FycmF5VXRpbGl0eS5tb2R1bGVOYW1lLFxyXG4gICAgX19wcm9taXNlVXRpbGl0eS5tb2R1bGVOYW1lXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCB0eXBlYWhlYWQpXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBUeXBlYWhlYWRDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZWFoZWFkLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy90eXBlYWhlYWQvdHlwZWFoZWFkLmpzXG4gKiogbW9kdWxlIGlkID0gMTY4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiIG5nLWNsYXNzPVxcXCJ7ICdoYXMtZXJyb3InOiB0eXBlYWhlYWQuaGFzRXJyb3IgfVxcXCI+XFxyXFxuXFx0PGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5nLW1vZGVsPVxcXCJ0eXBlYWhlYWQuc2VsZWN0aW9uXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIlxcclxcblxcdFxcdHBsYWNlaG9sZGVyPVxcXCJ7e3R5cGVhaGVhZC5wbGFjZWhvbGRlcn19XFxcIiB0eXBlYWhlYWQ9XFxcIm9iamVjdCBhcyB0eXBlYWhlYWQudHJhbnNmb3JtKG9iamVjdCkgZm9yIG9iamVjdCBpbiB0eXBlYWhlYWQuZ2V0SXRlbXMoJHZpZXdWYWx1ZSlcXFwiXFxyXFxuXFx0XFx0dHlwZWFoZWFkLWxvYWRpbmc9XFxcInR5cGVhaGVhZC5sb2FkaW5nXFxcIiB0eXBlYWhlYWQtd2FpdC1tcz1cXFwidHlwZWFoZWFkLmxvYWREZWxheVxcXCIgLz5cXHJcXG5cXHQ8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cC1hZGRvblxcXCIgbmctaWY9XFxcInR5cGVhaGVhZC5zaG93U2VhcmNoXFxcIj5cXHJcXG5cXHRcXHQ8cmwtYnVzeSBsb2FkaW5nPVxcXCJ0eXBlYWhlYWQubG9hZGluZ1xcXCI+PC9ybC1idXN5PlxcclxcblxcdFxcdDxzcGFuIG5nLWhpZGU9XFxcInR5cGVhaGVhZC5sb2FkaW5nXFxcIj5cXHJcXG5cXHRcXHRcXHQ8aSBjbGFzcz1cXFwiZmEgZmEtc2VhcmNoXFxcIiBuZy1oaWRlPVxcXCJ0eXBlYWhlYWQuaGFzU2VsZWN0aW9uXFxcIj48L2k+XFxyXFxuXFx0XFx0XFx0PGkgY2xhc3M9XFxcImZhIGZhLWNoZWNrXFxcIiBuZy1zaG93PVxcXCJ0eXBlYWhlYWQuaGFzU2VsZWN0aW9uXFxcIj48L2k+XFxyXFxuXFx0XFx0PC9zcGFuPlxcclxcblxcdDwvZGl2PlxcclxcblxcdDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwLWJ0blxcXCIgbmctaWY9XFxcInR5cGVhaGVhZC51c2VBcHBseVxcXCI+XFxyXFxuXFx0XFx0PHJsLWJ1dHRvbi1hc3luYyB0eXBlPVxcXCJkZWZhdWx0XFxcIiBhY3Rpb249XFxcInR5cGVhaGVhZC5hcHBseUl0ZW0oKVxcXCIgcmlnaHQtYWxpZ25lZD1cXFwidHJ1ZVxcXCIgbmctZGlzYWJsZWQ9XFxcIiF0eXBlYWhlYWQuaGFzU2VsZWN0aW9uXFxcIj5cXHJcXG5cXHRcXHRcXHQ8aSBjbGFzcz1cXFwiZmEgZmEtcGx1cyBuZXdcXFwiPjwvaT5cXHJcXG5cXHRcXHQ8L3JsLWJ1dHRvbi1hc3luYz5cXHJcXG5cXHQ8L2Rpdj5cXHJcXG48L2Rpdj5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy90eXBlYWhlYWQvdHlwZWFoZWFkLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSAxNjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC5jb21wb25lbnRzLnVzZXJSYXRpbmcnO1xyXG5leHBvcnRzLmRpcmVjdGl2ZU5hbWUgPSAncmxVc2VyUmF0aW5nJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdVc2VyUmF0aW5nQ29udHJvbGxlcic7XHJcbnZhciBVc2VyUmF0aW5nQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBVc2VyUmF0aW5nQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICAgIHRoaXMuc3RhcnMgPSBbXTtcclxuICAgICAgICB2YXIgcmFuZ2VTaXplID0gdGhpcy4kc2NvcGUucmFuZ2UgIT0gbnVsbCA/IHRoaXMuJHNjb3BlLnJhbmdlIDogNTtcclxuICAgICAgICAvLyBjc3Mgc3R5bGUgcmVxdWlyZXMgdGhlIHN0YXJzIHRvIHNob3cgcmlnaHQgdG8gbGVmdC4gUmV2ZXJzZSB0aGUgbGlzdCBzbyB0aGUgaGlnaGVzdCB2YWx1ZSBpcyBmaXJzdFxyXG4gICAgICAgIHZhciByYW5nZSA9IF8ucmFuZ2UoMSwgcmFuZ2VTaXplICsgMSkucmV2ZXJzZSgpO1xyXG4gICAgICAgIF8uZWFjaChyYW5nZSwgZnVuY3Rpb24gKHJhdGluZykge1xyXG4gICAgICAgICAgICBfdGhpcy5zdGFycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiByYXRpbmcsXHJcbiAgICAgICAgICAgICAgICBmaWxsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgdW5iaW5kID0gdGhpcy4kc2NvcGUuJHdhdGNoKCduZ01vZGVsJywgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZVN0YXJWaWV3KF90aGlzLiRzY29wZS5uZ01vZGVsLiR2aWV3VmFsdWUpO1xyXG4gICAgICAgICAgICB1bmJpbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFVzZXJSYXRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5zZXRSYXRpbmcgPSBmdW5jdGlvbiAocmF0aW5nKSB7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUubmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHJhdGluZyk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTdGFyVmlldyhyYXRpbmcpO1xyXG4gICAgfTtcclxuICAgIFVzZXJSYXRpbmdDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVTdGFyVmlldyA9IGZ1bmN0aW9uIChyYXRpbmcpIHtcclxuICAgICAgICBfLmVhY2godGhpcy5zdGFycywgZnVuY3Rpb24gKHN0YXIpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXIudmFsdWUgPD0gcmF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFyLmZpbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGFyLmZpbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVXNlclJhdGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJ107XHJcbiAgICByZXR1cm4gVXNlclJhdGluZ0NvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuVXNlclJhdGluZ0NvbnRyb2xsZXIgPSBVc2VyUmF0aW5nQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gdXNlclJhdGluZygpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICAgICAgdGVtcGxhdGU6IFwiXFxuXFx0XFx0XFx0PHNwYW4gY2xhc3M9XFxcInJhdGluZ1xcXCI+XFxuXFx0XFx0XFx0XFx0PHNwYW4gY2xhc3M9XFxcInN0YXJcXFwiIG5nLXJlcGVhdD1cXFwic3RhciBpbiB1c2VyUmF0aW5nLnN0YXJzXFxcIiBuZy1jbGFzcz1cXFwieyAnZmlsbGVkJzogc3Rhci5maWxsZWQgfVxcXCIgbmctY2xpY2s9XFxcInVzZXJSYXRpbmcuc2V0UmF0aW5nKHN0YXIudmFsdWUpXFxcIj48L3NwYW4+XFxuXFx0XFx0XFx0PC9zcGFuPlxcblxcdFxcdFwiLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGV4cG9ydHMuY29udHJvbGxlck5hbWUsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndXNlclJhdGluZycsXHJcbiAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgcmFuZ2U6ICc9JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuICAgICAgICAgICAgc2NvcGUubmdNb2RlbCA9IG5nTW9kZWw7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy51c2VyUmF0aW5nID0gdXNlclJhdGluZztcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCB1c2VyUmF0aW5nKVxyXG4gICAgLmNvbnRyb2xsZXIoZXhwb3J0cy5jb250cm9sbGVyTmFtZSwgVXNlclJhdGluZ0NvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VyUmF0aW5nLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy91c2VyUmF0aW5nL3VzZXJSYXRpbmcuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9Jy4uLy4uLy4uL3R5cGluZ3MvY29tbW9uanMuZC50cycgLz5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxudmFyIGNvbXBvbmVudFZhbGlkYXRvcl9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9jb21wb25lbnRWYWxpZGF0b3IvY29tcG9uZW50VmFsaWRhdG9yLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLmNvbXBvbmVudHMudmFsaWRhdGlvbkdyb3VwJztcclxuZXhwb3J0cy5kaXJlY3RpdmVOYW1lID0gJ3JsVmFsaWRhdGlvbkdyb3VwJztcclxuZXhwb3J0cy5jb250cm9sbGVyTmFtZSA9ICdWYWxpZGF0aW9uR3JvdXBDb250cm9sbGVyJztcclxudmFyIFZhbGlkYXRpb25Hcm91cENvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmFsaWRhdGlvbkdyb3VwQ29udHJvbGxlcigkc2NvcGUsIGNvbXBvbmVudFZhbGlkYXRvckZhY3RvcnkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB1bmJpbmQgPSAkc2NvcGUuJHdhdGNoKCd2YWxpZGF0aW9uR3JvdXBGb3JtJywgZnVuY3Rpb24gKGZvcm0pIHtcclxuICAgICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKF90aGlzLnZhbGlkYXRvcikpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdyb3VwVmFsaWRhdG9yID0gY29tcG9uZW50VmFsaWRhdG9yRmFjdG9yeS5nZXRJbnN0YW5jZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybTogJHNjb3BlLnZhbGlkYXRpb25Hcm91cEZvcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlOiAkc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczogW190aGlzLnZhbGlkYXRvcl0sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1bmJpbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFZhbGlkYXRpb25Hcm91cENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgY29tcG9uZW50VmFsaWRhdG9yX3NlcnZpY2VfMS5mYWN0b3J5TmFtZV07XHJcbiAgICByZXR1cm4gVmFsaWRhdGlvbkdyb3VwQ29udHJvbGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5WYWxpZGF0aW9uR3JvdXBDb250cm9sbGVyID0gVmFsaWRhdGlvbkdyb3VwQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gdmFsaWRhdGlvbkdyb3VwKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdmFsaWRhdGlvbkdyb3VwLmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBleHBvcnRzLmNvbnRyb2xsZXJOYW1lLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2dyb3VwJyxcclxuICAgICAgICBzY29wZToge30sXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3I6ICc9JyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnZhbGlkYXRpb25Hcm91cCA9IHZhbGlkYXRpb25Hcm91cDtcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbY29tcG9uZW50VmFsaWRhdG9yX3NlcnZpY2VfMS5tb2R1bGVOYW1lXSlcclxuICAgIC5kaXJlY3RpdmUoZXhwb3J0cy5kaXJlY3RpdmVOYW1lLCB2YWxpZGF0aW9uR3JvdXApXHJcbiAgICAuY29udHJvbGxlcihleHBvcnRzLmNvbnRyb2xsZXJOYW1lLCBWYWxpZGF0aW9uR3JvdXBDb250cm9sbGVyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGlvbkdyb3VwLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy92YWxpZGF0aW9uR3JvdXAvdmFsaWRhdGlvbkdyb3VwLmpzXG4gKiogbW9kdWxlIGlkID0gMTcxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiY29udGVudC1ncm91cFxcXCIgbmctZm9ybT1cXFwidmFsaWRhdGlvbkdyb3VwRm9ybVxcXCI+XFxyXFxuXFx0PGRpdiBjbGFzcz1cXFwiZXJyb3JcXFwiIG5nLXNob3c9XFxcInZhbGlkYXRpb25Hcm91cEZvcm0uJGVycm9yLmN1c3RvbVZhbGlkYXRpb25cXFwiPlxcclxcblxcdFxcdDxsYWJlbD57e2dyb3VwLmdyb3VwVmFsaWRhdG9yLmVycm9yfX08L2xhYmVsPlxcclxcblxcdDwvZGl2PlxcclxcblxcdDxkaXYgbmctdHJhbnNjbHVkZT48L2Rpdj5cXHJcXG48L2Rpdj5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2UvY29tcG9uZW50cy92YWxpZGF0aW9uR3JvdXAvdmFsaWRhdGlvbkdyb3VwLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSAxNzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBhdXRvc2F2ZSA9IHJlcXVpcmUoJy4vYXV0b3NhdmUvYXV0b3NhdmUuc2VydmljZScpO1xyXG5leHBvcnRzLmF1dG9zYXZlID0gYXV0b3NhdmU7XHJcbnZhciBhdXRvc2F2ZUFjdGlvbiA9IHJlcXVpcmUoJy4vYXV0b3NhdmVBY3Rpb24vYXV0b3NhdmVBY3Rpb24uc2VydmljZScpO1xyXG5leHBvcnRzLmF1dG9zYXZlQWN0aW9uID0gYXV0b3NhdmVBY3Rpb247XHJcbnZhciBhdXRvc2F2ZURpYWxvZyA9IHJlcXVpcmUoJy4vYXV0b3NhdmVEaWFsb2cvYXV0b3NhdmVEaWFsb2cubW9kdWxlJyk7XHJcbmV4cG9ydHMuYXV0b3NhdmVEaWFsb2cgPSBhdXRvc2F2ZURpYWxvZztcclxudmFyIGJyZWFrcG9pbnRzID0gcmVxdWlyZSgnLi9icmVha3BvaW50cy9icmVha3BvaW50cy5tb2R1bGUnKTtcclxuZXhwb3J0cy5icmVha3BvaW50cyA9IGJyZWFrcG9pbnRzO1xyXG52YXIgY29tcG9uZW50VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9jb21wb25lbnRWYWxpZGF0b3IvY29tcG9uZW50VmFsaWRhdG9yLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5jb21wb25lbnRWYWxpZGF0b3IgPSBjb21wb25lbnRWYWxpZGF0b3I7XHJcbnZhciBjb250ZW50UHJvdmlkZXIgPSByZXF1aXJlKCcuL2NvbnRlbnRQcm92aWRlci9jb250ZW50UHJvdmlkZXIuc2VydmljZScpO1xyXG5leHBvcnRzLmNvbnRlbnRQcm92aWRlciA9IGNvbnRlbnRQcm92aWRlcjtcclxudmFyIGRpYWxvZyA9IHJlcXVpcmUoJy4vZGlhbG9nL2RpYWxvZy5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMuZGlhbG9nID0gZGlhbG9nO1xyXG52YXIgZG9jdW1lbnRXcmFwcGVyID0gcmVxdWlyZSgnLi9kb2N1bWVudFdyYXBwZXIvZG9jdW1lbnRXcmFwcGVyLnNlcnZpY2UnKTtcclxuZXhwb3J0cy5kb2N1bWVudFdyYXBwZXIgPSBkb2N1bWVudFdyYXBwZXI7XHJcbnZhciBqcXVlcnkgPSByZXF1aXJlKCcuL2pxdWVyeS9qcXVlcnkuc2VydmljZScpO1xyXG5leHBvcnRzLmpxdWVyeSA9IGpxdWVyeTtcclxudmFyIHRlbXBsYXRlTG9hZGVyID0gcmVxdWlyZSgnLi90ZW1wbGF0ZUxvYWRlci90ZW1wbGF0ZUxvYWRlci5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMudGVtcGxhdGVMb2FkZXIgPSB0ZW1wbGF0ZUxvYWRlcjtcclxudmFyIHdpbmRvd1dyYXBwZXIgPSByZXF1aXJlKCcuL3dpbmRvd1dyYXBwZXIvd2luZG93V3JhcHBlci5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMud2luZG93V3JhcHBlciA9IHdpbmRvd1dyYXBwZXI7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5zZXJ2aWNlcyc7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW1xyXG4gICAgYXV0b3NhdmUubW9kdWxlTmFtZSxcclxuICAgIGF1dG9zYXZlQWN0aW9uLm1vZHVsZU5hbWUsXHJcbiAgICBhdXRvc2F2ZURpYWxvZy5tb2R1bGVOYW1lLFxyXG4gICAgYnJlYWtwb2ludHMubW9kdWxlTmFtZSxcclxuICAgIGNvbXBvbmVudFZhbGlkYXRvci5tb2R1bGVOYW1lLFxyXG4gICAgY29udGVudFByb3ZpZGVyLm1vZHVsZU5hbWUsXHJcbiAgICBkaWFsb2cubW9kdWxlTmFtZSxcclxuICAgIGRvY3VtZW50V3JhcHBlci5tb2R1bGVOYW1lLFxyXG4gICAganF1ZXJ5Lm1vZHVsZU5hbWUsXHJcbiAgICB0ZW1wbGF0ZUxvYWRlci5tb2R1bGVOYW1lLFxyXG4gICAgd2luZG93V3JhcHBlci5tb2R1bGVOYW1lLFxyXG5dKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmljZXMubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvc2VydmljZXMubW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gMTczXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fcHJvbWlzZSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5wcm9taXNlO1xyXG52YXIgYXV0b3NhdmVfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vYXV0b3NhdmUvYXV0b3NhdmUuc2VydmljZScpO1xyXG52YXIgYXV0b3NhdmVEaWFsb2dfc2VydmljZV8xID0gcmVxdWlyZSgnLi9hdXRvc2F2ZURpYWxvZy5zZXJ2aWNlJyk7XHJcbnZhciBhdXRvc2F2ZURpYWxvZ19jb250cm9sbGVyXzEgPSByZXF1aXJlKCcuL2F1dG9zYXZlRGlhbG9nLmNvbnRyb2xsZXInKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9hdXRvc2F2ZURpYWxvZy5zZXJ2aWNlJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL2F1dG9zYXZlRGlhbG9nLmNvbnRyb2xsZXInKSk7XHJcbmV4cG9ydHMubW9kdWxlTmFtZSA9ICdybC51aS5zZXJ2aWNlcy5hdXRvc2F2ZURpYWxvZyc7XHJcbmFuZ3VsYXIubW9kdWxlKGV4cG9ydHMubW9kdWxlTmFtZSwgW19fcHJvbWlzZS5tb2R1bGVOYW1lLCBhdXRvc2F2ZV9zZXJ2aWNlXzEubW9kdWxlTmFtZV0pXHJcbiAgICAuc2VydmljZShhdXRvc2F2ZURpYWxvZ19zZXJ2aWNlXzEuc2VydmljZU5hbWUsIGF1dG9zYXZlRGlhbG9nX3NlcnZpY2VfMS5BdXRvc2F2ZURpYWxvZ1NlcnZpY2UpXHJcbiAgICAuY29udHJvbGxlcihhdXRvc2F2ZURpYWxvZ19jb250cm9sbGVyXzEuY29udHJvbGxlck5hbWUsIGF1dG9zYXZlRGlhbG9nX2NvbnRyb2xsZXJfMS5BdXRvc2F2ZURpYWxvZ0NvbnRyb2xsZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRvc2F2ZURpYWxvZy5tb2R1bGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9zZXJ2aWNlcy9hdXRvc2F2ZURpYWxvZy9hdXRvc2F2ZURpYWxvZy5tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fcHJvbWlzZSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5wcm9taXNlO1xyXG52YXIgZGlhbG9nX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL2RpYWxvZy9kaWFsb2cuc2VydmljZScpO1xyXG52YXIgYXV0b3NhdmVfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vYXV0b3NhdmUvYXV0b3NhdmUuc2VydmljZScpO1xyXG52YXIgYXV0b3NhdmVEaWFsb2dfY29udHJvbGxlcl8xID0gcmVxdWlyZSgnLi9hdXRvc2F2ZURpYWxvZy5jb250cm9sbGVyJyk7XHJcbmV4cG9ydHMuc2VydmljZU5hbWUgPSAnYXV0b3NhdmVEaWFsb2cnO1xyXG52YXIgQXV0b3NhdmVEaWFsb2dTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEF1dG9zYXZlRGlhbG9nU2VydmljZSgkcm9vdFNjb3BlLCBkaWFsb2csIGF1dG9zYXZlRmFjdG9yeSwgcHJvbWlzZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy4kcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcclxuICAgICAgICB0aGlzLmRpYWxvZyA9IGRpYWxvZztcclxuICAgICAgICB0aGlzLmF1dG9zYXZlRmFjdG9yeSA9IGF1dG9zYXZlRmFjdG9yeTtcclxuICAgICAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xyXG4gICAgICAgIHRoaXMuYXV0b3NhdmVDbG9zZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXhwbGljaXQpIHtcclxuICAgICAgICAgICAgaWYgKGV4cGxpY2l0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuYXV0b3NhdmUuYXV0b3NhdmUoX3RoaXMuZGF0YSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNldEZvcm0gPSBmdW5jdGlvbiAoZm9ybSkge1xyXG4gICAgICAgICAgICBfdGhpcy5hdXRvc2F2ZS5jb250ZW50Rm9ybSA9IGZvcm07XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIEF1dG9zYXZlRGlhbG9nU2VydmljZS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnByb21pc2UucmVzb2x2ZVByb21pc2VzKG9wdGlvbnMucmVzb2x2ZSkudGhlbihmdW5jdGlvbiAocmVzb2x2ZURhdGEpIHtcclxuICAgICAgICAgICAgdmFyIHNjb3BlID0gb3B0aW9ucy5zY29wZTtcclxuICAgICAgICAgICAgaWYgKHNjb3BlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlID0gX3RoaXMuJHJvb3RTY29wZS4kbmV3KCk7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNjb3BlID0gc2NvcGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmRhdGEgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50cmlnZ2VycyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnRyaWdnZXJzID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLmF1dG9zYXZlID0gX3RoaXMuYXV0b3NhdmVGYWN0b3J5LmdldEluc3RhbmNlKHtcclxuICAgICAgICAgICAgICAgIHNhdmU6IG9wdGlvbnMuc2F2ZSxcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlOiBvcHRpb25zLnZhbGlkYXRlLFxyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcnM6IG9wdGlvbnMudHJpZ2dlcnMsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzY29wZS5mb3JtID0gb3B0aW9ucy5mb3JtO1xyXG4gICAgICAgICAgICBzY29wZS5mb3JtR2V0dGVyID0gb3B0aW9ucy5mb3JtR2V0dGVyO1xyXG4gICAgICAgICAgICBzY29wZS5zZXRGb3JtID0gX3RoaXMuc2V0Rm9ybTtcclxuICAgICAgICAgICAgX3RoaXMuZGF0YSA9IF8uZXh0ZW5kKG9wdGlvbnMuZGF0YSwgcmVzb2x2ZURhdGEpO1xyXG4gICAgICAgICAgICBzY29wZS5kaWFsb2cgPSBfdGhpcy5kYXRhO1xyXG4gICAgICAgICAgICB2YXIgZGlhbG9nT3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgICAgIGRpYWxvZ09wdGlvbnMuY29udHJvbGxlciA9IGF1dG9zYXZlRGlhbG9nX2NvbnRyb2xsZXJfMS5jb250cm9sbGVyTmFtZTtcclxuICAgICAgICAgICAgZGlhbG9nT3B0aW9ucy5jb250cm9sbGVyQXMgPSAnY29udHJvbGxlcic7XHJcbiAgICAgICAgICAgIF90aGlzLmRpYWxvZy5vcGVuKG9wdGlvbnMsIF90aGlzLmF1dG9zYXZlQ2xvc2VIYW5kbGVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBdXRvc2F2ZURpYWxvZ1NlcnZpY2UuJGluamVjdCA9IFsnJHJvb3RTY29wZScsIGRpYWxvZ19zZXJ2aWNlXzEuc2VydmljZU5hbWUsIGF1dG9zYXZlX3NlcnZpY2VfMS5mYWN0b3J5TmFtZSwgX19wcm9taXNlLnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBBdXRvc2F2ZURpYWxvZ1NlcnZpY2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQXV0b3NhdmVEaWFsb2dTZXJ2aWNlID0gQXV0b3NhdmVEaWFsb2dTZXJ2aWNlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRvc2F2ZURpYWxvZy5zZXJ2aWNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvYXV0b3NhdmVEaWFsb2cvYXV0b3NhdmVEaWFsb2cuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgbmcgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBib290c3RyYXBNb2RhbERpYWxvZyA9IHJlcXVpcmUoJy4vYm9vdHN0cmFwTW9kYWxEaWFsb2cvYm9vdHN0cmFwTW9kYWxEaWFsb2cubW9kdWxlJyk7XHJcbmV4cG9ydHMuYm9vdHN0cmFwTW9kYWxEaWFsb2cgPSBib290c3RyYXBNb2RhbERpYWxvZztcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLnNlcnZpY2VzLmRpYWxvZyc7XHJcbmV4cG9ydHMuc2VydmljZU5hbWUgPSAnZGlhbG9nJztcclxudmFyIERpYWxvZ1NlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGlhbG9nU2VydmljZShkaWFsb2cpIHtcclxuICAgICAgICB0aGlzLmRpYWxvZyA9IGRpYWxvZztcclxuICAgIH1cclxuICAgIERpYWxvZ1NlcnZpY2UucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAob3B0aW9ucywgY2xvc2VIYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlhbG9nLm9wZW4ob3B0aW9ucywgY2xvc2VIYW5kbGVyKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGlhbG9nU2VydmljZTtcclxufSgpKTtcclxuZXhwb3J0cy5EaWFsb2dTZXJ2aWNlID0gRGlhbG9nU2VydmljZTtcclxuZnVuY3Rpb24gZGlhbG9nU2VydmljZVByb3ZpZGVyKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBwcm92aWRlciA9IHtcclxuICAgICAgICBzZXRJbXBsZW1lbnRhdGlvbjogZnVuY3Rpb24gKGRpYWxvZ0ltcGxlbWVudGF0aW9uKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmRpYWxvZ0ltcGxlbWVudGF0aW9uID0gZGlhbG9nSW1wbGVtZW50YXRpb247XHJcbiAgICAgICAgfSxcclxuICAgICAgICAkZ2V0OiBmdW5jdGlvbiAoYm9vdHN0cmFwTW9kYWxEaWFsb2cpIHtcclxuICAgICAgICAgICAgdmFyIGRpYWxvZ0ltcGxlbWVudGF0aW9uID0gX3RoaXMuZGlhbG9nSW1wbGVtZW50YXRpb24gIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgPyBfdGhpcy5kaWFsb2dJbXBsZW1lbnRhdGlvblxyXG4gICAgICAgICAgICAgICAgOiBib290c3RyYXBNb2RhbERpYWxvZztcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEaWFsb2dTZXJ2aWNlKGRpYWxvZ0ltcGxlbWVudGF0aW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIHByb3ZpZGVyLiRnZXQuJGluamVjdCA9IFtib290c3RyYXBNb2RhbERpYWxvZy5zZXJ2aWNlTmFtZV07XHJcbiAgICByZXR1cm4gcHJvdmlkZXI7XHJcbn1cclxuZXhwb3J0cy5kaWFsb2dTZXJ2aWNlUHJvdmlkZXIgPSBkaWFsb2dTZXJ2aWNlUHJvdmlkZXI7XHJcbm5nLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtib290c3RyYXBNb2RhbERpYWxvZy5tb2R1bGVOYW1lXSlcclxuICAgIC5wcm92aWRlcihleHBvcnRzLnNlcnZpY2VOYW1lLCBkaWFsb2dTZXJ2aWNlUHJvdmlkZXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaWFsb2cuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL3NlcnZpY2VzL2RpYWxvZy9kaWFsb2cuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciBfX3Byb21pc2UgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMucHJvbWlzZTtcclxudmFyIGJvb3RzdHJhcE1vZGFsRGlhbG9nX2NvbnRyb2xsZXJfMSA9IHJlcXVpcmUoJy4vYm9vdHN0cmFwTW9kYWxEaWFsb2cuY29udHJvbGxlcicpO1xyXG52YXIgYm9vdHN0cmFwTW9kYWxEaWFsb2dfc2VydmljZV8xID0gcmVxdWlyZSgnLi9ib290c3RyYXBNb2RhbERpYWxvZy5zZXJ2aWNlJyk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vYm9vdHN0cmFwTW9kYWxEaWFsb2cuY29udHJvbGxlcicpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9ib290c3RyYXBNb2RhbERpYWxvZy5zZXJ2aWNlJykpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuc2VydmljZXMuZGlhbG9nLmJvb3RzdHJhcE1vZGFsRGlhbG9nJztcclxuYW5ndWxhci5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbX19wcm9taXNlLm1vZHVsZU5hbWVdKVxyXG4gICAgLmNvbnRyb2xsZXIoYm9vdHN0cmFwTW9kYWxEaWFsb2dfY29udHJvbGxlcl8xLmNvbnRyb2xsZXJOYW1lLCBib290c3RyYXBNb2RhbERpYWxvZ19jb250cm9sbGVyXzEuQm9vdHN0cmFwTW9kYWxEaWFsb2dDb250cm9sbGVyKVxyXG4gICAgLnNlcnZpY2UoYm9vdHN0cmFwTW9kYWxEaWFsb2dfc2VydmljZV8xLnNlcnZpY2VOYW1lLCBib290c3RyYXBNb2RhbERpYWxvZ19zZXJ2aWNlXzEuQm9vdHN0cmFwTW9kYWxEaWFsb2dTZXJ2aWNlKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwTW9kYWxEaWFsb2cubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvZGlhbG9nL2Jvb3RzdHJhcE1vZGFsRGlhbG9nL2Jvb3RzdHJhcE1vZGFsRGlhbG9nLm1vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYm9vdHN0cmFwTW9kYWxEaWFsb2dfc2VydmljZV8xID0gcmVxdWlyZSgnLi9ib290c3RyYXBNb2RhbERpYWxvZy5zZXJ2aWNlJyk7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnQm9vdHN0cmFwTW9kYWxEaWFsb2dDb250cm9sbGVyJztcclxudmFyIEJvb3RzdHJhcE1vZGFsRGlhbG9nQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCb290c3RyYXBNb2RhbERpYWxvZ0NvbnRyb2xsZXIoJHNjb3BlLCAkY29udHJvbGxlciwgYmFzZURpYWxvZykge1xyXG4gICAgICAgIHZhciBjb250cm9sbGVyO1xyXG4gICAgICAgIGlmICgkc2NvcGUubW9kYWxDb250cm9sbGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIGxvY2FscyA9ICRzY29wZS5yZXNvbHZlRGF0YSB8fCB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlc29sdmVEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgbG9jYWxzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICAgICAgY29udHJvbGxlciA9ICRjb250cm9sbGVyKCRzY29wZS5tb2RhbENvbnRyb2xsZXIsIGxvY2Fscyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS4kb24oJ21vZGFsLmNsb3NpbmcnLCBiYXNlRGlhbG9nLm1vZGFsQ2xvc2luZyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXI7XHJcbiAgICB9XHJcbiAgICBCb290c3RyYXBNb2RhbERpYWxvZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRjb250cm9sbGVyJywgYm9vdHN0cmFwTW9kYWxEaWFsb2dfc2VydmljZV8xLnNlcnZpY2VOYW1lXTtcclxuICAgIHJldHVybiBCb290c3RyYXBNb2RhbERpYWxvZ0NvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQm9vdHN0cmFwTW9kYWxEaWFsb2dDb250cm9sbGVyID0gQm9vdHN0cmFwTW9kYWxEaWFsb2dDb250cm9sbGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXBNb2RhbERpYWxvZy5jb250cm9sbGVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvZGlhbG9nL2Jvb3RzdHJhcE1vZGFsRGlhbG9nL2Jvb3RzdHJhcE1vZGFsRGlhbG9nLmNvbnRyb2xsZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fcHJvbWlzZSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5wcm9taXNlO1xyXG52YXIgYm9vdHN0cmFwTW9kYWxEaWFsb2dfY29udHJvbGxlcl8xID0gcmVxdWlyZSgnLi9ib290c3RyYXBNb2RhbERpYWxvZy5jb250cm9sbGVyJyk7XHJcbmV4cG9ydHMuc2VydmljZU5hbWUgPSAndWlCb290c3RyYXBNb2RlbERpYWxvZyc7XHJcbnZhciBCb290c3RyYXBNb2RhbERpYWxvZ1NlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQm9vdHN0cmFwTW9kYWxEaWFsb2dTZXJ2aWNlKCRtb2RhbCwgJHJvb3RTY29wZSwgcHJvbWlzZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy4kbW9kYWwgPSAkbW9kYWw7XHJcbiAgICAgICAgdGhpcy4kcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcclxuICAgICAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xyXG4gICAgICAgIHRoaXMubW9kYWxDbG9zaW5nID0gZnVuY3Rpb24gKGV2ZW50LCByZWFzb24sIGV4cGxpY2l0bHlDbG9zZWQpIHtcclxuICAgICAgICAgICAgdmFyIGNhbkNsb3NlID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihfdGhpcy5jbG9zZUhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5DbG9zZSA9IF90aGlzLmNsb3NlSGFuZGxlcihleHBsaWNpdGx5Q2xvc2VkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWNhbkNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIEJvb3RzdHJhcE1vZGFsRGlhbG9nU2VydmljZS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChvcHRpb25zLCBjbG9zZUhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcclxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGlhbG9nSW5zdGFuY2UgPSB7XHJcbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7IH0sXHJcbiAgICAgICAgICAgIGRpc21pc3M6IGZ1bmN0aW9uICgpIHsgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZS5yZXNvbHZlUHJvbWlzZXMob3B0aW9ucy5yZXNvbHZlKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNsb3NlSGFuZGxlciA9IGNsb3NlSGFuZGxlcjtcclxuICAgICAgICAgICAgb3B0aW9ucyA9IF90aGlzLmNvbmZpZ3VyZU1vZGFsU2V0dGluZ3Mob3B0aW9ucywgcmVzdWx0cyk7XHJcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gX3RoaXMuJG1vZGFsLm9wZW4ob3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGRpYWxvZ0luc3RhbmNlLmNsb3NlID0gbW9kYWxJbnN0YW5jZS5jbG9zZTtcclxuICAgICAgICAgICAgZGlhbG9nSW5zdGFuY2UuZGlzbWlzcyA9IG1vZGFsSW5zdGFuY2UuZGlzbWlzcztcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGlhbG9nSW5zdGFuY2U7XHJcbiAgICB9O1xyXG4gICAgQm9vdHN0cmFwTW9kYWxEaWFsb2dTZXJ2aWNlLnByb3RvdHlwZS5jb25maWd1cmVNb2RhbFNldHRpbmdzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHJlc29sdmVEYXRhKSB7XHJcbiAgICAgICAgdmFyIG1vZGFsU2NvcGUgPSBvcHRpb25zLnNjb3BlO1xyXG4gICAgICAgIGlmIChtb2RhbFNjb3BlID09IG51bGwpIHtcclxuICAgICAgICAgICAgbW9kYWxTY29wZSA9IHRoaXMuJHJvb3RTY29wZS4kbmV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnJlc29sdmVUb0RpYWxvZykge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaWFsb2dBcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBtb2RhbFNjb3BlW29wdGlvbnMuZGlhbG9nQXNdID0gcmVzb2x2ZURhdGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtb2RhbFNjb3BlID0gXy5leHRlbmQobW9kYWxTY29wZSwgcmVzb2x2ZURhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtb2RhbFNjb3BlLnJlc29sdmVEYXRhID0gcmVzb2x2ZURhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vZGFsU2NvcGUubW9kYWxDb250cm9sbGVyID0gb3B0aW9ucy5jb250cm9sbGVyO1xyXG4gICAgICAgIG9wdGlvbnMucmVzb2x2ZSA9IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5jb250cm9sbGVyID0gYm9vdHN0cmFwTW9kYWxEaWFsb2dfY29udHJvbGxlcl8xLmNvbnRyb2xsZXJOYW1lO1xyXG4gICAgICAgIG9wdGlvbnMuc2NvcGUgPSBtb2RhbFNjb3BlO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgfTtcclxuICAgIEJvb3RzdHJhcE1vZGFsRGlhbG9nU2VydmljZS4kaW5qZWN0ID0gWyckdWliTW9kYWwnLCAnJHJvb3RTY29wZScsIF9fcHJvbWlzZS5zZXJ2aWNlTmFtZV07XHJcbiAgICByZXR1cm4gQm9vdHN0cmFwTW9kYWxEaWFsb2dTZXJ2aWNlO1xyXG59KCkpO1xyXG5leHBvcnRzLkJvb3RzdHJhcE1vZGFsRGlhbG9nU2VydmljZSA9IEJvb3RzdHJhcE1vZGFsRGlhbG9nU2VydmljZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwTW9kYWxEaWFsb2cuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL3NlcnZpY2VzL2RpYWxvZy9ib290c3RyYXBNb2RhbERpYWxvZy9ib290c3RyYXBNb2RhbERpYWxvZy5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTc5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbmV4cG9ydHMuY29udHJvbGxlck5hbWUgPSAnQXV0b3NhdmVEaWFsb2dDb250cm9sbGVyJztcclxudmFyIEF1dG9zYXZlRGlhbG9nQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBdXRvc2F2ZURpYWxvZ0NvbnRyb2xsZXIoJHNjb3BlKSB7XHJcbiAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgaWYgKCRzY29wZS5mb3JtICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIHVuYmluZCA9ICRzY29wZS4kd2F0Y2goJHNjb3BlLmZvcm0sIGZ1bmN0aW9uIChmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldEZvcm0oZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5iaW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgkc2NvcGUuZm9ybUdldHRlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciB1bmJpbmQgPSAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRzY29wZS5mb3JtR2V0dGVyKCRzY29wZSk7IH0sIGZ1bmN0aW9uIChmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldEZvcm0oZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5iaW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIEF1dG9zYXZlRGlhbG9nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuICAgIHJldHVybiBBdXRvc2F2ZURpYWxvZ0NvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQXV0b3NhdmVEaWFsb2dDb250cm9sbGVyID0gQXV0b3NhdmVEaWFsb2dDb250cm9sbGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRvc2F2ZURpYWxvZy5jb250cm9sbGVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvYXV0b3NhdmVEaWFsb2cvYXV0b3NhdmVEaWFsb2cuY29udHJvbGxlci5qc1xuICoqIG1vZHVsZSBpZCA9IDE4MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciB3aW5kb3dXcmFwcGVyX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL3dpbmRvd1dyYXBwZXIvd2luZG93V3JhcHBlci5zZXJ2aWNlJyk7XHJcbnZhciB2aXNpYmxlQnJlYWtwb2ludF9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuL3Zpc2libGVCcmVha3BvaW50LnNlcnZpY2UnKTtcclxudmFyIGJyZWFrcG9pbnRzX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4vYnJlYWtwb2ludHMuc2VydmljZScpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL2JyZWFrcG9pbnQnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vdmlzaWJsZUJyZWFrcG9pbnQuc2VydmljZScpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9icmVha3BvaW50cy5zZXJ2aWNlJykpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuc2VydmljZXMuYnJlYWtwb2ludHMnO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtcclxuICAgIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYnNlcnZhYmxlLm1vZHVsZU5hbWUsXHJcbiAgICB3aW5kb3dXcmFwcGVyX3NlcnZpY2VfMS5tb2R1bGVOYW1lLFxyXG5dKVxyXG4gICAgLmNvbnN0YW50KCdyZXNpemVEZWJvdW5jZU1pbGxpc2Vjb25kcycsIDUwMClcclxuICAgIC5zZXJ2aWNlKHZpc2libGVCcmVha3BvaW50X3NlcnZpY2VfMS52aXNpYmxlQnJlYWtwb2ludFNlcnZpY2VOYW1lLCB2aXNpYmxlQnJlYWtwb2ludF9zZXJ2aWNlXzEuVmlzaWJsZUJyZWFrcG9pbnRTZXJ2aWNlKVxyXG4gICAgLnNlcnZpY2UoYnJlYWtwb2ludHNfc2VydmljZV8xLmJyZWFrcG9pbnRTZXJ2aWNlTmFtZSwgYnJlYWtwb2ludHNfc2VydmljZV8xLkJyZWFrcG9pbnRTZXJ2aWNlKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWtwb2ludHMubW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zb3VyY2Uvc2VydmljZXMvYnJlYWtwb2ludHMvYnJlYWtwb2ludHMubW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gMTgxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudWkuc2VydmljZXMud2luZG93V3JhcHBlcic7XHJcbmV4cG9ydHMuc2VydmljZU5hbWUgPSAnd2luZG93V3JhcHBlcic7XHJcbnZhciBXaW5kb3dTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFdpbmRvd1NlcnZpY2UoKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3dDb250cm9sID0gJCh3aW5kb3cpO1xyXG4gICAgfVxyXG4gICAgV2luZG93U2VydmljZS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3dDb250cm9sLnJlc2l6ZShjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgV2luZG93U2VydmljZS5wcm90b3R5cGUuc2Nyb2xsVG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd0NvbnRyb2wuc2Nyb2xsVG9wKCk7XHJcbiAgICB9O1xyXG4gICAgV2luZG93U2VydmljZS5wcm90b3R5cGUuc2Nyb2xsID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLndpbmRvd0NvbnRyb2wuc2Nyb2xsKGhhbmRsZXIpO1xyXG4gICAgfTtcclxuICAgIFdpbmRvd1NlcnZpY2UucHJvdG90eXBlLmhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dDb250cm9sLmhlaWdodCgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBXaW5kb3dTZXJ2aWNlO1xyXG59KCkpO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLnNlcnZpY2UoZXhwb3J0cy5zZXJ2aWNlTmFtZSwgV2luZG93U2VydmljZSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1dyYXBwZXIuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL3NlcnZpY2VzL3dpbmRvd1dyYXBwZXIvd2luZG93V3JhcHBlci5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTgyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XHJcbi8qXHJcbiAqIEltcGxlbWVudGF0aW9uIGFsc28gcmVxdWlyZXMgdGhlIGZvbGxvd2luZyBlbGVtZW50cyB0byBiZSBpbnNlcnRlZCBvbiB0aGUgcGFnZTpcclxuICogICA8ZGl2IGNsYXNzPVwiZGV2aWNlLXhzIHZpc2libGUteHNcIj48L2Rpdj5cclxuICogICA8ZGl2IGNsYXNzPVwiZGV2aWNlLXNtIHZpc2libGUtc21cIj48L2Rpdj5cclxuICogICA8ZGl2IGNsYXNzPVwiZGV2aWNlLW1kIHZpc2libGUtbWRcIj48L2Rpdj5cclxuICogICA8ZGl2IGNsYXNzPVwiZGV2aWNlLWxnIHZpc2libGUtbGdcIj48L2Rpdj5cclxuICogVGhleSBoYXZlIGJlZW4gaW5zZXJ0ZWQgaW50byBpbmRleC5odG1sIGZvciB5b3VyIGNvbnZlbmllbmNlLlxyXG4gKi9cclxuZXhwb3J0cy52aXNpYmxlQnJlYWtwb2ludFNlcnZpY2VOYW1lID0gJ3Zpc2libGVCcmVha3BvaW50JztcclxudmFyIFZpc2libGVCcmVha3BvaW50U2VydmljZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBWaXNpYmxlQnJlYWtwb2ludFNlcnZpY2UoKSB7XHJcbiAgICB9XHJcbiAgICBWaXNpYmxlQnJlYWtwb2ludFNlcnZpY2UucHJvdG90eXBlLmlzVmlzaWJsZSA9IGZ1bmN0aW9uIChicmVha3BvaW50KSB7XHJcbiAgICAgICAgLy8ganF1ZXJ5IGdldHMgdGhlIGJyZWFrcG9pbnQgdHJpZ2dlciBkaXJlY3RpdmVzIGxpc3RlZCBhYm92ZSBvbiBsaW5lIDNcclxuICAgICAgICByZXR1cm4gJCgnLmRldmljZS0nICsgYnJlYWtwb2ludCkuaXMoJzp2aXNpYmxlJyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZpc2libGVCcmVha3BvaW50U2VydmljZTtcclxufSgpKTtcclxuZXhwb3J0cy5WaXNpYmxlQnJlYWtwb2ludFNlcnZpY2UgPSBWaXNpYmxlQnJlYWtwb2ludFNlcnZpY2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpc2libGVCcmVha3BvaW50LnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9zZXJ2aWNlcy9icmVha3BvaW50cy92aXNpYmxlQnJlYWtwb2ludC5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTgzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEgPSByZXF1aXJlKCd0eXBlc2NyaXB0LWFuZ3VsYXItdXRpbGl0aWVzJyk7XHJcbnZhciB3aW5kb3dXcmFwcGVyX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4uL3dpbmRvd1dyYXBwZXIvd2luZG93V3JhcHBlci5zZXJ2aWNlJyk7XHJcbnZhciB2aXNpYmxlQnJlYWtwb2ludF9zZXJ2aWNlXzEgPSByZXF1aXJlKCcuL3Zpc2libGVCcmVha3BvaW50LnNlcnZpY2UnKTtcclxudmFyIGJyZWFrcG9pbnRfMSA9IHJlcXVpcmUoJy4vYnJlYWtwb2ludCcpO1xyXG5leHBvcnRzLmJyZWFrcG9pbnRTZXJ2aWNlTmFtZSA9ICdicmVha3BvaW50cyc7XHJcbnZhciBfX29ic2VydmFibGUgPSB0eXBlc2NyaXB0X2FuZ3VsYXJfdXRpbGl0aWVzXzEuc2VydmljZXMub2JzZXJ2YWJsZTtcclxudmFyIEJyZWFrcG9pbnRTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJyZWFrcG9pbnRTZXJ2aWNlKCRyb290U2NvcGUsIHZpc2libGVCcmVha3BvaW50cywgcmVzaXplRGVib3VuY2VNaWxsaXNlY29uZHMsIHdpbmRvd1NlcnZpY2UsIG9ic2VydmFibGVGYWN0b3J5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLiRyb290U2NvcGUgPSAkcm9vdFNjb3BlO1xyXG4gICAgICAgIHRoaXMudmlzaWJsZUJyZWFrcG9pbnRzID0gdmlzaWJsZUJyZWFrcG9pbnRzO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQnJlYWtwb2ludCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0JyZWFrUG9pbnQgPSBfdGhpcy5nZXRCcmVha3BvaW50KCk7XHJcbiAgICAgICAgICAgIGlmIChuZXdCcmVha1BvaW50ICE9PSBfdGhpcy5jdXJyZW50QnJlYWtwb2ludCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRCcmVha3BvaW50ID0gbmV3QnJlYWtQb2ludDtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vYnNlcnZhYmxlLmZpcmUoJ3dpbmRvdy5icmVha3BvaW50Q2hhbmdlZCcsIF90aGlzLmN1cnJlbnRCcmVha3BvaW50KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRCcmVha3BvaW50ID0gdGhpcy5nZXRCcmVha3BvaW50KCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlID0gb2JzZXJ2YWJsZUZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICB2YXIgZWZmaWNpZW50UmVzaXplID0gXy5kZWJvdW5jZSh0aGlzLnVwZGF0ZUJyZWFrcG9pbnQsIHJlc2l6ZURlYm91bmNlTWlsbGlzZWNvbmRzLCB7XHJcbiAgICAgICAgICAgIGxlYWRpbmc6IHRydWUsXHJcbiAgICAgICAgICAgIHRyYWlsaW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBtYXhXYWl0OiByZXNpemVEZWJvdW5jZU1pbGxpc2Vjb25kcyxcclxuICAgICAgICB9KTtcclxuICAgICAgICB3aW5kb3dTZXJ2aWNlLnJlc2l6ZShlZmZpY2llbnRSZXNpemUpO1xyXG4gICAgfVxyXG4gICAgQnJlYWtwb2ludFNlcnZpY2UucHJvdG90eXBlLmdldEJyZWFrcG9pbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlzaWJsZUJyZWFrcG9pbnRzLmlzVmlzaWJsZShicmVha3BvaW50XzEubGcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBicmVha3BvaW50XzEubGc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudmlzaWJsZUJyZWFrcG9pbnRzLmlzVmlzaWJsZShicmVha3BvaW50XzEubWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBicmVha3BvaW50XzEubWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudmlzaWJsZUJyZWFrcG9pbnRzLmlzVmlzaWJsZShicmVha3BvaW50XzEuc20pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBicmVha3BvaW50XzEuc207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYnJlYWtwb2ludF8xLnhzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCcmVha3BvaW50U2VydmljZS5wcm90b3R5cGUuaXNCcmVha3BvaW50ID0gZnVuY3Rpb24gKGJyZWFrcG9pbnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludDtcclxuICAgIH07XHJcbiAgICBCcmVha3BvaW50U2VydmljZS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2YWJsZS5yZWdpc3RlcihhY3Rpb24sICd3aW5kb3cuYnJlYWtwb2ludENoYW5nZWQnKTtcclxuICAgIH07XHJcbiAgICBCcmVha3BvaW50U2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgdmlzaWJsZUJyZWFrcG9pbnRfc2VydmljZV8xLnZpc2libGVCcmVha3BvaW50U2VydmljZU5hbWUsICdyZXNpemVEZWJvdW5jZU1pbGxpc2Vjb25kcycsIHdpbmRvd1dyYXBwZXJfc2VydmljZV8xLnNlcnZpY2VOYW1lLCBfX29ic2VydmFibGUuZmFjdG9yeU5hbWVdO1xyXG4gICAgcmV0dXJuIEJyZWFrcG9pbnRTZXJ2aWNlO1xyXG59KCkpO1xyXG5leHBvcnRzLkJyZWFrcG9pbnRTZXJ2aWNlID0gQnJlYWtwb2ludFNlcnZpY2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFrcG9pbnRzLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9zZXJ2aWNlcy9icmVha3BvaW50cy9icmVha3BvaW50cy5zZXJ2aWNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTg0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy9qcXVlcnkvanF1ZXJ5LmQudHNcIiAvPlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBuZyA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxudmFyIHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQtYW5ndWxhci11dGlsaXRpZXMnKTtcclxudmFyIF9fb2JzZXJ2YWJsZSA9IHR5cGVzY3JpcHRfYW5ndWxhcl91dGlsaXRpZXNfMS5zZXJ2aWNlcy5vYnNlcnZhYmxlO1xyXG5leHBvcnRzLm1vZHVsZU5hbWUgPSAncmwudXRpbGl0aWVzLnNlcnZpY2VzLmNvbnRlbnRQcm92aWRlcic7XHJcbmV4cG9ydHMuc2VydmljZU5hbWUgPSAnY29udGVudFByb3ZpZGVyRmFjdG9yeSc7XHJcbnZhciBDb250ZW50UHJvdmlkZXJTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbnRlbnRQcm92aWRlclNlcnZpY2Uob2JzZXJ2YWJsZUZhY3RvcnkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc2V0VHJhbnNjbHVkZUNvbnRlbnQgPSBmdW5jdGlvbiAodHJhbnNjbHVkZUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChfLmlzRnVuY3Rpb24odHJhbnNjbHVkZUZ1bmN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNjbHVkZUZ1bmN0aW9uKGZ1bmN0aW9uIChjbG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldENvbnRlbnQoY2xvbmUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRDb250ZW50KG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gICAgQ29udGVudFByb3ZpZGVyU2VydmljZS5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uIChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuZmlyZSgnY29udGVudENoYW5nZWQnKTtcclxuICAgIH07XHJcbiAgICBDb250ZW50UHJvdmlkZXJTZXJ2aWNlLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChhY3Rpb24sIHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgYWN0aW9uKHRoaXMuZ2V0Q29udGVudChzZWxlY3RvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZhYmxlLnJlZ2lzdGVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYWN0aW9uKF90aGlzLmdldENvbnRlbnQoc2VsZWN0b3IpKTtcclxuICAgICAgICB9LCAnY29udGVudENoYW5nZWQnKTtcclxuICAgIH07XHJcbiAgICBDb250ZW50UHJvdmlkZXJTZXJ2aWNlLnByb3RvdHlwZS5nZXRDb250ZW50ID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgaWYgKHNlbGVjdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudC5maWx0ZXIoc2VsZWN0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb250ZW50UHJvdmlkZXJTZXJ2aWNlO1xyXG59KCkpO1xyXG5jb250ZW50UHJvdmlkZXJTZXJ2aWNlRmFjdG9yeS4kaW5qZWN0ID0gW19fb2JzZXJ2YWJsZS5mYWN0b3J5TmFtZV07XHJcbmZ1bmN0aW9uIGNvbnRlbnRQcm92aWRlclNlcnZpY2VGYWN0b3J5KG9ic2VydmFibGVGYWN0b3J5KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEluc3RhbmNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29udGVudFByb3ZpZGVyU2VydmljZShvYnNlcnZhYmxlRmFjdG9yeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5uZy5tb2R1bGUoZXhwb3J0cy5tb2R1bGVOYW1lLCBbX19vYnNlcnZhYmxlLm1vZHVsZU5hbWVdKVxyXG4gICAgLmZhY3RvcnkoZXhwb3J0cy5zZXJ2aWNlTmFtZSwgY29udGVudFByb3ZpZGVyU2VydmljZUZhY3RvcnkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZW50UHJvdmlkZXIuc2VydmljZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL3NlcnZpY2VzL2NvbnRlbnRQcm92aWRlci9jb250ZW50UHJvdmlkZXIuc2VydmljZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE4NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcclxuZXhwb3J0cy5tb2R1bGVOYW1lID0gJ3JsLnVpLnNlcnZpY2VzLmRvY3VtZW50V3JhcHBlcic7XHJcbmV4cG9ydHMuc2VydmljZU5hbWUgPSAnZG9jdW1lbnRXcmFwcGVyJztcclxudmFyIERvY3VtZW50U2VydmljZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEb2N1bWVudFNlcnZpY2UoKSB7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudENvbnRyb2wgPSAkKGRvY3VtZW50KTtcclxuICAgIH1cclxuICAgIERvY3VtZW50U2VydmljZS5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50Q29udHJvbC5oZWlnaHQoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRG9jdW1lbnRTZXJ2aWNlO1xyXG59KCkpO1xyXG5hbmd1bGFyLm1vZHVsZShleHBvcnRzLm1vZHVsZU5hbWUsIFtdKVxyXG4gICAgLnNlcnZpY2UoZXhwb3J0cy5zZXJ2aWNlTmFtZSwgRG9jdW1lbnRTZXJ2aWNlKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9jdW1lbnRXcmFwcGVyLnNlcnZpY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NvdXJjZS9zZXJ2aWNlcy9kb2N1bWVudFdyYXBwZXIvZG9jdW1lbnRXcmFwcGVyLnNlcnZpY2UuanNcbiAqKiBtb2R1bGUgaWQgPSAxODZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcclxudmFyIHZpZXdEYXRhID0gcmVxdWlyZSgnLi92aWV3RGF0YScpO1xyXG5leHBvcnRzLnZpZXdEYXRhID0gdmlld0RhdGE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLm1vZHVsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL3R5cGVzL3R5cGVzLm1vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE4N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3RGF0YS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc291cmNlL3R5cGVzL3ZpZXdEYXRhLmpzXG4gKiogbW9kdWxlIGlkID0gMTg4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9