import { Subject } from 'rxjs';
import { services, filters } from 'typescript-angular-utilities';
import __array = services.array;
import { IDataSource } from './dataSource';
import { IDataSourceProcessor, IProcessResult } from './dataSourceProcessor.service';
import { ISort } from '../sorts/sort';
import { IDataPager } from './dataPager/dataPager.service';
export declare class DataSourceBase<TDataType> implements IDataSource<TDataType> {
    private dataSourceProcessor;
    protected array: __array.IArrayUtility;
    dataSet: TDataType[];
    filteredDataSet: TDataType[];
    rawDataSet: TDataType[];
    sorts: ISort[];
    filters: filters.IFilter[];
    pager: IDataPager;
    private _count;
    countFilterGroups: boolean;
    loadingDataSet: boolean;
    private _isEmpty;
    countChanges: Subject<number>;
    redrawing: Subject<void>;
    changed: Subject<void>;
    added: Subject<void>;
    removed: Subject<void>;
    replaced: Subject<void>;
    count: number;
    constructor(dataSourceProcessor: IDataSourceProcessor, array: __array.IArrayUtility);
    initPager(): void;
    needsRefinedSearch: boolean;
    isEmpty: boolean;
    processData(): void;
    processDataNoClientFilters(): void;
    setProcessedData(processedData: IProcessResult<TDataType>): void;
    onSortChange(): void;
    onPagingChange(): void;
    refresh(): void;
    remove(data: TDataType): void;
    push(data: TDataType): void;
    replace(oldData: TDataType, newData: TDataType): void;
}
